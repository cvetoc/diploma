[{"id": "D_0001", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT count(*) FROM singer;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["How", "many", "singers", "do", "we", "have", "?"], "ru": ["\u0421\u043a\u043e\u043b\u044c\u043a\u043e", "\u0443", "\u043d\u0430\u0441", "\u043f\u0435\u0432\u0446\u043e\u0432", "?"]}, "query_toks": {"en": ["select", "count", "(", "*", ")", "from", "singer", ";"], "ru": ["select", "count", "(", "*", ")", "from", "singer", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "*", ")", "from", "singer", ";"], "ru": ["select", "count", "(", "*", ")", "from", "singer", ";"]}, "masked_query": "SELECT count(*) FROM singer;", "question_pauq": {"ru": "\u0421\u043a\u043e\u043b\u044c\u043a\u043e \u0443 \u043d\u0430\u0441 \u043f\u0435\u0432\u0446\u043e\u0432?"}, "question": "How many singers do we have?", "kb_id": "concert_singer"}, {"id": "D_0002", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT count(*) FROM singer;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "total", "number", "of", "singers", "?"], "ru": ["\u0421\u043a\u043e\u043b\u044c\u043a\u043e", "\u0432\u0441\u0435\u0433\u043e", "\u043f\u0435\u0432\u0446\u043e\u0432", "?"]}, "query_toks": {"en": ["select", "count", "(", "*", ")", "from", "singer", ";"], "ru": ["select", "count", "(", "*", ")", "from", "singer", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "*", ")", "from", "singer", ";"], "ru": ["select", "count", "(", "*", ")", "from", "singer", ";"]}, "masked_query": "SELECT count(*) FROM singer;", "question_pauq": {"ru": "\u0421\u043a\u043e\u043b\u044c\u043a\u043e \u0432\u0441\u0435\u0433\u043e \u043f\u0435\u0432\u0446\u043e\u0432?"}, "question": "What is the total number of singers?", "kb_id": "concert_singer"}, {"id": "D_0003", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT name ,  country ,  age FROM singer ORDER BY age DESC;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 9, false], null]], [0, [0, [0, 10, false], null]], [0, [0, [0, 13, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 13, false], null]]], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 9, false], null]], [0, [0, [0, 10, false], null]], [0, [0, [0, 13, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 13, false], null]]], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Show", "name", ",", "country", ",", "age", "for", "all", "singers", "ordered", "by", "age", "from", "the", "oldest", "to", "the", "youngest", "."], "ru": ["\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c", "\u0438\u043c\u044f", ",", "\u0441\u0442\u0440\u0430\u043d\u0443", ",", "\u0432\u043e\u0437\u0440\u0430\u0441\u0442", "\u0434\u043b\u044f", "\u0432\u0441\u0435\u0445", "\u043f\u0435\u0432\u0446\u043e\u0432", ",", "\u043e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445", "\u043f\u043e", "\u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0443", "\u043e\u0442", "\u0441\u0430\u043c\u043e\u0433\u043e", "\u0441\u0442\u0430\u0440\u0448\u0435\u0433\u043e", "\u0434\u043e", "\u0441\u0430\u043c\u043e\u0433\u043e", "\u043c\u043b\u0430\u0434\u0448\u0435\u0433\u043e", "."]}, "query_toks": {"en": ["select", "name", ",", "country", ",", "age", "from", "singer", "order", "by", "age", "desc", ";"], "ru": ["select", "name", ",", "country", ",", "age", "from", "singer", "order", "by", "age", "desc", ";"]}, "query_toks_no_values": {"en": ["select", "name", ",", "country", ",", "age", "from", "singer", "order", "by", "age", "desc", ";"], "ru": ["select", "name", ",", "country", ",", "age", "from", "singer", "order", "by", "age", "desc", ";"]}, "masked_query": "SELECT name ,  country ,  age FROM singer ORDER BY age DESC;", "question_pauq": {"ru": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0438\u043c\u044f, \u0441\u0442\u0440\u0430\u043d\u0443, \u0432\u043e\u0437\u0440\u0430\u0441\u0442 \u0434\u043b\u044f \u0432\u0441\u0435\u0445 \u043f\u0435\u0432\u0446\u043e\u0432, \u043e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u043f\u043e \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0443 \u043e\u0442 \u0441\u0430\u043c\u043e\u0433\u043e \u0441\u0442\u0430\u0440\u0448\u0435\u0433\u043e \u0434\u043e \u0441\u0430\u043c\u043e\u0433\u043e \u043c\u043b\u0430\u0434\u0448\u0435\u0433\u043e."}, "question": "Show name, country, age for all singers ordered by age from the oldest to the youngest.", "kb_id": "concert_singer"}, {"id": "D_0004", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT name ,  country ,  age FROM singer ORDER BY age DESC;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 9, false], null]], [0, [0, [0, 10, false], null]], [0, [0, [0, 13, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 13, false], null]]], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 9, false], null]], [0, [0, [0, 10, false], null]], [0, [0, [0, 13, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 13, false], null]]], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "the", "names", ",", "countries", ",", "and", "ages", "for", "every", "singer", "in", "descending", "order", "of", "age", "?"], "ru": ["\u041a\u0430\u043a\u0438\u0435", "\u0438\u043c\u0435\u043d\u0430", ",", "\u0441\u0442\u0440\u0430\u043d\u044b", "\u0438", "\u0432\u043e\u0437\u0440\u0430\u0441\u0442", "\u0443", "\u043a\u0430\u0436\u0434\u043e\u0433\u043e", "\u043f\u0435\u0432\u0446\u0430", "\u0432", "\u043f\u043e\u0440\u044f\u0434\u043a\u0435", "\u0443\u0431\u044b\u0432\u0430\u043d\u0438\u044f", "\u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430", "?"]}, "query_toks": {"en": ["select", "name", ",", "country", ",", "age", "from", "singer", "order", "by", "age", "desc", ";"], "ru": ["select", "name", ",", "country", ",", "age", "from", "singer", "order", "by", "age", "desc", ";"]}, "query_toks_no_values": {"en": ["select", "name", ",", "country", ",", "age", "from", "singer", "order", "by", "age", "desc", ";"], "ru": ["select", "name", ",", "country", ",", "age", "from", "singer", "order", "by", "age", "desc", ";"]}, "masked_query": "SELECT name ,  country ,  age FROM singer ORDER BY age DESC;", "question_pauq": {"ru": "\u041a\u0430\u043a\u0438\u0435 \u0438\u043c\u0435\u043d\u0430, \u0441\u0442\u0440\u0430\u043d\u044b \u0438 \u0432\u043e\u0437\u0440\u0430\u0441\u0442 \u0443 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043f\u0435\u0432\u0446\u0430 \u0432 \u043f\u043e\u0440\u044f\u0434\u043a\u0435 \u0443\u0431\u044b\u0432\u0430\u043d\u0438\u044f \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430?"}, "question": "What are the names, countries, and ages for every singer in descending order of age?", "kb_id": "concert_singer"}, {"id": "D_0005", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  '\u0420\u043e\u0441\u0441\u0438\u044f';"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[5, [0, [0, 13, false], null]], [2, [0, [0, 13, false], null]], [1, [0, [0, 13, false], null]]]], "where": [[false, 2, [0, [0, 10, false], null], "\"France\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[5, [0, [0, 13, false], null]], [2, [0, [0, 13, false], null]], [1, [0, [0, 13, false], null]]]], "where": [[false, 2, [0, [0, 10, false], null], "\"\u0420\u043e\u0441\u0441\u0438\u044f\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "average", ",", "minimum", ",", "and", "maximum", "age", "of", "all", "singers", "from", "France", "?"], "ru": ["\u041a\u0430\u043a\u043e\u0432", "\u0441\u0440\u0435\u0434\u043d\u0438\u0439", ",", "\u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439", "\u0438", "\u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439", "\u0432\u043e\u0437\u0440\u0430\u0441\u0442", "\u0432\u0441\u0435\u0445", "\u043f\u0435\u0432\u0446\u043e\u0432", "\u0438\u0437", "\u0420\u043e\u0441\u0441\u0438\u0438", "?"]}, "query_toks": {"en": ["select", "avg", "(", "age", ")", ",", "min", "(", "age", ")", ",", "max", "(", "age", ")", "from", "singer", "where", "country", "=", "\"France\"", ";"], "ru": ["select", "avg", "(", "age", ")", ",", "min", "(", "age", ")", ",", "max", "(", "age", ")", "from", "singer", "where", "country", "=", "\"\u0420\u043e\u0441\u0441\u0438\u044f\"", ";"]}, "query_toks_no_values": {"en": ["select", "avg", "(", "age", ")", ",", "min", "(", "age", ")", ",", "max", "(", "age", ")", "from", "singer", "where", "country", "=", "value", ";"], "ru": ["select", "avg", "(", "age", ")", ",", "min", "(", "age", ")", ",", "max", "(", "age", ")", "from", "singer", "where", "country", "=", "value", ";"]}, "masked_query": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France';", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0432 \u0441\u0440\u0435\u0434\u043d\u0438\u0439, \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u0438 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u0432\u043e\u0437\u0440\u0430\u0441\u0442 \u0432\u0441\u0435\u0445 \u043f\u0435\u0432\u0446\u043e\u0432 \u0438\u0437 \u0420\u043e\u0441\u0441\u0438\u0438?"}, "question": "What is the average, minimum, and maximum age of all singers from France?", "kb_id": "concert_singer"}, {"id": "D_0006", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  '\u0420\u043e\u0441\u0441\u0438\u044f';"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[5, [0, [0, 13, false], null]], [2, [0, [0, 13, false], null]], [1, [0, [0, 13, false], null]]]], "where": [[false, 2, [0, [0, 10, false], null], "\"France\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[5, [0, [0, 13, false], null]], [2, [0, [0, 13, false], null]], [1, [0, [0, 13, false], null]]]], "where": [[false, 2, [0, [0, 10, false], null], "\"\u0420\u043e\u0441\u0441\u0438\u044f\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "average", ",", "minimum", ",", "and", "maximum", "age", "for", "all", "French", "singers", "?"], "ru": ["\u041a\u0430\u043a\u043e\u0439", "\u0441\u0440\u0435\u0434\u043d\u0438\u0439", ",", "\u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439", "\u0438", "\u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439", "\u0432\u043e\u0437\u0440\u0430\u0441\u0442", "\u0434\u043b\u044f", "\u0432\u0441\u0435\u0445", "\u0440\u043e\u0441\u0441\u0438\u0439\u0441\u043a\u0438\u0445", "\u043f\u0435\u0432\u0446\u043e\u0432", "?"]}, "query_toks": {"en": ["select", "avg", "(", "age", ")", ",", "min", "(", "age", ")", ",", "max", "(", "age", ")", "from", "singer", "where", "country", "=", "\"France\"", ";"], "ru": ["select", "avg", "(", "age", ")", ",", "min", "(", "age", ")", ",", "max", "(", "age", ")", "from", "singer", "where", "country", "=", "\"\u0420\u043e\u0441\u0441\u0438\u044f\"", ";"]}, "query_toks_no_values": {"en": ["select", "avg", "(", "age", ")", ",", "min", "(", "age", ")", ",", "max", "(", "age", ")", "from", "singer", "where", "country", "=", "value", ";"], "ru": ["select", "avg", "(", "age", ")", ",", "min", "(", "age", ")", ",", "max", "(", "age", ")", "from", "singer", "where", "country", "=", "value", ";"]}, "masked_query": "SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France';", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0439 \u0441\u0440\u0435\u0434\u043d\u0438\u0439, \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u0438 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u0432\u043e\u0437\u0440\u0430\u0441\u0442 \u0434\u043b\u044f \u0432\u0441\u0435\u0445 \u0440\u043e\u0441\u0441\u0438\u0439\u0441\u043a\u0438\u0445 \u043f\u0435\u0432\u0446\u043e\u0432?"}, "question": "What is the average, minimum, and maximum age for all French singers?", "kb_id": "concert_singer"}, {"id": "D_0007", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 11, false], null]], [0, [0, [0, 12, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["asc", [[0, [0, 13, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 11, false], null]], [0, [0, [0, 12, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["asc", [[0, [0, 13, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Show", "the", "name", "and", "the", "release", "year", "of", "the", "song", "by", "the", "youngest", "singer", "."], "ru": ["\u0423\u043a\u0430\u0436\u0438\u0442\u0435", "\u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435", "\u0438", "\u0433\u043e\u0434", "\u0432\u044b\u043f\u0443\u0441\u043a\u0430", "\u043f\u0435\u0441\u043d\u0438", "\u0441\u0430\u043c\u043e\u0433\u043e", "\u043c\u043e\u043b\u043e\u0434\u043e\u0433\u043e", "\u043f\u0435\u0432\u0446\u0430", "."]}, "query_toks": {"en": ["select", "song_name", ",", "song_release_year", "from", "singer", "order", "by", "age", "limit", "1", ";"], "ru": ["select", "song_name", ",", "song_release_year", "from", "singer", "order", "by", "age", "limit", "1", ";"]}, "query_toks_no_values": {"en": ["select", "song_name", ",", "song_release_year", "from", "singer", "order", "by", "age", "limit", "1", ";"], "ru": ["select", "song_name", ",", "song_release_year", "from", "singer", "order", "by", "age", "limit", "1", ";"]}, "masked_query": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1;", "question_pauq": {"ru": "\u0423\u043a\u0430\u0436\u0438\u0442\u0435 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u0438 \u0433\u043e\u0434 \u0432\u044b\u043f\u0443\u0441\u043a\u0430 \u043f\u0435\u0441\u043d\u0438 \u0441\u0430\u043c\u043e\u0433\u043e \u043c\u043e\u043b\u043e\u0434\u043e\u0433\u043e \u043f\u0435\u0432\u0446\u0430."}, "question": "Show the name and the release year of the song by the youngest singer.", "kb_id": "concert_singer"}, {"id": "D_0008", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 11, false], null]], [0, [0, [0, 12, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["asc", [[0, [0, 13, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 11, false], null]], [0, [0, [0, 12, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["asc", [[0, [0, 13, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "the", "names", "and", "release", "years", "for", "all", "the", "songs", "of", "the", "youngest", "singer", "?"], "ru": ["\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u044f", "\u0438", "\u0433\u043e\u0434\u044b", "\u0440\u0435\u043b\u0438\u0437\u043e\u0432", "\u0432\u0441\u0435\u0445", "\u043f\u0435\u0441\u0435\u043d", "\u0441\u0430\u043c\u043e\u0433\u043e", "\u043c\u043e\u043b\u043e\u0434\u043e\u0433\u043e", "\u043f\u0435\u0432\u0446\u0430"]}, "query_toks": {"en": ["select", "song_name", ",", "song_release_year", "from", "singer", "order", "by", "age", "limit", "1", ";"], "ru": ["select", "song_name", ",", "song_release_year", "from", "singer", "order", "by", "age", "limit", "1", ";"]}, "query_toks_no_values": {"en": ["select", "song_name", ",", "song_release_year", "from", "singer", "order", "by", "age", "limit", "1", ";"], "ru": ["select", "song_name", ",", "song_release_year", "from", "singer", "order", "by", "age", "limit", "1", ";"]}, "masked_query": "SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1;", "question_pauq": {"ru": "\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u044f \u0438 \u0433\u043e\u0434\u044b \u0440\u0435\u043b\u0438\u0437\u043e\u0432 \u0432\u0441\u0435\u0445 \u043f\u0435\u0441\u0435\u043d \u0441\u0430\u043c\u043e\u0433\u043e \u043c\u043e\u043b\u043e\u0434\u043e\u0433\u043e \u043f\u0435\u0432\u0446\u0430"}, "question": "What are the names and release years for all the songs of the youngest singer?", "kb_id": "concert_singer"}, {"id": "D_0009", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT DISTINCT country FROM singer WHERE age  >  20;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [true, [[0, [0, [0, 10, false], null]]]], "where": [[false, 3, [0, [0, 13, false], null], 20.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [true, [[0, [0, [0, 10, false], null]]]], "where": [[false, 3, [0, [0, 13, false], null], 20.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "all", "distinct", "countries", "where", "singers", "above", "age", "20", "are", "from", "?"], "ru": ["\u0418\u0437", "\u043a\u0430\u043a\u0438\u0445", "\u0441\u0442\u0440\u0430\u043d", "\u043f\u0435\u0432\u0446\u044b", "\u0441\u0442\u0430\u0440\u0448\u0435", "20", "\u043b\u0435\u0442", "?"]}, "query_toks": {"en": ["select", "distinct", "country", "from", "singer", "where", "age", ">", "20", ";"], "ru": ["select", "distinct", "country", "from", "singer", "where", "age", ">", "20", ";"]}, "query_toks_no_values": {"en": ["select", "distinct", "country", "from", "singer", "where", "age", ">", "20", ";"], "ru": ["select", "distinct", "country", "from", "singer", "where", "age", ">", "20", ";"]}, "masked_query": "SELECT DISTINCT country FROM singer WHERE age  >  20;", "question_pauq": {"ru": "\u0418\u0437 \u043a\u0430\u043a\u0438\u0445 \u0441\u0442\u0440\u0430\u043d \u043f\u0435\u0432\u0446\u044b \u0441\u0442\u0430\u0440\u0448\u0435 20 \u043b\u0435\u0442?"}, "question": "What are all distinct countries where singers above age 20 are from?", "kb_id": "concert_singer"}, {"id": "D_0010", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT DISTINCT country FROM singer WHERE age  >  20;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [true, [[0, [0, [0, 10, false], null]]]], "where": [[false, 3, [0, [0, 13, false], null], 20.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [true, [[0, [0, [0, 10, false], null]]]], "where": [[false, 3, [0, [0, 13, false], null], 20.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "the", "different", "countries", "with", "singers", "above", "age", "20", "?"], "ru": ["\u0418\u0437", "\u043a\u0430\u043a\u0438\u0445", "\u0441\u0442\u0440\u0430\u043d", "\u0435\u0441\u0442\u044c", "\u043f\u0435\u0432\u0446\u044b", "\u0441\u0442\u0430\u0440\u0448\u0435", "20", "\u043b\u0435\u0442", "?"]}, "query_toks": {"en": ["select", "distinct", "country", "from", "singer", "where", "age", ">", "20", ";"], "ru": ["select", "distinct", "country", "from", "singer", "where", "age", ">", "20", ";"]}, "query_toks_no_values": {"en": ["select", "distinct", "country", "from", "singer", "where", "age", ">", "20", ";"], "ru": ["select", "distinct", "country", "from", "singer", "where", "age", ">", "20", ";"]}, "masked_query": "SELECT DISTINCT country FROM singer WHERE age  >  20;", "question_pauq": {"ru": "\u0418\u0437 \u043a\u0430\u043a\u0438\u0445 \u0441\u0442\u0440\u0430\u043d \u0435\u0441\u0442\u044c \u043f\u0435\u0432\u0446\u044b \u0441\u0442\u0430\u0440\u0448\u0435 20 \u043b\u0435\u0442?"}, "question": "What are  the different countries with singers above age 20?", "kb_id": "concert_singer"}, {"id": "D_0011", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT country ,  count(*) FROM singer GROUP BY country;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 10, false], null]], [3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [[0, 10, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 10, false], null]], [3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [[0, 10, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Show", "all", "countries", "and", "the", "number", "of", "singers", "in", "each", "country", "."], "ru": ["\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c", "\u0432\u0441\u0435", "\u0441\u0442\u0440\u0430\u043d\u044b", "\u0438", "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e", "\u043f\u0435\u0432\u0446\u043e\u0432", "\u0438\u0437", "\u043a\u0430\u0436\u0434\u043e\u0439", "\u0441\u0442\u0440\u0430\u043d\u044b", "."]}, "query_toks": {"en": ["select", "country", ",", "count", "(", "*", ")", "from", "singer", "group", "by", "country", ";"], "ru": ["select", "country", ",", "count", "(", "*", ")", "from", "singer", "group", "by", "country", ";"]}, "query_toks_no_values": {"en": ["select", "country", ",", "count", "(", "*", ")", "from", "singer", "group", "by", "country", ";"], "ru": ["select", "country", ",", "count", "(", "*", ")", "from", "singer", "group", "by", "country", ";"]}, "masked_query": "SELECT country ,  count(*) FROM singer GROUP BY country;", "question_pauq": {"ru": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0432\u0441\u0435 \u0441\u0442\u0440\u0430\u043d\u044b \u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0435\u0432\u0446\u043e\u0432 \u0438\u0437 \u043a\u0430\u0436\u0434\u043e\u0439 \u0441\u0442\u0440\u0430\u043d\u044b."}, "question": "Show all countries and the number of singers in each country.", "kb_id": "concert_singer"}, {"id": "D_0012", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT country ,  count(*) FROM singer GROUP BY country;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 10, false], null]], [3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [[0, 10, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 10, false], null]], [3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [[0, 10, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["How", "many", "singers", "are", "from", "each", "country", "?"], "ru": ["\u0421\u043a\u043e\u043b\u044c\u043a\u043e", "\u043f\u0435\u0432\u0446\u043e\u0432", "\u043e\u0442", "\u043a\u0430\u0436\u0434\u043e\u0439", "\u0441\u0442\u0440\u0430\u043d\u044b", "?"]}, "query_toks": {"en": ["select", "country", ",", "count", "(", "*", ")", "from", "singer", "group", "by", "country", ";"], "ru": ["select", "country", ",", "count", "(", "*", ")", "from", "singer", "group", "by", "country", ";"]}, "query_toks_no_values": {"en": ["select", "country", ",", "count", "(", "*", ")", "from", "singer", "group", "by", "country", ";"], "ru": ["select", "country", ",", "count", "(", "*", ")", "from", "singer", "group", "by", "country", ";"]}, "masked_query": "SELECT country ,  count(*) FROM singer GROUP BY country;", "question_pauq": {"ru": "\u0421\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u0435\u0432\u0446\u043e\u0432 \u043e\u0442 \u043a\u0430\u0436\u0434\u043e\u0439 \u0441\u0442\u0440\u0430\u043d\u044b?"}, "question": "How many singers are from each country?", "kb_id": "concert_singer"}, {"id": "D_0013", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer);"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 11, false], null]]]], "where": [[false, 3, [0, [0, 13, false], null], {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[5, [0, [0, 13, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 11, false], null]]]], "where": [[false, 3, [0, [0, 13, false], null], {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[5, [0, [0, 13, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["List", "all", "song", "names", "by", "singers", "above", "the", "average", "age", "."], "ru": ["\u041f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0438\u0442\u0435", "\u0432\u0441\u0435", "\u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f", "\u043f\u0435\u0441\u0435\u043d", "\u0438\u0441\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u0435\u0439", "\u0441\u0442\u0430\u0440\u0448\u0435", "\u0441\u0440\u0435\u0434\u043d\u0435\u0433\u043e", "\u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430", "."]}, "query_toks": {"en": ["select", "song_name", "from", "singer", "where", "age", ">", "(", "select", "avg", "(", "age", ")", "from", "singer", ")", ";"], "ru": ["select", "song_name", "from", "singer", "where", "age", ">", "(", "select", "avg", "(", "age", ")", "from", "singer", ")", ";"]}, "query_toks_no_values": {"en": ["select", "song_name", "from", "singer", "where", "age", ">", "(", "select", "avg", "(", "age", ")", "from", "singer", ")", ";"], "ru": ["select", "song_name", "from", "singer", "where", "age", ">", "(", "select", "avg", "(", "age", ")", "from", "singer", ")", ";"]}, "masked_query": "SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer);", "question_pauq": {"ru": "\u041f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0438\u0442\u0435 \u0432\u0441\u0435 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f \u043f\u0435\u0441\u0435\u043d \u0438\u0441\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u0435\u0439 \u0441\u0442\u0430\u0440\u0448\u0435 \u0441\u0440\u0435\u0434\u043d\u0435\u0433\u043e \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430."}, "question": "List all song names by singers above the average age.", "kb_id": "concert_singer"}, {"id": "D_0014", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer);"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 11, false], null]]]], "where": [[false, 3, [0, [0, 13, false], null], {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[5, [0, [0, 13, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 11, false], null]]]], "where": [[false, 3, [0, [0, 13, false], null], {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[5, [0, [0, 13, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "all", "the", "song", "names", "by", "singers", "who", "are", "older", "than", "average", "?"], "ru": ["\u041a\u0430\u043a", "\u043d\u0430\u0437\u044b\u0432\u0430\u044e\u0442\u0441\u044f", "\u0432\u0441\u0435", "\u043f\u0435\u0441\u043d\u0438", "\u043f\u0435\u0432\u0446\u043e\u0432", "\u0441\u0442\u0430\u0440\u0448\u0435", "\u0441\u0440\u0435\u0434\u043d\u0435\u0433\u043e", "?"]}, "query_toks": {"en": ["select", "song_name", "from", "singer", "where", "age", ">", "(", "select", "avg", "(", "age", ")", "from", "singer", ")", ";"], "ru": ["select", "song_name", "from", "singer", "where", "age", ">", "(", "select", "avg", "(", "age", ")", "from", "singer", ")", ";"]}, "query_toks_no_values": {"en": ["select", "song_name", "from", "singer", "where", "age", ">", "(", "select", "avg", "(", "age", ")", "from", "singer", ")", ";"], "ru": ["select", "song_name", "from", "singer", "where", "age", ">", "(", "select", "avg", "(", "age", ")", "from", "singer", ")", ";"]}, "masked_query": "SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer);", "question_pauq": {"ru": "\u041a\u0430\u043a \u043d\u0430\u0437\u044b\u0432\u0430\u044e\u0442\u0441\u044f \u0432\u0441\u0435 \u043f\u0435\u0441\u043d\u0438 \u043f\u0435\u0432\u0446\u043e\u0432 \u0441\u0442\u0430\u0440\u0448\u0435 \u0441\u0440\u0435\u0434\u043d\u0435\u0433\u043e?"}, "question": "What are all the song names by singers who are older than average?", "kb_id": "concert_singer"}, {"id": "D_0015", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 2, false], null]], [0, [0, [0, 3, false], null]]]], "where": [[false, 1, [0, [0, 4, false], null], 5000.0, 10000.0]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 2, false], null]], [0, [0, [0, 3, false], null]]]], "where": [[false, 1, [0, [0, 4, false], null], 5000.0, 10000.0]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Show", "location", "and", "name", "for", "all", "stadiums", "with", "a", "capacity", "between", "5000", "and", "10000", "."], "ru": ["\u0423\u043a\u0430\u0436\u0438\u0442\u0435", "\u0440\u0430\u0441\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u0435", "\u0438", "\u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435", "\u0434\u043b\u044f", "\u0432\u0441\u0435\u0445", "\u0441\u0442\u0430\u0434\u0438\u043e\u043d\u043e\u0432", "\u0432\u043c\u0435\u0441\u0442\u0438\u043c\u043e\u0441\u0442\u044c\u044e", "\u043e\u0442", "5000", "\u0434\u043e", "10000", "\u0447\u0435\u043b\u043e\u0432\u0435\u043a", "."]}, "query_toks": {"en": ["select", "location", ",", "name", "from", "stadium", "where", "capacity", "between", "5000", "and", "10000", ";"], "ru": ["select", "location", ",", "name", "from", "stadium", "where", "capacity", "between", "5000", "and", "10000", ";"]}, "query_toks_no_values": {"en": ["select", "location", ",", "name", "from", "stadium", "where", "capacity", "between", "5000", "and", "10000", ";"], "ru": ["select", "location", ",", "name", "from", "stadium", "where", "capacity", "between", "5000", "and", "10000", ";"]}, "masked_query": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000;", "question_pauq": {"ru": "\u0423\u043a\u0430\u0436\u0438\u0442\u0435 \u0440\u0430\u0441\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0438 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u0434\u043b\u044f \u0432\u0441\u0435\u0445 \u0441\u0442\u0430\u0434\u0438\u043e\u043d\u043e\u0432 \u0432\u043c\u0435\u0441\u0442\u0438\u043c\u043e\u0441\u0442\u044c\u044e \u043e\u0442 5000 \u0434\u043e 10000 \u0447\u0435\u043b\u043e\u0432\u0435\u043a."}, "question": "Show location and name for all stadiums with a capacity between 5000 and 10000.", "kb_id": "concert_singer"}, {"id": "D_0016", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 2, false], null]], [0, [0, [0, 3, false], null]]]], "where": [[false, 1, [0, [0, 4, false], null], 5000.0, 10000.0]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 2, false], null]], [0, [0, [0, 3, false], null]]]], "where": [[false, 1, [0, [0, 4, false], null], 5000.0, 10000.0]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "the", "locations", "and", "names", "of", "all", "stations", "with", "capacity", "between", "5000", "and", "10000", "?"], "ru": ["\u041a\u0430\u043a\u043e\u0432\u043e", "\u0440\u0430\u0441\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u0435", "\u0438", "\u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f", "\u0432\u0441\u0435\u0445", "\u0441\u0442\u0430\u043d\u0446\u0438\u0439", "\u0432\u043c\u0435\u0441\u0442\u0438\u043c\u043e\u0441\u0442\u044c\u044e", "\u043e\u0442", "5000", "\u0434\u043e", "10000", "?"]}, "query_toks": {"en": ["select", "location", ",", "name", "from", "stadium", "where", "capacity", "between", "5000", "and", "10000", ";"], "ru": ["select", "location", ",", "name", "from", "stadium", "where", "capacity", "between", "5000", "and", "10000", ";"]}, "query_toks_no_values": {"en": ["select", "location", ",", "name", "from", "stadium", "where", "capacity", "between", "5000", "and", "10000", ";"], "ru": ["select", "location", ",", "name", "from", "stadium", "where", "capacity", "between", "5000", "and", "10000", ";"]}, "masked_query": "SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000;", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0432\u043e \u0440\u0430\u0441\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0438 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f \u0432\u0441\u0435\u0445 \u0441\u0442\u0430\u043d\u0446\u0438\u0439 \u0432\u043c\u0435\u0441\u0442\u0438\u043c\u043e\u0441\u0442\u044c\u044e \u043e\u0442 5000 \u0434\u043e 10000?"}, "question": "What are the locations and names of all stations with capacity between 5000 and 10000?", "kb_id": "concert_singer"}, {"id": "D_0017", "source": "spider-dev", "type": "dev", "query": {"ru": "select max(capacity), average from stadium;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[1, [0, [0, 4, false], null]], [0, [0, [0, 7, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[1, [0, [0, 4, false], null]], [0, [0, [0, 7, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "maximum", "capacity", "and", "the", "average", "of", "all", "stadiums", "?"], "ru": ["\u041a\u0430\u043a\u043e\u0432\u0430", "\u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u0430\u044f", "\u0432\u043c\u0435\u0441\u0442\u0438\u043c\u043e\u0441\u0442\u044c", "\u0438", "\u0441\u0440\u0435\u0434\u043d\u044f\u044f", "\u0432\u043c\u0435\u0441\u0442\u0438\u043c\u043e\u0441\u0442\u044c", "\u0432\u0441\u0435\u0445", "\u0441\u0442\u0430\u0434\u0438\u043e\u043d\u043e\u0432", "?"]}, "query_toks": {"en": ["select", "max", "(", "capacity", ")", ",", "average", "from", "stadium", ";"], "ru": ["select", "max", "(", "capacity", ")", ",", "average", "from", "stadium", ";"]}, "query_toks_no_values": {"en": ["select", "max", "(", "capacity", ")", ",", "average", "from", "stadium", ";"], "ru": ["select", "max", "(", "capacity", ")", ",", "average", "from", "stadium", ";"]}, "masked_query": "select max(capacity), average from stadium;", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0432\u0430 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u0430\u044f \u0432\u043c\u0435\u0441\u0442\u0438\u043c\u043e\u0441\u0442\u044c \u0438 \u0441\u0440\u0435\u0434\u043d\u044f\u044f \u0432\u043c\u0435\u0441\u0442\u0438\u043c\u043e\u0441\u0442\u044c \u0432\u0441\u0435\u0445 \u0441\u0442\u0430\u0434\u0438\u043e\u043d\u043e\u0432?"}, "question": "What is the maximum capacity and the average of all stadiums ?", "kb_id": "concert_singer"}, {"id": "D_0018", "source": "spider-dev", "type": "dev", "query": {"ru": "select avg(capacity) ,  max(capacity) from stadium;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[5, [0, [0, 4, false], null]], [1, [0, [0, 4, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[5, [0, [0, 4, false], null]], [1, [0, [0, 4, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "average", "and", "maximum", "capacities", "for", "all", "stadiums", "?"], "ru": ["\u041a\u0430\u043a\u043e\u0432\u0430", "\u0441\u0440\u0435\u0434\u043d\u044f\u044f", "\u0438", "\u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u0430\u044f", "\u0432\u043c\u0435\u0441\u0442\u0438\u043c\u043e\u0441\u0442\u044c", "\u0432\u0441\u0435\u0445", "\u0441\u0442\u0430\u0434\u0438\u043e\u043d\u043e\u0432", "?"]}, "query_toks": {"en": ["select", "avg", "(", "capacity", ")", ",", "max", "(", "capacity", ")", "from", "stadium", ";"], "ru": ["select", "avg", "(", "capacity", ")", ",", "max", "(", "capacity", ")", "from", "stadium", ";"]}, "query_toks_no_values": {"en": ["select", "avg", "(", "capacity", ")", ",", "max", "(", "capacity", ")", "from", "stadium", ";"], "ru": ["select", "avg", "(", "capacity", ")", ",", "max", "(", "capacity", ")", "from", "stadium", ";"]}, "masked_query": "select avg(capacity) ,  max(capacity) from stadium;", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0432\u0430 \u0441\u0440\u0435\u0434\u043d\u044f\u044f \u0438 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u0430\u044f \u0432\u043c\u0435\u0441\u0442\u0438\u043c\u043e\u0441\u0442\u044c \u0432\u0441\u0435\u0445 \u0441\u0442\u0430\u0434\u0438\u043e\u043d\u043e\u0432?"}, "question": "What is the average and maximum capacities for all stadiums ?", "kb_id": "concert_singer"}, {"id": "D_0019", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 3, false], null]], [0, [0, [0, 4, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 7, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 3, false], null]], [0, [0, [0, 4, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 7, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "name", "and", "capacity", "for", "the", "stadium", "with", "highest", "average", "attendance", "?"], "ru": ["\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435", "\u0438", "\u0432\u043c\u0435\u0441\u0442\u0438\u043c\u043e\u0441\u0442\u044c", "\u0441\u0442\u0430\u0434\u0438\u043e\u043d\u0430", "\u0441", "\u0441\u0430\u043c\u043e\u0439", "\u0432\u044b\u0441\u043e\u043a\u043e\u0439", "\u0441\u0440\u0435\u0434\u043d\u0435\u0439", "\u043f\u043e\u0441\u0435\u0449\u0430\u0435\u043c\u043e\u0441\u0442\u044c\u044e", "?"]}, "query_toks": {"en": ["select", "name", ",", "capacity", "from", "stadium", "order", "by", "average", "desc", "limit", "1", ";"], "ru": ["select", "name", ",", "capacity", "from", "stadium", "order", "by", "average", "desc", "limit", "1", ";"]}, "query_toks_no_values": {"en": ["select", "name", ",", "capacity", "from", "stadium", "order", "by", "average", "desc", "limit", "1", ";"], "ru": ["select", "name", ",", "capacity", "from", "stadium", "order", "by", "average", "desc", "limit", "1", ";"]}, "masked_query": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1;", "question_pauq": {"ru": "\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u0438 \u0432\u043c\u0435\u0441\u0442\u0438\u043c\u043e\u0441\u0442\u044c \u0441\u0442\u0430\u0434\u0438\u043e\u043d\u0430 \u0441 \u0441\u0430\u043c\u043e\u0439 \u0432\u044b\u0441\u043e\u043a\u043e\u0439 \u0441\u0440\u0435\u0434\u043d\u0435\u0439 \u043f\u043e\u0441\u0435\u0449\u0430\u0435\u043c\u043e\u0441\u0442\u044c\u044e?"}, "question": "What is the name and capacity for the stadium with highest average attendance?", "kb_id": "concert_singer"}, {"id": "D_0020", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 3, false], null]], [0, [0, [0, 4, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 7, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 3, false], null]], [0, [0, [0, 4, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 7, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "name", "and", "capacity", "for", "the", "stadium", "with", "the", "highest", "average", "attendance", "?"], "ru": ["\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435", "\u0438", "\u0432\u043c\u0435\u0441\u0442\u0438\u043c\u043e\u0441\u0442\u044c", "\u0441\u0442\u0430\u0434\u0438\u043e\u043d\u0430", "\u0441", "\u0441\u0430\u043c\u043e\u0439", "\u0432\u044b\u0441\u043e\u043a\u043e\u0439", "\u0441\u0440\u0435\u0434\u043d\u0435\u0439", "\u043f\u043e\u0441\u0435\u0449\u0430\u0435\u043c\u043e\u0441\u0442\u044c\u044e", "?"]}, "query_toks": {"en": ["select", "name", ",", "capacity", "from", "stadium", "order", "by", "average", "desc", "limit", "1", ";"], "ru": ["select", "name", ",", "capacity", "from", "stadium", "order", "by", "average", "desc", "limit", "1", ";"]}, "query_toks_no_values": {"en": ["select", "name", ",", "capacity", "from", "stadium", "order", "by", "average", "desc", "limit", "1", ";"], "ru": ["select", "name", ",", "capacity", "from", "stadium", "order", "by", "average", "desc", "limit", "1", ";"]}, "masked_query": "SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1;", "question_pauq": {"ru": "\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u0438 \u0432\u043c\u0435\u0441\u0442\u0438\u043c\u043e\u0441\u0442\u044c \u0441\u0442\u0430\u0434\u0438\u043e\u043d\u0430 \u0441 \u0441\u0430\u043c\u043e\u0439 \u0432\u044b\u0441\u043e\u043a\u043e\u0439 \u0441\u0440\u0435\u0434\u043d\u0435\u0439 \u043f\u043e\u0441\u0435\u0449\u0430\u0435\u043c\u043e\u0441\u0442\u044c\u044e?"}, "question": "What is the name and capacity for the stadium with the highest average attendance?", "kb_id": "concert_singer"}, {"id": "D_0021", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 19, false], null], 2014.0, null], "or", [false, 2, [0, [0, 19, false], null], 2015.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 19, false], null], 2014.0, null], "or", [false, 2, [0, [0, 19, false], null], 2015.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["How", "many", "concerts", "are", "there", "in", "year", "2014", "or", "2015", "?"], "ru": ["\u0421\u043a\u043e\u043b\u044c\u043a\u043e", "\u043a\u043e\u043d\u0446\u0435\u0440\u0442\u043e\u0432", "\u0431\u044b\u043b\u043e", "\u0432", "2014", "\u0438\u043b\u0438", "2015", "\u0433\u043e\u0434\u0430\u0445", "?"]}, "query_toks": {"en": ["select", "count", "(", "*", ")", "from", "concert", "where", "year", "=", "2014", "or", "year", "=", "2015", ";"], "ru": ["select", "count", "(", "*", ")", "from", "concert", "where", "year", "=", "2014", "or", "year", "=", "2015", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "*", ")", "from", "concert", "where", "year", "=", "2014", "or", "year", "=", "2015", ";"], "ru": ["select", "count", "(", "*", ")", "from", "concert", "where", "year", "=", "2014", "or", "year", "=", "2015", ";"]}, "masked_query": "SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015;", "question_pauq": {"ru": "\u0421\u043a\u043e\u043b\u044c\u043a\u043e \u043a\u043e\u043d\u0446\u0435\u0440\u0442\u043e\u0432 \u0431\u044b\u043b\u043e \u0432 2014 \u0438\u043b\u0438 2015 \u0433\u043e\u0434\u0430\u0445?"}, "question": "How many concerts are there in year 2014 or 2015?", "kb_id": "concert_singer"}, {"id": "D_0022", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 19, false], null], 2014.0, null], "or", [false, 2, [0, [0, 19, false], null], 2015.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 19, false], null], 2014.0, null], "or", [false, 2, [0, [0, 19, false], null], 2015.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["How", "many", "concerts", "occurred", "in", "2014", "or", "2015", "?"], "ru": ["\u0421\u043a\u043e\u043b\u044c\u043a\u043e", "\u043a\u043e\u043d\u0446\u0435\u0440\u0442\u043e\u0432", "\u0441\u043e\u0441\u0442\u043e\u044f\u043b\u043e\u0441\u044c", "\u0432", "2014", "\u0438\u043b\u0438", "2015", "?"]}, "query_toks": {"en": ["select", "count", "(", "*", ")", "from", "concert", "where", "year", "=", "2014", "or", "year", "=", "2015", ";"], "ru": ["select", "count", "(", "*", ")", "from", "concert", "where", "year", "=", "2014", "or", "year", "=", "2015", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "*", ")", "from", "concert", "where", "year", "=", "2014", "or", "year", "=", "2015", ";"], "ru": ["select", "count", "(", "*", ")", "from", "concert", "where", "year", "=", "2014", "or", "year", "=", "2015", ";"]}, "masked_query": "SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015;", "question_pauq": {"ru": "\u0421\u043a\u043e\u043b\u044c\u043a\u043e \u043a\u043e\u043d\u0446\u0435\u0440\u0442\u043e\u0432 \u0441\u043e\u0441\u0442\u043e\u044f\u043b\u043e\u0441\u044c \u0432 2014 \u0438\u043b\u0438 2015?"}, "question": "How many concerts occurred in 2014 or 2015?", "kb_id": "concert_singer"}, {"id": "D_0023", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 18, false], null], [0, 1, false], null]]}, "select": [false, [[0, [0, [0, 3, false], null]], [3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [[0, 18, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 18, false], null], [0, 1, false], null]]}, "select": [false, [[0, [0, [0, 3, false], null]], [3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [[0, 18, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Show", "the", "stadium", "name", "and", "the", "number", "of", "concerts", "in", "each", "stadium", "."], "ru": ["\u041f\u043e\u043a\u0430\u0436\u0438\u0442\u0435", "\u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435", "\u0441\u0442\u0430\u0434\u0438\u043e\u043d\u0430", "\u0438", "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e", "\u043a\u043e\u043d\u0446\u0435\u0440\u0442\u043e\u0432", "\u043d\u0430", "\u043a\u0430\u0436\u0434\u043e\u043c", "\u0441\u0442\u0430\u0434\u0438\u043e\u043d\u0435", "."]}, "query_toks": {"en": ["select", "t2.name", ",", "count", "(", "*", ")", "from", "concert", "as", "t1", "join", "stadium", "as", "t2", "on", "t1.stadium_id", "=", "t2.stadium_id", "group", "by", "t1.stadium_id", ";"], "ru": ["select", "t2.name", ",", "count", "(", "*", ")", "from", "concert", "as", "t1", "join", "stadium", "as", "t2", "on", "t1.stadium_id", "=", "t2.stadium_id", "group", "by", "t1.stadium_id", ";"]}, "query_toks_no_values": {"en": ["select", "t2.name", ",", "count", "(", "*", ")", "from", "concert", "as", "t1", "join", "stadium", "as", "t2", "on", "t1.stadium_id", "=", "t2.stadium_id", "group", "by", "t1.stadium_id", ";"], "ru": ["select", "t2.name", ",", "count", "(", "*", ")", "from", "concert", "as", "t1", "join", "stadium", "as", "t2", "on", "t1.stadium_id", "=", "t2.stadium_id", "group", "by", "t1.stadium_id", ";"]}, "masked_query": "SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id;", "question_pauq": {"ru": "\u041f\u043e\u043a\u0430\u0436\u0438\u0442\u0435 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u0441\u0442\u0430\u0434\u0438\u043e\u043d\u0430 \u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u043e\u043d\u0446\u0435\u0440\u0442\u043e\u0432 \u043d\u0430 \u043a\u0430\u0436\u0434\u043e\u043c \u0441\u0442\u0430\u0434\u0438\u043e\u043d\u0435."}, "question": "Show the stadium name and the number of concerts in each stadium.", "kb_id": "concert_singer"}, {"id": "D_0024", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 18, false], null], [0, 1, false], null]]}, "select": [false, [[0, [0, [0, 3, false], null]], [3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [[0, 18, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 18, false], null], [0, 1, false], null]]}, "select": [false, [[0, [0, [0, 3, false], null]], [3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [[0, 18, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["For", "each", "stadium", ",", "how", "many", "concerts", "play", "there", "?"], "ru": ["\u0421\u043a\u043e\u043b\u044c\u043a\u043e", "\u0431\u044b\u043b\u043e", "\u0441\u044b\u0433\u0440\u0430\u043d\u043e", "\u043a\u043e\u043d\u0446\u0435\u0440\u0442\u043e\u0432", "\u043d\u0430", "\u043a\u0430\u0436\u0434\u043e\u043c", "\u0441\u0442\u0430\u0434\u0438\u043e\u043d\u0435", "?"]}, "query_toks": {"en": ["select", "t2.name", ",", "count", "(", "*", ")", "from", "concert", "as", "t1", "join", "stadium", "as", "t2", "on", "t1.stadium_id", "=", "t2.stadium_id", "group", "by", "t1.stadium_id", ";"], "ru": ["select", "t2.name", ",", "count", "(", "*", ")", "from", "concert", "as", "t1", "join", "stadium", "as", "t2", "on", "t1.stadium_id", "=", "t2.stadium_id", "group", "by", "t1.stadium_id", ";"]}, "query_toks_no_values": {"en": ["select", "t2.name", ",", "count", "(", "*", ")", "from", "concert", "as", "t1", "join", "stadium", "as", "t2", "on", "t1.stadium_id", "=", "t2.stadium_id", "group", "by", "t1.stadium_id", ";"], "ru": ["select", "t2.name", ",", "count", "(", "*", ")", "from", "concert", "as", "t1", "join", "stadium", "as", "t2", "on", "t1.stadium_id", "=", "t2.stadium_id", "group", "by", "t1.stadium_id", ";"]}, "masked_query": "SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id;", "question_pauq": {"ru": "\u0421\u043a\u043e\u043b\u044c\u043a\u043e \u0431\u044b\u043b\u043e \u0441\u044b\u0433\u0440\u0430\u043d\u043e \u043a\u043e\u043d\u0446\u0435\u0440\u0442\u043e\u0432 \u043d\u0430 \u043a\u0430\u0436\u0434\u043e\u043c \u0441\u0442\u0430\u0434\u0438\u043e\u043d\u0435?"}, "question": "For each stadium, how many concerts play there?", "kb_id": "concert_singer"}, {"id": "D_0025", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T2.name ,  T2.capacity FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  >=  2014 GROUP BY T2.stadium_id ORDER BY count(*) DESC LIMIT 1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 18, false], null], [0, 1, false], null]]}, "select": [false, [[0, [0, [0, 3, false], null]], [0, [0, [0, 4, false], null]]]], "where": [[false, 5, [0, [0, 19, false], null], 2014.0, null]], "groupBy": [[0, 1, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 18, false], null], [0, 1, false], null]]}, "select": [false, [[0, [0, [0, 3, false], null]], [0, [0, [0, 4, false], null]]]], "where": [[false, 5, [0, [0, 19, false], null], 2014.0, null]], "groupBy": [[0, 1, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Show", "the", "stadium", "name", "and", "capacity", "with", "most", "number", "of", "concerts", "in", "year", "2014", "or", "after", "."], "ru": ["\u0423\u043a\u0430\u0436\u0438\u0442\u0435", "\u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435", "\u0438", "\u0432\u043c\u0435\u0441\u0442\u0438\u043c\u043e\u0441\u0442\u044c", "\u0441\u0442\u0430\u0434\u0438\u043e\u043d\u0430", ",", "\u043d\u0430", "\u043a\u043e\u0442\u043e\u0440\u043e\u043c", "\u0431\u0443\u0434\u0435\u0442", "\u043f\u0440\u043e\u0432\u0435\u0434\u0435\u043d\u043e", "\u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0435\u0435", "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e", "\u043a\u043e\u043d\u0446\u0435\u0440\u0442\u043e\u0432", "\u0432", "2014", "\u0433\u043e\u0434\u0443", "\u0438\u043b\u0438", "\u043f\u043e\u0437\u0436\u0435", "."]}, "query_toks": {"en": ["select", "t2.name", ",", "t2.capacity", "from", "concert", "as", "t1", "join", "stadium", "as", "t2", "on", "t1.stadium_id", "=", "t2.stadium_id", "where", "t1.year", ">=", "2014", "group", "by", "t2.stadium_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"], "ru": ["select", "t2.name", ",", "t2.capacity", "from", "concert", "as", "t1", "join", "stadium", "as", "t2", "on", "t1.stadium_id", "=", "t2.stadium_id", "where", "t1.year", ">=", "2014", "group", "by", "t2.stadium_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"]}, "query_toks_no_values": {"en": ["select", "t2.name", ",", "t2.capacity", "from", "concert", "as", "t1", "join", "stadium", "as", "t2", "on", "t1.stadium_id", "=", "t2.stadium_id", "where", "t1.year", ">=", "2014", "group", "by", "t2.stadium_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"], "ru": ["select", "t2.name", ",", "t2.capacity", "from", "concert", "as", "t1", "join", "stadium", "as", "t2", "on", "t1.stadium_id", "=", "t2.stadium_id", "where", "t1.year", ">=", "2014", "group", "by", "t2.stadium_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"]}, "masked_query": "SELECT T2.name ,  T2.capacity FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  >=  2014 GROUP BY T2.stadium_id ORDER BY count(*) DESC LIMIT 1;", "question_pauq": {"ru": "\u0423\u043a\u0430\u0436\u0438\u0442\u0435 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u0438 \u0432\u043c\u0435\u0441\u0442\u0438\u043c\u043e\u0441\u0442\u044c \u0441\u0442\u0430\u0434\u0438\u043e\u043d\u0430, \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u0431\u0443\u0434\u0435\u0442 \u043f\u0440\u043e\u0432\u0435\u0434\u0435\u043d\u043e \u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u043e\u043d\u0446\u0435\u0440\u0442\u043e\u0432 \u0432 2014 \u0433\u043e\u0434\u0443 \u0438\u043b\u0438 \u043f\u043e\u0437\u0436\u0435."}, "question": "Show the stadium name and capacity with most number of concerts in year 2014 or after.", "kb_id": "concert_singer"}, {"id": "D_0026", "source": "spider-dev", "type": "dev", "query": {"ru": "select t2.name ,  t2.capacity from concert as t1 join stadium as t2 on t1.stadium_id  =  t2.stadium_id where t1.year  >  2013 group by t2.stadium_id order by count(*) desc limit 1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 18, false], null], [0, 1, false], null]]}, "select": [false, [[0, [0, [0, 3, false], null]], [0, [0, [0, 4, false], null]]]], "where": [[false, 3, [0, [0, 19, false], null], 2013.0, null]], "groupBy": [[0, 1, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 18, false], null], [0, 1, false], null]]}, "select": [false, [[0, [0, [0, 3, false], null]], [0, [0, [0, 4, false], null]]]], "where": [[false, 3, [0, [0, 19, false], null], 2013.0, null]], "groupBy": [[0, 1, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "name", "and", "capacity", "of", "the", "stadium", "with", "the", "most", "concerts", "after", "2013", "?"], "ru": ["\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435", "\u0438", "\u0432\u043c\u0435\u0441\u0442\u0438\u043c\u043e\u0441\u0442\u044c", "\u0441\u0442\u0430\u0434\u0438\u043e\u043d\u0430", ",", "\u043d\u0430", "\u043a\u043e\u0442\u043e\u0440\u043e\u043c", "\u043f\u0440\u043e\u0448\u043b\u043e", "\u0431\u043e\u043b\u044c\u0448\u0435", "\u0432\u0441\u0435\u0433\u043e", "\u043a\u043e\u043d\u0446\u0435\u0440\u0442\u043e\u0432", "\u043f\u043e\u0441\u043b\u0435", "2013", "\u0433\u043e\u0434\u0430", "?"]}, "query_toks": {"en": ["select", "t2.name", ",", "t2.capacity", "from", "concert", "as", "t1", "join", "stadium", "as", "t2", "on", "t1.stadium_id", "=", "t2.stadium_id", "where", "t1.year", ">", "2013", "group", "by", "t2.stadium_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"], "ru": ["select", "t2.name", ",", "t2.capacity", "from", "concert", "as", "t1", "join", "stadium", "as", "t2", "on", "t1.stadium_id", "=", "t2.stadium_id", "where", "t1.year", ">", "2013", "group", "by", "t2.stadium_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"]}, "query_toks_no_values": {"en": ["select", "t2.name", ",", "t2.capacity", "from", "concert", "as", "t1", "join", "stadium", "as", "t2", "on", "t1.stadium_id", "=", "t2.stadium_id", "where", "t1.year", ">", "2013", "group", "by", "t2.stadium_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"], "ru": ["select", "t2.name", ",", "t2.capacity", "from", "concert", "as", "t1", "join", "stadium", "as", "t2", "on", "t1.stadium_id", "=", "t2.stadium_id", "where", "t1.year", ">", "2013", "group", "by", "t2.stadium_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"]}, "masked_query": "select t2.name ,  t2.capacity from concert as t1 join stadium as t2 on t1.stadium_id  =  t2.stadium_id where t1.year  >  2013 group by t2.stadium_id order by count(*) desc limit 1;", "question_pauq": {"ru": "\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u0438 \u0432\u043c\u0435\u0441\u0442\u0438\u043c\u043e\u0441\u0442\u044c \u0441\u0442\u0430\u0434\u0438\u043e\u043d\u0430, \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u043f\u0440\u043e\u0448\u043b\u043e \u0431\u043e\u043b\u044c\u0448\u0435 \u0432\u0441\u0435\u0433\u043e \u043a\u043e\u043d\u0446\u0435\u0440\u0442\u043e\u0432 \u043f\u043e\u0441\u043b\u0435 2013 \u0433\u043e\u0434\u0430?"}, "question": "What is the name and capacity of the stadium with the most concerts after 2013 ?", "kb_id": "concert_singer"}, {"id": "D_0027", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 19, false], null]]]], "where": [], "groupBy": [[0, 19, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 19, false], null]]]], "where": [], "groupBy": [[0, 19, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Which", "year", "has", "most", "number", "of", "concerts", "?"], "ru": ["\u0412", "\u043a\u0430\u043a\u043e\u043c", "\u0433\u043e\u0434\u0443", "\u0431\u043e\u043b\u044c\u0448\u0435", "\u0432\u0441\u0435\u0433\u043e", "\u043a\u043e\u043d\u0446\u0435\u0440\u0442\u043e\u0432", "?"]}, "query_toks": {"en": ["select", "year", "from", "concert", "group", "by", "year", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"], "ru": ["select", "year", "from", "concert", "group", "by", "year", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"]}, "query_toks_no_values": {"en": ["select", "year", "from", "concert", "group", "by", "year", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"], "ru": ["select", "year", "from", "concert", "group", "by", "year", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"]}, "masked_query": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1;", "question_pauq": {"ru": "\u0412 \u043a\u0430\u043a\u043e\u043c \u0433\u043e\u0434\u0443 \u0431\u043e\u043b\u044c\u0448\u0435 \u0432\u0441\u0435\u0433\u043e \u043a\u043e\u043d\u0446\u0435\u0440\u0442\u043e\u0432?"}, "question": "Which year has most number of concerts?", "kb_id": "concert_singer"}, {"id": "D_0028", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 19, false], null]]]], "where": [], "groupBy": [[0, 19, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 19, false], null]]]], "where": [], "groupBy": [[0, 19, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "year", "that", "had", "the", "most", "concerts", "?"], "ru": ["\u0412", "\u043a\u0430\u043a\u043e\u043c", "\u0433\u043e\u0434\u0443", "\u0431\u044b\u043b\u043e", "\u0431\u043e\u043b\u044c\u0448\u0435", "\u0432\u0441\u0435\u0433\u043e", "\u043a\u043e\u043d\u0446\u0435\u0440\u0442\u043e\u0432", "?"]}, "query_toks": {"en": ["select", "year", "from", "concert", "group", "by", "year", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"], "ru": ["select", "year", "from", "concert", "group", "by", "year", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"]}, "query_toks_no_values": {"en": ["select", "year", "from", "concert", "group", "by", "year", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"], "ru": ["select", "year", "from", "concert", "group", "by", "year", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"]}, "masked_query": "SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1;", "question_pauq": {"ru": "\u0412 \u043a\u0430\u043a\u043e\u043c \u0433\u043e\u0434\u0443 \u0431\u044b\u043b\u043e \u0431\u043e\u043b\u044c\u0448\u0435 \u0432\u0441\u0435\u0433\u043e \u043a\u043e\u043d\u0446\u0435\u0440\u0442\u043e\u0432?"}, "question": "What is the year that had the most concerts?", "kb_id": "concert_singer"}, {"id": "D_0029", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert);"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 3, false], null]]]], "where": [[true, 8, [0, [0, 1, false], null], {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 18, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 3, false], null]]]], "where": [[true, 8, [0, [0, 1, false], null], {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 18, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Show", "the", "stadium", "names", "without", "any", "concert", "."], "ru": ["\u041f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c", "\u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f", "\u0441\u0442\u0430\u0434\u0438\u043e\u043d\u043e\u0432", "\u0431\u0435\u0437", "\u043a\u043e\u043d\u0446\u0435\u0440\u0442\u043e\u0432", "."]}, "query_toks": {"en": ["select", "name", "from", "stadium", "where", "stadium_id", "not", "in", "(", "select", "stadium_id", "from", "concert", ")", ";"], "ru": ["select", "name", "from", "stadium", "where", "stadium_id", "not", "in", "(", "select", "stadium_id", "from", "concert", ")", ";"]}, "query_toks_no_values": {"en": ["select", "name", "from", "stadium", "where", "stadium_id", "not", "in", "(", "select", "stadium_id", "from", "concert", ")", ";"], "ru": ["select", "name", "from", "stadium", "where", "stadium_id", "not", "in", "(", "select", "stadium_id", "from", "concert", ")", ";"]}, "masked_query": "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert);", "question_pauq": {"ru": "\u041f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f \u0441\u0442\u0430\u0434\u0438\u043e\u043d\u043e\u0432 \u0431\u0435\u0437 \u043a\u043e\u043d\u0446\u0435\u0440\u0442\u043e\u0432."}, "question": "Show the stadium names without any concert.", "kb_id": "concert_singer"}, {"id": "D_0030", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert);"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 3, false], null]]]], "where": [[true, 8, [0, [0, 1, false], null], {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 18, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 3, false], null]]]], "where": [[true, 8, [0, [0, 1, false], null], {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 18, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "the", "names", "of", "the", "stadiums", "without", "any", "concerts", "?"], "ru": ["\u041a\u0430\u043a", "\u043d\u0430\u0437\u044b\u0432\u0430\u044e\u0442\u0441\u044f", "\u0441\u0442\u0430\u0434\u0438\u043e\u043d\u044b", "\u0431\u0435\u0437", "\u043f\u0440\u043e\u0432\u0435\u0434\u0435\u043d\u043d\u044b\u0445", "\u043a\u043e\u043d\u0446\u0435\u0440\u0442\u043e\u0432", "?"]}, "query_toks": {"en": ["select", "name", "from", "stadium", "where", "stadium_id", "not", "in", "(", "select", "stadium_id", "from", "concert", ")", ";"], "ru": ["select", "name", "from", "stadium", "where", "stadium_id", "not", "in", "(", "select", "stadium_id", "from", "concert", ")", ";"]}, "query_toks_no_values": {"en": ["select", "name", "from", "stadium", "where", "stadium_id", "not", "in", "(", "select", "stadium_id", "from", "concert", ")", ";"], "ru": ["select", "name", "from", "stadium", "where", "stadium_id", "not", "in", "(", "select", "stadium_id", "from", "concert", ")", ";"]}, "masked_query": "SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert);", "question_pauq": {"ru": "\u041a\u0430\u043a \u043d\u0430\u0437\u044b\u0432\u0430\u044e\u0442\u0441\u044f \u0441\u0442\u0430\u0434\u0438\u043e\u043d\u044b \u0431\u0435\u0437 \u043f\u0440\u043e\u0432\u0435\u0434\u0435\u043d\u043d\u044b\u0445 \u043a\u043e\u043d\u0446\u0435\u0440\u0442\u043e\u0432?"}, "question": "What are the names of the stadiums without any concerts?", "kb_id": "concert_singer"}, {"id": "D_0031", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT country FROM singer WHERE age  >  40 INTERSECT SELECT country FROM singer WHERE age  <  30;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 10, false], null]]]], "where": [[false, 3, [0, [0, 13, false], null], 40.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 10, false], null]]]], "where": [[false, 4, [0, [0, 13, false], null], 30.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 10, false], null]]]], "where": [[false, 3, [0, [0, 13, false], null], 40.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 10, false], null]]]], "where": [[false, 4, [0, [0, 13, false], null], 30.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "union": null, "except": null}}, "question_toks": {"en": ["Show", "countries", "where", "a", "singer", "above", "age", "40", "and", "a", "singer", "below", "30", "are", "from", "."], "ru": ["\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c", "\u0441\u0442\u0440\u0430\u043d\u044b", "\u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u044f", "\u043f\u0435\u0432\u0446\u0430", "\u0441\u0442\u0430\u0440\u0448\u0435", "40", "\u043b\u0435\u0442", "\u0438", "\u043f\u0435\u0432\u0446\u0430", "\u043c\u043b\u0430\u0434\u0448\u0435", "30", "\u043b\u0435\u0442", "."]}, "query_toks": {"en": ["select", "country", "from", "singer", "where", "age", ">", "40", "intersect", "select", "country", "from", "singer", "where", "age", "<", "30", ";"], "ru": ["select", "country", "from", "singer", "where", "age", ">", "40", "intersect", "select", "country", "from", "singer", "where", "age", "<", "30", ";"]}, "query_toks_no_values": {"en": ["select", "country", "from", "singer", "where", "age", ">", "40", "intersect", "select", "country", "from", "singer", "where", "age", "<", "30", ";"], "ru": ["select", "country", "from", "singer", "where", "age", ">", "40", "intersect", "select", "country", "from", "singer", "where", "age", "<", "30", ";"]}, "masked_query": "SELECT country FROM singer WHERE age  >  40 INTERSECT SELECT country FROM singer WHERE age  <  30;", "question_pauq": {"ru": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0441\u0442\u0440\u0430\u043d\u044b \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u044f \u043f\u0435\u0432\u0446\u0430 \u0441\u0442\u0430\u0440\u0448\u0435 40 \u043b\u0435\u0442 \u0438 \u043f\u0435\u0432\u0446\u0430 \u043c\u043b\u0430\u0434\u0448\u0435 30 \u043b\u0435\u0442."}, "question": "Show countries where a singer above age 40 and a singer below 30 are from.", "kb_id": "concert_singer"}, {"id": "D_0032", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 3, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": {"from": {"table_units": [["table_unit", 2], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 18, false], null], [0, 1, false], null]]}, "select": [false, [[0, [0, [0, 3, false], null]]]], "where": [[false, 2, [0, [0, 19, false], null], 2014.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 3, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": {"from": {"table_units": [["table_unit", 2], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 18, false], null], [0, 1, false], null]]}, "select": [false, [[0, [0, [0, 3, false], null]]]], "where": [[false, 2, [0, [0, 19, false], null], 2014.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}}, "question_toks": {"en": ["Show", "names", "for", "all", "stadiums", "except", "for", "stadiums", "having", "a", "concert", "in", "year", "2014", "."], "ru": ["\u0423\u043a\u0430\u0436\u0438\u0442\u0435", "\u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f", "\u0432\u0441\u0435\u0445", "\u0441\u0442\u0430\u0434\u0438\u043e\u043d\u043e\u0432", ",", "\u043a\u0440\u043e\u043c\u0435", "\u0441\u0442\u0430\u0434\u0438\u043e\u043d\u043e\u0432", ",", "\u043d\u0430", "\u043a\u043e\u0442\u043e\u0440\u044b\u0445", "\u0432", "2014", "\u0433\u043e\u0434\u0443", "\u0441\u043e\u0441\u0442\u043e\u044f\u043b\u0441\u044f", "\u043a\u043e\u043d\u0446\u0435\u0440\u0442", "."]}, "query_toks": {"en": ["select", "name", "from", "stadium", "except", "select", "t2.name", "from", "concert", "as", "t1", "join", "stadium", "as", "t2", "on", "t1.stadium_id", "=", "t2.stadium_id", "where", "t1.year", "=", "2014", ";"], "ru": ["select", "name", "from", "stadium", "except", "select", "t2.name", "from", "concert", "as", "t1", "join", "stadium", "as", "t2", "on", "t1.stadium_id", "=", "t2.stadium_id", "where", "t1.year", "=", "2014", ";"]}, "query_toks_no_values": {"en": ["select", "name", "from", "stadium", "except", "select", "t2.name", "from", "concert", "as", "t1", "join", "stadium", "as", "t2", "on", "t1.stadium_id", "=", "t2.stadium_id", "where", "t1.year", "=", "2014", ";"], "ru": ["select", "name", "from", "stadium", "except", "select", "t2.name", "from", "concert", "as", "t1", "join", "stadium", "as", "t2", "on", "t1.stadium_id", "=", "t2.stadium_id", "where", "t1.year", "=", "2014", ";"]}, "masked_query": "SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014;", "question_pauq": {"ru": "\u0423\u043a\u0430\u0436\u0438\u0442\u0435 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f \u0432\u0441\u0435\u0445 \u0441\u0442\u0430\u0434\u0438\u043e\u043d\u043e\u0432, \u043a\u0440\u043e\u043c\u0435 \u0441\u0442\u0430\u0434\u0438\u043e\u043d\u043e\u0432, \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0432 2014 \u0433\u043e\u0434\u0443 \u0441\u043e\u0441\u0442\u043e\u044f\u043b\u0441\u044f \u043a\u043e\u043d\u0446\u0435\u0440\u0442."}, "question": "Show names for all stadiums except for stadiums having a concert in year 2014.", "kb_id": "concert_singer"}, {"id": "D_0033", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 3, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": {"from": {"table_units": [["table_unit", 2], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 18, false], null], [0, 1, false], null]]}, "select": [false, [[0, [0, [0, 3, false], null]]]], "where": [[false, 2, [0, [0, 19, false], null], 2014.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 3, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": {"from": {"table_units": [["table_unit", 2], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 18, false], null], [0, 1, false], null]]}, "select": [false, [[0, [0, [0, 3, false], null]]]], "where": [[false, 2, [0, [0, 19, false], null], 2014.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}}, "question_toks": {"en": ["What", "are", "the", "names", "of", "all", "stadiums", "that", "did", "not", "have", "a", "concert", "in", "2014", "?"], "ru": ["\u041a\u0430\u043a", "\u043d\u0430\u0437\u044b\u0432\u0430\u044e\u0442\u0441\u044f", "\u0432\u0441\u0435", "\u0441\u0442\u0430\u0434\u0438\u043e\u043d\u044b", ",", "\u043d\u0430", "\u043a\u043e\u0442\u043e\u0440\u044b\u0445", "\u043d\u0435", "\u0431\u044b\u043b\u043e", "\u043a\u043e\u043d\u0446\u0435\u0440\u0442\u043e\u0432", "\u0432", "2014", "\u0433\u043e\u0434\u0443", "?"]}, "query_toks": {"en": ["select", "name", "from", "stadium", "except", "select", "t2.name", "from", "concert", "as", "t1", "join", "stadium", "as", "t2", "on", "t1.stadium_id", "=", "t2.stadium_id", "where", "t1.year", "=", "2014", ";"], "ru": ["select", "name", "from", "stadium", "except", "select", "t2.name", "from", "concert", "as", "t1", "join", "stadium", "as", "t2", "on", "t1.stadium_id", "=", "t2.stadium_id", "where", "t1.year", "=", "2014", ";"]}, "query_toks_no_values": {"en": ["select", "name", "from", "stadium", "except", "select", "t2.name", "from", "concert", "as", "t1", "join", "stadium", "as", "t2", "on", "t1.stadium_id", "=", "t2.stadium_id", "where", "t1.year", "=", "2014", ";"], "ru": ["select", "name", "from", "stadium", "except", "select", "t2.name", "from", "concert", "as", "t1", "join", "stadium", "as", "t2", "on", "t1.stadium_id", "=", "t2.stadium_id", "where", "t1.year", "=", "2014", ";"]}, "masked_query": "SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014;", "question_pauq": {"ru": "\u041a\u0430\u043a \u043d\u0430\u0437\u044b\u0432\u0430\u044e\u0442\u0441\u044f \u0432\u0441\u0435 \u0441\u0442\u0430\u0434\u0438\u043e\u043d\u044b, \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043d\u0435 \u0431\u044b\u043b\u043e \u043a\u043e\u043d\u0446\u0435\u0440\u0442\u043e\u0432 \u0432 2014 \u0433\u043e\u0434\u0443?"}, "question": "What are the names of all stadiums that did not have a concert in 2014?", "kb_id": "concert_singer"}, {"id": "D_0034", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T2.concert_name ,  T2.theme ,  count(*) FROM singer_in_concert AS T1 JOIN concert AS T2 ON T1.concert_id  =  T2.concert_id GROUP BY T2.concert_id;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 3], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 20, false], null], [0, 15, false], null]]}, "select": [false, [[0, [0, [0, 16, false], null]], [0, [0, [0, 17, false], null]], [3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [[0, 15, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 3], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 20, false], null], [0, 15, false], null]]}, "select": [false, [[0, [0, [0, 16, false], null]], [0, [0, [0, 17, false], null]], [3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [[0, 15, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Show", "the", "name", "and", "theme", "for", "all", "concerts", "and", "the", "number", "of", "singers", "in", "each", "concert", "."], "ru": ["\u0423\u043a\u0430\u0436\u0438\u0442\u0435", "\u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435", "\u0438", "\u0442\u0435\u043c\u0443", "\u0434\u043b\u044f", "\u0432\u0441\u0435\u0445", "\u043a\u043e\u043d\u0446\u0435\u0440\u0442\u043e\u0432", ",", "\u0430", "\u0442\u0430\u043a\u0436\u0435", "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e", "\u043f\u0435\u0432\u0446\u043e\u0432", "\u043d\u0430", "\u043a\u0430\u0436\u0434\u043e\u043c", "\u043a\u043e\u043d\u0446\u0435\u0440\u0442\u0435", "."]}, "query_toks": {"en": ["select", "t2.concert_name", ",", "t2.theme", ",", "count", "(", "*", ")", "from", "singer_in_concert", "as", "t1", "join", "concert", "as", "t2", "on", "t1.concert_id", "=", "t2.concert_id", "group", "by", "t2.concert_id", ";"], "ru": ["select", "t2.concert_name", ",", "t2.theme", ",", "count", "(", "*", ")", "from", "singer_in_concert", "as", "t1", "join", "concert", "as", "t2", "on", "t1.concert_id", "=", "t2.concert_id", "group", "by", "t2.concert_id", ";"]}, "query_toks_no_values": {"en": ["select", "t2.concert_name", ",", "t2.theme", ",", "count", "(", "*", ")", "from", "singer_in_concert", "as", "t1", "join", "concert", "as", "t2", "on", "t1.concert_id", "=", "t2.concert_id", "group", "by", "t2.concert_id", ";"], "ru": ["select", "t2.concert_name", ",", "t2.theme", ",", "count", "(", "*", ")", "from", "singer_in_concert", "as", "t1", "join", "concert", "as", "t2", "on", "t1.concert_id", "=", "t2.concert_id", "group", "by", "t2.concert_id", ";"]}, "masked_query": "SELECT T2.concert_name ,  T2.theme ,  count(*) FROM singer_in_concert AS T1 JOIN concert AS T2 ON T1.concert_id  =  T2.concert_id GROUP BY T2.concert_id;", "question_pauq": {"ru": "\u0423\u043a\u0430\u0436\u0438\u0442\u0435 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u0438 \u0442\u0435\u043c\u0443 \u0434\u043b\u044f \u0432\u0441\u0435\u0445 \u043a\u043e\u043d\u0446\u0435\u0440\u0442\u043e\u0432, \u0430 \u0442\u0430\u043a\u0436\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0435\u0432\u0446\u043e\u0432 \u043d\u0430 \u043a\u0430\u0436\u0434\u043e\u043c \u043a\u043e\u043d\u0446\u0435\u0440\u0442\u0435."}, "question": "Show the name and theme for all concerts and the number of singers in each concert.", "kb_id": "concert_singer"}, {"id": "D_0035", "source": "spider-dev", "type": "dev", "query": {"ru": "select t2.concert_name ,  t2.theme ,  count(*) from singer_in_concert as t1 join concert as t2 on t1.concert_id  =  t2.concert_id group by t2.concert_id;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 3], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 20, false], null], [0, 15, false], null]]}, "select": [false, [[0, [0, [0, 16, false], null]], [0, [0, [0, 17, false], null]], [3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [[0, 15, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 3], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 20, false], null], [0, 15, false], null]]}, "select": [false, [[0, [0, [0, 16, false], null]], [0, [0, [0, 17, false], null]], [3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [[0, 15, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "the", "names", ",", "themes", ",", "and", "number", "of", "singers", "for", "every", "concert", "?"], "ru": ["\u041a\u0430\u043a\u0438\u0435", "\u0438\u043c\u0435\u043d\u0430", "\u043f\u0435\u0432\u0446\u043e\u0432", ",", "\u0442\u0435\u043c\u044b", "\u0432\u044b\u0441\u0442\u0443\u043f\u043b\u0435\u043d\u0438\u0439", "\u0438", "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e", "\u043f\u0435\u0432\u0446\u043e\u0432", "\u043d\u0430", "\u043a\u0430\u0436\u0434\u043e\u043c", "\u043a\u043e\u043d\u0446\u0435\u0440\u0442\u0435", "?"]}, "query_toks": {"en": ["select", "t2.concert_name", ",", "t2.theme", ",", "count", "(", "*", ")", "from", "singer_in_concert", "as", "t1", "join", "concert", "as", "t2", "on", "t1.concert_id", "=", "t2.concert_id", "group", "by", "t2.concert_id", ";"], "ru": ["select", "t2.concert_name", ",", "t2.theme", ",", "count", "(", "*", ")", "from", "singer_in_concert", "as", "t1", "join", "concert", "as", "t2", "on", "t1.concert_id", "=", "t2.concert_id", "group", "by", "t2.concert_id", ";"]}, "query_toks_no_values": {"en": ["select", "t2.concert_name", ",", "t2.theme", ",", "count", "(", "*", ")", "from", "singer_in_concert", "as", "t1", "join", "concert", "as", "t2", "on", "t1.concert_id", "=", "t2.concert_id", "group", "by", "t2.concert_id", ";"], "ru": ["select", "t2.concert_name", ",", "t2.theme", ",", "count", "(", "*", ")", "from", "singer_in_concert", "as", "t1", "join", "concert", "as", "t2", "on", "t1.concert_id", "=", "t2.concert_id", "group", "by", "t2.concert_id", ";"]}, "masked_query": "select t2.concert_name ,  t2.theme ,  count(*) from singer_in_concert as t1 join concert as t2 on t1.concert_id  =  t2.concert_id group by t2.concert_id;", "question_pauq": {"ru": "\u041a\u0430\u043a\u0438\u0435 \u0438\u043c\u0435\u043d\u0430 \u043f\u0435\u0432\u0446\u043e\u0432, \u0442\u0435\u043c\u044b \u0432\u044b\u0441\u0442\u0443\u043f\u043b\u0435\u043d\u0438\u0439 \u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0435\u0432\u0446\u043e\u0432 \u043d\u0430 \u043a\u0430\u0436\u0434\u043e\u043c \u043a\u043e\u043d\u0446\u0435\u0440\u0442\u0435?"}, "question": "What are the names , themes , and number of singers for every concert ?", "kb_id": "concert_singer"}, {"id": "D_0036", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 3], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 21, false], null], [0, 8, false], null]]}, "select": [false, [[0, [0, [0, 9, false], null]], [3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [[0, 8, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 3], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 21, false], null], [0, 8, false], null]]}, "select": [false, [[0, [0, [0, 9, false], null]], [3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [[0, 8, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["List", "singer", "names", "and", "number", "of", "concerts", "for", "each", "singer", "."], "ru": ["\u041f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0438\u0442\u0435", "\u0438\u043c\u0435\u043d\u0430", "\u043f\u0435\u0432\u0446\u043e\u0432", "\u0438", "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e", "\u043a\u043e\u043d\u0446\u0435\u0440\u0442\u043e\u0432", "\u0434\u043b\u044f", "\u043a\u0430\u0436\u0434\u043e\u0433\u043e", "\u043f\u0435\u0432\u0446\u0430", "."]}, "query_toks": {"en": ["select", "t2.name", ",", "count", "(", "*", ")", "from", "singer_in_concert", "as", "t1", "join", "singer", "as", "t2", "on", "t1.singer_id", "=", "t2.singer_id", "group", "by", "t2.singer_id", ";"], "ru": ["select", "t2.name", ",", "count", "(", "*", ")", "from", "singer_in_concert", "as", "t1", "join", "singer", "as", "t2", "on", "t1.singer_id", "=", "t2.singer_id", "group", "by", "t2.singer_id", ";"]}, "query_toks_no_values": {"en": ["select", "t2.name", ",", "count", "(", "*", ")", "from", "singer_in_concert", "as", "t1", "join", "singer", "as", "t2", "on", "t1.singer_id", "=", "t2.singer_id", "group", "by", "t2.singer_id", ";"], "ru": ["select", "t2.name", ",", "count", "(", "*", ")", "from", "singer_in_concert", "as", "t1", "join", "singer", "as", "t2", "on", "t1.singer_id", "=", "t2.singer_id", "group", "by", "t2.singer_id", ";"]}, "masked_query": "SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id;", "question_pauq": {"ru": "\u041f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0438\u0442\u0435 \u0438\u043c\u0435\u043d\u0430 \u043f\u0435\u0432\u0446\u043e\u0432 \u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u043e\u043d\u0446\u0435\u0440\u0442\u043e\u0432 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043f\u0435\u0432\u0446\u0430."}, "question": "List singer names and number of concerts for each singer.", "kb_id": "concert_singer"}, {"id": "D_0037", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 3], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 21, false], null], [0, 8, false], null]]}, "select": [false, [[0, [0, [0, 9, false], null]], [3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [[0, 8, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 3], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 21, false], null], [0, 8, false], null]]}, "select": [false, [[0, [0, [0, 9, false], null]], [3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [[0, 8, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "the", "names", "of", "the", "singers", "and", "number", "of", "concerts", "for", "each", "person", "?"], "ru": ["\u041a\u0430\u043a", "\u0437\u043e\u0432\u0443\u0442", "\u043f\u0435\u0432\u0446\u043e\u0432", "\u0438", "\u0441\u043a\u043e\u043b\u044c\u043a\u043e", "\u043a\u043e\u043d\u0446\u0435\u0440\u0442\u043e\u0432", "\u0443", "\u043a\u0430\u0436\u0434\u043e\u0433\u043e", "\u0447\u0435\u043b\u043e\u0432\u0435\u043a\u0430", "?"]}, "query_toks": {"en": ["select", "t2.name", ",", "count", "(", "*", ")", "from", "singer_in_concert", "as", "t1", "join", "singer", "as", "t2", "on", "t1.singer_id", "=", "t2.singer_id", "group", "by", "t2.singer_id", ";"], "ru": ["select", "t2.name", ",", "count", "(", "*", ")", "from", "singer_in_concert", "as", "t1", "join", "singer", "as", "t2", "on", "t1.singer_id", "=", "t2.singer_id", "group", "by", "t2.singer_id", ";"]}, "query_toks_no_values": {"en": ["select", "t2.name", ",", "count", "(", "*", ")", "from", "singer_in_concert", "as", "t1", "join", "singer", "as", "t2", "on", "t1.singer_id", "=", "t2.singer_id", "group", "by", "t2.singer_id", ";"], "ru": ["select", "t2.name", ",", "count", "(", "*", ")", "from", "singer_in_concert", "as", "t1", "join", "singer", "as", "t2", "on", "t1.singer_id", "=", "t2.singer_id", "group", "by", "t2.singer_id", ";"]}, "masked_query": "SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id;", "question_pauq": {"ru": "\u041a\u0430\u043a \u0437\u043e\u0432\u0443\u0442 \u043f\u0435\u0432\u0446\u043e\u0432 \u0438 \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043a\u043e\u043d\u0446\u0435\u0440\u0442\u043e\u0432 \u0443 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0447\u0435\u043b\u043e\u0432\u0435\u043a\u0430?"}, "question": "What are the names of the singers and number of concerts for each person?", "kb_id": "concert_singer"}, {"id": "D_0038", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 3], ["table_unit", 1], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 21, false], null], [0, 8, false], null], "and", [false, 2, [0, [0, 20, false], null], [0, 15, false], null]]}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [[false, 2, [0, [0, 19, false], null], 2014.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 3], ["table_unit", 1], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 21, false], null], [0, 8, false], null], "and", [false, 2, [0, [0, 20, false], null], [0, 15, false], null]]}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [[false, 2, [0, [0, 19, false], null], 2014.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["List", "all", "singer", "names", "in", "concerts", "in", "year", "2014", "."], "ru": ["\u041f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0438\u0442\u0435", "\u0438\u043c\u0435\u043d\u0430", "\u0432\u0441\u0435\u0445", "\u043f\u0435\u0432\u0446\u043e\u0432", "\u043d\u0430", "\u043a\u043e\u043d\u0446\u0435\u0440\u0442\u0430\u0445", "\u0432", "2014", "\u0433\u043e\u0434\u0443", "."]}, "query_toks": {"en": ["select", "t2.name", "from", "singer_in_concert", "as", "t1", "join", "singer", "as", "t2", "on", "t1.singer_id", "=", "t2.singer_id", "join", "concert", "as", "t3", "on", "t1.concert_id", "=", "t3.concert_id", "where", "t3.year", "=", "2014", ";"], "ru": ["select", "t2.name", "from", "singer_in_concert", "as", "t1", "join", "singer", "as", "t2", "on", "t1.singer_id", "=", "t2.singer_id", "join", "concert", "as", "t3", "on", "t1.concert_id", "=", "t3.concert_id", "where", "t3.year", "=", "2014", ";"]}, "query_toks_no_values": {"en": ["select", "t2.name", "from", "singer_in_concert", "as", "t1", "join", "singer", "as", "t2", "on", "t1.singer_id", "=", "t2.singer_id", "join", "concert", "as", "t3", "on", "t1.concert_id", "=", "t3.concert_id", "where", "t3.year", "=", "2014", ";"], "ru": ["select", "t2.name", "from", "singer_in_concert", "as", "t1", "join", "singer", "as", "t2", "on", "t1.singer_id", "=", "t2.singer_id", "join", "concert", "as", "t3", "on", "t1.concert_id", "=", "t3.concert_id", "where", "t3.year", "=", "2014", ";"]}, "masked_query": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014;", "question_pauq": {"ru": "\u041f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0438\u0442\u0435 \u0438\u043c\u0435\u043d\u0430 \u0432\u0441\u0435\u0445 \u043f\u0435\u0432\u0446\u043e\u0432 \u043d\u0430 \u043a\u043e\u043d\u0446\u0435\u0440\u0442\u0430\u0445 \u0432 2014 \u0433\u043e\u0434\u0443."}, "question": "List all singer names in concerts in year 2014.", "kb_id": "concert_singer"}, {"id": "D_0039", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 3], ["table_unit", 1], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 21, false], null], [0, 8, false], null], "and", [false, 2, [0, [0, 20, false], null], [0, 15, false], null]]}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [[false, 2, [0, [0, 19, false], null], 2014.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 3], ["table_unit", 1], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 21, false], null], [0, 8, false], null], "and", [false, 2, [0, [0, 20, false], null], [0, 15, false], null]]}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [[false, 2, [0, [0, 19, false], null], 2014.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "the", "names", "of", "the", "singers", "who", "performed", "in", "a", "concert", "in", "2014", "?"], "ru": ["\u041a\u0430\u043a", "\u0437\u043e\u0432\u0443\u0442", "\u043f\u0435\u0432\u0446\u043e\u0432", ",", "\u0432\u044b\u0441\u0442\u0443\u043f\u0430\u0432\u0448\u0438\u0445", "\u043d\u0430", "\u043a\u043e\u043d\u0446\u0435\u0440\u0442\u0435", "\u0432", "2014", "\u0433\u043e\u0434\u0443", "?"]}, "query_toks": {"en": ["select", "t2.name", "from", "singer_in_concert", "as", "t1", "join", "singer", "as", "t2", "on", "t1.singer_id", "=", "t2.singer_id", "join", "concert", "as", "t3", "on", "t1.concert_id", "=", "t3.concert_id", "where", "t3.year", "=", "2014", ";"], "ru": ["select", "t2.name", "from", "singer_in_concert", "as", "t1", "join", "singer", "as", "t2", "on", "t1.singer_id", "=", "t2.singer_id", "join", "concert", "as", "t3", "on", "t1.concert_id", "=", "t3.concert_id", "where", "t3.year", "=", "2014", ";"]}, "query_toks_no_values": {"en": ["select", "t2.name", "from", "singer_in_concert", "as", "t1", "join", "singer", "as", "t2", "on", "t1.singer_id", "=", "t2.singer_id", "join", "concert", "as", "t3", "on", "t1.concert_id", "=", "t3.concert_id", "where", "t3.year", "=", "2014", ";"], "ru": ["select", "t2.name", "from", "singer_in_concert", "as", "t1", "join", "singer", "as", "t2", "on", "t1.singer_id", "=", "t2.singer_id", "join", "concert", "as", "t3", "on", "t1.concert_id", "=", "t3.concert_id", "where", "t3.year", "=", "2014", ";"]}, "masked_query": "SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014;", "question_pauq": {"ru": "\u041a\u0430\u043a \u0437\u043e\u0432\u0443\u0442 \u043f\u0435\u0432\u0446\u043e\u0432, \u0432\u044b\u0441\u0442\u0443\u043f\u0430\u0432\u0448\u0438\u0445 \u043d\u0430 \u043a\u043e\u043d\u0446\u0435\u0440\u0442\u0435 \u0432 2014 \u0433\u043e\u0434\u0443?"}, "question": "What are the names of the singers who performed in a concert in 2014?", "kb_id": "concert_singer"}, {"id": "D_0040", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT name ,  country FROM singer WHERE song_name LIKE '%\u0412\u0441\u0451%';"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 9, false], null]], [0, [0, [0, 10, false], null]]]], "where": [[false, 9, [0, [0, 11, false], null], "\"%Hey%\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 9, false], null]], [0, [0, [0, 10, false], null]]]], "where": [[false, 9, [0, [0, 11, false], null], "\"%\u0412\u0441\u0451%\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["what", "is", "the", "name", "and", "nation", "of", "the", "singer", "who", "have", "a", "song", "having", "'Hey", "'", "in", "its", "name", "?"], "ru": ["\u0418\u043c\u044f", "\u0438", "\u043d\u0430\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u044c", "\u043f\u0435\u0432\u0446\u0430", ",", "\u0443", "\u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e", "\u0435\u0441\u0442\u044c", "\u043f\u0435\u0441\u043d\u044f", "\u0441\u043e", "\u0441\u043b\u043e\u0432\u043e\u043c", "\u00ab", "\u0412\u0441\u0451", "\u00bb", "\u0432", "\u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0438", "?"]}, "query_toks": {"en": ["select", "name", ",", "country", "from", "singer", "where", "song_name", "like", "\"%Hey%\"", ";"], "ru": ["select", "name", ",", "country", "from", "singer", "where", "song_name", "like", "\"%\u0412\u0441\u0451%\"", ";"]}, "query_toks_no_values": {"en": ["select", "name", ",", "country", "from", "singer", "where", "song_name", "like", "value", ";"], "ru": ["select", "name", ",", "country", "from", "singer", "where", "song_name", "like", "value", ";"]}, "masked_query": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%';", "question_pauq": {"ru": "\u0418\u043c\u044f \u0438 \u043d\u0430\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u043f\u0435\u0432\u0446\u0430, \u0443 \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u0435\u0441\u0442\u044c \u043f\u0435\u0441\u043d\u044f \u0441\u043e \u0441\u043b\u043e\u0432\u043e\u043c \u00ab\u0412\u0441\u0451\u00bb \u0432 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0438?"}, "question": "what is the name and nation of the singer who have a song having 'Hey' in its name?", "kb_id": "concert_singer"}, {"id": "D_0041", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT name ,  country FROM singer WHERE song_name LIKE '%\u0412\u0441\u0451%';"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 9, false], null]], [0, [0, [0, 10, false], null]]]], "where": [[false, 9, [0, [0, 11, false], null], "\"%Hey%\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 9, false], null]], [0, [0, [0, 10, false], null]]]], "where": [[false, 9, [0, [0, 11, false], null], "\"%\u0412\u0441\u0451%\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "name", "and", "country", "of", "origin", "of", "every", "singer", "who", "has", "a", "song", "with", "the", "word", "'Hey", "'", "in", "its", "title", "?"], "ru": ["\u0418\u043c\u044f", "\u0438", "\u0441\u0442\u0440\u0430\u043d\u0430", "\u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u044f", "\u043a\u0430\u0436\u0434\u043e\u0433\u043e", "\u043f\u0435\u0432\u0446\u0430", ",", "\u0443", "\u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e", "\u0435\u0441\u0442\u044c", "\u043f\u0435\u0441\u043d\u044f", "\u0441\u043e", "\u0441\u043b\u043e\u0432\u043e\u043c", "\u00ab", "\u0412\u0441\u0451", "\u00bb", "\u0432", "\u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0438", "?"]}, "query_toks": {"en": ["select", "name", ",", "country", "from", "singer", "where", "song_name", "like", "\"%Hey%\"", ";"], "ru": ["select", "name", ",", "country", "from", "singer", "where", "song_name", "like", "\"%\u0412\u0441\u0451%\"", ";"]}, "query_toks_no_values": {"en": ["select", "name", ",", "country", "from", "singer", "where", "song_name", "like", "value", ";"], "ru": ["select", "name", ",", "country", "from", "singer", "where", "song_name", "like", "value", ";"]}, "masked_query": "SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%';", "question_pauq": {"ru": "\u0418\u043c\u044f \u0438 \u0441\u0442\u0440\u0430\u043d\u0430 \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043f\u0435\u0432\u0446\u0430, \u0443 \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u0435\u0441\u0442\u044c \u043f\u0435\u0441\u043d\u044f \u0441\u043e \u0441\u043b\u043e\u0432\u043e\u043c \u00ab\u0412\u0441\u0451\u00bb \u0432 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0438?"}, "question": "What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?", "kb_id": "concert_singer"}, {"id": "D_0042", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 18, false], null], [0, 1, false], null]]}, "select": [false, [[0, [0, [0, 3, false], null]], [0, [0, [0, 2, false], null]]]], "where": [[false, 2, [0, [0, 19, false], null], 2014.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": {"from": {"table_units": [["table_unit", 2], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 18, false], null], [0, 1, false], null]]}, "select": [false, [[0, [0, [0, 3, false], null]], [0, [0, [0, 2, false], null]]]], "where": [[false, 2, [0, [0, 19, false], null], 2015.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 18, false], null], [0, 1, false], null]]}, "select": [false, [[0, [0, [0, 3, false], null]], [0, [0, [0, 2, false], null]]]], "where": [[false, 2, [0, [0, 19, false], null], 2014.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": {"from": {"table_units": [["table_unit", 2], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 18, false], null], [0, 1, false], null]]}, "select": [false, [[0, [0, [0, 3, false], null]], [0, [0, [0, 2, false], null]]]], "where": [[false, 2, [0, [0, 19, false], null], 2015.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "union": null, "except": null}}, "question_toks": {"en": ["Find", "the", "name", "and", "location", "of", "the", "stadiums", "which", "some", "concerts", "happened", "in", "the", "years", "of", "both", "2014", "and", "2015", "."], "ru": ["\u041d\u0430\u0439\u0434\u0438\u0442\u0435", "\u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435", "\u0438", "\u0440\u0430\u0441\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u0435", "\u0441\u0442\u0430\u0434\u0438\u043e\u043d\u043e\u0432", ",", "\u043d\u0430", "\u043a\u043e\u0442\u043e\u0440\u044b\u0445", "\u043f\u0440\u043e\u0445\u043e\u0434\u0438\u043b\u0438", "\u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0435", "\u043a\u043e\u043d\u0446\u0435\u0440\u0442\u044b", "\u0432", "2014", "\u0438", "2015", "\u0433\u043e\u0434\u0430\u0445", "."]}, "query_toks": {"en": ["select", "t2.name", ",", "t2.location", "from", "concert", "as", "t1", "join", "stadium", "as", "t2", "on", "t1.stadium_id", "=", "t2.stadium_id", "where", "t1.year", "=", "2014", "intersect", "select", "t2.name", ",", "t2.location", "from", "concert", "as", "t1", "join", "stadium", "as", "t2", "on", "t1.stadium_id", "=", "t2.stadium_id", "where", "t1.year", "=", "2015", ";"], "ru": ["select", "t2.name", ",", "t2.location", "from", "concert", "as", "t1", "join", "stadium", "as", "t2", "on", "t1.stadium_id", "=", "t2.stadium_id", "where", "t1.year", "=", "2014", "intersect", "select", "t2.name", ",", "t2.location", "from", "concert", "as", "t1", "join", "stadium", "as", "t2", "on", "t1.stadium_id", "=", "t2.stadium_id", "where", "t1.year", "=", "2015", ";"]}, "query_toks_no_values": {"en": ["select", "t2.name", ",", "t2.location", "from", "concert", "as", "t1", "join", "stadium", "as", "t2", "on", "t1.stadium_id", "=", "t2.stadium_id", "where", "t1.year", "=", "2014", "intersect", "select", "t2.name", ",", "t2.location", "from", "concert", "as", "t1", "join", "stadium", "as", "t2", "on", "t1.stadium_id", "=", "t2.stadium_id", "where", "t1.year", "=", "2015", ";"], "ru": ["select", "t2.name", ",", "t2.location", "from", "concert", "as", "t1", "join", "stadium", "as", "t2", "on", "t1.stadium_id", "=", "t2.stadium_id", "where", "t1.year", "=", "2014", "intersect", "select", "t2.name", ",", "t2.location", "from", "concert", "as", "t1", "join", "stadium", "as", "t2", "on", "t1.stadium_id", "=", "t2.stadium_id", "where", "t1.year", "=", "2015", ";"]}, "masked_query": "SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015;", "question_pauq": {"ru": "\u041d\u0430\u0439\u0434\u0438\u0442\u0435 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u0438 \u0440\u0430\u0441\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0441\u0442\u0430\u0434\u0438\u043e\u043d\u043e\u0432, \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043f\u0440\u043e\u0445\u043e\u0434\u0438\u043b\u0438 \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043a\u043e\u043d\u0446\u0435\u0440\u0442\u044b \u0432 2014 \u0438 2015 \u0433\u043e\u0434\u0430\u0445."}, "question": "Find the name and location of the stadiums which some concerts happened in the years of both 2014 and 2015.", "kb_id": "concert_singer"}, {"id": "D_0043", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 18, false], null], [0, 1, false], null]]}, "select": [false, [[0, [0, [0, 3, false], null]], [0, [0, [0, 2, false], null]]]], "where": [[false, 2, [0, [0, 19, false], null], 2014.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": {"from": {"table_units": [["table_unit", 2], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 18, false], null], [0, 1, false], null]]}, "select": [false, [[0, [0, [0, 3, false], null]], [0, [0, [0, 2, false], null]]]], "where": [[false, 2, [0, [0, 19, false], null], 2015.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 18, false], null], [0, 1, false], null]]}, "select": [false, [[0, [0, [0, 3, false], null]], [0, [0, [0, 2, false], null]]]], "where": [[false, 2, [0, [0, 19, false], null], 2014.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": {"from": {"table_units": [["table_unit", 2], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 18, false], null], [0, 1, false], null]]}, "select": [false, [[0, [0, [0, 3, false], null]], [0, [0, [0, 2, false], null]]]], "where": [[false, 2, [0, [0, 19, false], null], 2015.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "the", "names", "and", "locations", "of", "the", "stadiums", "that", "had", "concerts", "that", "occurred", "in", "both", "2014", "and", "2015", "?"], "ru": ["\u041a\u0430\u043a", "\u043d\u0430\u0437\u044b\u0432\u0430\u044e\u0442\u0441\u044f", "\u0438", "\u0433\u0434\u0435", "\u043d\u0430\u0445\u043e\u0434\u044f\u0442\u0441\u044f", "\u0441\u0442\u0430\u0434\u0438\u043e\u043d\u044b", ",", "\u043d\u0430", "\u043a\u043e\u0442\u043e\u0440\u044b\u0445", "\u043f\u0440\u043e\u0445\u043e\u0434\u0438\u043b\u0438", "\u043a\u043e\u043d\u0446\u0435\u0440\u0442\u044b", "\u0432", "2014", "\u0438", "2015", "\u0433\u043e\u0434\u0430\u0445", "?"]}, "query_toks": {"en": ["select", "t2.name", ",", "t2.location", "from", "concert", "as", "t1", "join", "stadium", "as", "t2", "on", "t1.stadium_id", "=", "t2.stadium_id", "where", "t1.year", "=", "2014", "intersect", "select", "t2.name", ",", "t2.location", "from", "concert", "as", "t1", "join", "stadium", "as", "t2", "on", "t1.stadium_id", "=", "t2.stadium_id", "where", "t1.year", "=", "2015", ";"], "ru": ["select", "t2.name", ",", "t2.location", "from", "concert", "as", "t1", "join", "stadium", "as", "t2", "on", "t1.stadium_id", "=", "t2.stadium_id", "where", "t1.year", "=", "2014", "intersect", "select", "t2.name", ",", "t2.location", "from", "concert", "as", "t1", "join", "stadium", "as", "t2", "on", "t1.stadium_id", "=", "t2.stadium_id", "where", "t1.year", "=", "2015", ";"]}, "query_toks_no_values": {"en": ["select", "t2.name", ",", "t2.location", "from", "concert", "as", "t1", "join", "stadium", "as", "t2", "on", "t1.stadium_id", "=", "t2.stadium_id", "where", "t1.year", "=", "2014", "intersect", "select", "t2.name", ",", "t2.location", "from", "concert", "as", "t1", "join", "stadium", "as", "t2", "on", "t1.stadium_id", "=", "t2.stadium_id", "where", "t1.year", "=", "2015", ";"], "ru": ["select", "t2.name", ",", "t2.location", "from", "concert", "as", "t1", "join", "stadium", "as", "t2", "on", "t1.stadium_id", "=", "t2.stadium_id", "where", "t1.year", "=", "2014", "intersect", "select", "t2.name", ",", "t2.location", "from", "concert", "as", "t1", "join", "stadium", "as", "t2", "on", "t1.stadium_id", "=", "t2.stadium_id", "where", "t1.year", "=", "2015", ";"]}, "masked_query": "SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015;", "question_pauq": {"ru": "\u041a\u0430\u043a \u043d\u0430\u0437\u044b\u0432\u0430\u044e\u0442\u0441\u044f \u0438 \u0433\u0434\u0435 \u043d\u0430\u0445\u043e\u0434\u044f\u0442\u0441\u044f \u0441\u0442\u0430\u0434\u0438\u043e\u043d\u044b, \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043f\u0440\u043e\u0445\u043e\u0434\u0438\u043b\u0438 \u043a\u043e\u043d\u0446\u0435\u0440\u0442\u044b \u0432 2014 \u0438 2015 \u0433\u043e\u0434\u0430\u0445?"}, "question": "What are the names and locations of the stadiums that had concerts that occurred in both 2014 and 2015?", "kb_id": "concert_singer"}, {"id": "D_0044", "source": "spider-dev", "type": "dev", "query": {"ru": "select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1);"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 18, false], null], {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 1, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 4, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 18, false], null], {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 1, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 4, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Find", "the", "number", "of", "concerts", "happened", "in", "the", "stadium", "with", "the", "highest", "capacity", "."], "ru": ["\u041d\u0430\u0439\u0434\u0438\u0442\u0435", "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e", "\u043a\u043e\u043d\u0446\u0435\u0440\u0442\u043e\u0432", "\u043d\u0430", "\u0441\u0442\u0430\u0434\u0438\u043e\u043d\u0435", "\u0441", "\u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0435\u0439", "\u0432\u043c\u0435\u0441\u0442\u0438\u043c\u043e\u0441\u0442\u044c\u044e", "."]}, "query_toks": {"en": ["select", "count", "(", "*", ")", "from", "concert", "where", "stadium_id", "=", "(", "select", "stadium_id", "from", "stadium", "order", "by", "capacity", "desc", "limit", "1", ")", ";"], "ru": ["select", "count", "(", "*", ")", "from", "concert", "where", "stadium_id", "=", "(", "select", "stadium_id", "from", "stadium", "order", "by", "capacity", "desc", "limit", "1", ")", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "*", ")", "from", "concert", "where", "stadium_id", "=", "(", "select", "stadium_id", "from", "stadium", "order", "by", "capacity", "desc", "limit", "1", ")", ";"], "ru": ["select", "count", "(", "*", ")", "from", "concert", "where", "stadium_id", "=", "(", "select", "stadium_id", "from", "stadium", "order", "by", "capacity", "desc", "limit", "1", ")", ";"]}, "masked_query": "select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1);", "question_pauq": {"ru": "\u041d\u0430\u0439\u0434\u0438\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u043e\u043d\u0446\u0435\u0440\u0442\u043e\u0432 \u043d\u0430 \u0441\u0442\u0430\u0434\u0438\u043e\u043d\u0435 \u0441 \u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0435\u0439 \u0432\u043c\u0435\u0441\u0442\u0438\u043c\u043e\u0441\u0442\u044c\u044e."}, "question": "Find the number of concerts happened in the stadium with the highest capacity .", "kb_id": "concert_singer"}, {"id": "D_0045", "source": "spider-dev", "type": "dev", "query": {"ru": "select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1);"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 18, false], null], {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 1, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 4, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 18, false], null], {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 1, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 4, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "the", "number", "of", "concerts", "that", "occurred", "in", "the", "stadium", "with", "the", "largest", "capacity", "?"], "ru": ["\u0421\u043a\u043e\u043b\u044c\u043a\u043e", "\u043a\u043e\u043d\u0446\u0435\u0440\u0442\u043e\u0432", "\u043f\u0440\u043e\u0448\u043b\u043e", "\u043d\u0430", "\u0441\u0442\u0430\u0434\u0438\u043e\u043d\u0435", "\u0441", "\u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0435\u0439", "\u0432\u043c\u0435\u0441\u0442\u0438\u043c\u043e\u0441\u0442\u044c\u044e", "?"]}, "query_toks": {"en": ["select", "count", "(", "*", ")", "from", "concert", "where", "stadium_id", "=", "(", "select", "stadium_id", "from", "stadium", "order", "by", "capacity", "desc", "limit", "1", ")", ";"], "ru": ["select", "count", "(", "*", ")", "from", "concert", "where", "stadium_id", "=", "(", "select", "stadium_id", "from", "stadium", "order", "by", "capacity", "desc", "limit", "1", ")", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "*", ")", "from", "concert", "where", "stadium_id", "=", "(", "select", "stadium_id", "from", "stadium", "order", "by", "capacity", "desc", "limit", "1", ")", ";"], "ru": ["select", "count", "(", "*", ")", "from", "concert", "where", "stadium_id", "=", "(", "select", "stadium_id", "from", "stadium", "order", "by", "capacity", "desc", "limit", "1", ")", ";"]}, "masked_query": "select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1);", "question_pauq": {"ru": "\u0421\u043a\u043e\u043b\u044c\u043a\u043e \u043a\u043e\u043d\u0446\u0435\u0440\u0442\u043e\u0432 \u043f\u0440\u043e\u0448\u043b\u043e \u043d\u0430 \u0441\u0442\u0430\u0434\u0438\u043e\u043d\u0435 \u0441 \u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0435\u0439 \u0432\u043c\u0435\u0441\u0442\u0438\u043c\u043e\u0441\u0442\u044c\u044e?"}, "question": "What are the number of concerts that occurred in the stadium with the largest capacity ?", "kb_id": "concert_singer"}, {"id": "D_0046", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT count(*) FROM pets WHERE weight  >  10;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 3, [0, [0, 14, false], null], 10.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 3, [0, [0, 14, false], null], 10.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Find", "the", "number", "of", "pets", "whose", "weight", "is", "heavier", "than", "10", "."], "ru": ["\u041d\u0430\u0439\u0434\u0438\u0442\u0435", "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e", "\u0434\u043e\u043c\u0430\u0448\u043d\u0438\u0445", "\u0436\u0438\u0432\u043e\u0442\u043d\u044b\u0445", ",", "\u0432\u0435\u0441", "\u043a\u043e\u0442\u043e\u0440\u044b\u0445", "\u043f\u0440\u0435\u0432\u044b\u0448\u0430\u0435\u0442", "10", "."]}, "query_toks": {"en": ["select", "count", "(", "*", ")", "from", "pets", "where", "weight", ">", "10", ";"], "ru": ["select", "count", "(", "*", ")", "from", "pets", "where", "weight", ">", "10", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "*", ")", "from", "pets", "where", "weight", ">", "10", ";"], "ru": ["select", "count", "(", "*", ")", "from", "pets", "where", "weight", ">", "10", ";"]}, "masked_query": "SELECT count(*) FROM pets WHERE weight  >  10;", "question_pauq": {"ru": "\u041d\u0430\u0439\u0434\u0438\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0434\u043e\u043c\u0430\u0448\u043d\u0438\u0445 \u0436\u0438\u0432\u043e\u0442\u043d\u044b\u0445, \u0432\u0435\u0441 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043f\u0440\u0435\u0432\u044b\u0448\u0430\u0435\u0442 10."}, "question": "Find the number of pets whose weight is heavier than 10.", "kb_id": "pets_1"}, {"id": "D_0047", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT count(*) FROM pets WHERE weight  >  10;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 3, [0, [0, 14, false], null], 10.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 3, [0, [0, 14, false], null], 10.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["How", "many", "pets", "have", "a", "greater", "weight", "than", "10", "?"], "ru": ["\u0421\u043a\u043e\u043b\u044c\u043a\u043e", "\u0434\u043e\u043c\u0430\u0448\u043d\u0438\u0445", "\u0436\u0438\u0432\u043e\u0442\u043d\u044b\u0445", "\u0438\u043c\u0435\u044e\u0442", "\u0432\u0435\u0441", "\u0431\u043e\u043b\u044c\u0448\u0435", "10", "?"]}, "query_toks": {"en": ["select", "count", "(", "*", ")", "from", "pets", "where", "weight", ">", "10", ";"], "ru": ["select", "count", "(", "*", ")", "from", "pets", "where", "weight", ">", "10", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "*", ")", "from", "pets", "where", "weight", ">", "10", ";"], "ru": ["select", "count", "(", "*", ")", "from", "pets", "where", "weight", ">", "10", ";"]}, "masked_query": "SELECT count(*) FROM pets WHERE weight  >  10;", "question_pauq": {"ru": "\u0421\u043a\u043e\u043b\u044c\u043a\u043e \u0434\u043e\u043c\u0430\u0448\u043d\u0438\u0445 \u0436\u0438\u0432\u043e\u0442\u043d\u044b\u0445 \u0438\u043c\u0435\u044e\u0442 \u0432\u0435\u0441 \u0431\u043e\u043b\u044c\u0448\u0435 10?"}, "question": "How many pets have a greater weight than 10?", "kb_id": "pets_1"}, {"id": "D_0048", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 14, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["asc", [[0, [0, 13, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 14, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["asc", [[0, [0, 13, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Find", "the", "weight", "of", "the", "youngest", "dog", "."], "ru": ["\u041d\u0430\u0439\u0434\u0438\u0442\u0435", "\u0432\u0435\u0441", "\u0441\u0430\u043c\u043e\u0439", "\u043c\u043e\u043b\u043e\u0434\u043e\u0439", "\u0441\u043e\u0431\u0430\u043a\u0438", "."]}, "query_toks": {"en": ["select", "weight", "from", "pets", "order", "by", "pet_age", "limit", "1", ";"], "ru": ["select", "weight", "from", "pets", "order", "by", "pet_age", "limit", "1", ";"]}, "query_toks_no_values": {"en": ["select", "weight", "from", "pets", "order", "by", "pet_age", "limit", "1", ";"], "ru": ["select", "weight", "from", "pets", "order", "by", "pet_age", "limit", "1", ";"]}, "masked_query": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1;", "question_pauq": {"ru": "\u041d\u0430\u0439\u0434\u0438\u0442\u0435 \u0432\u0435\u0441 \u0441\u0430\u043c\u043e\u0439 \u043c\u043e\u043b\u043e\u0434\u043e\u0439 \u0441\u043e\u0431\u0430\u043a\u0438."}, "question": "Find the weight of the youngest dog.", "kb_id": "pets_1"}, {"id": "D_0049", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 14, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["asc", [[0, [0, 13, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 14, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["asc", [[0, [0, 13, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["How", "much", "does", "the", "youngest", "dog", "weigh", "?"], "ru": ["\u0421\u043a\u043e\u043b\u044c\u043a\u043e", "\u0432\u0435\u0441\u0438\u0442", "\u0441\u0430\u043c\u0430\u044f", "\u043c\u043e\u043b\u043e\u0434\u0430\u044f", "\u0441\u043e\u0431\u0430\u043a\u0430", "?"]}, "query_toks": {"en": ["select", "weight", "from", "pets", "order", "by", "pet_age", "limit", "1", ";"], "ru": ["select", "weight", "from", "pets", "order", "by", "pet_age", "limit", "1", ";"]}, "query_toks_no_values": {"en": ["select", "weight", "from", "pets", "order", "by", "pet_age", "limit", "1", ";"], "ru": ["select", "weight", "from", "pets", "order", "by", "pet_age", "limit", "1", ";"]}, "masked_query": "SELECT weight FROM pets ORDER BY pet_age LIMIT 1;", "question_pauq": {"ru": "\u0421\u043a\u043e\u043b\u044c\u043a\u043e \u0432\u0435\u0441\u0438\u0442 \u0441\u0430\u043c\u0430\u044f \u043c\u043e\u043b\u043e\u0434\u0430\u044f \u0441\u043e\u0431\u0430\u043a\u0430?"}, "question": "How much does the youngest dog weigh?", "kb_id": "pets_1"}, {"id": "D_0050", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT max(weight) ,  petType FROM pets GROUP BY petType;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[1, [0, [0, 14, false], null]], [0, [0, [0, 12, false], null]]]], "where": [], "groupBy": [[0, 12, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[1, [0, [0, 14, false], null]], [0, [0, [0, 12, false], null]]]], "where": [], "groupBy": [[0, 12, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Find", "the", "maximum", "weight", "for", "each", "type", "of", "pet", ".", "List", "the", "maximum", "weight", "and", "pet", "type", "."], "ru": ["\u041d\u0430\u0439\u0434\u0438\u0442\u0435", "\u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439", "\u0432\u0435\u0441", "\u0434\u043b\u044f", "\u043a\u0430\u0436\u0434\u043e\u0433\u043e", "\u0442\u0438\u043f\u0430", "\u043f\u0438\u0442\u043e\u043c\u0446\u0430", ".", "\u0423\u043a\u0430\u0436\u0438\u0442\u0435", "\u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439", "\u0432\u0435\u0441", "\u0438", "\u0442\u0438\u043f", "\u043f\u0438\u0442\u043e\u043c\u0446\u0430", "."]}, "query_toks": {"en": ["select", "max", "(", "weight", ")", ",", "pettype", "from", "pets", "group", "by", "pettype", ";"], "ru": ["select", "max", "(", "weight", ")", ",", "pettype", "from", "pets", "group", "by", "pettype", ";"]}, "query_toks_no_values": {"en": ["select", "max", "(", "weight", ")", ",", "pettype", "from", "pets", "group", "by", "pettype", ";"], "ru": ["select", "max", "(", "weight", ")", ",", "pettype", "from", "pets", "group", "by", "pettype", ";"]}, "masked_query": "SELECT max(weight) ,  petType FROM pets GROUP BY petType;", "question_pauq": {"ru": "\u041d\u0430\u0439\u0434\u0438\u0442\u0435 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u0432\u0435\u0441 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0442\u0438\u043f\u0430 \u043f\u0438\u0442\u043e\u043c\u0446\u0430. \u0423\u043a\u0430\u0436\u0438\u0442\u0435 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u0432\u0435\u0441 \u0438 \u0442\u0438\u043f \u043f\u0438\u0442\u043e\u043c\u0446\u0430."}, "question": "Find the maximum weight for each type of pet. List the maximum weight and pet type.", "kb_id": "pets_1"}, {"id": "D_0051", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT max(weight) ,  petType FROM pets GROUP BY petType;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[1, [0, [0, 14, false], null]], [0, [0, [0, 12, false], null]]]], "where": [], "groupBy": [[0, 12, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[1, [0, [0, 14, false], null]], [0, [0, [0, 12, false], null]]]], "where": [], "groupBy": [[0, 12, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["List", "the", "maximum", "weight", "and", "type", "for", "each", "type", "of", "pet", "."], "ru": ["\u0423\u043a\u0430\u0436\u0438", "\u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439", "\u0432\u0435\u0441", "\u0438", "\u0442\u0438\u043f", "\u0434\u043b\u044f", "\u043a\u0430\u0436\u0434\u043e\u0433\u043e", "\u0442\u0438\u043f\u0430", "\u043f\u0438\u0442\u043e\u043c\u0446\u0430", "."]}, "query_toks": {"en": ["select", "max", "(", "weight", ")", ",", "pettype", "from", "pets", "group", "by", "pettype", ";"], "ru": ["select", "max", "(", "weight", ")", ",", "pettype", "from", "pets", "group", "by", "pettype", ";"]}, "query_toks_no_values": {"en": ["select", "max", "(", "weight", ")", ",", "pettype", "from", "pets", "group", "by", "pettype", ";"], "ru": ["select", "max", "(", "weight", ")", ",", "pettype", "from", "pets", "group", "by", "pettype", ";"]}, "masked_query": "SELECT max(weight) ,  petType FROM pets GROUP BY petType;", "question_pauq": {"ru": "\u0423\u043a\u0430\u0436\u0438 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u0432\u0435\u0441 \u0438 \u0442\u0438\u043f \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0442\u0438\u043f\u0430 \u043f\u0438\u0442\u043e\u043c\u0446\u0430."}, "question": "List the maximum weight and type for each type of pet.", "kb_id": "pets_1"}, {"id": "D_0052", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 9, false], null]]}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 3, [0, [0, 4, false], null], 20.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 9, false], null]]}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 3, [0, [0, 4, false], null], 20.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Find", "number", "of", "pets", "owned", "by", "students", "who", "are", "older", "than", "20", "."], "ru": ["\u041d\u0430\u0439\u0434\u0438", "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e", "\u0434\u043e\u043c\u0430\u0448\u043d\u0438\u0445", "\u0436\u0438\u0432\u043e\u0442\u043d\u044b\u0445", ",", "\u043f\u0440\u0438\u043d\u0430\u0434\u043b\u0435\u0436\u0430\u0449\u0438\u0445", "\u0443\u0447\u0430\u0449\u0438\u043c\u0441\u044f", "\u0441\u0442\u0430\u0440\u0448\u0435", "20", "\u043b\u0435\u0442", "."]}, "query_toks": {"en": ["select", "count", "(", "*", ")", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1.stuid", "=", "t2.stuid", "where", "t1.age", ">", "20", ";"], "ru": ["select", "count", "(", "*", ")", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1.stuid", "=", "t2.stuid", "where", "t1.age", ">", "20", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "*", ")", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1.stuid", "=", "t2.stuid", "where", "t1.age", ">", "20", ";"], "ru": ["select", "count", "(", "*", ")", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1.stuid", "=", "t2.stuid", "where", "t1.age", ">", "20", ";"]}, "masked_query": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20;", "question_pauq": {"ru": "\u041d\u0430\u0439\u0434\u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0434\u043e\u043c\u0430\u0448\u043d\u0438\u0445 \u0436\u0438\u0432\u043e\u0442\u043d\u044b\u0445, \u043f\u0440\u0438\u043d\u0430\u0434\u043b\u0435\u0436\u0430\u0449\u0438\u0445 \u0443\u0447\u0430\u0449\u0438\u043c\u0441\u044f \u0441\u0442\u0430\u0440\u0448\u0435 20 \u043b\u0435\u0442."}, "question": "Find number of pets owned by students who are older than 20.", "kb_id": "pets_1"}, {"id": "D_0053", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 9, false], null]]}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 3, [0, [0, 4, false], null], 20.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 9, false], null]]}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 3, [0, [0, 4, false], null], 20.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["How", "many", "pets", "are", "owned", "by", "students", "that", "have", "an", "age", "greater", "than", "20", "?"], "ru": ["\u0421\u043a\u043e\u043b\u044c\u043a\u043e", "\u0434\u043e\u043c\u0430\u0448\u043d\u0438\u0445", "\u0436\u0438\u0432\u043e\u0442\u043d\u044b\u0445", "\u043f\u0440\u0438\u043d\u0430\u0434\u043b\u0435\u0436\u0438\u0442", "\u0443\u0447\u0430\u0449\u0438\u043c\u0441\u044f", "\u0441\u0442\u0430\u0440\u0448\u0435", "20", "\u043b\u0435\u0442", "?"]}, "query_toks": {"en": ["select", "count", "(", "*", ")", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1.stuid", "=", "t2.stuid", "where", "t1.age", ">", "20", ";"], "ru": ["select", "count", "(", "*", ")", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1.stuid", "=", "t2.stuid", "where", "t1.age", ">", "20", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "*", ")", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1.stuid", "=", "t2.stuid", "where", "t1.age", ">", "20", ";"], "ru": ["select", "count", "(", "*", ")", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1.stuid", "=", "t2.stuid", "where", "t1.age", ">", "20", ";"]}, "masked_query": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20;", "question_pauq": {"ru": "\u0421\u043a\u043e\u043b\u044c\u043a\u043e \u0434\u043e\u043c\u0430\u0448\u043d\u0438\u0445 \u0436\u0438\u0432\u043e\u0442\u043d\u044b\u0445 \u043f\u0440\u0438\u043d\u0430\u0434\u043b\u0435\u0436\u0438\u0442 \u0443\u0447\u0430\u0449\u0438\u043c\u0441\u044f \u0441\u0442\u0430\u0440\u0448\u0435 20 \u043b\u0435\u0442?"}, "question": "How many pets are owned by students that have an age greater than 20?", "kb_id": "pets_1"}, {"id": "D_0054", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  '\u0416';"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0], ["table_unit", 1], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 9, false], null], "and", [false, 2, [0, [0, 10, false], null], [0, 11, false], null]]}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 5, false], null], "\"F\"", null], "and", [false, 2, [0, [0, 12, false], null], "\"dog\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0], ["table_unit", 1], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 9, false], null], "and", [false, 2, [0, [0, 10, false], null], [0, 11, false], null]]}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 5, false], null], "\"\u0416\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Find", "the", "number", "of", "dog", "pets", "that", "are", "raised", "by", "female", "students", "(", "with", "sex", "F", ")", "."], "ru": ["\u041d\u0430\u0439\u0434\u0438\u0442\u0435", "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e", "\u0434\u043e\u043c\u0430\u0448\u043d\u0438\u0445", "\u043f\u0438\u0442\u043e\u043c\u0446\u0435\u0432", ",", "\u043a\u043e\u0442\u043e\u0440\u044b\u0445", "\u0438\u043c\u0435\u044e\u0442", "\u0441\u0442\u0443\u0434\u0435\u043d\u0442\u043a\u0438", "(", "\u0441", "\u043f\u043e\u043b\u043e\u043c", "\u0416", ")", "."]}, "query_toks": {"en": ["select", "count", "(", "*", ")", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1.stuid", "=", "t2.stuid", "join", "pets", "as", "t3", "on", "t2.petid", "=", "t3.petid", "where", "t1.sex", "=", "\"F\"", "and", "t3.pettype", "=", "\"dog\"", ";"], "ru": ["select", "count", "(", "*", ")", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1.stuid", "=", "t2.stuid", "join", "pets", "as", "t3", "on", "t2.petid", "=", "t3.petid", "where", "t1.sex", "=", "\"\u0416\"", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "*", ")", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1.stuid", "=", "t2.stuid", "join", "pets", "as", "t3", "on", "t2.petid", "=", "t3.petid", "where", "t1.sex", "=", "value", "and", "t3.pettype", "=", "value", ";"], "ru": ["select", "count", "(", "*", ")", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1.stuid", "=", "t2.stuid", "join", "pets", "as", "t3", "on", "t2.petid", "=", "t3.petid", "where", "t1.sex", "=", "value", ";"]}, "masked_query": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog';", "question_pauq": {"ru": "\u041d\u0430\u0439\u0434\u0438\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0434\u043e\u043c\u0430\u0448\u043d\u0438\u0445 \u043f\u0438\u0442\u043e\u043c\u0446\u0435\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0438\u043c\u0435\u044e\u0442 \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u043a\u0438 (\u0441 \u043f\u043e\u043b\u043e\u043c \u0416)."}, "question": "Find the number of dog pets that are raised by female students (with sex F).", "kb_id": "pets_1"}, {"id": "D_0055", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  '\u0416';"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0], ["table_unit", 1], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 9, false], null], "and", [false, 2, [0, [0, 10, false], null], [0, 11, false], null]]}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 5, false], null], "\"F\"", null], "and", [false, 2, [0, [0, 12, false], null], "\"dog\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0], ["table_unit", 1], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 9, false], null], "and", [false, 2, [0, [0, 10, false], null], [0, 11, false], null]]}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 5, false], null], "\"\u0416\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["How", "many", "dog", "pets", "are", "raised", "by", "female", "students", "?"], "ru": ["\u0421\u043a\u043e\u043b\u044c\u043a\u043e", "\u0434\u043e\u043c\u0430\u0448\u043d\u0438\u0445", "\u043f\u0438\u0442\u043e\u043c\u0446\u0435\u0432", "\u0438\u043c\u0435\u044e\u0442", "\u0441\u0442\u0443\u0434\u0435\u043d\u0442\u043a\u0438", "?"]}, "query_toks": {"en": ["select", "count", "(", "*", ")", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1.stuid", "=", "t2.stuid", "join", "pets", "as", "t3", "on", "t2.petid", "=", "t3.petid", "where", "t1.sex", "=", "\"F\"", "and", "t3.pettype", "=", "\"dog\"", ";"], "ru": ["select", "count", "(", "*", ")", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1.stuid", "=", "t2.stuid", "join", "pets", "as", "t3", "on", "t2.petid", "=", "t3.petid", "where", "t1.sex", "=", "\"\u0416\"", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "*", ")", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1.stuid", "=", "t2.stuid", "join", "pets", "as", "t3", "on", "t2.petid", "=", "t3.petid", "where", "t1.sex", "=", "value", "and", "t3.pettype", "=", "value", ";"], "ru": ["select", "count", "(", "*", ")", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1.stuid", "=", "t2.stuid", "join", "pets", "as", "t3", "on", "t2.petid", "=", "t3.petid", "where", "t1.sex", "=", "value", ";"]}, "masked_query": "SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog';", "question_pauq": {"ru": "\u0421\u043a\u043e\u043b\u044c\u043a\u043e \u0434\u043e\u043c\u0430\u0448\u043d\u0438\u0445 \u043f\u0438\u0442\u043e\u043c\u0446\u0435\u0432 \u0438\u043c\u0435\u044e\u0442 \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u043a\u0438?"}, "question": "How many dog pets are raised by female students?", "kb_id": "pets_1"}, {"id": "D_0056", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT count(DISTINCT pettype) FROM pets;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[3, [0, [0, 12, true], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[3, [0, [0, 12, true], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Find", "the", "number", "of", "distinct", "type", "of", "pets", "."], "ru": ["\u041d\u0430\u0439\u0434\u0438\u0442\u0435", "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e", "\u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445", "\u0432\u0438\u0434\u043e\u0432", "\u0434\u043e\u043c\u0430\u0448\u043d\u0438\u0445", "\u0436\u0438\u0432\u043e\u0442\u043d\u044b\u0445", "."]}, "query_toks": {"en": ["select", "count", "(", "distinct", "pettype", ")", "from", "pets", ";"], "ru": ["select", "count", "(", "distinct", "pettype", ")", "from", "pets", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "distinct", "pettype", ")", "from", "pets", ";"], "ru": ["select", "count", "(", "distinct", "pettype", ")", "from", "pets", ";"]}, "masked_query": "SELECT count(DISTINCT pettype) FROM pets;", "question_pauq": {"ru": "\u041d\u0430\u0439\u0434\u0438\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u0432\u0438\u0434\u043e\u0432 \u0434\u043e\u043c\u0430\u0448\u043d\u0438\u0445 \u0436\u0438\u0432\u043e\u0442\u043d\u044b\u0445."}, "question": "Find the number of distinct type of pets.", "kb_id": "pets_1"}, {"id": "D_0057", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT count(DISTINCT pettype) FROM pets;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[3, [0, [0, 12, true], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[3, [0, [0, 12, true], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["How", "many", "different", "types", "of", "pet", "are", "there", "?"], "ru": ["\u0421\u043a\u043e\u043b\u044c\u043a\u043e", "\u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442", "\u0440\u0430\u0437\u043d\u044b\u0445", "\u0432\u0438\u0434\u043e\u0432", "\u0434\u043e\u043c\u0430\u0448\u043d\u0438\u0445", "\u0436\u0438\u0432\u043e\u0442\u043d\u044b\u0445", "?"]}, "query_toks": {"en": ["select", "count", "(", "distinct", "pettype", ")", "from", "pets", ";"], "ru": ["select", "count", "(", "distinct", "pettype", ")", "from", "pets", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "distinct", "pettype", ")", "from", "pets", ";"], "ru": ["select", "count", "(", "distinct", "pettype", ")", "from", "pets", ";"]}, "masked_query": "SELECT count(DISTINCT pettype) FROM pets;", "question_pauq": {"ru": "\u0421\u043a\u043e\u043b\u044c\u043a\u043e \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442 \u0440\u0430\u0437\u043d\u044b\u0445 \u0432\u0438\u0434\u043e\u0432 \u0434\u043e\u043c\u0430\u0448\u043d\u0438\u0445 \u0436\u0438\u0432\u043e\u0442\u043d\u044b\u0445?"}, "question": "How many different types of pet are there?", "kb_id": "pets_1"}, {"id": "D_0058", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  '\u0447\u0435\u0440\u0435\u043f\u0430\u0445\u0430' OR T3.pettype  =  '\u043f\u043e\u043f\u0443\u0433\u0430\u0439';"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0], ["table_unit", 1], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 9, false], null], "and", [false, 2, [0, [0, 11, false], null], [0, 10, false], null]]}, "select": [true, [[0, [0, [0, 3, false], null]]]], "where": [[false, 2, [0, [0, 12, false], null], "\"cat\"", null], "or", [false, 2, [0, [0, 12, false], null], "\"dog\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0], ["table_unit", 1], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 9, false], null], "and", [false, 2, [0, [0, 11, false], null], [0, 10, false], null]]}, "select": [true, [[0, [0, [0, 3, false], null]]]], "where": [[false, 2, [0, [0, 12, false], null], "\"\u0447\u0435\u0440\u0435\u043f\u0430\u0445\u0430\"", null], "or", [false, 2, [0, [0, 12, false], null], "\"\u043f\u043e\u043f\u0443\u0433\u0430\u0439\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Find", "the", "first", "name", "of", "students", "who", "have", "cat", "or", "dog", "pet", "."], "ru": ["\u0418\u043c\u0435\u043d\u0430", "\u0443\u0447\u0435\u043d\u0438\u043a\u043e\u0432", ",", "\u0443", "\u043a\u043e\u0442\u043e\u0440\u044b\u0445", "\u0435\u0441\u0442\u044c", "\u0447\u0435\u0440\u0435\u043f\u0430\u0445\u0430", "\u0438\u043b\u0438", "\u043f\u043e\u043f\u0443\u0433\u0430\u0439", "."]}, "query_toks": {"en": ["select", "distinct", "t1.fname", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1.stuid", "=", "t2.stuid", "join", "pets", "as", "t3", "on", "t3.petid", "=", "t2.petid", "where", "t3.pettype", "=", "\"cat\"", "or", "t3.pettype", "=", "\"dog\"", ";"], "ru": ["select", "distinct", "t1.fname", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1.stuid", "=", "t2.stuid", "join", "pets", "as", "t3", "on", "t3.petid", "=", "t2.petid", "where", "t3.pettype", "=", "\"\u0447\u0435\u0440\u0435\u043f\u0430\u0445\u0430\"", "or", "t3.pettype", "=", "\"\u043f\u043e\u043f\u0443\u0433\u0430\u0439\"", ";"]}, "query_toks_no_values": {"en": ["select", "distinct", "t1.fname", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1.stuid", "=", "t2.stuid", "join", "pets", "as", "t3", "on", "t3.petid", "=", "t2.petid", "where", "t3.pettype", "=", "value", "or", "t3.pettype", "=", "value", ";"], "ru": ["select", "distinct", "t1.fname", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1.stuid", "=", "t2.stuid", "join", "pets", "as", "t3", "on", "t3.petid", "=", "t2.petid", "where", "t3.pettype", "=", "value", "or", "t3.pettype", "=", "value", ";"]}, "masked_query": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog';", "question_pauq": {"ru": "\u0418\u043c\u0435\u043d\u0430 \u0443\u0447\u0435\u043d\u0438\u043a\u043e\u0432, \u0443 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0435\u0441\u0442\u044c \u0447\u0435\u0440\u0435\u043f\u0430\u0445\u0430 \u0438\u043b\u0438 \u043f\u043e\u043f\u0443\u0433\u0430\u0439."}, "question": "Find the first name of students who have cat or dog pet.", "kb_id": "pets_1"}, {"id": "D_0059", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  '\u0447\u0435\u0440\u0435\u043f\u0430\u0445\u0430' OR T3.pettype  =  '\u043f\u043e\u043f\u0443\u0433\u0430\u0439';"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0], ["table_unit", 1], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 9, false], null], "and", [false, 2, [0, [0, 11, false], null], [0, 10, false], null]]}, "select": [true, [[0, [0, [0, 3, false], null]]]], "where": [[false, 2, [0, [0, 12, false], null], "\"cat\"", null], "or", [false, 2, [0, [0, 12, false], null], "\"dog\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0], ["table_unit", 1], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 9, false], null], "and", [false, 2, [0, [0, 11, false], null], [0, 10, false], null]]}, "select": [true, [[0, [0, [0, 3, false], null]]]], "where": [[false, 2, [0, [0, 12, false], null], "\"\u0447\u0435\u0440\u0435\u043f\u0430\u0445\u0430\"", null], "or", [false, 2, [0, [0, 12, false], null], "\"\u043f\u043e\u043f\u0443\u0433\u0430\u0439\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "the", "first", "names", "of", "every", "student", "who", "has", "a", "cat", "or", "dog", "as", "a", "pet", "?"], "ru": ["\u041a\u0430\u043a", "\u0437\u043e\u0432\u0443\u0442", "\u043a\u0430\u0436\u0434\u043e\u0433\u043e", "\u0443\u0447\u0435\u043d\u0438\u043a\u0430", ",", "\u0443", "\u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e", "\u0432", "\u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435", "\u0434\u043e\u043c\u0430\u0448\u043d\u0435\u0433\u043e", "\u043f\u0438\u0442\u043e\u043c\u0446\u0430", "\u0435\u0441\u0442\u044c", "\u0447\u0435\u0440\u0435\u043f\u0430\u0445\u0430", "\u0438\u043b\u0438", "\u043f\u043e\u043f\u0443\u0433\u0430\u0439", "?"]}, "query_toks": {"en": ["select", "distinct", "t1.fname", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1.stuid", "=", "t2.stuid", "join", "pets", "as", "t3", "on", "t3.petid", "=", "t2.petid", "where", "t3.pettype", "=", "\"cat\"", "or", "t3.pettype", "=", "\"dog\"", ";"], "ru": ["select", "distinct", "t1.fname", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1.stuid", "=", "t2.stuid", "join", "pets", "as", "t3", "on", "t3.petid", "=", "t2.petid", "where", "t3.pettype", "=", "\"\u0447\u0435\u0440\u0435\u043f\u0430\u0445\u0430\"", "or", "t3.pettype", "=", "\"\u043f\u043e\u043f\u0443\u0433\u0430\u0439\"", ";"]}, "query_toks_no_values": {"en": ["select", "distinct", "t1.fname", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1.stuid", "=", "t2.stuid", "join", "pets", "as", "t3", "on", "t3.petid", "=", "t2.petid", "where", "t3.pettype", "=", "value", "or", "t3.pettype", "=", "value", ";"], "ru": ["select", "distinct", "t1.fname", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1.stuid", "=", "t2.stuid", "join", "pets", "as", "t3", "on", "t3.petid", "=", "t2.petid", "where", "t3.pettype", "=", "value", "or", "t3.pettype", "=", "value", ";"]}, "masked_query": "SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog';", "question_pauq": {"ru": "\u041a\u0430\u043a \u0437\u043e\u0432\u0443\u0442 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0443\u0447\u0435\u043d\u0438\u043a\u0430, \u0443 \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0434\u043e\u043c\u0430\u0448\u043d\u0435\u0433\u043e \u043f\u0438\u0442\u043e\u043c\u0446\u0430 \u0435\u0441\u0442\u044c \u0447\u0435\u0440\u0435\u043f\u0430\u0445\u0430 \u0438\u043b\u0438 \u043f\u043e\u043f\u0443\u0433\u0430\u0439?"}, "question": "What are the first names of every student who has a cat or dog as a pet?", "kb_id": "pets_1"}, {"id": "D_0060", "source": "spider-dev", "type": "dev", "query": {"ru": "select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  '\u0447\u0435\u0440\u0435\u043f\u0430\u0445\u0430' intersect select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  '\u043f\u043e\u043f\u0443\u0433\u0430\u0439';"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0], ["table_unit", 1], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 9, false], null], "and", [false, 2, [0, [0, 11, false], null], [0, 10, false], null]]}, "select": [false, [[0, [0, [0, 3, false], null]]]], "where": [[false, 2, [0, [0, 12, false], null], "\"cat\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": {"from": {"table_units": [["table_unit", 0], ["table_unit", 1], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 9, false], null], "and", [false, 2, [0, [0, 11, false], null], [0, 10, false], null]]}, "select": [false, [[0, [0, [0, 3, false], null]]]], "where": [[false, 2, [0, [0, 12, false], null], "\"dog\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0], ["table_unit", 1], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 9, false], null], "and", [false, 2, [0, [0, 11, false], null], [0, 10, false], null]]}, "select": [false, [[0, [0, [0, 3, false], null]]]], "where": [[false, 2, [0, [0, 12, false], null], "\"\u0447\u0435\u0440\u0435\u043f\u0430\u0445\u0430\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": {"from": {"table_units": [["table_unit", 0], ["table_unit", 1], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 9, false], null], "and", [false, 2, [0, [0, 11, false], null], [0, 10, false], null]]}, "select": [false, [[0, [0, [0, 3, false], null]]]], "where": [[false, 2, [0, [0, 12, false], null], "\"\u043f\u043e\u043f\u0443\u0433\u0430\u0439\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "union": null, "except": null}}, "question_toks": {"en": ["Find", "the", "first", "name", "of", "students", "who", "have", "both", "cat", "and", "dog", "pets", "."], "ru": ["\u041d\u0430\u0439\u0434\u0438\u0442\u0435", "\u0438\u043c\u0435\u043d\u0430", "\u0443\u0447\u0435\u043d\u0438\u043a\u043e\u0432", ",", "\u0443", "\u043a\u043e\u0442\u043e\u0440\u044b\u0445", "\u0435\u0441\u0442\u044c", "\u0438", "\u0447\u0435\u0440\u0435\u043f\u0430\u0445\u0438", ",", "\u0438", "\u043f\u043e\u043f\u0443\u0433\u0430\u0438", "."]}, "query_toks": {"en": ["select", "t1.fname", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1.stuid", "=", "t2.stuid", "join", "pets", "as", "t3", "on", "t3.petid", "=", "t2.petid", "where", "t3.pettype", "=", "\"cat\"", "intersect", "select", "t1.fname", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1.stuid", "=", "t2.stuid", "join", "pets", "as", "t3", "on", "t3.petid", "=", "t2.petid", "where", "t3.pettype", "=", "\"dog\"", ";"], "ru": ["select", "t1.fname", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1.stuid", "=", "t2.stuid", "join", "pets", "as", "t3", "on", "t3.petid", "=", "t2.petid", "where", "t3.pettype", "=", "\"\u0447\u0435\u0440\u0435\u043f\u0430\u0445\u0430\"", "intersect", "select", "t1.fname", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1.stuid", "=", "t2.stuid", "join", "pets", "as", "t3", "on", "t3.petid", "=", "t2.petid", "where", "t3.pettype", "=", "\"\u043f\u043e\u043f\u0443\u0433\u0430\u0439\"", ";"]}, "query_toks_no_values": {"en": ["select", "t1.fname", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1.stuid", "=", "t2.stuid", "join", "pets", "as", "t3", "on", "t3.petid", "=", "t2.petid", "where", "t3.pettype", "=", "value", "intersect", "select", "t1.fname", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1.stuid", "=", "t2.stuid", "join", "pets", "as", "t3", "on", "t3.petid", "=", "t2.petid", "where", "t3.pettype", "=", "value", ";"], "ru": ["select", "t1.fname", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1.stuid", "=", "t2.stuid", "join", "pets", "as", "t3", "on", "t3.petid", "=", "t2.petid", "where", "t3.pettype", "=", "value", "intersect", "select", "t1.fname", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1.stuid", "=", "t2.stuid", "join", "pets", "as", "t3", "on", "t3.petid", "=", "t2.petid", "where", "t3.pettype", "=", "value", ";"]}, "masked_query": "select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'cat' intersect select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'dog';", "question_pauq": {"ru": "\u041d\u0430\u0439\u0434\u0438\u0442\u0435 \u0438\u043c\u0435\u043d\u0430 \u0443\u0447\u0435\u043d\u0438\u043a\u043e\u0432, \u0443 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0435\u0441\u0442\u044c \u0438 \u0447\u0435\u0440\u0435\u043f\u0430\u0445\u0438, \u0438 \u043f\u043e\u043f\u0443\u0433\u0430\u0438."}, "question": "Find the first name of students who have both cat and dog pets .", "kb_id": "pets_1"}, {"id": "D_0061", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  '\u0447\u0435\u0440\u0435\u043f\u0430\u0445\u0430' INTERSECT SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  '\u043f\u043e\u043f\u0443\u0433\u0430\u0439';"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0], ["table_unit", 1], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 9, false], null], "and", [false, 2, [0, [0, 11, false], null], [0, 10, false], null]]}, "select": [false, [[0, [0, [0, 3, false], null]]]], "where": [[false, 2, [0, [0, 12, false], null], "\"cat\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": {"from": {"table_units": [["table_unit", 0], ["table_unit", 1], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 9, false], null], "and", [false, 2, [0, [0, 11, false], null], [0, 10, false], null]]}, "select": [false, [[0, [0, [0, 3, false], null]]]], "where": [[false, 2, [0, [0, 12, false], null], "\"dog\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0], ["table_unit", 1], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 9, false], null], "and", [false, 2, [0, [0, 11, false], null], [0, 10, false], null]]}, "select": [false, [[0, [0, [0, 3, false], null]]]], "where": [[false, 2, [0, [0, 12, false], null], "\"\u0447\u0435\u0440\u0435\u043f\u0430\u0445\u0430\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": {"from": {"table_units": [["table_unit", 0], ["table_unit", 1], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 9, false], null], "and", [false, 2, [0, [0, 11, false], null], [0, 10, false], null]]}, "select": [false, [[0, [0, [0, 3, false], null]]]], "where": [[false, 2, [0, [0, 12, false], null], "\"\u043f\u043e\u043f\u0443\u0433\u0430\u0439\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "the", "students", "'", "first", "names", "who", "have", "both", "cats", "and", "dogs", "as", "pets", "?"], "ru": ["\u041a\u0430\u043a", "\u0437\u043e\u0432\u0443\u0442", "\u0443\u0447\u0435\u043d\u0438\u043a\u043e\u0432", ",", "\u0443", "\u043a\u043e\u0442\u043e\u0440\u044b\u0445", "\u0432", "\u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435", "\u0434\u043e\u043c\u0430\u0448\u043d\u0438\u0445", "\u0436\u0438\u0432\u043e\u0442\u043d\u044b\u0445", "\u0435\u0441\u0442\u044c", "\u0438", "\u0447\u0435\u0440\u0435\u043f\u0430\u0445\u0438", ",", "\u0438", "\u043f\u043e\u043f\u0443\u0433\u0430\u0438", "?"]}, "query_toks": {"en": ["select", "t1.fname", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1.stuid", "=", "t2.stuid", "join", "pets", "as", "t3", "on", "t3.petid", "=", "t2.petid", "where", "t3.pettype", "=", "\"cat\"", "intersect", "select", "t1.fname", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1.stuid", "=", "t2.stuid", "join", "pets", "as", "t3", "on", "t3.petid", "=", "t2.petid", "where", "t3.pettype", "=", "\"dog\"", ";"], "ru": ["select", "t1.fname", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1.stuid", "=", "t2.stuid", "join", "pets", "as", "t3", "on", "t3.petid", "=", "t2.petid", "where", "t3.pettype", "=", "\"\u0447\u0435\u0440\u0435\u043f\u0430\u0445\u0430\"", "intersect", "select", "t1.fname", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1.stuid", "=", "t2.stuid", "join", "pets", "as", "t3", "on", "t3.petid", "=", "t2.petid", "where", "t3.pettype", "=", "\"\u043f\u043e\u043f\u0443\u0433\u0430\u0439\"", ";"]}, "query_toks_no_values": {"en": ["select", "t1.fname", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1.stuid", "=", "t2.stuid", "join", "pets", "as", "t3", "on", "t3.petid", "=", "t2.petid", "where", "t3.pettype", "=", "value", "intersect", "select", "t1.fname", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1.stuid", "=", "t2.stuid", "join", "pets", "as", "t3", "on", "t3.petid", "=", "t2.petid", "where", "t3.pettype", "=", "value", ";"], "ru": ["select", "t1.fname", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1.stuid", "=", "t2.stuid", "join", "pets", "as", "t3", "on", "t3.petid", "=", "t2.petid", "where", "t3.pettype", "=", "value", "intersect", "select", "t1.fname", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1.stuid", "=", "t2.stuid", "join", "pets", "as", "t3", "on", "t3.petid", "=", "t2.petid", "where", "t3.pettype", "=", "value", ";"]}, "masked_query": "SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' INTERSECT SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog';", "question_pauq": {"ru": "\u041a\u0430\u043a \u0437\u043e\u0432\u0443\u0442 \u0443\u0447\u0435\u043d\u0438\u043a\u043e\u0432, \u0443 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0434\u043e\u043c\u0430\u0448\u043d\u0438\u0445 \u0436\u0438\u0432\u043e\u0442\u043d\u044b\u0445 \u0435\u0441\u0442\u044c \u0438 \u0447\u0435\u0440\u0435\u043f\u0430\u0445\u0438, \u0438 \u043f\u043e\u043f\u0443\u0433\u0430\u0438?"}, "question": "What are the students' first names who have both cats and dogs as pets?", "kb_id": "pets_1"}, {"id": "D_0062", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  '\u0447\u0435\u0440\u0435\u043f\u0430\u0445\u0430');"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 6, false], null]], [0, [0, [0, 4, false], null]]]], "where": [[true, 8, [0, [0, 1, false], null], {"from": {"table_units": [["table_unit", 0], ["table_unit", 1], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 9, false], null], "and", [false, 2, [0, [0, 11, false], null], [0, 10, false], null]]}, "select": [false, [[0, [0, [0, 1, false], null]]]], "where": [[false, 2, [0, [0, 12, false], null], "\"cat\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 6, false], null]], [0, [0, [0, 4, false], null]]]], "where": [[true, 8, [0, [0, 1, false], null], {"from": {"table_units": [["table_unit", 0], ["table_unit", 1], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 9, false], null], "and", [false, 2, [0, [0, 11, false], null], [0, 10, false], null]]}, "select": [false, [[0, [0, [0, 1, false], null]]]], "where": [[false, 2, [0, [0, 12, false], null], "\"\u0447\u0435\u0440\u0435\u043f\u0430\u0445\u0430\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Find", "the", "major", "and", "age", "of", "students", "who", "do", "not", "have", "a", "cat", "pet", "."], "ru": ["\u041d\u0430\u0439\u0434\u0438\u0442\u0435", "\u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u044c", "\u0438", "\u0432\u043e\u0437\u0440\u0430\u0441\u0442", "\u0441\u0442\u0443\u0434\u0435\u043d\u0442\u043e\u0432", ",", "\u0443", "\u043a\u043e\u0442\u043e\u0440\u044b\u0445", "\u043d\u0435\u0442", "\u0447\u0435\u0440\u0435\u043f\u0430\u0445", "."]}, "query_toks": {"en": ["select", "major", ",", "age", "from", "student", "where", "stuid", "not", "in", "(", "select", "t1.stuid", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1.stuid", "=", "t2.stuid", "join", "pets", "as", "t3", "on", "t3.petid", "=", "t2.petid", "where", "t3.pettype", "=", "\"cat\"", ")", ";"], "ru": ["select", "major", ",", "age", "from", "student", "where", "stuid", "not", "in", "(", "select", "t1.stuid", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1.stuid", "=", "t2.stuid", "join", "pets", "as", "t3", "on", "t3.petid", "=", "t2.petid", "where", "t3.pettype", "=", "\"\u0447\u0435\u0440\u0435\u043f\u0430\u0445\u0430\"", ")", ";"]}, "query_toks_no_values": {"en": ["select", "major", ",", "age", "from", "student", "where", "stuid", "not", "in", "(", "select", "t1.stuid", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1.stuid", "=", "t2.stuid", "join", "pets", "as", "t3", "on", "t3.petid", "=", "t2.petid", "where", "t3.pettype", "=", "value", ")", ";"], "ru": ["select", "major", ",", "age", "from", "student", "where", "stuid", "not", "in", "(", "select", "t1.stuid", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1.stuid", "=", "t2.stuid", "join", "pets", "as", "t3", "on", "t3.petid", "=", "t2.petid", "where", "t3.pettype", "=", "value", ")", ";"]}, "masked_query": "SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat');", "question_pauq": {"ru": "\u041d\u0430\u0439\u0434\u0438\u0442\u0435 \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0438 \u0432\u043e\u0437\u0440\u0430\u0441\u0442 \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u043e\u0432, \u0443 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043d\u0435\u0442 \u0447\u0435\u0440\u0435\u043f\u0430\u0445."}, "question": "Find the major and age of students who do not have a cat pet.", "kb_id": "pets_1"}, {"id": "D_0063", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  '\u0447\u0435\u0440\u0435\u043f\u0430\u0445\u0430');"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 6, false], null]], [0, [0, [0, 4, false], null]]]], "where": [[true, 8, [0, [0, 1, false], null], {"from": {"table_units": [["table_unit", 0], ["table_unit", 1], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 9, false], null], "and", [false, 2, [0, [0, 11, false], null], [0, 10, false], null]]}, "select": [false, [[0, [0, [0, 1, false], null]]]], "where": [[false, 2, [0, [0, 12, false], null], "\"cat\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 6, false], null]], [0, [0, [0, 4, false], null]]]], "where": [[true, 8, [0, [0, 1, false], null], {"from": {"table_units": [["table_unit", 0], ["table_unit", 1], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 9, false], null], "and", [false, 2, [0, [0, 11, false], null], [0, 10, false], null]]}, "select": [false, [[0, [0, [0, 1, false], null]]]], "where": [[false, 2, [0, [0, 12, false], null], "\"\u0447\u0435\u0440\u0435\u043f\u0430\u0445\u0430\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "major", "is", "every", "student", "who", "does", "not", "own", "a", "cat", "as", "a", "pet", ",", "and", "also", "how", "old", "are", "they", "?"], "ru": ["\u041a\u0430\u043a\u0443\u044e", "\u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u044c", "\u0438\u043c\u0435\u0435\u0442", "\u043a\u0430\u0436\u0434\u044b\u0439", "\u0441\u0442\u0443\u0434\u0435\u043d\u0442", ",", "\u0443", "\u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e", "\u043d\u0435\u0442", "\u0447\u0435\u0440\u0435\u043f\u0430\u0445\u0438", "\u0432", "\u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435", "\u0434\u043e\u043c\u0430\u0448\u043d\u0435\u0433\u043e", "\u0436\u0438\u0432\u043e\u0442\u043d\u043e\u0433\u043e", ",", "\u0438", "\u0441\u043a\u043e\u043b\u044c\u043a\u043e", "\u0438\u043c", "\u043b\u0435\u0442", "?"]}, "query_toks": {"en": ["select", "major", ",", "age", "from", "student", "where", "stuid", "not", "in", "(", "select", "t1.stuid", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1.stuid", "=", "t2.stuid", "join", "pets", "as", "t3", "on", "t3.petid", "=", "t2.petid", "where", "t3.pettype", "=", "\"cat\"", ")", ";"], "ru": ["select", "major", ",", "age", "from", "student", "where", "stuid", "not", "in", "(", "select", "t1.stuid", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1.stuid", "=", "t2.stuid", "join", "pets", "as", "t3", "on", "t3.petid", "=", "t2.petid", "where", "t3.pettype", "=", "\"\u0447\u0435\u0440\u0435\u043f\u0430\u0445\u0430\"", ")", ";"]}, "query_toks_no_values": {"en": ["select", "major", ",", "age", "from", "student", "where", "stuid", "not", "in", "(", "select", "t1.stuid", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1.stuid", "=", "t2.stuid", "join", "pets", "as", "t3", "on", "t3.petid", "=", "t2.petid", "where", "t3.pettype", "=", "value", ")", ";"], "ru": ["select", "major", ",", "age", "from", "student", "where", "stuid", "not", "in", "(", "select", "t1.stuid", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1.stuid", "=", "t2.stuid", "join", "pets", "as", "t3", "on", "t3.petid", "=", "t2.petid", "where", "t3.pettype", "=", "value", ")", ";"]}, "masked_query": "SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat');", "question_pauq": {"ru": "\u041a\u0430\u043a\u0443\u044e \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0438\u043c\u0435\u0435\u0442 \u043a\u0430\u0436\u0434\u044b\u0439 \u0441\u0442\u0443\u0434\u0435\u043d\u0442, \u0443 \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u043d\u0435\u0442 \u0447\u0435\u0440\u0435\u043f\u0430\u0445\u0438 \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0434\u043e\u043c\u0430\u0448\u043d\u0435\u0433\u043e \u0436\u0438\u0432\u043e\u0442\u043d\u043e\u0433\u043e, \u0438 \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0438\u043c \u043b\u0435\u0442?"}, "question": "What major is every student who does not own a cat as a pet, and also how old are they?", "kb_id": "pets_1"}, {"id": "D_0064", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  '\u0447\u0435\u0440\u0435\u043f\u0430\u0445\u0430';"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 1, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": {"from": {"table_units": [["table_unit", 0], ["table_unit", 1], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 9, false], null], "and", [false, 2, [0, [0, 11, false], null], [0, 10, false], null]]}, "select": [false, [[0, [0, [0, 1, false], null]]]], "where": [[false, 2, [0, [0, 12, false], null], "\"cat\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 1, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": {"from": {"table_units": [["table_unit", 0], ["table_unit", 1], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 9, false], null], "and", [false, 2, [0, [0, 11, false], null], [0, 10, false], null]]}, "select": [false, [[0, [0, [0, 1, false], null]]]], "where": [[false, 2, [0, [0, 12, false], null], "\"\u0447\u0435\u0440\u0435\u043f\u0430\u0445\u0430\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}}, "question_toks": {"en": ["Find", "the", "id", "of", "students", "who", "do", "not", "have", "a", "cat", "pet", "."], "ru": ["\u041d\u0430\u0439\u0434\u0438", "id", "\u0441\u0442\u0443\u0434\u0435\u043d\u0442\u043e\u0432", ",", "\u0443", "\u043a\u043e\u0442\u043e\u0440\u044b\u0445", "\u043d\u0435\u0442", "\u0447\u0435\u0440\u0435\u043f\u0430\u0445", "."]}, "query_toks": {"en": ["select", "stuid", "from", "student", "except", "select", "t1.stuid", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1.stuid", "=", "t2.stuid", "join", "pets", "as", "t3", "on", "t3.petid", "=", "t2.petid", "where", "t3.pettype", "=", "\"cat\"", ";"], "ru": ["select", "stuid", "from", "student", "except", "select", "t1.stuid", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1.stuid", "=", "t2.stuid", "join", "pets", "as", "t3", "on", "t3.petid", "=", "t2.petid", "where", "t3.pettype", "=", "\"\u0447\u0435\u0440\u0435\u043f\u0430\u0445\u0430\"", ";"]}, "query_toks_no_values": {"en": ["select", "stuid", "from", "student", "except", "select", "t1.stuid", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1.stuid", "=", "t2.stuid", "join", "pets", "as", "t3", "on", "t3.petid", "=", "t2.petid", "where", "t3.pettype", "=", "value", ";"], "ru": ["select", "stuid", "from", "student", "except", "select", "t1.stuid", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1.stuid", "=", "t2.stuid", "join", "pets", "as", "t3", "on", "t3.petid", "=", "t2.petid", "where", "t3.pettype", "=", "value", ";"]}, "masked_query": "SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat';", "question_pauq": {"ru": "\u041d\u0430\u0439\u0434\u0438 id \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u043e\u0432, \u0443 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043d\u0435\u0442 \u0447\u0435\u0440\u0435\u043f\u0430\u0445."}, "question": "Find the id of students who do not have a cat pet.", "kb_id": "pets_1"}, {"id": "D_0065", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  '\u0447\u0435\u0440\u0435\u043f\u0430\u0445\u0430';"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 1, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": {"from": {"table_units": [["table_unit", 0], ["table_unit", 1], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 9, false], null], "and", [false, 2, [0, [0, 11, false], null], [0, 10, false], null]]}, "select": [false, [[0, [0, [0, 1, false], null]]]], "where": [[false, 2, [0, [0, 12, false], null], "\"cat\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 1, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": {"from": {"table_units": [["table_unit", 0], ["table_unit", 1], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 9, false], null], "and", [false, 2, [0, [0, 11, false], null], [0, 10, false], null]]}, "select": [false, [[0, [0, [0, 1, false], null]]]], "where": [[false, 2, [0, [0, 12, false], null], "\"\u0447\u0435\u0440\u0435\u043f\u0430\u0445\u0430\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}}, "question_toks": {"en": ["What", "are", "the", "ids", "of", "the", "students", "who", "do", "not", "own", "cats", "as", "pets", "?"], "ru": ["\u041a\u0430\u043a\u043e\u0432\u044b", "id", "\u0441\u0442\u0443\u0434\u0435\u043d\u0442\u043e\u0432", ",", "\u0443", "\u043a\u043e\u0442\u043e\u0440\u044b\u0445", "\u043d\u0435\u0442", "\u0447\u0435\u0440\u0435\u043f\u0430\u0445", "\u0432", "\u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435", "\u0434\u043e\u043c\u0430\u0448\u043d\u0438\u0445", "\u0436\u0438\u0432\u043e\u0442\u043d\u044b\u0445", "?"]}, "query_toks": {"en": ["select", "stuid", "from", "student", "except", "select", "t1.stuid", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1.stuid", "=", "t2.stuid", "join", "pets", "as", "t3", "on", "t3.petid", "=", "t2.petid", "where", "t3.pettype", "=", "\"cat\"", ";"], "ru": ["select", "stuid", "from", "student", "except", "select", "t1.stuid", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1.stuid", "=", "t2.stuid", "join", "pets", "as", "t3", "on", "t3.petid", "=", "t2.petid", "where", "t3.pettype", "=", "\"\u0447\u0435\u0440\u0435\u043f\u0430\u0445\u0430\"", ";"]}, "query_toks_no_values": {"en": ["select", "stuid", "from", "student", "except", "select", "t1.stuid", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1.stuid", "=", "t2.stuid", "join", "pets", "as", "t3", "on", "t3.petid", "=", "t2.petid", "where", "t3.pettype", "=", "value", ";"], "ru": ["select", "stuid", "from", "student", "except", "select", "t1.stuid", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1.stuid", "=", "t2.stuid", "join", "pets", "as", "t3", "on", "t3.petid", "=", "t2.petid", "where", "t3.pettype", "=", "value", ";"]}, "masked_query": "SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat';", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0432\u044b id \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u043e\u0432, \u0443 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043d\u0435\u0442 \u0447\u0435\u0440\u0435\u043f\u0430\u0445 \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0434\u043e\u043c\u0430\u0448\u043d\u0438\u0445 \u0436\u0438\u0432\u043e\u0442\u043d\u044b\u0445?"}, "question": "What are the ids of the students who do not own cats as pets?", "kb_id": "pets_1"}, {"id": "D_0066", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  '\u0447\u0435\u0440\u0435\u043f\u0430\u0445\u0430' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  '\u043f\u043e\u043f\u0443\u0433\u0430\u0439');"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0], ["table_unit", 1], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 9, false], null], "and", [false, 2, [0, [0, 11, false], null], [0, 10, false], null]]}, "select": [false, [[0, [0, [0, 3, false], null]], [0, [0, [0, 4, false], null]]]], "where": [[false, 2, [0, [0, 12, false], null], "\"dog\"", null], "and", [true, 8, [0, [0, 1, false], null], {"from": {"table_units": [["table_unit", 0], ["table_unit", 1], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 9, false], null], "and", [false, 2, [0, [0, 11, false], null], [0, 10, false], null]]}, "select": [false, [[0, [0, [0, 1, false], null]]]], "where": [[false, 2, [0, [0, 12, false], null], "\"cat\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0], ["table_unit", 1], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 9, false], null], "and", [false, 2, [0, [0, 11, false], null], [0, 10, false], null]]}, "select": [false, [[0, [0, [0, 3, false], null]], [0, [0, [0, 4, false], null]]]], "where": [[false, 2, [0, [0, 12, false], null], "\"\u0447\u0435\u0440\u0435\u043f\u0430\u0445\u0430\"", null], "and", [true, 8, [0, [0, 1, false], null], {"from": {"table_units": [["table_unit", 0], ["table_unit", 1], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 9, false], null], "and", [false, 2, [0, [0, 11, false], null], [0, 10, false], null]]}, "select": [false, [[0, [0, [0, 1, false], null]]]], "where": [[false, 2, [0, [0, 12, false], null], "\"\u043f\u043e\u043f\u0443\u0433\u0430\u0439\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Find", "the", "first", "name", "and", "age", "of", "students", "who", "have", "a", "dog", "but", "do", "not", "have", "a", "cat", "as", "a", "pet", "."], "ru": ["\u041d\u0430\u0439\u0434\u0438\u0442\u0435", "\u0438\u043c\u044f", "\u0438", "\u0432\u043e\u0437\u0440\u0430\u0441\u0442", "\u0443\u0447\u0435\u043d\u0438\u043a\u043e\u0432", ",", "\u0443", "\u043a\u043e\u0442\u043e\u0440\u044b\u0445", "\u0435\u0441\u0442\u044c", "\u0447\u0435\u0440\u0435\u043f\u0430\u0445\u0430", ",", "\u043d\u043e", "\u043d\u0435\u0442", "\u043f\u043e\u043f\u0443\u0433\u0430\u044f", "\u0432", "\u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435", "\u0434\u043e\u043c\u0430\u0448\u043d\u0435\u0433\u043e", "\u043f\u0438\u0442\u043e\u043c\u0446\u0430", "."]}, "query_toks": {"en": ["select", "t1.fname", ",", "t1.age", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1.stuid", "=", "t2.stuid", "join", "pets", "as", "t3", "on", "t3.petid", "=", "t2.petid", "where", "t3.pettype", "=", "\"dog\"", "and", "t1.stuid", "not", "in", "(", "select", "t1.stuid", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1.stuid", "=", "t2.stuid", "join", "pets", "as", "t3", "on", "t3.petid", "=", "t2.petid", "where", "t3.pettype", "=", "\"cat\"", ")", ";"], "ru": ["select", "t1.fname", ",", "t1.age", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1.stuid", "=", "t2.stuid", "join", "pets", "as", "t3", "on", "t3.petid", "=", "t2.petid", "where", "t3.pettype", "=", "\"\u0447\u0435\u0440\u0435\u043f\u0430\u0445\u0430\"", "and", "t1.stuid", "not", "in", "(", "select", "t1.stuid", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1.stuid", "=", "t2.stuid", "join", "pets", "as", "t3", "on", "t3.petid", "=", "t2.petid", "where", "t3.pettype", "=", "\"\u043f\u043e\u043f\u0443\u0433\u0430\u0439\"", ")", ";"]}, "query_toks_no_values": {"en": ["select", "t1.fname", ",", "t1.age", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1.stuid", "=", "t2.stuid", "join", "pets", "as", "t3", "on", "t3.petid", "=", "t2.petid", "where", "t3.pettype", "=", "value", "and", "t1.stuid", "not", "in", "(", "select", "t1.stuid", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1.stuid", "=", "t2.stuid", "join", "pets", "as", "t3", "on", "t3.petid", "=", "t2.petid", "where", "t3.pettype", "=", "value", ")", ";"], "ru": ["select", "t1.fname", ",", "t1.age", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1.stuid", "=", "t2.stuid", "join", "pets", "as", "t3", "on", "t3.petid", "=", "t2.petid", "where", "t3.pettype", "=", "value", "and", "t1.stuid", "not", "in", "(", "select", "t1.stuid", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1.stuid", "=", "t2.stuid", "join", "pets", "as", "t3", "on", "t3.petid", "=", "t2.petid", "where", "t3.pettype", "=", "value", ")", ";"]}, "masked_query": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat');", "question_pauq": {"ru": "\u041d\u0430\u0439\u0434\u0438\u0442\u0435 \u0438\u043c\u044f \u0438 \u0432\u043e\u0437\u0440\u0430\u0441\u0442 \u0443\u0447\u0435\u043d\u0438\u043a\u043e\u0432, \u0443 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0435\u0441\u0442\u044c \u0447\u0435\u0440\u0435\u043f\u0430\u0445\u0430, \u043d\u043e \u043d\u0435\u0442 \u043f\u043e\u043f\u0443\u0433\u0430\u044f \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0434\u043e\u043c\u0430\u0448\u043d\u0435\u0433\u043e \u043f\u0438\u0442\u043e\u043c\u0446\u0430."}, "question": "Find the first name and age of students who have a dog but do not have a cat as a pet.", "kb_id": "pets_1"}, {"id": "D_0067", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  '\u0447\u0435\u0440\u0435\u043f\u0430\u0445\u0430' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  '\u043f\u043e\u043f\u0443\u0433\u0430\u0439');"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0], ["table_unit", 1], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 9, false], null], "and", [false, 2, [0, [0, 11, false], null], [0, 10, false], null]]}, "select": [false, [[0, [0, [0, 3, false], null]], [0, [0, [0, 4, false], null]]]], "where": [[false, 2, [0, [0, 12, false], null], "\"dog\"", null], "and", [true, 8, [0, [0, 1, false], null], {"from": {"table_units": [["table_unit", 0], ["table_unit", 1], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 9, false], null], "and", [false, 2, [0, [0, 11, false], null], [0, 10, false], null]]}, "select": [false, [[0, [0, [0, 1, false], null]]]], "where": [[false, 2, [0, [0, 12, false], null], "\"cat\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0], ["table_unit", 1], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 9, false], null], "and", [false, 2, [0, [0, 11, false], null], [0, 10, false], null]]}, "select": [false, [[0, [0, [0, 3, false], null]], [0, [0, [0, 4, false], null]]]], "where": [[false, 2, [0, [0, 12, false], null], "\"\u0447\u0435\u0440\u0435\u043f\u0430\u0445\u0430\"", null], "and", [true, 8, [0, [0, 1, false], null], {"from": {"table_units": [["table_unit", 0], ["table_unit", 1], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 9, false], null], "and", [false, 2, [0, [0, 11, false], null], [0, 10, false], null]]}, "select": [false, [[0, [0, [0, 1, false], null]]]], "where": [[false, 2, [0, [0, 12, false], null], "\"\u043f\u043e\u043f\u0443\u0433\u0430\u0439\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "first", "name", "of", "every", "student", "who", "has", "a", "dog", "but", "does", "not", "have", "a", "cat", "?"], "ru": ["\u041a\u0430\u043a", "\u0437\u043e\u0432\u0443\u0442", "\u043a\u0430\u0436\u0434\u043e\u0433\u043e", "\u0443\u0447\u0435\u043d\u0438\u043a\u0430", ",", "\u0443", "\u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e", "\u0435\u0441\u0442\u044c", "\u0447\u0435\u0440\u0435\u043f\u0430\u0445\u0430", ",", "\u043d\u043e", "\u043d\u0435\u0442", "\u043f\u043e\u043f\u0443\u0433\u0430\u044f", "?"]}, "query_toks": {"en": ["select", "t1.fname", ",", "t1.age", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1.stuid", "=", "t2.stuid", "join", "pets", "as", "t3", "on", "t3.petid", "=", "t2.petid", "where", "t3.pettype", "=", "\"dog\"", "and", "t1.stuid", "not", "in", "(", "select", "t1.stuid", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1.stuid", "=", "t2.stuid", "join", "pets", "as", "t3", "on", "t3.petid", "=", "t2.petid", "where", "t3.pettype", "=", "\"cat\"", ")", ";"], "ru": ["select", "t1.fname", ",", "t1.age", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1.stuid", "=", "t2.stuid", "join", "pets", "as", "t3", "on", "t3.petid", "=", "t2.petid", "where", "t3.pettype", "=", "\"\u0447\u0435\u0440\u0435\u043f\u0430\u0445\u0430\"", "and", "t1.stuid", "not", "in", "(", "select", "t1.stuid", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1.stuid", "=", "t2.stuid", "join", "pets", "as", "t3", "on", "t3.petid", "=", "t2.petid", "where", "t3.pettype", "=", "\"\u043f\u043e\u043f\u0443\u0433\u0430\u0439\"", ")", ";"]}, "query_toks_no_values": {"en": ["select", "t1.fname", ",", "t1.age", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1.stuid", "=", "t2.stuid", "join", "pets", "as", "t3", "on", "t3.petid", "=", "t2.petid", "where", "t3.pettype", "=", "value", "and", "t1.stuid", "not", "in", "(", "select", "t1.stuid", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1.stuid", "=", "t2.stuid", "join", "pets", "as", "t3", "on", "t3.petid", "=", "t2.petid", "where", "t3.pettype", "=", "value", ")", ";"], "ru": ["select", "t1.fname", ",", "t1.age", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1.stuid", "=", "t2.stuid", "join", "pets", "as", "t3", "on", "t3.petid", "=", "t2.petid", "where", "t3.pettype", "=", "value", "and", "t1.stuid", "not", "in", "(", "select", "t1.stuid", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1.stuid", "=", "t2.stuid", "join", "pets", "as", "t3", "on", "t3.petid", "=", "t2.petid", "where", "t3.pettype", "=", "value", ")", ";"]}, "masked_query": "SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat');", "question_pauq": {"ru": "\u041a\u0430\u043a \u0437\u043e\u0432\u0443\u0442 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0443\u0447\u0435\u043d\u0438\u043a\u0430, \u0443 \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u0435\u0441\u0442\u044c \u0447\u0435\u0440\u0435\u043f\u0430\u0445\u0430, \u043d\u043e \u043d\u0435\u0442 \u043f\u043e\u043f\u0443\u0433\u0430\u044f?"}, "question": "What is the first name of every student who has a dog but does not have a cat?", "kb_id": "pets_1"}, {"id": "D_0068", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 12, false], null]], [0, [0, [0, 14, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["asc", [[0, [0, 13, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 12, false], null]], [0, [0, [0, 14, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["asc", [[0, [0, 13, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Find", "the", "type", "and", "weight", "of", "the", "youngest", "pet", "."], "ru": ["\u0422\u0438\u043f", "\u0438", "\u0432\u0435\u0441", "\u0441\u0430\u043c\u043e\u0433\u043e", "\u043c\u043e\u043b\u043e\u0434\u043e\u0433\u043e", "\u043f\u0438\u0442\u043e\u043c\u0446\u0430", "."]}, "query_toks": {"en": ["select", "pettype", ",", "weight", "from", "pets", "order", "by", "pet_age", "limit", "1", ";"], "ru": ["select", "pettype", ",", "weight", "from", "pets", "order", "by", "pet_age", "limit", "1", ";"]}, "query_toks_no_values": {"en": ["select", "pettype", ",", "weight", "from", "pets", "order", "by", "pet_age", "limit", "1", ";"], "ru": ["select", "pettype", ",", "weight", "from", "pets", "order", "by", "pet_age", "limit", "1", ";"]}, "masked_query": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1;", "question_pauq": {"ru": "\u0422\u0438\u043f \u0438 \u0432\u0435\u0441 \u0441\u0430\u043c\u043e\u0433\u043e \u043c\u043e\u043b\u043e\u0434\u043e\u0433\u043e \u043f\u0438\u0442\u043e\u043c\u0446\u0430."}, "question": "Find the type and weight of the youngest pet.", "kb_id": "pets_1"}, {"id": "D_0069", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 12, false], null]], [0, [0, [0, 14, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["asc", [[0, [0, 13, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 12, false], null]], [0, [0, [0, 14, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["asc", [[0, [0, 13, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "type", "of", "pet", "is", "the", "youngest", "animal", ",", "and", "how", "much", "does", "it", "weigh", "?"], "ru": ["\u041a\u0430\u043a\u043e\u0439", "\u0442\u0438\u043f", "\u0434\u043e\u043c\u0430\u0448\u043d\u0435\u0433\u043e", "\u0436\u0438\u0432\u043e\u0442\u043d\u043e\u0433\u043e", "\u0441\u0430\u043c\u044b\u0439", "\u043c\u043e\u043b\u043e\u0434\u043e\u0439", "\u0438", "\u0441\u043a\u043e\u043b\u044c\u043a\u043e", "\u043e\u043d\u043e", "\u0432\u0435\u0441\u0438\u0442", "?"]}, "query_toks": {"en": ["select", "pettype", ",", "weight", "from", "pets", "order", "by", "pet_age", "limit", "1", ";"], "ru": ["select", "pettype", ",", "weight", "from", "pets", "order", "by", "pet_age", "limit", "1", ";"]}, "query_toks_no_values": {"en": ["select", "pettype", ",", "weight", "from", "pets", "order", "by", "pet_age", "limit", "1", ";"], "ru": ["select", "pettype", ",", "weight", "from", "pets", "order", "by", "pet_age", "limit", "1", ";"]}, "masked_query": "SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1;", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0439 \u0442\u0438\u043f \u0434\u043e\u043c\u0430\u0448\u043d\u0435\u0433\u043e \u0436\u0438\u0432\u043e\u0442\u043d\u043e\u0433\u043e \u0441\u0430\u043c\u044b\u0439 \u043c\u043e\u043b\u043e\u0434\u043e\u0439 \u0438 \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043e\u043d\u043e \u0432\u0435\u0441\u0438\u0442?"}, "question": "What type of pet is the youngest animal, and how much does it weigh?", "kb_id": "pets_1"}, {"id": "D_0070", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 11, false], null]], [0, [0, [0, 14, false], null]]]], "where": [[false, 3, [0, [0, 13, false], null], 1.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 11, false], null]], [0, [0, [0, 14, false], null]]]], "where": [[false, 3, [0, [0, 13, false], null], 1.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Find", "the", "id", "and", "weight", "of", "all", "pets", "whose", "age", "is", "older", "than", "1", "."], "ru": ["\u041d\u0430\u0439\u0434\u0438", "id", "\u0438", "\u0432\u0435\u0441", "\u0432\u0441\u0435\u0445", "\u0434\u043e\u043c\u0430\u0448\u043d\u0438\u0445", "\u0436\u0438\u0432\u043e\u0442\u043d\u044b\u0445", "\u0441\u0442\u0430\u0440\u0448\u0435", "1", "\u0433\u043e\u0434\u0430", "."]}, "query_toks": {"en": ["select", "petid", ",", "weight", "from", "pets", "where", "pet_age", ">", "1", ";"], "ru": ["select", "petid", ",", "weight", "from", "pets", "where", "pet_age", ">", "1", ";"]}, "query_toks_no_values": {"en": ["select", "petid", ",", "weight", "from", "pets", "where", "pet_age", ">", "1", ";"], "ru": ["select", "petid", ",", "weight", "from", "pets", "where", "pet_age", ">", "1", ";"]}, "masked_query": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1;", "question_pauq": {"ru": "\u041d\u0430\u0439\u0434\u0438 id \u0438 \u0432\u0435\u0441 \u0432\u0441\u0435\u0445 \u0434\u043e\u043c\u0430\u0448\u043d\u0438\u0445 \u0436\u0438\u0432\u043e\u0442\u043d\u044b\u0445 \u0441\u0442\u0430\u0440\u0448\u0435 1 \u0433\u043e\u0434\u0430."}, "question": "Find the id and weight of all pets whose age is older than 1.", "kb_id": "pets_1"}, {"id": "D_0071", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 11, false], null]], [0, [0, [0, 14, false], null]]]], "where": [[false, 3, [0, [0, 13, false], null], 1.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 11, false], null]], [0, [0, [0, 14, false], null]]]], "where": [[false, 3, [0, [0, 13, false], null], 1.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "id", "and", "weight", "of", "every", "pet", "who", "is", "older", "than", "1", "?"], "ru": ["\u041a\u0430\u043a\u043e\u0432", "id", "\u0438", "\u0432\u0435\u0441", "\u043a\u0430\u0436\u0434\u043e\u0433\u043e", "\u043f\u0438\u0442\u043e\u043c\u0446\u0430", "\u0441\u0442\u0430\u0440\u0448\u0435", "1", "\u0433\u043e\u0434\u0430", "?"]}, "query_toks": {"en": ["select", "petid", ",", "weight", "from", "pets", "where", "pet_age", ">", "1", ";"], "ru": ["select", "petid", ",", "weight", "from", "pets", "where", "pet_age", ">", "1", ";"]}, "query_toks_no_values": {"en": ["select", "petid", ",", "weight", "from", "pets", "where", "pet_age", ">", "1", ";"], "ru": ["select", "petid", ",", "weight", "from", "pets", "where", "pet_age", ">", "1", ";"]}, "masked_query": "SELECT petid ,  weight FROM pets WHERE pet_age  >  1;", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0432 id \u0438 \u0432\u0435\u0441 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043f\u0438\u0442\u043e\u043c\u0446\u0430 \u0441\u0442\u0430\u0440\u0448\u0435 1 \u0433\u043e\u0434\u0430?"}, "question": "What is the id and weight of every pet who is older than 1?", "kb_id": "pets_1"}, {"id": "D_0072", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[5, [0, [0, 13, false], null]], [1, [0, [0, 13, false], null]], [0, [0, [0, 12, false], null]]]], "where": [], "groupBy": [[0, 12, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[5, [0, [0, 13, false], null]], [1, [0, [0, 13, false], null]], [0, [0, [0, 12, false], null]]]], "where": [], "groupBy": [[0, 12, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Find", "the", "average", "and", "maximum", "age", "for", "each", "type", "of", "pet", "."], "ru": ["\u041d\u0430\u0439\u0434\u0438\u0442\u0435", "\u0441\u0440\u0435\u0434\u043d\u0438\u0439", "\u0438", "\u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439", "\u0432\u043e\u0437\u0440\u0430\u0441\u0442", "\u0434\u043b\u044f", "\u043a\u0430\u0436\u0434\u043e\u0433\u043e", "\u0442\u0438\u043f\u0430", "\u0434\u043e\u043c\u0430\u0448\u043d\u0438\u0445", "\u0436\u0438\u0432\u043e\u0442\u043d\u044b\u0445", "."]}, "query_toks": {"en": ["select", "avg", "(", "pet_age", ")", ",", "max", "(", "pet_age", ")", ",", "pettype", "from", "pets", "group", "by", "pettype", ";"], "ru": ["select", "avg", "(", "pet_age", ")", ",", "max", "(", "pet_age", ")", ",", "pettype", "from", "pets", "group", "by", "pettype", ";"]}, "query_toks_no_values": {"en": ["select", "avg", "(", "pet_age", ")", ",", "max", "(", "pet_age", ")", ",", "pettype", "from", "pets", "group", "by", "pettype", ";"], "ru": ["select", "avg", "(", "pet_age", ")", ",", "max", "(", "pet_age", ")", ",", "pettype", "from", "pets", "group", "by", "pettype", ";"]}, "masked_query": "SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype;", "question_pauq": {"ru": "\u041d\u0430\u0439\u0434\u0438\u0442\u0435 \u0441\u0440\u0435\u0434\u043d\u0438\u0439 \u0438 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u0432\u043e\u0437\u0440\u0430\u0441\u0442 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0442\u0438\u043f\u0430 \u0434\u043e\u043c\u0430\u0448\u043d\u0438\u0445 \u0436\u0438\u0432\u043e\u0442\u043d\u044b\u0445."}, "question": "Find the average and maximum age for each type of pet.", "kb_id": "pets_1"}, {"id": "D_0073", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[5, [0, [0, 13, false], null]], [1, [0, [0, 13, false], null]], [0, [0, [0, 12, false], null]]]], "where": [], "groupBy": [[0, 12, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[5, [0, [0, 13, false], null]], [1, [0, [0, 13, false], null]], [0, [0, [0, 12, false], null]]]], "where": [], "groupBy": [[0, 12, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "average", "and", "maximum", "age", "for", "each", "pet", "type", "?"], "ru": ["\u041a\u0430\u043a\u043e\u0432", "\u0441\u0440\u0435\u0434\u043d\u0438\u0439", "\u0438", "\u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439", "\u0432\u043e\u0437\u0440\u0430\u0441\u0442", "\u0434\u043b\u044f", "\u043a\u0430\u0436\u0434\u043e\u0433\u043e", "\u0442\u0438\u043f\u0430", "\u0434\u043e\u043c\u0430\u0448\u043d\u0438\u0445", "\u0436\u0438\u0432\u043e\u0442\u043d\u044b\u0445", "?"]}, "query_toks": {"en": ["select", "avg", "(", "pet_age", ")", ",", "max", "(", "pet_age", ")", ",", "pettype", "from", "pets", "group", "by", "pettype", ";"], "ru": ["select", "avg", "(", "pet_age", ")", ",", "max", "(", "pet_age", ")", ",", "pettype", "from", "pets", "group", "by", "pettype", ";"]}, "query_toks_no_values": {"en": ["select", "avg", "(", "pet_age", ")", ",", "max", "(", "pet_age", ")", ",", "pettype", "from", "pets", "group", "by", "pettype", ";"], "ru": ["select", "avg", "(", "pet_age", ")", ",", "max", "(", "pet_age", ")", ",", "pettype", "from", "pets", "group", "by", "pettype", ";"]}, "masked_query": "SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype;", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0432 \u0441\u0440\u0435\u0434\u043d\u0438\u0439 \u0438 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u0432\u043e\u0437\u0440\u0430\u0441\u0442 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0442\u0438\u043f\u0430 \u0434\u043e\u043c\u0430\u0448\u043d\u0438\u0445 \u0436\u0438\u0432\u043e\u0442\u043d\u044b\u0445?"}, "question": "What is the average and maximum age for each pet type?", "kb_id": "pets_1"}, {"id": "D_0074", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[5, [0, [0, 14, false], null]], [0, [0, [0, 12, false], null]]]], "where": [], "groupBy": [[0, 12, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[5, [0, [0, 14, false], null]], [0, [0, [0, 12, false], null]]]], "where": [], "groupBy": [[0, 12, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Find", "the", "average", "weight", "for", "each", "pet", "type", "."], "ru": ["\u0421\u0440\u0435\u0434\u043d\u0438\u0439", "\u0432\u0435\u0441", "\u0434\u043b\u044f", "\u043a\u0430\u0436\u0434\u043e\u0433\u043e", "\u0442\u0438\u043f\u0430", "\u043f\u0438\u0442\u043e\u043c\u0446\u0430", "."]}, "query_toks": {"en": ["select", "avg", "(", "weight", ")", ",", "pettype", "from", "pets", "group", "by", "pettype", ";"], "ru": ["select", "avg", "(", "weight", ")", ",", "pettype", "from", "pets", "group", "by", "pettype", ";"]}, "query_toks_no_values": {"en": ["select", "avg", "(", "weight", ")", ",", "pettype", "from", "pets", "group", "by", "pettype", ";"], "ru": ["select", "avg", "(", "weight", ")", ",", "pettype", "from", "pets", "group", "by", "pettype", ";"]}, "masked_query": "SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype;", "question_pauq": {"ru": "\u0421\u0440\u0435\u0434\u043d\u0438\u0439 \u0432\u0435\u0441 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0442\u0438\u043f\u0430 \u043f\u0438\u0442\u043e\u043c\u0446\u0430."}, "question": "Find the average weight for each pet type.", "kb_id": "pets_1"}, {"id": "D_0075", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[5, [0, [0, 14, false], null]], [0, [0, [0, 12, false], null]]]], "where": [], "groupBy": [[0, 12, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[5, [0, [0, 14, false], null]], [0, [0, [0, 12, false], null]]]], "where": [], "groupBy": [[0, 12, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "average", "weight", "for", "each", "type", "of", "pet", "?"], "ru": ["\u041a\u0430\u043a\u043e\u0432", "\u0441\u0440\u0435\u0434\u043d\u0438\u0439", "\u0432\u0435\u0441", "\u0434\u043b\u044f", "\u043a\u0430\u0436\u0434\u043e\u0433\u043e", "\u0432\u0438\u0434\u0430", "\u0434\u043e\u043c\u0430\u0448\u043d\u0438\u0445", "\u0436\u0438\u0432\u043e\u0442\u043d\u044b\u0445", "?"]}, "query_toks": {"en": ["select", "avg", "(", "weight", ")", ",", "pettype", "from", "pets", "group", "by", "pettype", ";"], "ru": ["select", "avg", "(", "weight", ")", ",", "pettype", "from", "pets", "group", "by", "pettype", ";"]}, "query_toks_no_values": {"en": ["select", "avg", "(", "weight", ")", ",", "pettype", "from", "pets", "group", "by", "pettype", ";"], "ru": ["select", "avg", "(", "weight", ")", ",", "pettype", "from", "pets", "group", "by", "pettype", ";"]}, "masked_query": "SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype;", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0432 \u0441\u0440\u0435\u0434\u043d\u0438\u0439 \u0432\u0435\u0441 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0432\u0438\u0434\u0430 \u0434\u043e\u043c\u0430\u0448\u043d\u0438\u0445 \u0436\u0438\u0432\u043e\u0442\u043d\u044b\u0445?"}, "question": "What is the average weight for each type of pet?", "kb_id": "pets_1"}, {"id": "D_0076", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 9, false], null]]}, "select": [true, [[0, [0, [0, 3, false], null]], [0, [0, [0, 4, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 9, false], null]]}, "select": [true, [[0, [0, [0, 3, false], null]], [0, [0, [0, 4, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Find", "the", "first", "name", "and", "age", "of", "students", "who", "have", "a", "pet", "."], "ru": ["\u0418\u043c\u044f", "\u0438", "\u0432\u043e\u0437\u0440\u0430\u0441\u0442", "\u0443\u0447\u0435\u043d\u0438\u043a\u043e\u0432", ",", "\u0443", "\u043a\u043e\u0442\u043e\u0440\u044b\u0445", "\u0435\u0441\u0442\u044c", "\u0434\u043e\u043c\u0430\u0448\u043d\u0435\u0435", "\u0436\u0438\u0432\u043e\u0442\u043d\u043e\u0435", "."]}, "query_toks": {"en": ["select", "distinct", "t1.fname", ",", "t1.age", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1.stuid", "=", "t2.stuid", ";"], "ru": ["select", "distinct", "t1.fname", ",", "t1.age", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1.stuid", "=", "t2.stuid", ";"]}, "query_toks_no_values": {"en": ["select", "distinct", "t1.fname", ",", "t1.age", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1.stuid", "=", "t2.stuid", ";"], "ru": ["select", "distinct", "t1.fname", ",", "t1.age", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1.stuid", "=", "t2.stuid", ";"]}, "masked_query": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid;", "question_pauq": {"ru": "\u0418\u043c\u044f \u0438 \u0432\u043e\u0437\u0440\u0430\u0441\u0442 \u0443\u0447\u0435\u043d\u0438\u043a\u043e\u0432, \u0443 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0435\u0441\u0442\u044c \u0434\u043e\u043c\u0430\u0448\u043d\u0435\u0435 \u0436\u0438\u0432\u043e\u0442\u043d\u043e\u0435."}, "question": "Find the first name and age of students who have a pet.", "kb_id": "pets_1"}, {"id": "D_0077", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 9, false], null]]}, "select": [true, [[0, [0, [0, 3, false], null]], [0, [0, [0, 4, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 9, false], null]]}, "select": [true, [[0, [0, [0, 3, false], null]], [0, [0, [0, 4, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "the", "different", "first", "names", "and", "ages", "of", "the", "students", "who", "do", "have", "pets", "?"], "ru": ["\u041a\u0430\u043a\u043e\u0432\u044b", "\u0440\u0430\u0437\u043d\u044b\u0435", "\u0438\u043c\u0435\u043d\u0430", "\u0438", "\u0432\u043e\u0437\u0440\u0430\u0441\u0442", "\u0443\u0447\u0435\u043d\u0438\u043a\u043e\u0432", ",", "\u0443", "\u043a\u043e\u0442\u043e\u0440\u044b\u0445", "\u0435\u0441\u0442\u044c", "\u0434\u043e\u043c\u0430\u0448\u043d\u0438\u0435", "\u0436\u0438\u0432\u043e\u0442\u043d\u044b\u0435", "?"]}, "query_toks": {"en": ["select", "distinct", "t1.fname", ",", "t1.age", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1.stuid", "=", "t2.stuid", ";"], "ru": ["select", "distinct", "t1.fname", ",", "t1.age", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1.stuid", "=", "t2.stuid", ";"]}, "query_toks_no_values": {"en": ["select", "distinct", "t1.fname", ",", "t1.age", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1.stuid", "=", "t2.stuid", ";"], "ru": ["select", "distinct", "t1.fname", ",", "t1.age", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1.stuid", "=", "t2.stuid", ";"]}, "masked_query": "SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid;", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0432\u044b \u0440\u0430\u0437\u043d\u044b\u0435 \u0438\u043c\u0435\u043d\u0430 \u0438 \u0432\u043e\u0437\u0440\u0430\u0441\u0442 \u0443\u0447\u0435\u043d\u0438\u043a\u043e\u0432, \u0443 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0435\u0441\u0442\u044c \u0434\u043e\u043c\u0430\u0448\u043d\u0438\u0435 \u0436\u0438\u0432\u043e\u0442\u043d\u044b\u0435?"}, "question": "What are the different first names and ages of the students who do have pets?", "kb_id": "pets_1"}, {"id": "D_0078", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  '\u0421\u043f\u0438\u0440\u0438\u0434\u043e\u043d\u043e\u0432';"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 9, false], null]]}, "select": [false, [[0, [0, [0, 10, false], null]]]], "where": [[false, 2, [0, [0, 2, false], null], "\"Smith\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 9, false], null]]}, "select": [false, [[0, [0, [0, 10, false], null]]]], "where": [[false, 2, [0, [0, 2, false], null], "\"\u0421\u043f\u0438\u0440\u0438\u0434\u043e\u043d\u043e\u0432\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Find", "the", "id", "of", "the", "pet", "owned", "by", "student", "whose", "last", "name", "is", "\u2018", "Smith", "\u2019", "."], "ru": ["\u041d\u0430\u0439\u0442\u0438", "id", "\u0436\u0438\u0432\u043e\u0442\u043d\u043e\u0433\u043e", ",", "\u043f\u0440\u0438\u043d\u0430\u0434\u043b\u0435\u0436\u0430\u0449\u0435\u0433\u043e", "\u0441\u0442\u0443\u0434\u0435\u043d\u0442\u0443", "\u043f\u043e", "\u0444\u0430\u043c\u0438\u043b\u0438\u0438", "\u00ab", "\u0421\u043f\u0438\u0440\u0438\u0434\u043e\u043d\u043e\u0432", "\u00bb", "."]}, "query_toks": {"en": ["select", "t2.petid", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1.stuid", "=", "t2.stuid", "where", "t1.lname", "=", "\"Smith\"", ";"], "ru": ["select", "t2.petid", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1.stuid", "=", "t2.stuid", "where", "t1.lname", "=", "\"\u0421\u043f\u0438\u0440\u0438\u0434\u043e\u043d\u043e\u0432\"", ";"]}, "query_toks_no_values": {"en": ["select", "t2.petid", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1.stuid", "=", "t2.stuid", "where", "t1.lname", "=", "value", ";"], "ru": ["select", "t2.petid", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1.stuid", "=", "t2.stuid", "where", "t1.lname", "=", "value", ";"]}, "masked_query": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith';", "question_pauq": {"ru": "\u041d\u0430\u0439\u0442\u0438 id \u0436\u0438\u0432\u043e\u0442\u043d\u043e\u0433\u043e, \u043f\u0440\u0438\u043d\u0430\u0434\u043b\u0435\u0436\u0430\u0449\u0435\u0433\u043e \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u0443 \u043f\u043e \u0444\u0430\u043c\u0438\u043b\u0438\u0438 \u00ab\u0421\u043f\u0438\u0440\u0438\u0434\u043e\u043d\u043e\u0432\u00bb ."}, "question": "Find the id of the pet owned by student whose last name is \u2018Smith\u2019.", "kb_id": "pets_1"}, {"id": "D_0079", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  '\u0421\u043f\u0438\u0440\u0438\u0434\u043e\u043d\u043e\u0432';"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 9, false], null]]}, "select": [false, [[0, [0, [0, 10, false], null]]]], "where": [[false, 2, [0, [0, 2, false], null], "\"Smith\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 9, false], null]]}, "select": [false, [[0, [0, [0, 10, false], null]]]], "where": [[false, 2, [0, [0, 2, false], null], "\"\u0421\u043f\u0438\u0440\u0438\u0434\u043e\u043d\u043e\u0432\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "id", "of", "the", "pet", "owned", "by", "the", "student", "whose", "last", "name", "is", "'Smith", "'", "?"], "ru": ["\u041a\u0430\u043a\u043e\u0432", "id", "\u0434\u043e\u043c\u0430\u0448\u043d\u0435\u0433\u043e", "\u0436\u0438\u0432\u043e\u0442\u043d\u043e\u0433\u043e", ",", "\u043f\u0440\u0438\u043d\u0430\u0434\u043b\u0435\u0436\u0430\u0449\u0435\u0433\u043e", "\u0441\u0442\u0443\u0434\u0435\u043d\u0442\u0443", "\u043f\u043e", "\u0444\u0430\u043c\u0438\u043b\u0438\u0438", "\u0421\u043f\u0438\u0440\u0438\u0434\u043e\u043d\u043e\u0432", "?"]}, "query_toks": {"en": ["select", "t2.petid", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1.stuid", "=", "t2.stuid", "where", "t1.lname", "=", "\"Smith\"", ";"], "ru": ["select", "t2.petid", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1.stuid", "=", "t2.stuid", "where", "t1.lname", "=", "\"\u0421\u043f\u0438\u0440\u0438\u0434\u043e\u043d\u043e\u0432\"", ";"]}, "query_toks_no_values": {"en": ["select", "t2.petid", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1.stuid", "=", "t2.stuid", "where", "t1.lname", "=", "value", ";"], "ru": ["select", "t2.petid", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1.stuid", "=", "t2.stuid", "where", "t1.lname", "=", "value", ";"]}, "masked_query": "SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith';", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0432 id \u0434\u043e\u043c\u0430\u0448\u043d\u0435\u0433\u043e \u0436\u0438\u0432\u043e\u0442\u043d\u043e\u0433\u043e, \u043f\u0440\u0438\u043d\u0430\u0434\u043b\u0435\u0436\u0430\u0449\u0435\u0433\u043e \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u0443 \u043f\u043e \u0444\u0430\u043c\u0438\u043b\u0438\u0438 \u0421\u043f\u0438\u0440\u0438\u0434\u043e\u043d\u043e\u0432?"}, "question": "What is the id of the pet owned by the student whose last name is 'Smith'?", "kb_id": "pets_1"}, {"id": "D_0080", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT count(*) ,  T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 9, false], null]]}, "select": [false, [[3, [0, [0, 0, false], null]], [0, [0, [0, 1, false], null]]]], "where": [], "groupBy": [[0, 1, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 9, false], null]]}, "select": [false, [[3, [0, [0, 0, false], null]], [0, [0, [0, 1, false], null]]]], "where": [], "groupBy": [[0, 1, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Find", "the", "number", "of", "pets", "for", "each", "student", "who", "has", "any", "pet", "and", "student", "id", "."], "ru": ["\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e", "\u0434\u043e\u043c\u0430\u0448\u043d\u0438\u0445", "\u0436\u0438\u0432\u043e\u0442\u043d\u044b\u0445", "\u0443", "\u043a\u0430\u0436\u0434\u043e\u0433\u043e", "\u0443\u0447\u0430\u0449\u0435\u0433\u043e\u0441\u044f", "\u0438", "id", "\u0443\u0447\u0430\u0449\u0435\u0433\u043e\u0441\u044f", "."]}, "query_toks": {"en": ["select", "count", "(", "*", ")", ",", "t1.stuid", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1.stuid", "=", "t2.stuid", "group", "by", "t1.stuid", ";"], "ru": ["select", "count", "(", "*", ")", ",", "t1.stuid", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1.stuid", "=", "t2.stuid", "group", "by", "t1.stuid", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "*", ")", ",", "t1.stuid", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1.stuid", "=", "t2.stuid", "group", "by", "t1.stuid", ";"], "ru": ["select", "count", "(", "*", ")", ",", "t1.stuid", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1.stuid", "=", "t2.stuid", "group", "by", "t1.stuid", ";"]}, "masked_query": "SELECT count(*) ,  T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid;", "question_pauq": {"ru": "\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0434\u043e\u043c\u0430\u0448\u043d\u0438\u0445 \u0436\u0438\u0432\u043e\u0442\u043d\u044b\u0445 \u0443 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0443\u0447\u0430\u0449\u0435\u0433\u043e\u0441\u044f \u0438 id \u0443\u0447\u0430\u0449\u0435\u0433\u043e\u0441\u044f."}, "question": "Find the number of pets for each student who has any pet and student id.", "kb_id": "pets_1"}, {"id": "D_0081", "source": "spider-dev", "type": "dev", "query": {"ru": "select count(*) ,  t1.stuid from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid group by t1.stuid;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 9, false], null]]}, "select": [false, [[3, [0, [0, 0, false], null]], [0, [0, [0, 1, false], null]]]], "where": [], "groupBy": [[0, 1, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 9, false], null]]}, "select": [false, [[3, [0, [0, 0, false], null]], [0, [0, [0, 1, false], null]]]], "where": [], "groupBy": [[0, 1, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["For", "students", "who", "have", "pets", ",", "how", "many", "pets", "does", "each", "student", "have", "?", "list", "their", "ids", "instead", "of", "names", "."], "ru": ["\u0414\u043b\u044f", "\u0441\u0442\u0443\u0434\u0435\u043d\u0442\u043e\u0432", ",", "\u0443", "\u043a\u043e\u0442\u043e\u0440\u044b\u0445", "\u0435\u0441\u0442\u044c", "\u0434\u043e\u043c\u0430\u0448\u043d\u0438\u0435", "\u0436\u0438\u0432\u043e\u0442\u043d\u044b\u0435", ",", "\u0441\u043a\u043e\u043b\u044c\u043a\u043e", "\u0434\u043e\u043c\u0430\u0448\u043d\u0438\u0445", "\u0436\u0438\u0432\u043e\u0442\u043d\u044b\u0445", "\u0438\u043c\u0435\u0435\u0442", "\u043a\u0430\u0436\u0434\u044b\u0439", "\u0441\u0442\u0443\u0434\u0435\u043d\u0442", "?", "\u043f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0438\u0442\u0435", "\u0438\u0445", "id", "\u0432\u043c\u0435\u0441\u0442\u043e", "\u0438\u043c\u0435\u043d", "."]}, "query_toks": {"en": ["select", "count", "(", "*", ")", ",", "t1.stuid", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1.stuid", "=", "t2.stuid", "group", "by", "t1.stuid", ";"], "ru": ["select", "count", "(", "*", ")", ",", "t1.stuid", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1.stuid", "=", "t2.stuid", "group", "by", "t1.stuid", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "*", ")", ",", "t1.stuid", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1.stuid", "=", "t2.stuid", "group", "by", "t1.stuid", ";"], "ru": ["select", "count", "(", "*", ")", ",", "t1.stuid", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1.stuid", "=", "t2.stuid", "group", "by", "t1.stuid", ";"]}, "masked_query": "select count(*) ,  t1.stuid from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid group by t1.stuid;", "question_pauq": {"ru": "\u0414\u043b\u044f \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u043e\u0432, \u0443 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0435\u0441\u0442\u044c \u0434\u043e\u043c\u0430\u0448\u043d\u0438\u0435 \u0436\u0438\u0432\u043e\u0442\u043d\u044b\u0435, \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0434\u043e\u043c\u0430\u0448\u043d\u0438\u0445 \u0436\u0438\u0432\u043e\u0442\u043d\u044b\u0445 \u0438\u043c\u0435\u0435\u0442 \u043a\u0430\u0436\u0434\u044b\u0439 \u0441\u0442\u0443\u0434\u0435\u043d\u0442? \u043f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0438\u0442\u0435 \u0438\u0445 id \u0432\u043c\u0435\u0441\u0442\u043e \u0438\u043c\u0435\u043d."}, "question": "For students who have pets , how many pets does each student have ? list their ids instead of names .", "kb_id": "pets_1"}, {"id": "D_0082", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 9, false], null]]}, "select": [false, [[0, [0, [0, 3, false], null]], [0, [0, [0, 5, false], null]]]], "where": [], "groupBy": [[0, 1, false]], "having": [[false, 3, [0, [3, 0, false], null], 1.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 9, false], null]]}, "select": [false, [[0, [0, [0, 3, false], null]], [0, [0, [0, 5, false], null]]]], "where": [], "groupBy": [[0, 1, false]], "having": [[false, 3, [0, [3, 0, false], null], 1.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Find", "the", "first", "name", "and", "gender", "of", "student", "who", "have", "more", "than", "one", "pet", "."], "ru": ["\u041d\u0430\u0439\u0434\u0438\u0442\u0435", "\u0438\u043c\u044f", "\u0438", "\u043f\u043e\u043b", "\u0443\u0447\u0435\u043d\u0438\u043a\u0430", ",", "\u0443", "\u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e", "\u0431\u043e\u043b\u0435\u0435", "\u043e\u0434\u043d\u043e\u0433\u043e", "\u0434\u043e\u043c\u0430\u0448\u043d\u0435\u0433\u043e", "\u0436\u0438\u0432\u043e\u0442\u043d\u043e\u0433\u043e", "."]}, "query_toks": {"en": ["select", "t1.fname", ",", "t1.sex", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1.stuid", "=", "t2.stuid", "group", "by", "t1.stuid", "having", "count", "(", "*", ")", ">", "1", ";"], "ru": ["select", "t1.fname", ",", "t1.sex", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1.stuid", "=", "t2.stuid", "group", "by", "t1.stuid", "having", "count", "(", "*", ")", ">", "1", ";"]}, "query_toks_no_values": {"en": ["select", "t1.fname", ",", "t1.sex", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1.stuid", "=", "t2.stuid", "group", "by", "t1.stuid", "having", "count", "(", "*", ")", ">", "1", ";"], "ru": ["select", "t1.fname", ",", "t1.sex", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1.stuid", "=", "t2.stuid", "group", "by", "t1.stuid", "having", "count", "(", "*", ")", ">", "1", ";"]}, "masked_query": "SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1;", "question_pauq": {"ru": "\u041d\u0430\u0439\u0434\u0438\u0442\u0435 \u0438\u043c\u044f \u0438 \u043f\u043e\u043b \u0443\u0447\u0435\u043d\u0438\u043a\u0430, \u0443 \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u0431\u043e\u043b\u0435\u0435 \u043e\u0434\u043d\u043e\u0433\u043e \u0434\u043e\u043c\u0430\u0448\u043d\u0435\u0433\u043e \u0436\u0438\u0432\u043e\u0442\u043d\u043e\u0433\u043e."}, "question": "Find the first name and gender of student who have more than one pet.", "kb_id": "pets_1"}, {"id": "D_0083", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 9, false], null]]}, "select": [false, [[0, [0, [0, 3, false], null]], [0, [0, [0, 5, false], null]]]], "where": [], "groupBy": [[0, 1, false]], "having": [[false, 3, [0, [3, 0, false], null], 1.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 9, false], null]]}, "select": [false, [[0, [0, [0, 3, false], null]], [0, [0, [0, 5, false], null]]]], "where": [], "groupBy": [[0, 1, false]], "having": [[false, 3, [0, [3, 0, false], null], 1.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "first", "name", "and", "gender", "of", "the", "all", "the", "students", "who", "have", "more", "than", "one", "pet", "?"], "ru": ["\u0418\u043c\u044f", "\u0438", "\u043f\u043e\u043b", "\u0432\u0441\u0435\u0445", "\u0443\u0447\u0435\u043d\u0438\u043a\u043e\u0432", ",", "\u0443", "\u043a\u043e\u0442\u043e\u0440\u044b\u0445", "\u0435\u0441\u0442\u044c", "\u0431\u043e\u043b\u0435\u0435", "\u043e\u0434\u043d\u043e\u0433\u043e", "\u0434\u043e\u043c\u0430\u0448\u043d\u0435\u0433\u043e", "\u0436\u0438\u0432\u043e\u0442\u043d\u043e\u0433\u043e", "?"]}, "query_toks": {"en": ["select", "t1.fname", ",", "t1.sex", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1.stuid", "=", "t2.stuid", "group", "by", "t1.stuid", "having", "count", "(", "*", ")", ">", "1", ";"], "ru": ["select", "t1.fname", ",", "t1.sex", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1.stuid", "=", "t2.stuid", "group", "by", "t1.stuid", "having", "count", "(", "*", ")", ">", "1", ";"]}, "query_toks_no_values": {"en": ["select", "t1.fname", ",", "t1.sex", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1.stuid", "=", "t2.stuid", "group", "by", "t1.stuid", "having", "count", "(", "*", ")", ">", "1", ";"], "ru": ["select", "t1.fname", ",", "t1.sex", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1.stuid", "=", "t2.stuid", "group", "by", "t1.stuid", "having", "count", "(", "*", ")", ">", "1", ";"]}, "masked_query": "SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1;", "question_pauq": {"ru": "\u0418\u043c\u044f \u0438 \u043f\u043e\u043b \u0432\u0441\u0435\u0445 \u0443\u0447\u0435\u043d\u0438\u043a\u043e\u0432, \u0443 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0435\u0441\u0442\u044c \u0431\u043e\u043b\u0435\u0435 \u043e\u0434\u043d\u043e\u0433\u043e \u0434\u043e\u043c\u0430\u0448\u043d\u0435\u0433\u043e \u0436\u0438\u0432\u043e\u0442\u043d\u043e\u0433\u043e?"}, "question": "What is the first name and gender of the all the students who have more than one pet?", "kb_id": "pets_1"}, {"id": "D_0084", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  '\u043f\u043e\u043f\u0443\u0433\u0430\u0439';"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0], ["table_unit", 1], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 9, false], null], "and", [false, 2, [0, [0, 11, false], null], [0, 10, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [[false, 2, [0, [0, 13, false], null], 3.0, null], "and", [false, 2, [0, [0, 12, false], null], "\"cat\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0], ["table_unit", 1], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 9, false], null], "and", [false, 2, [0, [0, 11, false], null], [0, 10, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [[false, 2, [0, [0, 13, false], null], 3.0, null], "and", [false, 2, [0, [0, 12, false], null], "\"\u043f\u043e\u043f\u0443\u0433\u0430\u0439\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Find", "the", "last", "name", "of", "the", "student", "who", "has", "a", "cat", "that", "is", "age", "3", "."], "ru": ["\u041d\u0430\u0439\u0434\u0438\u0442\u0435", "\u0444\u0430\u043c\u0438\u043b\u0438\u044e", "\u0443\u0447\u0435\u043d\u0438\u043a\u0430", ",", "\u0443", "\u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e", "\u0435\u0441\u0442\u044c", "\u043f\u043e\u043f\u0443\u0433\u0430\u0439", "\u0442\u0440\u0435\u0445\u043b\u0435\u0442\u043d\u0435\u0433\u043e", "\u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430", "."]}, "query_toks": {"en": ["select", "t1.lname", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1.stuid", "=", "t2.stuid", "join", "pets", "as", "t3", "on", "t3.petid", "=", "t2.petid", "where", "t3.pet_age", "=", "3", "and", "t3.pettype", "=", "\"cat\"", ";"], "ru": ["select", "t1.lname", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1.stuid", "=", "t2.stuid", "join", "pets", "as", "t3", "on", "t3.petid", "=", "t2.petid", "where", "t3.pet_age", "=", "3", "and", "t3.pettype", "=", "\"\u043f\u043e\u043f\u0443\u0433\u0430\u0439\"", ";"]}, "query_toks_no_values": {"en": ["select", "t1.lname", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1.stuid", "=", "t2.stuid", "join", "pets", "as", "t3", "on", "t3.petid", "=", "t2.petid", "where", "t3.pet_age", "=", "3", "and", "t3.pettype", "=", "value", ";"], "ru": ["select", "t1.lname", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1.stuid", "=", "t2.stuid", "join", "pets", "as", "t3", "on", "t3.petid", "=", "t2.petid", "where", "t3.pet_age", "=", "3", "and", "t3.pettype", "=", "value", ";"]}, "masked_query": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat';", "question_pauq": {"ru": "\u041d\u0430\u0439\u0434\u0438\u0442\u0435 \u0444\u0430\u043c\u0438\u043b\u0438\u044e \u0443\u0447\u0435\u043d\u0438\u043a\u0430, \u0443 \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u0435\u0441\u0442\u044c \u043f\u043e\u043f\u0443\u0433\u0430\u0439 \u0442\u0440\u0435\u0445\u043b\u0435\u0442\u043d\u0435\u0433\u043e \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430."}, "question": "Find the last name of the student who has a cat that is age 3.", "kb_id": "pets_1"}, {"id": "D_0085", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  '\u043f\u043e\u043f\u0443\u0433\u0430\u0439';"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0], ["table_unit", 1], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 9, false], null], "and", [false, 2, [0, [0, 11, false], null], [0, 10, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [[false, 2, [0, [0, 13, false], null], 3.0, null], "and", [false, 2, [0, [0, 12, false], null], "\"cat\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0], ["table_unit", 1], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 9, false], null], "and", [false, 2, [0, [0, 11, false], null], [0, 10, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [[false, 2, [0, [0, 13, false], null], 3.0, null], "and", [false, 2, [0, [0, 12, false], null], "\"\u043f\u043e\u043f\u0443\u0433\u0430\u0439\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "last", "name", "of", "the", "student", "who", "has", "a", "cat", "that", "is", "3", "years", "old", "?"], "ru": ["\u041a\u0430\u043a", "\u0437\u043e\u0432\u0443\u0442", "\u0443\u0447\u0435\u043d\u0438\u043a\u0430", ",", "\u0443", "\u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e", "\u0435\u0441\u0442\u044c", "\u043f\u043e\u043f\u0443\u0433\u0430\u0439", "3-\u0445", "\u043b\u0435\u0442\u043d\u0435\u0433\u043e", "\u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430", "?"]}, "query_toks": {"en": ["select", "t1.lname", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1.stuid", "=", "t2.stuid", "join", "pets", "as", "t3", "on", "t3.petid", "=", "t2.petid", "where", "t3.pet_age", "=", "3", "and", "t3.pettype", "=", "\"cat\"", ";"], "ru": ["select", "t1.lname", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1.stuid", "=", "t2.stuid", "join", "pets", "as", "t3", "on", "t3.petid", "=", "t2.petid", "where", "t3.pet_age", "=", "3", "and", "t3.pettype", "=", "\"\u043f\u043e\u043f\u0443\u0433\u0430\u0439\"", ";"]}, "query_toks_no_values": {"en": ["select", "t1.lname", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1.stuid", "=", "t2.stuid", "join", "pets", "as", "t3", "on", "t3.petid", "=", "t2.petid", "where", "t3.pet_age", "=", "3", "and", "t3.pettype", "=", "value", ";"], "ru": ["select", "t1.lname", "from", "student", "as", "t1", "join", "has_pet", "as", "t2", "on", "t1.stuid", "=", "t2.stuid", "join", "pets", "as", "t3", "on", "t3.petid", "=", "t2.petid", "where", "t3.pet_age", "=", "3", "and", "t3.pettype", "=", "value", ";"]}, "masked_query": "SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat';", "question_pauq": {"ru": "\u041a\u0430\u043a \u0437\u043e\u0432\u0443\u0442 \u0443\u0447\u0435\u043d\u0438\u043a\u0430, \u0443 \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u0435\u0441\u0442\u044c \u043f\u043e\u043f\u0443\u0433\u0430\u0439 3-\u0445 \u043b\u0435\u0442\u043d\u0435\u0433\u043e \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430?"}, "question": "What is the last name of the student who has a cat that is 3 years old?", "kb_id": "pets_1"}, {"id": "D_0086", "source": "spider-dev", "type": "dev", "query": {"ru": "select avg(age) from student where stuid not in (select stuid from has_pet);"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[5, [0, [0, 4, false], null]]]], "where": [[true, 8, [0, [0, 1, false], null], {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[5, [0, [0, 4, false], null]]]], "where": [[true, 8, [0, [0, 1, false], null], {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Find", "the", "average", "age", "of", "students", "who", "do", "not", "have", "any", "pet", "."], "ru": ["\u041d\u0430\u0439\u0434\u0438\u0442\u0435", "\u0441\u0440\u0435\u0434\u043d\u0438\u0439", "\u0432\u043e\u0437\u0440\u0430\u0441\u0442", "\u0441\u0442\u0443\u0434\u0435\u043d\u0442\u043e\u0432", ",", "\u0443", "\u043a\u043e\u0442\u043e\u0440\u044b\u0445", "\u043d\u0435\u0442", "\u0434\u043e\u043c\u0430\u0448\u043d\u0438\u0445", "\u0436\u0438\u0432\u043e\u0442\u043d\u044b\u0445", "."]}, "query_toks": {"en": ["select", "avg", "(", "age", ")", "from", "student", "where", "stuid", "not", "in", "(", "select", "stuid", "from", "has_pet", ")", ";"], "ru": ["select", "avg", "(", "age", ")", "from", "student", "where", "stuid", "not", "in", "(", "select", "stuid", "from", "has_pet", ")", ";"]}, "query_toks_no_values": {"en": ["select", "avg", "(", "age", ")", "from", "student", "where", "stuid", "not", "in", "(", "select", "stuid", "from", "has_pet", ")", ";"], "ru": ["select", "avg", "(", "age", ")", "from", "student", "where", "stuid", "not", "in", "(", "select", "stuid", "from", "has_pet", ")", ";"]}, "masked_query": "select avg(age) from student where stuid not in (select stuid from has_pet);", "question_pauq": {"ru": "\u041d\u0430\u0439\u0434\u0438\u0442\u0435 \u0441\u0440\u0435\u0434\u043d\u0438\u0439 \u0432\u043e\u0437\u0440\u0430\u0441\u0442 \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u043e\u0432, \u0443 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043d\u0435\u0442 \u0434\u043e\u043c\u0430\u0448\u043d\u0438\u0445 \u0436\u0438\u0432\u043e\u0442\u043d\u044b\u0445."}, "question": "Find the average age of students who do not have any pet .", "kb_id": "pets_1"}, {"id": "D_0087", "source": "spider-dev", "type": "dev", "query": {"ru": "select avg(age) from student where stuid not in (select stuid from has_pet);"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[5, [0, [0, 4, false], null]]]], "where": [[true, 8, [0, [0, 1, false], null], {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[5, [0, [0, 4, false], null]]]], "where": [[true, 8, [0, [0, 1, false], null], {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "average", "age", "for", "all", "students", "who", "do", "not", "own", "any", "pets", "?"], "ru": ["\u041a\u0430\u043a\u043e\u0432", "\u0441\u0440\u0435\u0434\u043d\u0438\u0439", "\u0432\u043e\u0437\u0440\u0430\u0441\u0442", "\u0432\u0441\u0435\u0445", "\u0443\u0447\u0435\u043d\u0438\u043a\u043e\u0432", ",", "\u0443", "\u043a\u043e\u0442\u043e\u0440\u044b\u0445", "\u043d\u0435\u0442", "\u0434\u043e\u043c\u0430\u0448\u043d\u0438\u0445", "\u0436\u0438\u0432\u043e\u0442\u043d\u044b\u0445", "?"]}, "query_toks": {"en": ["select", "avg", "(", "age", ")", "from", "student", "where", "stuid", "not", "in", "(", "select", "stuid", "from", "has_pet", ")", ";"], "ru": ["select", "avg", "(", "age", ")", "from", "student", "where", "stuid", "not", "in", "(", "select", "stuid", "from", "has_pet", ")", ";"]}, "query_toks_no_values": {"en": ["select", "avg", "(", "age", ")", "from", "student", "where", "stuid", "not", "in", "(", "select", "stuid", "from", "has_pet", ")", ";"], "ru": ["select", "avg", "(", "age", ")", "from", "student", "where", "stuid", "not", "in", "(", "select", "stuid", "from", "has_pet", ")", ";"]}, "masked_query": "select avg(age) from student where stuid not in (select stuid from has_pet);", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0432 \u0441\u0440\u0435\u0434\u043d\u0438\u0439 \u0432\u043e\u0437\u0440\u0430\u0441\u0442 \u0432\u0441\u0435\u0445 \u0443\u0447\u0435\u043d\u0438\u043a\u043e\u0432, \u0443 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043d\u0435\u0442 \u0434\u043e\u043c\u0430\u0448\u043d\u0438\u0445 \u0436\u0438\u0432\u043e\u0442\u043d\u044b\u0445?"}, "question": "What is the average age for all students who do not own any pets ?", "kb_id": "pets_1"}, {"id": "D_0088", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT count(*) FROM CONTINENTS;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["How", "many", "continents", "are", "there", "?"], "ru": ["\u0421\u043a\u043e\u043b\u044c\u043a\u043e", "\u0432\u0441\u0435\u0433\u043e", "\u043a\u043e\u043d\u0442\u0438\u043d\u0435\u043d\u0442\u043e\u0432", "?"]}, "query_toks": {"en": ["select", "count", "(", "*", ")", "from", "continents", ";"], "ru": ["select", "count", "(", "*", ")", "from", "continents", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "*", ")", "from", "continents", ";"], "ru": ["select", "count", "(", "*", ")", "from", "continents", ";"]}, "masked_query": "SELECT count(*) FROM CONTINENTS;", "question_pauq": {"ru": "\u0421\u043a\u043e\u043b\u044c\u043a\u043e \u0432\u0441\u0435\u0433\u043e \u043a\u043e\u043d\u0442\u0438\u043d\u0435\u043d\u0442\u043e\u0432?"}, "question": "How many continents are there?", "kb_id": "car_1"}, {"id": "D_0089", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT count(*) FROM CONTINENTS;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "number", "of", "continents", "?"], "ru": ["\u0421\u043a\u043e\u043b\u044c\u043a\u043e", "\u043a\u043e\u043d\u0442\u0438\u043d\u0435\u043d\u0442\u043e\u0432", "?"]}, "query_toks": {"en": ["select", "count", "(", "*", ")", "from", "continents", ";"], "ru": ["select", "count", "(", "*", ")", "from", "continents", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "*", ")", "from", "continents", ";"], "ru": ["select", "count", "(", "*", ")", "from", "continents", ";"]}, "masked_query": "SELECT count(*) FROM CONTINENTS;", "question_pauq": {"ru": "\u0421\u043a\u043e\u043b\u044c\u043a\u043e \u043a\u043e\u043d\u0442\u0438\u043d\u0435\u043d\u0442\u043e\u0432?"}, "question": "What is the number of continents?", "kb_id": "car_1"}, {"id": "D_0090", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 5, false], null]]}, "select": [false, [[0, [0, [0, 1, false], null]], [0, [0, [0, 2, false], null]], [3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [[0, 1, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 5, false], null]]}, "select": [false, [[0, [0, [0, 1, false], null]], [0, [0, [0, 2, false], null]], [3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [[0, 1, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["How", "many", "countries", "does", "each", "continent", "have", "?", "List", "the", "continent", "id", ",", "continent", "name", "and", "the", "number", "of", "countries", "."], "ru": ["\u0421\u043a\u043e\u043b\u044c\u043a\u043e", "\u0441\u0442\u0440\u0430\u043d", "\u0435\u0441\u0442\u044c", "\u043d\u0430", "\u043a\u0430\u0436\u0434\u043e\u043c", "\u043a\u043e\u043d\u0442\u0438\u043d\u0435\u043d\u0442\u0435", "?", "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c", "id", "\u043a\u043e\u043d\u0442\u0438\u043d\u0435\u043d\u0442\u0430", ",", "\u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435", "\u043a\u043e\u043d\u0442\u0438\u043d\u0435\u043d\u0442\u0430", "\u0438", "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e", "\u0441\u0442\u0440\u0430\u043d", "."]}, "query_toks": {"en": ["select", "t1.contid", ",", "t1.continent", ",", "count", "(", "*", ")", "from", "continents", "as", "t1", "join", "countries", "as", "t2", "on", "t1.contid", "=", "t2.continent", "group", "by", "t1.contid", ";"], "ru": ["select", "t1.contid", ",", "t1.continent", ",", "count", "(", "*", ")", "from", "continents", "as", "t1", "join", "countries", "as", "t2", "on", "t1.contid", "=", "t2.continent", "group", "by", "t1.contid", ";"]}, "query_toks_no_values": {"en": ["select", "t1.contid", ",", "t1.continent", ",", "count", "(", "*", ")", "from", "continents", "as", "t1", "join", "countries", "as", "t2", "on", "t1.contid", "=", "t2.continent", "group", "by", "t1.contid", ";"], "ru": ["select", "t1.contid", ",", "t1.continent", ",", "count", "(", "*", ")", "from", "continents", "as", "t1", "join", "countries", "as", "t2", "on", "t1.contid", "=", "t2.continent", "group", "by", "t1.contid", ";"]}, "masked_query": "SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;", "question_pauq": {"ru": "\u0421\u043a\u043e\u043b\u044c\u043a\u043e \u0441\u0442\u0440\u0430\u043d \u0435\u0441\u0442\u044c \u043d\u0430 \u043a\u0430\u0436\u0434\u043e\u043c \u043a\u043e\u043d\u0442\u0438\u043d\u0435\u043d\u0442\u0435? \u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c id \u043a\u043e\u043d\u0442\u0438\u043d\u0435\u043d\u0442\u0430, \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043a\u043e\u043d\u0442\u0438\u043d\u0435\u043d\u0442\u0430 \u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0442\u0440\u0430\u043d."}, "question": "How many countries does each continent have? List the continent id, continent name and the number of countries.", "kb_id": "car_1"}, {"id": "D_0091", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 5, false], null]]}, "select": [false, [[0, [0, [0, 1, false], null]], [0, [0, [0, 2, false], null]], [3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [[0, 1, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 5, false], null]]}, "select": [false, [[0, [0, [0, 1, false], null]], [0, [0, [0, 2, false], null]], [3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [[0, 1, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["For", "each", "continent", ",", "list", "its", "id", ",", "name", ",", "and", "how", "many", "countries", "it", "has", "?"], "ru": ["\u0414\u043b\u044f", "\u043a\u0430\u0436\u0434\u043e\u0433\u043e", "\u043a\u043e\u043d\u0442\u0438\u043d\u0435\u043d\u0442\u0430", "\u0443\u043a\u0430\u0436\u0438\u0442\u0435", "\u0435\u0433\u043e", "id", ",", "\u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435", "\u0438", "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e", "\u0441\u0442\u0440\u0430\u043d"]}, "query_toks": {"en": ["select", "t1.contid", ",", "t1.continent", ",", "count", "(", "*", ")", "from", "continents", "as", "t1", "join", "countries", "as", "t2", "on", "t1.contid", "=", "t2.continent", "group", "by", "t1.contid", ";"], "ru": ["select", "t1.contid", ",", "t1.continent", ",", "count", "(", "*", ")", "from", "continents", "as", "t1", "join", "countries", "as", "t2", "on", "t1.contid", "=", "t2.continent", "group", "by", "t1.contid", ";"]}, "query_toks_no_values": {"en": ["select", "t1.contid", ",", "t1.continent", ",", "count", "(", "*", ")", "from", "continents", "as", "t1", "join", "countries", "as", "t2", "on", "t1.contid", "=", "t2.continent", "group", "by", "t1.contid", ";"], "ru": ["select", "t1.contid", ",", "t1.continent", ",", "count", "(", "*", ")", "from", "continents", "as", "t1", "join", "countries", "as", "t2", "on", "t1.contid", "=", "t2.continent", "group", "by", "t1.contid", ";"]}, "masked_query": "SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;", "question_pauq": {"ru": "\u0414\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043a\u043e\u043d\u0442\u0438\u043d\u0435\u043d\u0442\u0430 \u0443\u043a\u0430\u0436\u0438\u0442\u0435 \u0435\u0433\u043e id, \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0442\u0440\u0430\u043d"}, "question": "For each continent, list its id, name, and how many countries it has?", "kb_id": "car_1"}, {"id": "D_0092", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT count(*) FROM COUNTRIES;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["How", "many", "countries", "are", "listed", "?"], "ru": ["\u0421\u043a\u043e\u043b\u044c\u043a\u043e", "\u0441\u0442\u0440\u0430\u043d", "\u0443\u043a\u0430\u0437\u0430\u043d\u043e", "\u0432", "\u0441\u043f\u0438\u0441\u043a\u0435", "?"]}, "query_toks": {"en": ["select", "count", "(", "*", ")", "from", "countries", ";"], "ru": ["select", "count", "(", "*", ")", "from", "countries", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "*", ")", "from", "countries", ";"], "ru": ["select", "count", "(", "*", ")", "from", "countries", ";"]}, "masked_query": "SELECT count(*) FROM COUNTRIES;", "question_pauq": {"ru": "\u0421\u043a\u043e\u043b\u044c\u043a\u043e \u0441\u0442\u0440\u0430\u043d \u0443\u043a\u0430\u0437\u0430\u043d\u043e \u0432 \u0441\u043f\u0438\u0441\u043a\u0435?"}, "question": "How many countries are listed?", "kb_id": "car_1"}, {"id": "D_0093", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT count(*) FROM COUNTRIES;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["How", "many", "countries", "exist", "?"], "ru": ["\u0421\u043a\u043e\u043b\u044c\u043a\u043e", "\u0441\u0442\u0440\u0430\u043d", "\u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442", "?"]}, "query_toks": {"en": ["select", "count", "(", "*", ")", "from", "countries", ";"], "ru": ["select", "count", "(", "*", ")", "from", "countries", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "*", ")", "from", "countries", ";"], "ru": ["select", "count", "(", "*", ")", "from", "countries", ";"]}, "masked_query": "SELECT count(*) FROM COUNTRIES;", "question_pauq": {"ru": "\u0421\u043a\u043e\u043b\u044c\u043a\u043e \u0441\u0442\u0440\u0430\u043d \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442?"}, "question": "How many countries exist?", "kb_id": "car_1"}, {"id": "D_0094", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 6, false], null], [0, 11, false], null]]}, "select": [false, [[0, [0, [0, 8, false], null]], [0, [0, [0, 6, false], null]], [3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [[0, 6, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 6, false], null], [0, 11, false], null]]}, "select": [false, [[0, [0, [0, 8, false], null]], [0, [0, [0, 6, false], null]], [3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [[0, 6, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["How", "many", "models", "does", "each", "car", "maker", "produce", "?", "List", "maker", "full", "name", ",", "id", "and", "the", "number", "."], "ru": ["\u0421\u043a\u043e\u043b\u044c\u043a\u043e", "\u043c\u043e\u0434\u0435\u043b\u0435\u0439", "\u0432\u044b\u043f\u0443\u0441\u043a\u0430\u0435\u0442", "\u043a\u0430\u0436\u0434\u044b\u0439", "\u0430\u0432\u0442\u043e\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c", "?", "\u041f\u043e\u043b\u043d\u043e\u0435", "\u0438\u043c\u044f", "\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f", ",", "id", "\u0438", "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e", "\u043c\u043e\u0434\u0435\u043b\u0435\u0439", "."]}, "query_toks": {"en": ["select", "t1.fullname", ",", "t1.id", ",", "count", "(", "*", ")", "from", "car_makers", "as", "t1", "join", "model_list", "as", "t2", "on", "t1.id", "=", "t2.maker", "group", "by", "t1.id", ";"], "ru": ["select", "t1.fullname", ",", "t1.id", ",", "count", "(", "*", ")", "from", "car_makers", "as", "t1", "join", "model_list", "as", "t2", "on", "t1.id", "=", "t2.maker", "group", "by", "t1.id", ";"]}, "query_toks_no_values": {"en": ["select", "t1.fullname", ",", "t1.id", ",", "count", "(", "*", ")", "from", "car_makers", "as", "t1", "join", "model_list", "as", "t2", "on", "t1.id", "=", "t2.maker", "group", "by", "t1.id", ";"], "ru": ["select", "t1.fullname", ",", "t1.id", ",", "count", "(", "*", ")", "from", "car_makers", "as", "t1", "join", "model_list", "as", "t2", "on", "t1.id", "=", "t2.maker", "group", "by", "t1.id", ";"]}, "masked_query": "SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;", "question_pauq": {"ru": "\u0421\u043a\u043e\u043b\u044c\u043a\u043e \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0432\u044b\u043f\u0443\u0441\u043a\u0430\u0435\u0442 \u043a\u0430\u0436\u0434\u044b\u0439 \u0430\u0432\u0442\u043e\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c? \u041f\u043e\u043b\u043d\u043e\u0435 \u0438\u043c\u044f \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f, id \u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u043e\u0434\u0435\u043b\u0435\u0439."}, "question": "How many models does each car maker produce? List maker full name, id and the number.", "kb_id": "car_1"}, {"id": "D_0095", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 6, false], null], [0, 11, false], null]]}, "select": [false, [[0, [0, [0, 8, false], null]], [0, [0, [0, 6, false], null]], [3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [[0, 6, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 6, false], null], [0, 11, false], null]]}, "select": [false, [[0, [0, [0, 8, false], null]], [0, [0, [0, 6, false], null]], [3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [[0, 6, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "full", "name", "of", "each", "car", "maker", ",", "along", "with", "its", "id", "and", "how", "many", "models", "it", "produces", "?"], "ru": ["\u041a\u0430\u043a\u043e\u0435", "\u043f\u043e\u043b\u043d\u043e\u0435", "\u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435", "\u043a\u0430\u0436\u0434\u043e\u0433\u043e", "\u0430\u0432\u0442\u043e\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f", ",", "\u0430", "\u0442\u0430\u043a\u0436\u0435", "\u0435\u0433\u043e", "id", "\u0438", "\u0441\u043a\u043e\u043b\u044c\u043a\u043e", "\u043c\u043e\u0434\u0435\u043b\u0435\u0439", "\u043e\u043d", "\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442", "?"]}, "query_toks": {"en": ["select", "t1.fullname", ",", "t1.id", ",", "count", "(", "*", ")", "from", "car_makers", "as", "t1", "join", "model_list", "as", "t2", "on", "t1.id", "=", "t2.maker", "group", "by", "t1.id", ";"], "ru": ["select", "t1.fullname", ",", "t1.id", ",", "count", "(", "*", ")", "from", "car_makers", "as", "t1", "join", "model_list", "as", "t2", "on", "t1.id", "=", "t2.maker", "group", "by", "t1.id", ";"]}, "query_toks_no_values": {"en": ["select", "t1.fullname", ",", "t1.id", ",", "count", "(", "*", ")", "from", "car_makers", "as", "t1", "join", "model_list", "as", "t2", "on", "t1.id", "=", "t2.maker", "group", "by", "t1.id", ";"], "ru": ["select", "t1.fullname", ",", "t1.id", ",", "count", "(", "*", ")", "from", "car_makers", "as", "t1", "join", "model_list", "as", "t2", "on", "t1.id", "=", "t2.maker", "group", "by", "t1.id", ";"]}, "masked_query": "SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0435 \u043f\u043e\u043b\u043d\u043e\u0435 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0430\u0432\u0442\u043e\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f, \u0430 \u0442\u0430\u043a\u0436\u0435 \u0435\u0433\u043e id \u0438 \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u043e\u043d \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442?"}, "question": "What is the full name of each car maker, along with its id and how many models it produces?", "kb_id": "car_1"}, {"id": "D_0096", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 4], ["table_unit", 5]], "conds": [[false, 2, [0, [0, 13, false], null], [0, 16, false], null]]}, "select": [false, [[0, [0, [0, 14, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["asc", [[0, [0, 20, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 4], ["table_unit", 5]], "conds": [[false, 2, [0, [0, 13, false], null], [0, 16, false], null]]}, "select": [false, [[0, [0, [0, 14, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["asc", [[0, [0, 20, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Which", "model", "of", "the", "car", "has", "the", "minimum", "horsepower", "?"], "ru": ["\u041a\u0430\u043a\u0430\u044f", "\u043c\u043e\u0434\u0435\u043b\u044c", "\u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f", "\u0438\u043c\u0435\u0435\u0442", "\u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u0443\u044e", "\u043c\u043e\u0449\u043d\u043e\u0441\u0442\u044c", "?"]}, "query_toks": {"en": ["select", "t1.model", "from", "car_names", "as", "t1", "join", "cars_data", "as", "t2", "on", "t1.makeid", "=", "t2.id", "order", "by", "t2.horsepower", "asc", "limit", "1", ";"], "ru": ["select", "t1.model", "from", "car_names", "as", "t1", "join", "cars_data", "as", "t2", "on", "t1.makeid", "=", "t2.id", "order", "by", "t2.horsepower", "asc", "limit", "1", ";"]}, "query_toks_no_values": {"en": ["select", "t1.model", "from", "car_names", "as", "t1", "join", "cars_data", "as", "t2", "on", "t1.makeid", "=", "t2.id", "order", "by", "t2.horsepower", "asc", "limit", "1", ";"], "ru": ["select", "t1.model", "from", "car_names", "as", "t1", "join", "cars_data", "as", "t2", "on", "t1.makeid", "=", "t2.id", "order", "by", "t2.horsepower", "asc", "limit", "1", ";"]}, "masked_query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;", "question_pauq": {"ru": "\u041a\u0430\u043a\u0430\u044f \u043c\u043e\u0434\u0435\u043b\u044c \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f \u0438\u043c\u0435\u0435\u0442 \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u0443\u044e \u043c\u043e\u0449\u043d\u043e\u0441\u0442\u044c?"}, "question": "Which model of the car has the minimum horsepower?", "kb_id": "car_1"}, {"id": "D_0097", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 4], ["table_unit", 5]], "conds": [[false, 2, [0, [0, 13, false], null], [0, 16, false], null]]}, "select": [false, [[0, [0, [0, 14, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["asc", [[0, [0, 20, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 4], ["table_unit", 5]], "conds": [[false, 2, [0, [0, 13, false], null], [0, 16, false], null]]}, "select": [false, [[0, [0, [0, 14, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["asc", [[0, [0, 20, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "model", "of", "the", "car", "with", "the", "smallest", "amount", "of", "horsepower", "?"], "ru": ["\u041a\u0430\u043a\u0430\u044f", "\u043c\u043e\u0434\u0435\u043b\u044c", "\u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f", "\u0441", "\u043d\u0430\u0438\u043c\u0435\u043d\u044c\u0448\u0435\u0439", "\u043c\u043e\u0449\u043d\u043e\u0441\u0442\u044c\u044e", "?"]}, "query_toks": {"en": ["select", "t1.model", "from", "car_names", "as", "t1", "join", "cars_data", "as", "t2", "on", "t1.makeid", "=", "t2.id", "order", "by", "t2.horsepower", "asc", "limit", "1", ";"], "ru": ["select", "t1.model", "from", "car_names", "as", "t1", "join", "cars_data", "as", "t2", "on", "t1.makeid", "=", "t2.id", "order", "by", "t2.horsepower", "asc", "limit", "1", ";"]}, "query_toks_no_values": {"en": ["select", "t1.model", "from", "car_names", "as", "t1", "join", "cars_data", "as", "t2", "on", "t1.makeid", "=", "t2.id", "order", "by", "t2.horsepower", "asc", "limit", "1", ";"], "ru": ["select", "t1.model", "from", "car_names", "as", "t1", "join", "cars_data", "as", "t2", "on", "t1.makeid", "=", "t2.id", "order", "by", "t2.horsepower", "asc", "limit", "1", ";"]}, "masked_query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;", "question_pauq": {"ru": "\u041a\u0430\u043a\u0430\u044f \u043c\u043e\u0434\u0435\u043b\u044c \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f \u0441 \u043d\u0430\u0438\u043c\u0435\u043d\u044c\u0448\u0435\u0439 \u043c\u043e\u0449\u043d\u043e\u0441\u0442\u044c\u044e?"}, "question": "What is the model of the car with the smallest amount of horsepower?", "kb_id": "car_1"}, {"id": "D_0098", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA);"}, "sql": {"en": {"from": {"table_units": [["table_unit", 4], ["table_unit", 5]], "conds": [[false, 2, [0, [0, 13, false], null], [0, 16, false], null]]}, "select": [false, [[0, [0, [0, 14, false], null]]]], "where": [[false, 4, [0, [0, 21, false], null], {"from": {"table_units": [["table_unit", 5]], "conds": []}, "select": [false, [[5, [0, [0, 21, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 4], ["table_unit", 5]], "conds": [[false, 2, [0, [0, 13, false], null], [0, 16, false], null]]}, "select": [false, [[0, [0, [0, 14, false], null]]]], "where": [[false, 4, [0, [0, 21, false], null], {"from": {"table_units": [["table_unit", 5]], "conds": []}, "select": [false, [[5, [0, [0, 21, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Find", "the", "model", "of", "the", "car", "whose", "weight", "is", "below", "the", "average", "weight", "."], "ru": ["\u041d\u0430\u0439\u0434\u0438\u0442\u0435", "\u043c\u043e\u0434\u0435\u043b\u044c", "\u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f", ",", "\u0432\u0435\u0441", "\u043a\u043e\u0442\u043e\u0440\u043e\u0439", "\u043c\u0435\u043d\u044c\u0448\u0435", "\u0441\u0440\u0435\u0434\u043d\u0435\u0433\u043e", "."]}, "query_toks": {"en": ["select", "t1.model", "from", "car_names", "as", "t1", "join", "cars_data", "as", "t2", "on", "t1.makeid", "=", "t2.id", "where", "t2.weight", "<", "(", "select", "avg", "(", "weight", ")", "from", "cars_data", ")", ";"], "ru": ["select", "t1.model", "from", "car_names", "as", "t1", "join", "cars_data", "as", "t2", "on", "t1.makeid", "=", "t2.id", "where", "t2.weight", "<", "(", "select", "avg", "(", "weight", ")", "from", "cars_data", ")", ";"]}, "query_toks_no_values": {"en": ["select", "t1.model", "from", "car_names", "as", "t1", "join", "cars_data", "as", "t2", "on", "t1.makeid", "=", "t2.id", "where", "t2.weight", "<", "(", "select", "avg", "(", "weight", ")", "from", "cars_data", ")", ";"], "ru": ["select", "t1.model", "from", "car_names", "as", "t1", "join", "cars_data", "as", "t2", "on", "t1.makeid", "=", "t2.id", "where", "t2.weight", "<", "(", "select", "avg", "(", "weight", ")", "from", "cars_data", ")", ";"]}, "masked_query": "SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA);", "question_pauq": {"ru": "\u041d\u0430\u0439\u0434\u0438\u0442\u0435 \u043c\u043e\u0434\u0435\u043b\u044c \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f, \u0432\u0435\u0441 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u043c\u0435\u043d\u044c\u0448\u0435 \u0441\u0440\u0435\u0434\u043d\u0435\u0433\u043e."}, "question": "Find the model of the car whose weight is below the average weight.", "kb_id": "car_1"}, {"id": "D_0099", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA);"}, "sql": {"en": {"from": {"table_units": [["table_unit", 4], ["table_unit", 5]], "conds": [[false, 2, [0, [0, 13, false], null], [0, 16, false], null]]}, "select": [false, [[0, [0, [0, 14, false], null]]]], "where": [[false, 4, [0, [0, 21, false], null], {"from": {"table_units": [["table_unit", 5]], "conds": []}, "select": [false, [[5, [0, [0, 21, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 4], ["table_unit", 5]], "conds": [[false, 2, [0, [0, 13, false], null], [0, 16, false], null]]}, "select": [false, [[0, [0, [0, 14, false], null]]]], "where": [[false, 4, [0, [0, 21, false], null], {"from": {"table_units": [["table_unit", 5]], "conds": []}, "select": [false, [[5, [0, [0, 21, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "model", "for", "the", "car", "with", "a", "weight", "smaller", "than", "the", "average", "?"], "ru": ["\u041a\u0430\u043a\u0430\u044f", "\u043c\u043e\u0434\u0435\u043b\u044c", "\u043c\u0430\u0448\u0438\u043d\u044b", "\u0438\u043c\u0435\u0435\u0442", "\u043c\u0430\u0441\u0441\u0443", "\u043c\u0435\u043d\u044c\u0448\u0435", "\u0441\u0440\u0435\u0434\u043d\u0435\u0439", "?"]}, "query_toks": {"en": ["select", "t1.model", "from", "car_names", "as", "t1", "join", "cars_data", "as", "t2", "on", "t1.makeid", "=", "t2.id", "where", "t2.weight", "<", "(", "select", "avg", "(", "weight", ")", "from", "cars_data", ")", ";"], "ru": ["select", "t1.model", "from", "car_names", "as", "t1", "join", "cars_data", "as", "t2", "on", "t1.makeid", "=", "t2.id", "where", "t2.weight", "<", "(", "select", "avg", "(", "weight", ")", "from", "cars_data", ")", ";"]}, "query_toks_no_values": {"en": ["select", "t1.model", "from", "car_names", "as", "t1", "join", "cars_data", "as", "t2", "on", "t1.makeid", "=", "t2.id", "where", "t2.weight", "<", "(", "select", "avg", "(", "weight", ")", "from", "cars_data", ")", ";"], "ru": ["select", "t1.model", "from", "car_names", "as", "t1", "join", "cars_data", "as", "t2", "on", "t1.makeid", "=", "t2.id", "where", "t2.weight", "<", "(", "select", "avg", "(", "weight", ")", "from", "cars_data", ")", ";"]}, "masked_query": "SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA);", "question_pauq": {"ru": "\u041a\u0430\u043a\u0430\u044f \u043c\u043e\u0434\u0435\u043b\u044c \u043c\u0430\u0448\u0438\u043d\u044b \u0438\u043c\u0435\u0435\u0442 \u043c\u0430\u0441\u0441\u0443 \u043c\u0435\u043d\u044c\u0448\u0435 \u0441\u0440\u0435\u0434\u043d\u0435\u0439?"}, "question": "What is the model for the car with a weight smaller than the average?", "kb_id": "car_1"}, {"id": "D_0100", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2], ["table_unit", 3], ["table_unit", 4], ["table_unit", 5]], "conds": [[false, 2, [0, [0, 6, false], null], [0, 11, false], null], "and", [false, 2, [0, [0, 12, false], null], [0, 14, false], null], "and", [false, 2, [0, [0, 13, false], null], [0, 16, false], null]]}, "select": [true, [[0, [0, [0, 7, false], null]]]], "where": [[false, 2, [0, [0, 23, false], null], "\"1970\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2], ["table_unit", 3], ["table_unit", 4], ["table_unit", 5]], "conds": [[false, 2, [0, [0, 6, false], null], [0, 11, false], null], "and", [false, 2, [0, [0, 12, false], null], [0, 14, false], null], "and", [false, 2, [0, [0, 13, false], null], [0, 16, false], null]]}, "select": [true, [[0, [0, [0, 7, false], null]]]], "where": [[false, 2, [0, [0, 23, false], null], "\"1970\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Find", "the", "name", "of", "the", "makers", "that", "produced", "some", "cars", "in", "the", "year", "of", "1970", "?"], "ru": ["\u041d\u0430\u0439\u0434\u0438\u0442\u0435", "\u0438\u043c\u0435\u043d\u0430", "\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u0435\u0439", ",", "\u043a\u043e\u0442\u043e\u0440\u044b\u0435", "\u0432\u044b\u043f\u0443\u0441\u0442\u0438\u043b\u0438", "\u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e", "\u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439", "\u0432", "1970", "\u0433\u043e\u0434\u0443"]}, "query_toks": {"en": ["select", "distinct", "t1.maker", "from", "car_makers", "as", "t1", "join", "model_list", "as", "t2", "on", "t1.id", "=", "t2.maker", "join", "car_names", "as", "t3", "on", "t2.model", "=", "t3.model", "join", "cars_data", "as", "t4", "on", "t3.makeid", "=", "t4.id", "where", "t4.year", "=", "\"1970\"", ";"], "ru": ["select", "distinct", "t1.maker", "from", "car_makers", "as", "t1", "join", "model_list", "as", "t2", "on", "t1.id", "=", "t2.maker", "join", "car_names", "as", "t3", "on", "t2.model", "=", "t3.model", "join", "cars_data", "as", "t4", "on", "t3.makeid", "=", "t4.id", "where", "t4.year", "=", "\"1970\"", ";"]}, "query_toks_no_values": {"en": ["select", "distinct", "t1.maker", "from", "car_makers", "as", "t1", "join", "model_list", "as", "t2", "on", "t1.id", "=", "t2.maker", "join", "car_names", "as", "t3", "on", "t2.model", "=", "t3.model", "join", "cars_data", "as", "t4", "on", "t3.makeid", "=", "t4.id", "where", "t4.year", "=", "value", ";"], "ru": ["select", "distinct", "t1.maker", "from", "car_makers", "as", "t1", "join", "model_list", "as", "t2", "on", "t1.id", "=", "t2.maker", "join", "car_names", "as", "t3", "on", "t2.model", "=", "t3.model", "join", "cars_data", "as", "t4", "on", "t3.makeid", "=", "t4.id", "where", "t4.year", "=", "value", ";"]}, "masked_query": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';", "question_pauq": {"ru": "\u041d\u0430\u0439\u0434\u0438\u0442\u0435 \u0438\u043c\u0435\u043d\u0430 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u0435\u0439, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0432\u044b\u043f\u0443\u0441\u0442\u0438\u043b\u0438 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439 \u0432 1970 \u0433\u043e\u0434\u0443"}, "question": "Find the name of the makers that produced some cars in the year of 1970?", "kb_id": "car_1"}, {"id": "D_0101", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2], ["table_unit", 3], ["table_unit", 4], ["table_unit", 5]], "conds": [[false, 2, [0, [0, 6, false], null], [0, 11, false], null], "and", [false, 2, [0, [0, 12, false], null], [0, 14, false], null], "and", [false, 2, [0, [0, 13, false], null], [0, 16, false], null]]}, "select": [true, [[0, [0, [0, 7, false], null]]]], "where": [[false, 2, [0, [0, 23, false], null], "\"1970\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2], ["table_unit", 3], ["table_unit", 4], ["table_unit", 5]], "conds": [[false, 2, [0, [0, 6, false], null], [0, 11, false], null], "and", [false, 2, [0, [0, 12, false], null], [0, 14, false], null], "and", [false, 2, [0, [0, 13, false], null], [0, 16, false], null]]}, "select": [true, [[0, [0, [0, 7, false], null]]]], "where": [[false, 2, [0, [0, 23, false], null], "\"1970\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "name", "of", "the", "different", "car", "makers", "who", "produced", "a", "car", "in", "1970", "?"], "ru": ["\u041a\u0430\u043a", "\u043d\u0430\u0437\u044b\u0432\u0430\u043b\u0438\u0441\u044c", "\u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0435", "\u0430\u0432\u0442\u043e\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u0438", ",", "\u043a\u043e\u0442\u043e\u0440\u044b\u0435", "\u0432\u044b\u043f\u0443\u0441\u0442\u0438\u043b\u0438", "\u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044c", "\u0432", "1970", "\u0433\u043e\u0434\u0443", "?"]}, "query_toks": {"en": ["select", "distinct", "t1.maker", "from", "car_makers", "as", "t1", "join", "model_list", "as", "t2", "on", "t1.id", "=", "t2.maker", "join", "car_names", "as", "t3", "on", "t2.model", "=", "t3.model", "join", "cars_data", "as", "t4", "on", "t3.makeid", "=", "t4.id", "where", "t4.year", "=", "\"1970\"", ";"], "ru": ["select", "distinct", "t1.maker", "from", "car_makers", "as", "t1", "join", "model_list", "as", "t2", "on", "t1.id", "=", "t2.maker", "join", "car_names", "as", "t3", "on", "t2.model", "=", "t3.model", "join", "cars_data", "as", "t4", "on", "t3.makeid", "=", "t4.id", "where", "t4.year", "=", "\"1970\"", ";"]}, "query_toks_no_values": {"en": ["select", "distinct", "t1.maker", "from", "car_makers", "as", "t1", "join", "model_list", "as", "t2", "on", "t1.id", "=", "t2.maker", "join", "car_names", "as", "t3", "on", "t2.model", "=", "t3.model", "join", "cars_data", "as", "t4", "on", "t3.makeid", "=", "t4.id", "where", "t4.year", "=", "value", ";"], "ru": ["select", "distinct", "t1.maker", "from", "car_makers", "as", "t1", "join", "model_list", "as", "t2", "on", "t1.id", "=", "t2.maker", "join", "car_names", "as", "t3", "on", "t2.model", "=", "t3.model", "join", "cars_data", "as", "t4", "on", "t3.makeid", "=", "t4.id", "where", "t4.year", "=", "value", ";"]}, "masked_query": "SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';", "question_pauq": {"ru": "\u041a\u0430\u043a \u043d\u0430\u0437\u044b\u0432\u0430\u043b\u0438\u0441\u044c \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0435 \u0430\u0432\u0442\u043e\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0432\u044b\u043f\u0443\u0441\u0442\u0438\u043b\u0438 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044c \u0432 1970 \u0433\u043e\u0434\u0443?"}, "question": "What is the name of the different car makers who produced a car in 1970?", "kb_id": "car_1"}, {"id": "D_0102", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);"}, "sql": {"en": {"from": {"table_units": [["table_unit", 5], ["table_unit", 4]], "conds": [[false, 2, [0, [0, 16, false], null], [0, 13, false], null]]}, "select": [false, [[0, [0, [0, 15, false], null]], [0, [0, [0, 23, false], null]]]], "where": [[false, 2, [0, [0, 23, false], null], {"from": {"table_units": [["table_unit", 5]], "conds": []}, "select": [false, [[2, [0, [0, 23, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 5], ["table_unit", 4]], "conds": [[false, 2, [0, [0, 16, false], null], [0, 13, false], null]]}, "select": [false, [[0, [0, [0, 15, false], null]], [0, [0, [0, 23, false], null]]]], "where": [[false, 2, [0, [0, 23, false], null], {"from": {"table_units": [["table_unit", 5]], "conds": []}, "select": [false, [[2, [0, [0, 23, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Find", "the", "make", "and", "production", "time", "of", "the", "cars", "that", "were", "produced", "in", "the", "earliest", "year", "?"], "ru": ["\u0423\u0437\u043d\u0430\u0442\u044c", "\u043c\u0430\u0440\u043a\u0443", "\u0438", "\u0432\u0440\u0435\u043c\u044f", "\u0432\u044b\u043f\u0443\u0441\u043a\u0430", "\u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439", ",", "\u0432\u044b\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0445", "\u0432", "\u0441\u0430\u043c\u044b\u0439", "\u0440\u0430\u043d\u043d\u0438\u0439", "\u0433\u043e\u0434"]}, "query_toks": {"en": ["select", "t2.make", ",", "t1.year", "from", "cars_data", "as", "t1", "join", "car_names", "as", "t2", "on", "t1.id", "=", "t2.makeid", "where", "t1.year", "=", "(", "select", "min", "(", "year", ")", "from", "cars_data", ")", ";"], "ru": ["select", "t2.make", ",", "t1.year", "from", "cars_data", "as", "t1", "join", "car_names", "as", "t2", "on", "t1.id", "=", "t2.makeid", "where", "t1.year", "=", "(", "select", "min", "(", "year", ")", "from", "cars_data", ")", ";"]}, "query_toks_no_values": {"en": ["select", "t2.make", ",", "t1.year", "from", "cars_data", "as", "t1", "join", "car_names", "as", "t2", "on", "t1.id", "=", "t2.makeid", "where", "t1.year", "=", "(", "select", "min", "(", "year", ")", "from", "cars_data", ")", ";"], "ru": ["select", "t2.make", ",", "t1.year", "from", "cars_data", "as", "t1", "join", "car_names", "as", "t2", "on", "t1.id", "=", "t2.makeid", "where", "t1.year", "=", "(", "select", "min", "(", "year", ")", "from", "cars_data", ")", ";"]}, "masked_query": "SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);", "question_pauq": {"ru": "\u0423\u0437\u043d\u0430\u0442\u044c \u043c\u0430\u0440\u043a\u0443 \u0438 \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u0443\u0441\u043a\u0430 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439, \u0432\u044b\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0445 \u0432 \u0441\u0430\u043c\u044b\u0439 \u0440\u0430\u043d\u043d\u0438\u0439 \u0433\u043e\u0434"}, "question": "Find the make and production time of the cars that were produced in the earliest year?", "kb_id": "car_1"}, {"id": "D_0103", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);"}, "sql": {"en": {"from": {"table_units": [["table_unit", 5], ["table_unit", 4]], "conds": [[false, 2, [0, [0, 16, false], null], [0, 13, false], null]]}, "select": [false, [[0, [0, [0, 15, false], null]], [0, [0, [0, 23, false], null]]]], "where": [[false, 2, [0, [0, 23, false], null], {"from": {"table_units": [["table_unit", 5]], "conds": []}, "select": [false, [[2, [0, [0, 23, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 5], ["table_unit", 4]], "conds": [[false, 2, [0, [0, 16, false], null], [0, 13, false], null]]}, "select": [false, [[0, [0, [0, 15, false], null]], [0, [0, [0, 23, false], null]]]], "where": [[false, 2, [0, [0, 23, false], null], {"from": {"table_units": [["table_unit", 5]], "conds": []}, "select": [false, [[2, [0, [0, 23, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "maker", "of", "the", "carr", "produced", "in", "the", "earliest", "year", "and", "what", "year", "was", "it", "?"], "ru": ["\u041a\u0430\u043a\u043e\u0439", "\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c", "\u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439", "\u0432\u044b\u043f\u0443\u0441\u0442\u0438\u043b", "\u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044c", "\u043f\u0435\u0440\u0432\u044b\u043c", "\u0438", "\u0432", "\u043a\u0430\u043a\u043e\u043c", "\u0433\u043e\u0434\u0443", "\u044d\u0442\u043e", "\u0431\u044b\u043b\u043e", "?"]}, "query_toks": {"en": ["select", "t2.make", ",", "t1.year", "from", "cars_data", "as", "t1", "join", "car_names", "as", "t2", "on", "t1.id", "=", "t2.makeid", "where", "t1.year", "=", "(", "select", "min", "(", "year", ")", "from", "cars_data", ")", ";"], "ru": ["select", "t2.make", ",", "t1.year", "from", "cars_data", "as", "t1", "join", "car_names", "as", "t2", "on", "t1.id", "=", "t2.makeid", "where", "t1.year", "=", "(", "select", "min", "(", "year", ")", "from", "cars_data", ")", ";"]}, "query_toks_no_values": {"en": ["select", "t2.make", ",", "t1.year", "from", "cars_data", "as", "t1", "join", "car_names", "as", "t2", "on", "t1.id", "=", "t2.makeid", "where", "t1.year", "=", "(", "select", "min", "(", "year", ")", "from", "cars_data", ")", ";"], "ru": ["select", "t2.make", ",", "t1.year", "from", "cars_data", "as", "t1", "join", "car_names", "as", "t2", "on", "t1.id", "=", "t2.makeid", "where", "t1.year", "=", "(", "select", "min", "(", "year", ")", "from", "cars_data", ")", ";"]}, "masked_query": "SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0439 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439 \u0432\u044b\u043f\u0443\u0441\u0442\u0438\u043b \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044c \u043f\u0435\u0440\u0432\u044b\u043c \u0438 \u0432 \u043a\u0430\u043a\u043e\u043c \u0433\u043e\u0434\u0443 \u044d\u0442\u043e \u0431\u044b\u043b\u043e?"}, "question": "What is the maker of the carr produced in the earliest year and what year was it?", "kb_id": "car_1"}, {"id": "D_0104", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 3], ["table_unit", 4], ["table_unit", 5]], "conds": [[false, 2, [0, [0, 12, false], null], [0, 14, false], null], "and", [false, 2, [0, [0, 13, false], null], [0, 16, false], null]]}, "select": [true, [[0, [0, [0, 12, false], null]]]], "where": [[false, 3, [0, [0, 23, false], null], 1980.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 3], ["table_unit", 4], ["table_unit", 5]], "conds": [[false, 2, [0, [0, 12, false], null], [0, 14, false], null], "and", [false, 2, [0, [0, 13, false], null], [0, 16, false], null]]}, "select": [true, [[0, [0, [0, 12, false], null]]]], "where": [[false, 3, [0, [0, 23, false], null], 1980.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Which", "distinct", "car", "models", "are", "the", "produced", "after", "1980", "?"], "ru": ["\u041a\u0430\u043a\u0438\u0435", "\u043c\u043e\u0434\u0435\u043b\u0438", "\u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439", "\u0432\u044b\u043f\u0443\u0441\u043a\u0430\u044e\u0442\u0441\u044f", "\u043f\u043e\u0441\u043b\u0435", "1980", "\u0433\u043e\u0434\u0430", "?"]}, "query_toks": {"en": ["select", "distinct", "t1.model", "from", "model_list", "as", "t1", "join", "car_names", "as", "t2", "on", "t1.model", "=", "t2.model", "join", "cars_data", "as", "t3", "on", "t2.makeid", "=", "t3.id", "where", "t3.year", ">", "1980", ";"], "ru": ["select", "distinct", "t1.model", "from", "model_list", "as", "t1", "join", "car_names", "as", "t2", "on", "t1.model", "=", "t2.model", "join", "cars_data", "as", "t3", "on", "t2.makeid", "=", "t3.id", "where", "t3.year", ">", "1980", ";"]}, "query_toks_no_values": {"en": ["select", "distinct", "t1.model", "from", "model_list", "as", "t1", "join", "car_names", "as", "t2", "on", "t1.model", "=", "t2.model", "join", "cars_data", "as", "t3", "on", "t2.makeid", "=", "t3.id", "where", "t3.year", ">", "1980", ";"], "ru": ["select", "distinct", "t1.model", "from", "model_list", "as", "t1", "join", "car_names", "as", "t2", "on", "t1.model", "=", "t2.model", "join", "cars_data", "as", "t3", "on", "t2.makeid", "=", "t3.id", "where", "t3.year", ">", "1980", ";"]}, "masked_query": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;", "question_pauq": {"ru": "\u041a\u0430\u043a\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0438 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439 \u0432\u044b\u043f\u0443\u0441\u043a\u0430\u044e\u0442\u0441\u044f \u043f\u043e\u0441\u043b\u0435 1980 \u0433\u043e\u0434\u0430?"}, "question": "Which distinct car models are the produced after 1980?", "kb_id": "car_1"}, {"id": "D_0105", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 3], ["table_unit", 4], ["table_unit", 5]], "conds": [[false, 2, [0, [0, 12, false], null], [0, 14, false], null], "and", [false, 2, [0, [0, 13, false], null], [0, 16, false], null]]}, "select": [true, [[0, [0, [0, 12, false], null]]]], "where": [[false, 3, [0, [0, 23, false], null], 1980.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 3], ["table_unit", 4], ["table_unit", 5]], "conds": [[false, 2, [0, [0, 12, false], null], [0, 14, false], null], "and", [false, 2, [0, [0, 13, false], null], [0, 16, false], null]]}, "select": [true, [[0, [0, [0, 12, false], null]]]], "where": [[false, 3, [0, [0, 23, false], null], 1980.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "the", "different", "models", "for", "the", "cards", "produced", "after", "1980", "?"], "ru": ["\u041a\u0430\u043a\u0438\u0435", "\u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0442", "\u043c\u043e\u0434\u0435\u043b\u0438", "\u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439", ",", "\u0432\u044b\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0445", "\u043f\u043e\u0441\u043b\u0435", "1980", "\u0433\u043e\u0434\u0430", "?"]}, "query_toks": {"en": ["select", "distinct", "t1.model", "from", "model_list", "as", "t1", "join", "car_names", "as", "t2", "on", "t1.model", "=", "t2.model", "join", "cars_data", "as", "t3", "on", "t2.makeid", "=", "t3.id", "where", "t3.year", ">", "1980", ";"], "ru": ["select", "distinct", "t1.model", "from", "model_list", "as", "t1", "join", "car_names", "as", "t2", "on", "t1.model", "=", "t2.model", "join", "cars_data", "as", "t3", "on", "t2.makeid", "=", "t3.id", "where", "t3.year", ">", "1980", ";"]}, "query_toks_no_values": {"en": ["select", "distinct", "t1.model", "from", "model_list", "as", "t1", "join", "car_names", "as", "t2", "on", "t1.model", "=", "t2.model", "join", "cars_data", "as", "t3", "on", "t2.makeid", "=", "t3.id", "where", "t3.year", ">", "1980", ";"], "ru": ["select", "distinct", "t1.model", "from", "model_list", "as", "t1", "join", "car_names", "as", "t2", "on", "t1.model", "=", "t2.model", "join", "cars_data", "as", "t3", "on", "t2.makeid", "=", "t3.id", "where", "t3.year", ">", "1980", ";"]}, "masked_query": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;", "question_pauq": {"ru": "\u041a\u0430\u043a\u0438\u0435 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0442 \u043c\u043e\u0434\u0435\u043b\u0438 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439, \u0432\u044b\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0445 \u043f\u043e\u0441\u043b\u0435 1980 \u0433\u043e\u0434\u0430?"}, "question": "What are the different models for the cards produced after 1980?", "kb_id": "car_1"}, {"id": "D_0106", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0], ["table_unit", 1], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 5, false], null], "and", [false, 2, [0, [0, 3, false], null], [0, 9, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]], [3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [[0, 2, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0], ["table_unit", 1], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 5, false], null], "and", [false, 2, [0, [0, 3, false], null], [0, 9, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]], [3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [[0, 2, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["How", "many", "car", "makers", "are", "there", "in", "each", "continents", "?", "List", "the", "continent", "name", "and", "the", "count", "."], "ru": ["\u0421\u043a\u043e\u043b\u044c\u043a\u043e", "\u0430\u0432\u0442\u043e\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u0435\u0439", "\u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442", "\u043d\u0430", "\u043a\u0430\u0436\u0434\u043e\u043c", "\u043a\u043e\u043d\u0442\u0438\u043d\u0435\u043d\u0442\u0435", "?", "\u0423\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c", "\u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435", "\u043a\u043e\u043d\u0442\u0438\u043d\u0435\u043d\u0442\u0430", "\u0438", "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e", "."]}, "query_toks": {"en": ["select", "t1.continent", ",", "count", "(", "*", ")", "from", "continents", "as", "t1", "join", "countries", "as", "t2", "on", "t1.contid", "=", "t2.continent", "join", "car_makers", "as", "t3", "on", "t2.countryid", "=", "t3.country", "group", "by", "t1.continent", ";"], "ru": ["select", "t1.continent", ",", "count", "(", "*", ")", "from", "continents", "as", "t1", "join", "countries", "as", "t2", "on", "t1.contid", "=", "t2.continent", "join", "car_makers", "as", "t3", "on", "t2.countryid", "=", "t3.country", "group", "by", "t1.continent", ";"]}, "query_toks_no_values": {"en": ["select", "t1.continent", ",", "count", "(", "*", ")", "from", "continents", "as", "t1", "join", "countries", "as", "t2", "on", "t1.contid", "=", "t2.continent", "join", "car_makers", "as", "t3", "on", "t2.countryid", "=", "t3.country", "group", "by", "t1.continent", ";"], "ru": ["select", "t1.continent", ",", "count", "(", "*", ")", "from", "continents", "as", "t1", "join", "countries", "as", "t2", "on", "t1.contid", "=", "t2.continent", "join", "car_makers", "as", "t3", "on", "t2.countryid", "=", "t3.country", "group", "by", "t1.continent", ";"]}, "masked_query": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;", "question_pauq": {"ru": "\u0421\u043a\u043e\u043b\u044c\u043a\u043e \u0430\u0432\u0442\u043e\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u0435\u0439 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442 \u043d\u0430 \u043a\u0430\u0436\u0434\u043e\u043c \u043a\u043e\u043d\u0442\u0438\u043d\u0435\u043d\u0442\u0435? \u0423\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043a\u043e\u043d\u0442\u0438\u043d\u0435\u043d\u0442\u0430 \u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e."}, "question": "How many car makers are there in each continents? List the continent name and the count.", "kb_id": "car_1"}, {"id": "D_0107", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0], ["table_unit", 1], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 5, false], null], "and", [false, 2, [0, [0, 3, false], null], [0, 9, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]], [3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [[0, 2, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0], ["table_unit", 1], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 5, false], null], "and", [false, 2, [0, [0, 3, false], null], [0, 9, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]], [3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [[0, 2, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "name", "of", "each", "continent", "and", "how", "many", "car", "makers", "are", "there", "in", "each", "one", "?"], "ru": ["\u041a\u0430\u043a", "\u043d\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f", "\u043a\u0430\u0436\u0434\u044b\u0439", "\u043a\u043e\u043d\u0442\u0438\u043d\u0435\u043d\u0442", "\u0438", "\u0441\u043a\u043e\u043b\u044c\u043a\u043e", "\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u0435\u0439", "\u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439", "\u043d\u0430", "\u043a\u0430\u0436\u0434\u043e\u043c", "\u0438\u0437", "\u043d\u0438\u0445", "?"]}, "query_toks": {"en": ["select", "t1.continent", ",", "count", "(", "*", ")", "from", "continents", "as", "t1", "join", "countries", "as", "t2", "on", "t1.contid", "=", "t2.continent", "join", "car_makers", "as", "t3", "on", "t2.countryid", "=", "t3.country", "group", "by", "t1.continent", ";"], "ru": ["select", "t1.continent", ",", "count", "(", "*", ")", "from", "continents", "as", "t1", "join", "countries", "as", "t2", "on", "t1.contid", "=", "t2.continent", "join", "car_makers", "as", "t3", "on", "t2.countryid", "=", "t3.country", "group", "by", "t1.continent", ";"]}, "query_toks_no_values": {"en": ["select", "t1.continent", ",", "count", "(", "*", ")", "from", "continents", "as", "t1", "join", "countries", "as", "t2", "on", "t1.contid", "=", "t2.continent", "join", "car_makers", "as", "t3", "on", "t2.countryid", "=", "t3.country", "group", "by", "t1.continent", ";"], "ru": ["select", "t1.continent", ",", "count", "(", "*", ")", "from", "continents", "as", "t1", "join", "countries", "as", "t2", "on", "t1.contid", "=", "t2.continent", "join", "car_makers", "as", "t3", "on", "t2.countryid", "=", "t3.country", "group", "by", "t1.continent", ";"]}, "masked_query": "SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;", "question_pauq": {"ru": "\u041a\u0430\u043a \u043d\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u043a\u0430\u0436\u0434\u044b\u0439 \u043a\u043e\u043d\u0442\u0438\u043d\u0435\u043d\u0442 \u0438 \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u0435\u0439 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439 \u043d\u0430 \u043a\u0430\u0436\u0434\u043e\u043c \u0438\u0437 \u043d\u0438\u0445?"}, "question": "What is the name of each continent and how many car makers are there in each one?", "kb_id": "car_1"}, {"id": "D_0108", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 9, false], null], [0, 3, false], null]]}, "select": [false, [[0, [0, [0, 4, false], null]]]], "where": [], "groupBy": [[0, 9, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 9, false], null], [0, 3, false], null]]}, "select": [false, [[0, [0, [0, 4, false], null]]]], "where": [], "groupBy": [[0, 9, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Which", "of", "the", "countries", "has", "the", "most", "car", "makers", "?", "List", "the", "country", "name", "."], "ru": ["\u0412", "\u043a\u0430\u043a\u043e\u0439", "\u0438\u0437", "\u0441\u0442\u0440\u0430\u043d", "\u0431\u043e\u043b\u044c\u0448\u0435", "\u0432\u0441\u0435\u0433\u043e", "\u0430\u0432\u0442\u043e\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u0435\u0439", "?", "\u0423\u043a\u0430\u0436\u0438\u0442\u0435", "\u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435", "\u0441\u0442\u0440\u0430\u043d\u044b", "."]}, "query_toks": {"en": ["select", "t2.countryname", "from", "car_makers", "as", "t1", "join", "countries", "as", "t2", "on", "t1.country", "=", "t2.countryid", "group", "by", "t1.country", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"], "ru": ["select", "t2.countryname", "from", "car_makers", "as", "t1", "join", "countries", "as", "t2", "on", "t1.country", "=", "t2.countryid", "group", "by", "t1.country", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"]}, "query_toks_no_values": {"en": ["select", "t2.countryname", "from", "car_makers", "as", "t1", "join", "countries", "as", "t2", "on", "t1.country", "=", "t2.countryid", "group", "by", "t1.country", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"], "ru": ["select", "t2.countryname", "from", "car_makers", "as", "t1", "join", "countries", "as", "t2", "on", "t1.country", "=", "t2.countryid", "group", "by", "t1.country", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"]}, "masked_query": "SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;", "question_pauq": {"ru": "\u0412 \u043a\u0430\u043a\u043e\u0439 \u0438\u0437 \u0441\u0442\u0440\u0430\u043d \u0431\u043e\u043b\u044c\u0448\u0435 \u0432\u0441\u0435\u0433\u043e \u0430\u0432\u0442\u043e\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u0435\u0439? \u0423\u043a\u0430\u0436\u0438\u0442\u0435 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u0441\u0442\u0440\u0430\u043d\u044b."}, "question": "Which of the countries has the most car makers? List the country name.", "kb_id": "car_1"}, {"id": "D_0109", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 9, false], null], [0, 3, false], null]]}, "select": [false, [[0, [0, [0, 4, false], null]]]], "where": [], "groupBy": [[0, 9, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 9, false], null], [0, 3, false], null]]}, "select": [false, [[0, [0, [0, 4, false], null]]]], "where": [], "groupBy": [[0, 9, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "name", "of", "the", "country", "with", "the", "most", "car", "makers", "?"], "ru": ["\u041a\u0430\u043a", "\u043d\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f", "\u0441\u0442\u0440\u0430\u043d\u0430", "\u0441", "\u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0438\u043c", "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c", "\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u0435\u0439", "\u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439", "?"]}, "query_toks": {"en": ["select", "t2.countryname", "from", "car_makers", "as", "t1", "join", "countries", "as", "t2", "on", "t1.country", "=", "t2.countryid", "group", "by", "t1.country", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"], "ru": ["select", "t2.countryname", "from", "car_makers", "as", "t1", "join", "countries", "as", "t2", "on", "t1.country", "=", "t2.countryid", "group", "by", "t1.country", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"]}, "query_toks_no_values": {"en": ["select", "t2.countryname", "from", "car_makers", "as", "t1", "join", "countries", "as", "t2", "on", "t1.country", "=", "t2.countryid", "group", "by", "t1.country", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"], "ru": ["select", "t2.countryname", "from", "car_makers", "as", "t1", "join", "countries", "as", "t2", "on", "t1.country", "=", "t2.countryid", "group", "by", "t1.country", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"]}, "masked_query": "SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;", "question_pauq": {"ru": "\u041a\u0430\u043a \u043d\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0441\u0442\u0440\u0430\u043d\u0430 \u0441 \u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0438\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u0435\u0439 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439?"}, "question": "What is the name of the country with the most car makers?", "kb_id": "car_1"}, {"id": "D_0110", "source": "spider-dev", "type": "dev", "query": {"ru": "select count(*) ,  t2.fullname from model_list as t1 join car_makers as t2 on t1.maker  =  t2.id group by t2.id;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 3], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 11, false], null], [0, 6, false], null]]}, "select": [false, [[3, [0, [0, 0, false], null]], [0, [0, [0, 8, false], null]]]], "where": [], "groupBy": [[0, 6, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 3], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 11, false], null], [0, 6, false], null]]}, "select": [false, [[3, [0, [0, 0, false], null]], [0, [0, [0, 8, false], null]]]], "where": [], "groupBy": [[0, 6, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["How", "many", "car", "models", "are", "produced", "by", "each", "maker", "?", "Only", "list", "the", "count", "and", "the", "maker", "full", "name", "."], "ru": ["\u0421\u043a\u043e\u043b\u044c\u043a\u043e", "\u043c\u043e\u0434\u0435\u043b\u0435\u0439", "\u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439", "\u0432\u044b\u043f\u0443\u0441\u043a\u0430\u0435\u0442", "\u043a\u0430\u0436\u0434\u044b\u0439", "\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c", "?", "\u0423\u043a\u0430\u0436\u0438\u0442\u0435", "\u0442\u043e\u043b\u044c\u043a\u043e", "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e", "\u0438", "\u043f\u043e\u043b\u043d\u043e\u0435", "\u0438\u043c\u044f", "\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f", "."]}, "query_toks": {"en": ["select", "count", "(", "*", ")", ",", "t2.fullname", "from", "model_list", "as", "t1", "join", "car_makers", "as", "t2", "on", "t1.maker", "=", "t2.id", "group", "by", "t2.id", ";"], "ru": ["select", "count", "(", "*", ")", ",", "t2.fullname", "from", "model_list", "as", "t1", "join", "car_makers", "as", "t2", "on", "t1.maker", "=", "t2.id", "group", "by", "t2.id", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "*", ")", ",", "t2.fullname", "from", "model_list", "as", "t1", "join", "car_makers", "as", "t2", "on", "t1.maker", "=", "t2.id", "group", "by", "t2.id", ";"], "ru": ["select", "count", "(", "*", ")", ",", "t2.fullname", "from", "model_list", "as", "t1", "join", "car_makers", "as", "t2", "on", "t1.maker", "=", "t2.id", "group", "by", "t2.id", ";"]}, "masked_query": "select count(*) ,  t2.fullname from model_list as t1 join car_makers as t2 on t1.maker  =  t2.id group by t2.id;", "question_pauq": {"ru": "\u0421\u043a\u043e\u043b\u044c\u043a\u043e \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439 \u0432\u044b\u043f\u0443\u0441\u043a\u0430\u0435\u0442 \u043a\u0430\u0436\u0434\u044b\u0439 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c? \u0423\u043a\u0430\u0436\u0438\u0442\u0435 \u0442\u043e\u043b\u044c\u043a\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0438 \u043f\u043e\u043b\u043d\u043e\u0435 \u0438\u043c\u044f \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f."}, "question": "How many car models are produced by each maker ? Only list the count and the maker full name .", "kb_id": "car_1"}, {"id": "D_0111", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT Count(*) ,  T2.FullName ,  T2.id FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id GROUP BY T2.id;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 3], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 11, false], null], [0, 6, false], null]]}, "select": [false, [[3, [0, [0, 0, false], null]], [0, [0, [0, 8, false], null]], [0, [0, [0, 6, false], null]]]], "where": [], "groupBy": [[0, 6, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 3], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 11, false], null], [0, 6, false], null]]}, "select": [false, [[3, [0, [0, 0, false], null]], [0, [0, [0, 8, false], null]], [0, [0, [0, 6, false], null]]]], "where": [], "groupBy": [[0, 6, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "number", "of", "car", "models", "that", "are", "produced", "by", "each", "maker", "and", "what", "is", "the", "id", "and", "full", "name", "of", "each", "maker", "?"], "ru": ["\u041a\u0430\u043a\u043e\u0435", "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e", "\u043c\u043e\u0434\u0435\u043b\u0435\u0439", "\u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439", "\u0432\u044b\u043f\u0443\u0441\u043a\u0430\u0435\u0442", "\u043a\u0430\u0436\u0434\u044b\u0439", "\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c", ",", "\u0438", "\u043a\u0430\u043a\u043e\u0432\u044b", "id", "\u0438", "\u043f\u043e\u043b\u043d\u043e\u0435", "\u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435", "\u043a\u0430\u0436\u0434\u043e\u0433\u043e", "\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f", "?"]}, "query_toks": {"en": ["select", "count", "(", "*", ")", ",", "t2.fullname", ",", "t2.id", "from", "model_list", "as", "t1", "join", "car_makers", "as", "t2", "on", "t1.maker", "=", "t2.id", "group", "by", "t2.id", ";"], "ru": ["select", "count", "(", "*", ")", ",", "t2.fullname", ",", "t2.id", "from", "model_list", "as", "t1", "join", "car_makers", "as", "t2", "on", "t1.maker", "=", "t2.id", "group", "by", "t2.id", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "*", ")", ",", "t2.fullname", ",", "t2.id", "from", "model_list", "as", "t1", "join", "car_makers", "as", "t2", "on", "t1.maker", "=", "t2.id", "group", "by", "t2.id", ";"], "ru": ["select", "count", "(", "*", ")", ",", "t2.fullname", ",", "t2.id", "from", "model_list", "as", "t1", "join", "car_makers", "as", "t2", "on", "t1.maker", "=", "t2.id", "group", "by", "t2.id", ";"]}, "masked_query": "SELECT Count(*) ,  T2.FullName ,  T2.id FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id GROUP BY T2.id;", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439 \u0432\u044b\u043f\u0443\u0441\u043a\u0430\u0435\u0442 \u043a\u0430\u0436\u0434\u044b\u0439 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c, \u0438 \u043a\u0430\u043a\u043e\u0432\u044b id \u0438 \u043f\u043e\u043b\u043d\u043e\u0435 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f?"}, "question": "What is the number of car models that are produced by each maker and what is the id and full name of each maker?", "kb_id": "car_1"}, {"id": "D_0112", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';"}, "sql": {"en": {"from": {"table_units": [["table_unit", 5], ["table_unit", 4]], "conds": [[false, 2, [0, [0, 16, false], null], [0, 13, false], null]]}, "select": [false, [[0, [0, [0, 22, false], null]]]], "where": [[false, 2, [0, [0, 15, false], null], "\"amc hornet sportabout (sw)\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 5], ["table_unit", 4]], "conds": [[false, 2, [0, [0, 16, false], null], [0, 13, false], null]]}, "select": [false, [[0, [0, [0, 22, false], null]]]], "where": [[false, 2, [0, [0, 15, false], null], "\"amc hornet sportabout (sw)\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "accelerate", "of", "the", "car", "make", "amc", "hornet", "sportabout", "(", "sw", ")", "?"], "ru": ["\u0421", "\u043a\u0430\u043a\u0438\u043c", "\u0443\u0441\u043a\u043e\u0440\u0435\u043d\u0438\u0435\u043c", "\u0440\u0430\u0437\u0433\u043e\u043d\u044f\u0435\u0442\u0441\u044f", "\u043c\u043e\u0434\u0435\u043b\u044c", "amc", "hornet", "sportabout", "(", "sw", ")", "?"]}, "query_toks": {"en": ["select", "t1.accelerate", "from", "cars_data", "as", "t1", "join", "car_names", "as", "t2", "on", "t1.id", "=", "t2.makeid", "where", "t2.make", "=", "\"amc hornet sportabout (sw)\"", ";"], "ru": ["select", "t1.accelerate", "from", "cars_data", "as", "t1", "join", "car_names", "as", "t2", "on", "t1.id", "=", "t2.makeid", "where", "t2.make", "=", "\"amc hornet sportabout (sw)\"", ";"]}, "query_toks_no_values": {"en": ["select", "t1.accelerate", "from", "cars_data", "as", "t1", "join", "car_names", "as", "t2", "on", "t1.id", "=", "t2.makeid", "where", "t2.make", "=", "value", ";"], "ru": ["select", "t1.accelerate", "from", "cars_data", "as", "t1", "join", "car_names", "as", "t2", "on", "t1.id", "=", "t2.makeid", "where", "t2.make", "=", "value", ";"]}, "masked_query": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';", "question_pauq": {"ru": "\u0421 \u043a\u0430\u043a\u0438\u043c \u0443\u0441\u043a\u043e\u0440\u0435\u043d\u0438\u0435\u043c \u0440\u0430\u0437\u0433\u043e\u043d\u044f\u0435\u0442\u0441\u044f \u043c\u043e\u0434\u0435\u043b\u044c amc hornet sportabout (sw)?"}, "question": "What is the accelerate of the car make amc hornet sportabout (sw)?", "kb_id": "car_1"}, {"id": "D_0113", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';"}, "sql": {"en": {"from": {"table_units": [["table_unit", 5], ["table_unit", 4]], "conds": [[false, 2, [0, [0, 16, false], null], [0, 13, false], null]]}, "select": [false, [[0, [0, [0, 22, false], null]]]], "where": [[false, 2, [0, [0, 15, false], null], "\"amc hornet sportabout (sw)\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 5], ["table_unit", 4]], "conds": [[false, 2, [0, [0, 16, false], null], [0, 13, false], null]]}, "select": [false, [[0, [0, [0, 22, false], null]]]], "where": [[false, 2, [0, [0, 15, false], null], "\"amc hornet sportabout (sw)\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["How", "much", "does", "the", "car", "accelerate", "that", "makes", "amc", "hornet", "sportabout", "(", "sw", ")", "?"], "ru": ["\u041d\u0430\u0441\u043a\u043e\u043b\u044c\u043a\u043e", "\u043c\u043e\u0436\u0435\u0442", "\u0440\u0430\u0437\u043e\u0433\u043d\u0430\u0442\u044c\u0441\u044f", "\u043c\u043e\u0434\u0435\u043b\u044c", "amc", "hornet", "sportabout", "(", "sw", ")", "?"]}, "query_toks": {"en": ["select", "t1.accelerate", "from", "cars_data", "as", "t1", "join", "car_names", "as", "t2", "on", "t1.id", "=", "t2.makeid", "where", "t2.make", "=", "\"amc hornet sportabout (sw)\"", ";"], "ru": ["select", "t1.accelerate", "from", "cars_data", "as", "t1", "join", "car_names", "as", "t2", "on", "t1.id", "=", "t2.makeid", "where", "t2.make", "=", "\"amc hornet sportabout (sw)\"", ";"]}, "query_toks_no_values": {"en": ["select", "t1.accelerate", "from", "cars_data", "as", "t1", "join", "car_names", "as", "t2", "on", "t1.id", "=", "t2.makeid", "where", "t2.make", "=", "value", ";"], "ru": ["select", "t1.accelerate", "from", "cars_data", "as", "t1", "join", "car_names", "as", "t2", "on", "t1.id", "=", "t2.makeid", "where", "t2.make", "=", "value", ";"]}, "masked_query": "SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';", "question_pauq": {"ru": "\u041d\u0430\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043c\u043e\u0436\u0435\u0442 \u0440\u0430\u0437\u043e\u0433\u043d\u0430\u0442\u044c\u0441\u044f \u043c\u043e\u0434\u0435\u043b\u044c amc hornet sportabout (sw)?"}, "question": "How much does the car accelerate that makes amc hornet sportabout (sw)?", "kb_id": "car_1"}, {"id": "D_0114", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  '\u041a\u0438\u0442\u0430\u0439';"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 9, false], null], [0, 3, false], null]]}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 4, false], null], "\"france\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 9, false], null], [0, 3, false], null]]}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 4, false], null], "\"\u041a\u0438\u0442\u0430\u0439\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["How", "many", "car", "makers", "are", "there", "in", "france", "?"], "ru": ["\u0421\u043a\u043e\u043b\u044c\u043a\u043e", "\u0430\u0432\u0442\u043e\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u0435\u0439", "\u0432", "\u041a\u0438\u0442\u0430\u0435", "?"]}, "query_toks": {"en": ["select", "count", "(", "*", ")", "from", "car_makers", "as", "t1", "join", "countries", "as", "t2", "on", "t1.country", "=", "t2.countryid", "where", "t2.countryname", "=", "\"france\"", ";"], "ru": ["select", "count", "(", "*", ")", "from", "car_makers", "as", "t1", "join", "countries", "as", "t2", "on", "t1.country", "=", "t2.countryid", "where", "t2.countryname", "=", "\"\u041a\u0438\u0442\u0430\u0439\"", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "*", ")", "from", "car_makers", "as", "t1", "join", "countries", "as", "t2", "on", "t1.country", "=", "t2.countryid", "where", "t2.countryname", "=", "value", ";"], "ru": ["select", "count", "(", "*", ")", "from", "car_makers", "as", "t1", "join", "countries", "as", "t2", "on", "t1.country", "=", "t2.countryid", "where", "t2.countryname", "=", "value", ";"]}, "masked_query": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';", "question_pauq": {"ru": "\u0421\u043a\u043e\u043b\u044c\u043a\u043e \u0430\u0432\u0442\u043e\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u0435\u0439 \u0432 \u041a\u0438\u0442\u0430\u0435?"}, "question": "How many car makers are there in france?", "kb_id": "car_1"}, {"id": "D_0115", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  '\u041a\u0438\u0442\u0430\u0439';"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 9, false], null], [0, 3, false], null]]}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 4, false], null], "\"france\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 9, false], null], [0, 3, false], null]]}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 4, false], null], "\"\u041a\u0438\u0442\u0430\u0439\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "number", "of", "makers", "of", "care", "in", "France", "?"], "ru": ["\u0421\u043a\u043e\u043b\u044c\u043a\u043e", "\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u0435\u0439", "\u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439", "\u0435\u0441\u0442\u044c", "\u0432", "\u041a\u0438\u0442\u0430\u0435", "?"]}, "query_toks": {"en": ["select", "count", "(", "*", ")", "from", "car_makers", "as", "t1", "join", "countries", "as", "t2", "on", "t1.country", "=", "t2.countryid", "where", "t2.countryname", "=", "\"france\"", ";"], "ru": ["select", "count", "(", "*", ")", "from", "car_makers", "as", "t1", "join", "countries", "as", "t2", "on", "t1.country", "=", "t2.countryid", "where", "t2.countryname", "=", "\"\u041a\u0438\u0442\u0430\u0439\"", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "*", ")", "from", "car_makers", "as", "t1", "join", "countries", "as", "t2", "on", "t1.country", "=", "t2.countryid", "where", "t2.countryname", "=", "value", ";"], "ru": ["select", "count", "(", "*", ")", "from", "car_makers", "as", "t1", "join", "countries", "as", "t2", "on", "t1.country", "=", "t2.countryid", "where", "t2.countryname", "=", "value", ";"]}, "masked_query": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';", "question_pauq": {"ru": "\u0421\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u0435\u0439 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439 \u0435\u0441\u0442\u044c \u0432 \u041a\u0438\u0442\u0430\u0435?"}, "question": "What is the number of makers of care in France?", "kb_id": "car_1"}, {"id": "D_0116", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  '\u0427\u0435\u0445\u0438\u044f';"}, "sql": {"en": {"from": {"table_units": [["table_unit", 3], ["table_unit", 2], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 11, false], null], [0, 6, false], null], "and", [false, 2, [0, [0, 9, false], null], [0, 3, false], null]]}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 4, false], null], "\"usa\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 3], ["table_unit", 2], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 11, false], null], [0, 6, false], null], "and", [false, 2, [0, [0, 9, false], null], [0, 3, false], null]]}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 4, false], null], "\"\u0427\u0435\u0445\u0438\u044f\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["How", "many", "car", "models", "are", "produced", "in", "the", "usa", "?"], "ru": ["\u0421\u043a\u043e\u043b\u044c\u043a\u043e", "\u043c\u043e\u0434\u0435\u043b\u0435\u0439", "\u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439", "\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0441\u044f", "\u0432", "\u0427\u0435\u0445\u0438\u0438", "?"]}, "query_toks": {"en": ["select", "count", "(", "*", ")", "from", "model_list", "as", "t1", "join", "car_makers", "as", "t2", "on", "t1.maker", "=", "t2.id", "join", "countries", "as", "t3", "on", "t2.country", "=", "t3.countryid", "where", "t3.countryname", "=", "\"usa\"", ";"], "ru": ["select", "count", "(", "*", ")", "from", "model_list", "as", "t1", "join", "car_makers", "as", "t2", "on", "t1.maker", "=", "t2.id", "join", "countries", "as", "t3", "on", "t2.country", "=", "t3.countryid", "where", "t3.countryname", "=", "\"\u0427\u0435\u0445\u0438\u044f\"", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "*", ")", "from", "model_list", "as", "t1", "join", "car_makers", "as", "t2", "on", "t1.maker", "=", "t2.id", "join", "countries", "as", "t3", "on", "t2.country", "=", "t3.countryid", "where", "t3.countryname", "=", "value", ";"], "ru": ["select", "count", "(", "*", ")", "from", "model_list", "as", "t1", "join", "car_makers", "as", "t2", "on", "t1.maker", "=", "t2.id", "join", "countries", "as", "t3", "on", "t2.country", "=", "t3.countryid", "where", "t3.countryname", "=", "value", ";"]}, "masked_query": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';", "question_pauq": {"ru": "\u0421\u043a\u043e\u043b\u044c\u043a\u043e \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u0432 \u0427\u0435\u0445\u0438\u0438?"}, "question": "How many car models are produced in the usa?", "kb_id": "car_1"}, {"id": "D_0117", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  '\u0427\u0435\u0445\u0438\u044f';"}, "sql": {"en": {"from": {"table_units": [["table_unit", 3], ["table_unit", 2], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 11, false], null], [0, 6, false], null], "and", [false, 2, [0, [0, 9, false], null], [0, 3, false], null]]}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 4, false], null], "\"usa\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 3], ["table_unit", 2], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 11, false], null], [0, 6, false], null], "and", [false, 2, [0, [0, 9, false], null], [0, 3, false], null]]}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 4, false], null], "\"\u0427\u0435\u0445\u0438\u044f\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "count", "of", "the", "car", "models", "produced", "in", "the", "United", "States", "?"], "ru": ["\u0421\u043a\u043e\u043b\u044c\u043a\u043e", "\u043c\u043e\u0434\u0435\u043b\u0435\u0439", "\u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439", "\u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043d\u043e", "\u0432", "\u0427\u0435\u0445\u0438\u0438", "?"]}, "query_toks": {"en": ["select", "count", "(", "*", ")", "from", "model_list", "as", "t1", "join", "car_makers", "as", "t2", "on", "t1.maker", "=", "t2.id", "join", "countries", "as", "t3", "on", "t2.country", "=", "t3.countryid", "where", "t3.countryname", "=", "\"usa\"", ";"], "ru": ["select", "count", "(", "*", ")", "from", "model_list", "as", "t1", "join", "car_makers", "as", "t2", "on", "t1.maker", "=", "t2.id", "join", "countries", "as", "t3", "on", "t2.country", "=", "t3.countryid", "where", "t3.countryname", "=", "\"\u0427\u0435\u0445\u0438\u044f\"", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "*", ")", "from", "model_list", "as", "t1", "join", "car_makers", "as", "t2", "on", "t1.maker", "=", "t2.id", "join", "countries", "as", "t3", "on", "t2.country", "=", "t3.countryid", "where", "t3.countryname", "=", "value", ";"], "ru": ["select", "count", "(", "*", ")", "from", "model_list", "as", "t1", "join", "car_makers", "as", "t2", "on", "t1.maker", "=", "t2.id", "join", "countries", "as", "t3", "on", "t2.country", "=", "t3.countryid", "where", "t3.countryname", "=", "value", ";"]}, "masked_query": "SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';", "question_pauq": {"ru": "\u0421\u043a\u043e\u043b\u044c\u043a\u043e \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439 \u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043d\u043e \u0432 \u0427\u0435\u0445\u0438\u0438?"}, "question": "What is the count of the car models produced in the United States?", "kb_id": "car_1"}, {"id": "D_0118", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 5]], "conds": []}, "select": [false, [[5, [0, [0, 17, false], null]]]], "where": [[false, 2, [0, [0, 18, false], null], 4.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 5]], "conds": []}, "select": [false, [[5, [0, [0, 17, false], null]]]], "where": [[false, 2, [0, [0, 18, false], null], 4.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "average", "miles", "per", "gallon", "(", "mpg", ")", "of", "the", "cars", "with", "4", "cylinders", "?"], "ru": ["\u0421\u043a\u043e\u043b\u044c\u043a\u043e", "\u0432", "\u0441\u0440\u0435\u0434\u043d\u0435\u043c", "\u0440\u0430\u0441\u0445\u043e\u0434\u0443\u0435\u0442\u0441\u044f", "\u043a\u043c", "\u043d\u0430", "\u043b\u0438\u0442\u0440", "(", "\u043a\u043c/\u043b", ")", "\u0443", "\u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439", "\u0441", "4", "\u0446\u0438\u043b\u0438\u043d\u0434\u0440\u0430\u043c\u0438", "?"]}, "query_toks": {"en": ["select", "avg", "(", "mpg", ")", "from", "cars_data", "where", "cylinders", "=", "4", ";"], "ru": ["select", "avg", "(", "mpg", ")", "from", "cars_data", "where", "cylinders", "=", "4", ";"]}, "query_toks_no_values": {"en": ["select", "avg", "(", "mpg", ")", "from", "cars_data", "where", "cylinders", "=", "4", ";"], "ru": ["select", "avg", "(", "mpg", ")", "from", "cars_data", "where", "cylinders", "=", "4", ";"]}, "masked_query": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;", "question_pauq": {"ru": "\u0421\u043a\u043e\u043b\u044c\u043a\u043e \u0432 \u0441\u0440\u0435\u0434\u043d\u0435\u043c \u0440\u0430\u0441\u0445\u043e\u0434\u0443\u0435\u0442\u0441\u044f \u043a\u043c \u043d\u0430 \u043b\u0438\u0442\u0440 (\u043a\u043c/\u043b) \u0443 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439 \u0441 4 \u0446\u0438\u043b\u0438\u043d\u0434\u0440\u0430\u043c\u0438?"}, "question": "What is the average miles per gallon(mpg) of the cars with 4 cylinders?", "kb_id": "car_1"}, {"id": "D_0119", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 5]], "conds": []}, "select": [false, [[5, [0, [0, 17, false], null]]]], "where": [[false, 2, [0, [0, 18, false], null], 4.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 5]], "conds": []}, "select": [false, [[5, [0, [0, 17, false], null]]]], "where": [[false, 2, [0, [0, 18, false], null], 4.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "average", "miles", "per", "gallon", "of", "all", "the", "cards", "with", "4", "cylinders", "?"], "ru": ["\u041a\u0430\u043a\u043e\u0435", "\u0441\u0440\u0435\u0434\u043d\u0435\u0435", "\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435", "\u043a\u0438\u043b\u043e\u043c\u0435\u0442\u0440\u043e\u0432", "\u043d\u0430", "\u043b\u0438\u0442\u0440", "\u0434\u043b\u044f", "\u0432\u0441\u0435\u0445", "\u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439", "\u0441", "4", "\u0446\u0438\u043b\u0438\u043d\u0434\u0440\u0430\u043c\u0438", "?"]}, "query_toks": {"en": ["select", "avg", "(", "mpg", ")", "from", "cars_data", "where", "cylinders", "=", "4", ";"], "ru": ["select", "avg", "(", "mpg", ")", "from", "cars_data", "where", "cylinders", "=", "4", ";"]}, "query_toks_no_values": {"en": ["select", "avg", "(", "mpg", ")", "from", "cars_data", "where", "cylinders", "=", "4", ";"], "ru": ["select", "avg", "(", "mpg", ")", "from", "cars_data", "where", "cylinders", "=", "4", ";"]}, "masked_query": "SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0435 \u0441\u0440\u0435\u0434\u043d\u0435\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043a\u0438\u043b\u043e\u043c\u0435\u0442\u0440\u043e\u0432 \u043d\u0430 \u043b\u0438\u0442\u0440 \u0434\u043b\u044f \u0432\u0441\u0435\u0445 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439 \u0441 4 \u0446\u0438\u043b\u0438\u043d\u0434\u0440\u0430\u043c\u0438?"}, "question": "What is the average miles per gallon of all the cards with 4 cylinders?", "kb_id": "car_1"}, {"id": "D_0120", "source": "spider-dev", "type": "dev", "query": {"ru": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 5]], "conds": []}, "select": [false, [[2, [0, [0, 21, false], null]]]], "where": [[false, 2, [0, [0, 18, false], null], 8.0, null], "and", [false, 2, [0, [0, 23, false], null], 1974.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 5]], "conds": []}, "select": [false, [[2, [0, [0, 21, false], null]]]], "where": [[false, 2, [0, [0, 18, false], null], 8.0, null], "and", [false, 2, [0, [0, 23, false], null], 1974.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "smallest", "weight", "of", "the", "car", "produced", "with", "8", "cylinders", "on", "1974", "?"], "ru": ["\u041a\u0430\u043a\u043e\u0439", "\u043d\u0430\u0438\u043c\u0435\u043d\u044c\u0448\u0438\u0439", "\u0432\u0435\u0441", "\u0443", "\u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f", "\u0441", "8", "\u0446\u0438\u043b\u0438\u043d\u0434\u0440\u0430\u043c\u0438", ",", "\u0432\u044b\u043f\u0443\u0449\u0435\u043d\u043d\u043e\u0433\u043e", "\u0432", "1974", "\u0433\u043e\u0434\u0443", "?"]}, "query_toks": {"en": ["select", "min", "(", "weight", ")", "from", "cars_data", "where", "cylinders", "=", "8", "and", "year", "=", "1974", ";"], "ru": ["select", "min", "(", "weight", ")", "from", "cars_data", "where", "cylinders", "=", "8", "and", "year", "=", "1974", ";"]}, "query_toks_no_values": {"en": ["select", "min", "(", "weight", ")", "from", "cars_data", "where", "cylinders", "=", "8", "and", "year", "=", "1974", ";"], "ru": ["select", "min", "(", "weight", ")", "from", "cars_data", "where", "cylinders", "=", "8", "and", "year", "=", "1974", ";"]}, "masked_query": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974;", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0439 \u043d\u0430\u0438\u043c\u0435\u043d\u044c\u0448\u0438\u0439 \u0432\u0435\u0441 \u0443 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f \u0441 8 \u0446\u0438\u043b\u0438\u043d\u0434\u0440\u0430\u043c\u0438, \u0432\u044b\u043f\u0443\u0449\u0435\u043d\u043d\u043e\u0433\u043e \u0432 1974 \u0433\u043e\u0434\u0443?"}, "question": "What is the smallest weight of the car produced with 8 cylinders on 1974 ?", "kb_id": "car_1"}, {"id": "D_0121", "source": "spider-dev", "type": "dev", "query": {"ru": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 5]], "conds": []}, "select": [false, [[2, [0, [0, 21, false], null]]]], "where": [[false, 2, [0, [0, 18, false], null], 8.0, null], "and", [false, 2, [0, [0, 23, false], null], 1974.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 5]], "conds": []}, "select": [false, [[2, [0, [0, 21, false], null]]]], "where": [[false, 2, [0, [0, 18, false], null], 8.0, null], "and", [false, 2, [0, [0, 23, false], null], 1974.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "minimum", "weight", "of", "the", "car", "with", "8", "cylinders", "produced", "in", "1974", "?"], "ru": ["\u041a\u0430\u043a\u043e\u0439", "\u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439", "\u0432\u0435\u0441", "\u0443", "\u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f", "\u0441", "8", "\u0446\u0438\u043b\u0438\u043d\u0434\u0440\u0430\u043c\u0438", "1974", "\u0433\u043e\u0434\u0430", "\u0432\u044b\u043f\u0443\u0441\u043a\u0430", "?"]}, "query_toks": {"en": ["select", "min", "(", "weight", ")", "from", "cars_data", "where", "cylinders", "=", "8", "and", "year", "=", "1974", ";"], "ru": ["select", "min", "(", "weight", ")", "from", "cars_data", "where", "cylinders", "=", "8", "and", "year", "=", "1974", ";"]}, "query_toks_no_values": {"en": ["select", "min", "(", "weight", ")", "from", "cars_data", "where", "cylinders", "=", "8", "and", "year", "=", "1974", ";"], "ru": ["select", "min", "(", "weight", ")", "from", "cars_data", "where", "cylinders", "=", "8", "and", "year", "=", "1974", ";"]}, "masked_query": "select min(weight) from cars_data where cylinders  =  8 and year  =  1974;", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0439 \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u0432\u0435\u0441 \u0443 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f \u0441 8 \u0446\u0438\u043b\u0438\u043d\u0434\u0440\u0430\u043c\u0438 1974 \u0433\u043e\u0434\u0430 \u0432\u044b\u043f\u0443\u0441\u043a\u0430?"}, "question": "What is the minimum weight of the car with 8 cylinders produced in 1974 ?", "kb_id": "car_1"}, {"id": "D_0122", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT Maker ,  Model FROM MODEL_LIST;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 3]], "conds": []}, "select": [false, [[0, [0, [0, 11, false], null]], [0, [0, [0, 12, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 3]], "conds": []}, "select": [false, [[0, [0, [0, 11, false], null]], [0, [0, [0, 12, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "all", "the", "makers", "and", "models", "?"], "ru": ["\u041a\u0430\u043a\u0438\u0435", "\u0432\u0441\u0435", "\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u0438", "\u0438", "\u043c\u043e\u0434\u0435\u043b\u0438", "?"]}, "query_toks": {"en": ["select", "maker", ",", "model", "from", "model_list", ";"], "ru": ["select", "maker", ",", "model", "from", "model_list", ";"]}, "query_toks_no_values": {"en": ["select", "maker", ",", "model", "from", "model_list", ";"], "ru": ["select", "maker", ",", "model", "from", "model_list", ";"]}, "masked_query": "SELECT Maker ,  Model FROM MODEL_LIST;", "question_pauq": {"ru": "\u041a\u0430\u043a\u0438\u0435 \u0432\u0441\u0435 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u0438 \u0438 \u043c\u043e\u0434\u0435\u043b\u0438?"}, "question": "What are all the makers and models?", "kb_id": "car_1"}, {"id": "D_0123", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT Maker ,  Model FROM MODEL_LIST;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 3]], "conds": []}, "select": [false, [[0, [0, [0, 11, false], null]], [0, [0, [0, 12, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 3]], "conds": []}, "select": [false, [[0, [0, [0, 11, false], null]], [0, [0, [0, 12, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "the", "makers", "and", "models", "?"], "ru": ["\u041a\u0430\u043a\u0438\u0435", "\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u0438", "\u0438", "\u043c\u043e\u0434\u0435\u043b\u0438", "?"]}, "query_toks": {"en": ["select", "maker", ",", "model", "from", "model_list", ";"], "ru": ["select", "maker", ",", "model", "from", "model_list", ";"]}, "query_toks_no_values": {"en": ["select", "maker", ",", "model", "from", "model_list", ";"], "ru": ["select", "maker", ",", "model", "from", "model_list", ";"]}, "masked_query": "SELECT Maker ,  Model FROM MODEL_LIST;", "question_pauq": {"ru": "\u041a\u0430\u043a\u0438\u0435 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u0438 \u0438 \u043c\u043e\u0434\u0435\u043b\u0438?"}, "question": "What are the makers and models?", "kb_id": "car_1"}, {"id": "D_0124", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 3, false], null], [0, 9, false], null]]}, "select": [false, [[0, [0, [0, 4, false], null]], [0, [0, [0, 3, false], null]]]], "where": [], "groupBy": [[0, 3, false]], "having": [[false, 5, [0, [3, 0, false], null], 1.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 3, false], null], [0, 9, false], null]]}, "select": [false, [[0, [0, [0, 4, false], null]], [0, [0, [0, 3, false], null]]]], "where": [], "groupBy": [[0, 3, false]], "having": [[false, 5, [0, [3, 0, false], null], 1.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "the", "countries", "having", "at", "least", "one", "car", "maker", "?", "List", "name", "and", "id", "."], "ru": ["\u0412", "\u043a\u0430\u043a\u0438\u0445", "\u0441\u0442\u0440\u0430\u043d\u0430\u0445", "\u0435\u0441\u0442\u044c", "\u0445\u043e\u0442\u044f", "\u0431\u044b", "\u043e\u0434\u0438\u043d", "\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c", "\u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439", "?", "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c", "\u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435", "\u0438", "id", "."]}, "query_toks": {"en": ["select", "t1.countryname", ",", "t1.countryid", "from", "countries", "as", "t1", "join", "car_makers", "as", "t2", "on", "t1.countryid", "=", "t2.country", "group", "by", "t1.countryid", "having", "count", "(", "*", ")", ">=", "1", ";"], "ru": ["select", "t1.countryname", ",", "t1.countryid", "from", "countries", "as", "t1", "join", "car_makers", "as", "t2", "on", "t1.countryid", "=", "t2.country", "group", "by", "t1.countryid", "having", "count", "(", "*", ")", ">=", "1", ";"]}, "query_toks_no_values": {"en": ["select", "t1.countryname", ",", "t1.countryid", "from", "countries", "as", "t1", "join", "car_makers", "as", "t2", "on", "t1.countryid", "=", "t2.country", "group", "by", "t1.countryid", "having", "count", "(", "*", ")", ">=", "1", ";"], "ru": ["select", "t1.countryname", ",", "t1.countryid", "from", "countries", "as", "t1", "join", "car_makers", "as", "t2", "on", "t1.countryid", "=", "t2.country", "group", "by", "t1.countryid", "having", "count", "(", "*", ")", ">=", "1", ";"]}, "masked_query": "SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;", "question_pauq": {"ru": "\u0412 \u043a\u0430\u043a\u0438\u0445 \u0441\u0442\u0440\u0430\u043d\u0430\u0445 \u0435\u0441\u0442\u044c \u0445\u043e\u0442\u044f \u0431\u044b \u043e\u0434\u0438\u043d \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439? \u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u0438 id."}, "question": "What are the countries having at least one car maker? List name and id.", "kb_id": "car_1"}, {"id": "D_0125", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 3, false], null], [0, 9, false], null]]}, "select": [false, [[0, [0, [0, 4, false], null]], [0, [0, [0, 3, false], null]]]], "where": [], "groupBy": [[0, 3, false]], "having": [[false, 5, [0, [3, 0, false], null], 1.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 3, false], null], [0, 9, false], null]]}, "select": [false, [[0, [0, [0, 4, false], null]], [0, [0, [0, 3, false], null]]]], "where": [], "groupBy": [[0, 3, false]], "having": [[false, 5, [0, [3, 0, false], null], 1.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "the", "names", "and", "ids", "of", "all", "countries", "with", "at", "least", "one", "car", "maker", "?"], "ru": ["\u041a\u0430\u043a\u0438\u0435", "\u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f", "\u0438", "id", "\u0432\u0441\u0435\u0445", "\u0441\u0442\u0440\u0430\u043d", ",", "\u0433\u0434\u0435", "\u0435\u0441\u0442\u044c", "\u0445\u043e\u0442\u044f", "\u0431\u044b", "\u043e\u0434\u0438\u043d", "\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c", "\u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439", "?"]}, "query_toks": {"en": ["select", "t1.countryname", ",", "t1.countryid", "from", "countries", "as", "t1", "join", "car_makers", "as", "t2", "on", "t1.countryid", "=", "t2.country", "group", "by", "t1.countryid", "having", "count", "(", "*", ")", ">=", "1", ";"], "ru": ["select", "t1.countryname", ",", "t1.countryid", "from", "countries", "as", "t1", "join", "car_makers", "as", "t2", "on", "t1.countryid", "=", "t2.country", "group", "by", "t1.countryid", "having", "count", "(", "*", ")", ">=", "1", ";"]}, "query_toks_no_values": {"en": ["select", "t1.countryname", ",", "t1.countryid", "from", "countries", "as", "t1", "join", "car_makers", "as", "t2", "on", "t1.countryid", "=", "t2.country", "group", "by", "t1.countryid", "having", "count", "(", "*", ")", ">=", "1", ";"], "ru": ["select", "t1.countryname", ",", "t1.countryid", "from", "countries", "as", "t1", "join", "car_makers", "as", "t2", "on", "t1.countryid", "=", "t2.country", "group", "by", "t1.countryid", "having", "count", "(", "*", ")", ">=", "1", ";"]}, "masked_query": "SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;", "question_pauq": {"ru": "\u041a\u0430\u043a\u0438\u0435 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f \u0438 id \u0432\u0441\u0435\u0445 \u0441\u0442\u0440\u0430\u043d, \u0433\u0434\u0435 \u0435\u0441\u0442\u044c \u0445\u043e\u0442\u044f \u0431\u044b \u043e\u0434\u0438\u043d \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439?"}, "question": "What are the names and ids of all countries with at least one car maker?", "kb_id": "car_1"}, {"id": "D_0126", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 5]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 3, [0, [0, 20, false], null], 150.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 5]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 3, [0, [0, 20, false], null], 150.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "number", "of", "the", "cars", "with", "horsepower", "more", "than", "150", "?"], "ru": ["\u0421\u043a\u043e\u043b\u044c\u043a\u043e", "\u0432\u0441\u0435\u0433\u043e", "\u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439", "\u043c\u043e\u0449\u043d\u043e\u0441\u0442\u044c\u044e", "\u0431\u043e\u043b\u0435\u0435", "150", "\u043b\u043e\u0448\u0430\u0434\u0438\u043d\u044b\u0445", "\u0441\u0438\u043b", "?"]}, "query_toks": {"en": ["select", "count", "(", "*", ")", "from", "cars_data", "where", "horsepower", ">", "150", ";"], "ru": ["select", "count", "(", "*", ")", "from", "cars_data", "where", "horsepower", ">", "150", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "*", ")", "from", "cars_data", "where", "horsepower", ">", "150", ";"], "ru": ["select", "count", "(", "*", ")", "from", "cars_data", "where", "horsepower", ">", "150", ";"]}, "masked_query": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;", "question_pauq": {"ru": "\u0421\u043a\u043e\u043b\u044c\u043a\u043e \u0432\u0441\u0435\u0433\u043e \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439 \u043c\u043e\u0449\u043d\u043e\u0441\u0442\u044c\u044e \u0431\u043e\u043b\u0435\u0435 150 \u043b\u043e\u0448\u0430\u0434\u0438\u043d\u044b\u0445 \u0441\u0438\u043b?"}, "question": "What is the number of the cars with horsepower more than 150?", "kb_id": "car_1"}, {"id": "D_0127", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 5]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 3, [0, [0, 20, false], null], 150.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 5]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 3, [0, [0, 20, false], null], 150.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "number", "of", "cars", "with", "a", "horsepower", "greater", "than", "150", "?"], "ru": ["\u041a\u0430\u043a\u043e\u0435", "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e", "\u043c\u0430\u0448\u0438\u043d", "\u043c\u043e\u0449\u043d\u043e\u0441\u0442\u044c\u044e", "\u0431\u043e\u043b\u0435\u0435", "150", "\u043b\u043e\u0448\u0430\u0434\u0438\u043d\u044b\u0445", "\u0441\u0438\u043b", "?"]}, "query_toks": {"en": ["select", "count", "(", "*", ")", "from", "cars_data", "where", "horsepower", ">", "150", ";"], "ru": ["select", "count", "(", "*", ")", "from", "cars_data", "where", "horsepower", ">", "150", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "*", ")", "from", "cars_data", "where", "horsepower", ">", "150", ";"], "ru": ["select", "count", "(", "*", ")", "from", "cars_data", "where", "horsepower", ">", "150", ";"]}, "masked_query": "SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0430\u0448\u0438\u043d \u043c\u043e\u0449\u043d\u043e\u0441\u0442\u044c\u044e \u0431\u043e\u043b\u0435\u0435 150 \u043b\u043e\u0448\u0430\u0434\u0438\u043d\u044b\u0445 \u0441\u0438\u043b?"}, "question": "What is the number of cars with a horsepower greater than 150?", "kb_id": "car_1"}, {"id": "D_0128", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 5]], "conds": []}, "select": [false, [[5, [0, [0, 21, false], null]], [0, [0, [0, 23, false], null]]]], "where": [], "groupBy": [[0, 23, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 5]], "conds": []}, "select": [false, [[5, [0, [0, 21, false], null]], [0, [0, [0, 23, false], null]]]], "where": [], "groupBy": [[0, 23, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "average", "weight", "of", "cars", "each", "year", "?"], "ru": ["\u041a\u0430\u043a\u043e\u0432", "\u0441\u0440\u0435\u0434\u043d\u0438\u0439", "\u0432\u0435\u0441", "\u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439", "\u043a\u0430\u0436\u0434\u044b\u0439", "\u0433\u043e\u0434", "?"]}, "query_toks": {"en": ["select", "avg", "(", "weight", ")", ",", "year", "from", "cars_data", "group", "by", "year", ";"], "ru": ["select", "avg", "(", "weight", ")", ",", "year", "from", "cars_data", "group", "by", "year", ";"]}, "query_toks_no_values": {"en": ["select", "avg", "(", "weight", ")", ",", "year", "from", "cars_data", "group", "by", "year", ";"], "ru": ["select", "avg", "(", "weight", ")", ",", "year", "from", "cars_data", "group", "by", "year", ";"]}, "masked_query": "SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0432 \u0441\u0440\u0435\u0434\u043d\u0438\u0439 \u0432\u0435\u0441 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439 \u043a\u0430\u0436\u0434\u044b\u0439 \u0433\u043e\u0434?"}, "question": "What is the average weight of cars each year?", "kb_id": "car_1"}, {"id": "D_0129", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 5]], "conds": []}, "select": [false, [[5, [0, [0, 21, false], null]], [0, [0, [0, 23, false], null]]]], "where": [], "groupBy": [[0, 23, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 5]], "conds": []}, "select": [false, [[5, [0, [0, 21, false], null]], [0, [0, [0, 23, false], null]]]], "where": [], "groupBy": [[0, 23, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "average", "weight", "and", "year", "for", "each", "year", "?"], "ru": ["\u041a\u0430\u043a\u043e\u0432", "\u0441\u0440\u0435\u0434\u043d\u0438\u0439", "\u0432\u0435\u0441", "\u0438", "\u0433\u043e\u0434", "\u0434\u043b\u044f", "\u043a\u0430\u0436\u0434\u043e\u0433\u043e", "\u0433\u043e\u0434\u0430", "?"]}, "query_toks": {"en": ["select", "avg", "(", "weight", ")", ",", "year", "from", "cars_data", "group", "by", "year", ";"], "ru": ["select", "avg", "(", "weight", ")", ",", "year", "from", "cars_data", "group", "by", "year", ";"]}, "query_toks_no_values": {"en": ["select", "avg", "(", "weight", ")", ",", "year", "from", "cars_data", "group", "by", "year", ";"], "ru": ["select", "avg", "(", "weight", ")", ",", "year", "from", "cars_data", "group", "by", "year", ";"]}, "masked_query": "SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0432 \u0441\u0440\u0435\u0434\u043d\u0438\u0439 \u0432\u0435\u0441 \u0438 \u0433\u043e\u0434 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0433\u043e\u0434\u0430?"}, "question": "What is the average weight and year for each year?", "kb_id": "car_1"}, {"id": "D_0130", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  '\u042e\u0436\u043d\u0430\u044f \u0410\u043c\u0435\u0440\u0438\u043a\u0430' GROUP BY T1.CountryName HAVING count(*)  >=  3;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1], ["table_unit", 0], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 5, false], null], [0, 1, false], null], "and", [false, 2, [0, [0, 3, false], null], [0, 9, false], null]]}, "select": [false, [[0, [0, [0, 4, false], null]]]], "where": [[false, 2, [0, [0, 2, false], null], "\"europe\"", null]], "groupBy": [[0, 4, false]], "having": [[false, 5, [0, [3, 0, false], null], 3.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1], ["table_unit", 0], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 5, false], null], [0, 1, false], null], "and", [false, 2, [0, [0, 3, false], null], [0, 9, false], null]]}, "select": [false, [[0, [0, [0, 4, false], null]]]], "where": [[false, 2, [0, [0, 2, false], null], "\"\u042e\u0436\u043d\u0430\u044f \u0410\u043c\u0435\u0440\u0438\u043a\u0430\"", null]], "groupBy": [[0, 4, false]], "having": [[false, 5, [0, [3, 0, false], null], 3.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Which", "countries", "in", "europe", "have", "at", "least", "3", "car", "manufacturers", "?"], "ru": ["\u0412", "\u043a\u0430\u043a\u0438\u0445", "\u0441\u0442\u0440\u0430\u043d\u0430\u0445", "\u042e\u0436\u043d\u043e\u0439", "\u0410\u043c\u0435\u0440\u0438\u043a\u0438", "\u0435\u0441\u0442\u044c", "\u043a\u0430\u043a", "\u043c\u0438\u043d\u0438\u043c\u0443\u043c", "3", "\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f", "\u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439", "?"]}, "query_toks": {"en": ["select", "t1.countryname", "from", "countries", "as", "t1", "join", "continents", "as", "t2", "on", "t1.continent", "=", "t2.contid", "join", "car_makers", "as", "t3", "on", "t1.countryid", "=", "t3.country", "where", "t2.continent", "=", "\"europe\"", "group", "by", "t1.countryname", "having", "count", "(", "*", ")", ">=", "3", ";"], "ru": ["select", "t1.countryname", "from", "countries", "as", "t1", "join", "continents", "as", "t2", "on", "t1.continent", "=", "t2.contid", "join", "car_makers", "as", "t3", "on", "t1.countryid", "=", "t3.country", "where", "t2.continent", "=", "\"\u042e\u0436\u043d\u0430\u044f \u0410\u043c\u0435\u0440\u0438\u043a\u0430\"", "group", "by", "t1.countryname", "having", "count", "(", "*", ")", ">=", "3", ";"]}, "query_toks_no_values": {"en": ["select", "t1.countryname", "from", "countries", "as", "t1", "join", "continents", "as", "t2", "on", "t1.continent", "=", "t2.contid", "join", "car_makers", "as", "t3", "on", "t1.countryid", "=", "t3.country", "where", "t2.continent", "=", "value", "group", "by", "t1.countryname", "having", "count", "(", "*", ")", ">=", "3", ";"], "ru": ["select", "t1.countryname", "from", "countries", "as", "t1", "join", "continents", "as", "t2", "on", "t1.continent", "=", "t2.contid", "join", "car_makers", "as", "t3", "on", "t1.countryid", "=", "t3.country", "where", "t2.continent", "=", "value", "group", "by", "t1.countryname", "having", "count", "(", "*", ")", ">=", "3", ";"]}, "masked_query": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;", "question_pauq": {"ru": "\u0412 \u043a\u0430\u043a\u0438\u0445 \u0441\u0442\u0440\u0430\u043d\u0430\u0445 \u042e\u0436\u043d\u043e\u0439 \u0410\u043c\u0435\u0440\u0438\u043a\u0438 \u0435\u0441\u0442\u044c \u043a\u0430\u043a \u043c\u0438\u043d\u0438\u043c\u0443\u043c 3 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439?"}, "question": "Which countries in europe have at least 3 car manufacturers?", "kb_id": "car_1"}, {"id": "D_0131", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  '\u042e\u0436\u043d\u0430\u044f \u0410\u043c\u0435\u0440\u0438\u043a\u0430' GROUP BY T1.CountryName HAVING count(*)  >=  3;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1], ["table_unit", 0], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 5, false], null], [0, 1, false], null], "and", [false, 2, [0, [0, 3, false], null], [0, 9, false], null]]}, "select": [false, [[0, [0, [0, 4, false], null]]]], "where": [[false, 2, [0, [0, 2, false], null], "\"europe\"", null]], "groupBy": [[0, 4, false]], "having": [[false, 5, [0, [3, 0, false], null], 3.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1], ["table_unit", 0], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 5, false], null], [0, 1, false], null], "and", [false, 2, [0, [0, 3, false], null], [0, 9, false], null]]}, "select": [false, [[0, [0, [0, 4, false], null]]]], "where": [[false, 2, [0, [0, 2, false], null], "\"\u042e\u0436\u043d\u0430\u044f \u0410\u043c\u0435\u0440\u0438\u043a\u0430\"", null]], "groupBy": [[0, 4, false]], "having": [[false, 5, [0, [3, 0, false], null], 3.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "the", "names", "of", "all", "European", "countries", "with", "at", "least", "3", "manufacturers", "?"], "ru": ["\u041a\u0430\u043a", "\u043d\u0430\u0437\u044b\u0432\u0430\u044e\u0442\u0441\u044f", "\u0432\u0441\u0435", "\u044e\u0436\u043d\u043e\u0430\u043c\u0435\u0440\u0438\u043a\u0430\u043d\u0441\u043a\u0438\u0435", "\u0441\u0442\u0440\u0430\u043d\u044b", ",", "\u0432", "\u043a\u043e\u0442\u043e\u0440\u044b\u0445", "\u0435\u0441\u0442\u044c", "\u043a\u0430\u043a", "\u043c\u0438\u043d\u0438\u043c\u0443\u043c", "3", "\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f", "?"]}, "query_toks": {"en": ["select", "t1.countryname", "from", "countries", "as", "t1", "join", "continents", "as", "t2", "on", "t1.continent", "=", "t2.contid", "join", "car_makers", "as", "t3", "on", "t1.countryid", "=", "t3.country", "where", "t2.continent", "=", "\"europe\"", "group", "by", "t1.countryname", "having", "count", "(", "*", ")", ">=", "3", ";"], "ru": ["select", "t1.countryname", "from", "countries", "as", "t1", "join", "continents", "as", "t2", "on", "t1.continent", "=", "t2.contid", "join", "car_makers", "as", "t3", "on", "t1.countryid", "=", "t3.country", "where", "t2.continent", "=", "\"\u042e\u0436\u043d\u0430\u044f \u0410\u043c\u0435\u0440\u0438\u043a\u0430\"", "group", "by", "t1.countryname", "having", "count", "(", "*", ")", ">=", "3", ";"]}, "query_toks_no_values": {"en": ["select", "t1.countryname", "from", "countries", "as", "t1", "join", "continents", "as", "t2", "on", "t1.continent", "=", "t2.contid", "join", "car_makers", "as", "t3", "on", "t1.countryid", "=", "t3.country", "where", "t2.continent", "=", "value", "group", "by", "t1.countryname", "having", "count", "(", "*", ")", ">=", "3", ";"], "ru": ["select", "t1.countryname", "from", "countries", "as", "t1", "join", "continents", "as", "t2", "on", "t1.continent", "=", "t2.contid", "join", "car_makers", "as", "t3", "on", "t1.countryid", "=", "t3.country", "where", "t2.continent", "=", "value", "group", "by", "t1.countryname", "having", "count", "(", "*", ")", ">=", "3", ";"]}, "masked_query": "SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;", "question_pauq": {"ru": "\u041a\u0430\u043a \u043d\u0430\u0437\u044b\u0432\u0430\u044e\u0442\u0441\u044f \u0432\u0441\u0435 \u044e\u0436\u043d\u043e\u0430\u043c\u0435\u0440\u0438\u043a\u0430\u043d\u0441\u043a\u0438\u0435 \u0441\u0442\u0440\u0430\u043d\u044b, \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0435\u0441\u0442\u044c \u043a\u0430\u043a \u043c\u0438\u043d\u0438\u043c\u0443\u043c 3 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f?"}, "question": "What are the names of all European countries with at least 3 manufacturers?", "kb_id": "car_1"}, {"id": "D_0132", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 4], ["table_unit", 5]], "conds": [[false, 2, [0, [0, 13, false], null], [0, 16, false], null]]}, "select": [false, [[0, [0, [0, 20, false], null]], [0, [0, [0, 15, false], null]]]], "where": [[false, 2, [0, [0, 18, false], null], 3.0, null]], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 20, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 4], ["table_unit", 5]], "conds": [[false, 2, [0, [0, 13, false], null], [0, 16, false], null]]}, "select": [false, [[0, [0, [0, 20, false], null]], [0, [0, [0, 15, false], null]]]], "where": [[false, 2, [0, [0, 18, false], null], 3.0, null]], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 20, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "maximum", "horsepower", "and", "the", "make", "of", "the", "car", "models", "with", "3", "cylinders", "?"], "ru": ["\u041a\u0430\u043a\u0430\u044f", "\u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u0430\u044f", "\u043c\u043e\u0449\u043d\u043e\u0441\u0442\u044c", "\u0438", "\u043c\u0430\u0440\u043a\u0430", "\u0443", "\u043c\u043e\u0434\u0435\u043b\u0435\u0439", "\u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439", "\u0441", "3", "\u0446\u0438\u043b\u0438\u043d\u0434\u0440\u0430\u043c\u0438", "?"]}, "query_toks": {"en": ["select", "t2.horsepower", ",", "t1.make", "from", "car_names", "as", "t1", "join", "cars_data", "as", "t2", "on", "t1.makeid", "=", "t2.id", "where", "t2.cylinders", "=", "3", "order", "by", "t2.horsepower", "desc", "limit", "1", ";"], "ru": ["select", "t2.horsepower", ",", "t1.make", "from", "car_names", "as", "t1", "join", "cars_data", "as", "t2", "on", "t1.makeid", "=", "t2.id", "where", "t2.cylinders", "=", "3", "order", "by", "t2.horsepower", "desc", "limit", "1", ";"]}, "query_toks_no_values": {"en": ["select", "t2.horsepower", ",", "t1.make", "from", "car_names", "as", "t1", "join", "cars_data", "as", "t2", "on", "t1.makeid", "=", "t2.id", "where", "t2.cylinders", "=", "3", "order", "by", "t2.horsepower", "desc", "limit", "1", ";"], "ru": ["select", "t2.horsepower", ",", "t1.make", "from", "car_names", "as", "t1", "join", "cars_data", "as", "t2", "on", "t1.makeid", "=", "t2.id", "where", "t2.cylinders", "=", "3", "order", "by", "t2.horsepower", "desc", "limit", "1", ";"]}, "masked_query": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;", "question_pauq": {"ru": "\u041a\u0430\u043a\u0430\u044f \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u0430\u044f \u043c\u043e\u0449\u043d\u043e\u0441\u0442\u044c \u0438 \u043c\u0430\u0440\u043a\u0430 \u0443 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439 \u0441 3 \u0446\u0438\u043b\u0438\u043d\u0434\u0440\u0430\u043c\u0438?"}, "question": "What is the maximum horsepower and the make of the car models with 3 cylinders?", "kb_id": "car_1"}, {"id": "D_0133", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 4], ["table_unit", 5]], "conds": [[false, 2, [0, [0, 13, false], null], [0, 16, false], null]]}, "select": [false, [[0, [0, [0, 20, false], null]], [0, [0, [0, 15, false], null]]]], "where": [[false, 2, [0, [0, 18, false], null], 3.0, null]], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 20, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 4], ["table_unit", 5]], "conds": [[false, 2, [0, [0, 13, false], null], [0, 16, false], null]]}, "select": [false, [[0, [0, [0, 20, false], null]], [0, [0, [0, 15, false], null]]]], "where": [[false, 2, [0, [0, 18, false], null], 3.0, null]], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 20, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "largest", "amount", "of", "horsepower", "for", "the", "models", "with", "3", "cylinders", "and", "what", "make", "is", "it", "?"], "ru": ["\u041a\u0430\u043a\u0430\u044f", "\u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u0430\u044f", "\u043c\u043e\u0449\u043d\u043e\u0441\u0442\u044c", "\u0443", "\u043c\u043e\u0434\u0435\u043b\u0435\u0439", "\u0441", "3", "\u0446\u0438\u043b\u0438\u043d\u0434\u0440\u0430\u043c\u0438", "\u0438", "\u043a\u0430\u043a\u043e\u0439", "\u043e\u043d\u0438", "\u043c\u0430\u0440\u043a\u0438", "?"]}, "query_toks": {"en": ["select", "t2.horsepower", ",", "t1.make", "from", "car_names", "as", "t1", "join", "cars_data", "as", "t2", "on", "t1.makeid", "=", "t2.id", "where", "t2.cylinders", "=", "3", "order", "by", "t2.horsepower", "desc", "limit", "1", ";"], "ru": ["select", "t2.horsepower", ",", "t1.make", "from", "car_names", "as", "t1", "join", "cars_data", "as", "t2", "on", "t1.makeid", "=", "t2.id", "where", "t2.cylinders", "=", "3", "order", "by", "t2.horsepower", "desc", "limit", "1", ";"]}, "query_toks_no_values": {"en": ["select", "t2.horsepower", ",", "t1.make", "from", "car_names", "as", "t1", "join", "cars_data", "as", "t2", "on", "t1.makeid", "=", "t2.id", "where", "t2.cylinders", "=", "3", "order", "by", "t2.horsepower", "desc", "limit", "1", ";"], "ru": ["select", "t2.horsepower", ",", "t1.make", "from", "car_names", "as", "t1", "join", "cars_data", "as", "t2", "on", "t1.makeid", "=", "t2.id", "where", "t2.cylinders", "=", "3", "order", "by", "t2.horsepower", "desc", "limit", "1", ";"]}, "masked_query": "SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;", "question_pauq": {"ru": "\u041a\u0430\u043a\u0430\u044f \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u0430\u044f \u043c\u043e\u0449\u043d\u043e\u0441\u0442\u044c \u0443 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0441 3 \u0446\u0438\u043b\u0438\u043d\u0434\u0440\u0430\u043c\u0438 \u0438 \u043a\u0430\u043a\u043e\u0439 \u043e\u043d\u0438 \u043c\u0430\u0440\u043a\u0438?"}, "question": "What is the largest amount of horsepower for the models with 3 cylinders and what make is it?", "kb_id": "car_1"}, {"id": "D_0134", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 4], ["table_unit", 5]], "conds": [[false, 2, [0, [0, 13, false], null], [0, 16, false], null]]}, "select": [false, [[0, [0, [0, 14, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 17, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 4], ["table_unit", 5]], "conds": [[false, 2, [0, [0, 13, false], null], [0, 16, false], null]]}, "select": [false, [[0, [0, [0, 14, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 17, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Which", "model", "saves", "the", "most", "gasoline", "?", "That", "is", "to", "say", ",", "have", "the", "maximum", "miles", "per", "gallon", "."], "ru": ["\u041a\u0430\u043a\u0430\u044f", "\u043c\u043e\u0434\u0435\u043b\u044c", "\u044d\u043a\u043e\u043d\u043e\u043c\u0438\u0442", "\u0431\u0435\u043d\u0437\u0438\u043d", "\u0431\u043e\u043b\u044c\u0448\u0435", "\u0432\u0441\u0435\u0433\u043e", "?", "\u0422\u043e", "\u0435\u0441\u0442\u044c", "\u0438\u043c\u0435\u0435\u0442", "\u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435", "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e", "\u043a\u0438\u043b\u043e\u043c\u0435\u0442\u0440\u043e\u0432", "\u043d\u0430", "\u043b\u0438\u0442\u0440", "."]}, "query_toks": {"en": ["select", "t1.model", "from", "car_names", "as", "t1", "join", "cars_data", "as", "t2", "on", "t1.makeid", "=", "t2.id", "order", "by", "t2.mpg", "desc", "limit", "1", ";"], "ru": ["select", "t1.model", "from", "car_names", "as", "t1", "join", "cars_data", "as", "t2", "on", "t1.makeid", "=", "t2.id", "order", "by", "t2.mpg", "desc", "limit", "1", ";"]}, "query_toks_no_values": {"en": ["select", "t1.model", "from", "car_names", "as", "t1", "join", "cars_data", "as", "t2", "on", "t1.makeid", "=", "t2.id", "order", "by", "t2.mpg", "desc", "limit", "1", ";"], "ru": ["select", "t1.model", "from", "car_names", "as", "t1", "join", "cars_data", "as", "t2", "on", "t1.makeid", "=", "t2.id", "order", "by", "t2.mpg", "desc", "limit", "1", ";"]}, "masked_query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1;", "question_pauq": {"ru": "\u041a\u0430\u043a\u0430\u044f \u043c\u043e\u0434\u0435\u043b\u044c \u044d\u043a\u043e\u043d\u043e\u043c\u0438\u0442 \u0431\u0435\u043d\u0437\u0438\u043d \u0431\u043e\u043b\u044c\u0448\u0435 \u0432\u0441\u0435\u0433\u043e? \u0422\u043e \u0435\u0441\u0442\u044c \u0438\u043c\u0435\u0435\u0442 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u0438\u043b\u043e\u043c\u0435\u0442\u0440\u043e\u0432 \u043d\u0430 \u043b\u0438\u0442\u0440."}, "question": "Which model saves the most gasoline? That is to say, have the maximum miles per gallon.", "kb_id": "car_1"}, {"id": "D_0135", "source": "spider-dev", "type": "dev", "query": {"ru": "select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id order by t2.mpg desc limit 1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 4], ["table_unit", 5]], "conds": [[false, 2, [0, [0, 13, false], null], [0, 16, false], null]]}, "select": [false, [[0, [0, [0, 14, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 17, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 4], ["table_unit", 5]], "conds": [[false, 2, [0, [0, 13, false], null], [0, 16, false], null]]}, "select": [false, [[0, [0, [0, 14, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 17, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "car", "model", "with", "the", "highest", "mpg", "?"], "ru": ["\u041a\u0430\u043a\u0430\u044f", "\u043c\u043e\u0434\u0435\u043b\u044c", "\u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f", "\u0441", "\u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u043c", "\u0440\u0430\u0441\u0445\u043e\u0434\u043e\u043c", "\u0442\u043e\u043f\u043b\u0438\u0432\u0430", "\u043d\u0430", "\u043b\u0438\u0442\u0440", "?"]}, "query_toks": {"en": ["select", "t1.model", "from", "car_names", "as", "t1", "join", "cars_data", "as", "t2", "on", "t1.makeid", "=", "t2.id", "order", "by", "t2.mpg", "desc", "limit", "1", ";"], "ru": ["select", "t1.model", "from", "car_names", "as", "t1", "join", "cars_data", "as", "t2", "on", "t1.makeid", "=", "t2.id", "order", "by", "t2.mpg", "desc", "limit", "1", ";"]}, "query_toks_no_values": {"en": ["select", "t1.model", "from", "car_names", "as", "t1", "join", "cars_data", "as", "t2", "on", "t1.makeid", "=", "t2.id", "order", "by", "t2.mpg", "desc", "limit", "1", ";"], "ru": ["select", "t1.model", "from", "car_names", "as", "t1", "join", "cars_data", "as", "t2", "on", "t1.makeid", "=", "t2.id", "order", "by", "t2.mpg", "desc", "limit", "1", ";"]}, "masked_query": "select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id order by t2.mpg desc limit 1;", "question_pauq": {"ru": "\u041a\u0430\u043a\u0430\u044f \u043c\u043e\u0434\u0435\u043b\u044c \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f \u0441 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u043c \u0440\u0430\u0441\u0445\u043e\u0434\u043e\u043c \u0442\u043e\u043f\u043b\u0438\u0432\u0430 \u043d\u0430 \u043b\u0438\u0442\u0440?"}, "question": "What is the car model with the highest mpg ?", "kb_id": "car_1"}, {"id": "D_0136", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR  <  1980;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 5]], "conds": []}, "select": [false, [[5, [0, [0, 20, false], null]]]], "where": [[false, 4, [0, [0, 23, false], null], 1980.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 5]], "conds": []}, "select": [false, [[5, [0, [0, 20, false], null]]]], "where": [[false, 4, [0, [0, 23, false], null], 1980.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "average", "horsepower", "of", "the", "cars", "before", "1980", "?"], "ru": ["\u041a\u0430\u043a\u043e\u0432\u0430", "\u0441\u0440\u0435\u0434\u043d\u044f\u044f", "\u043c\u043e\u0449\u043d\u043e\u0441\u0442\u044c", "\u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439", "\u0434\u043e", "1980", "\u0433\u043e\u0434\u0430", "?"]}, "query_toks": {"en": ["select", "avg", "(", "horsepower", ")", "from", "cars_data", "where", "year", "<", "1980", ";"], "ru": ["select", "avg", "(", "horsepower", ")", "from", "cars_data", "where", "year", "<", "1980", ";"]}, "query_toks_no_values": {"en": ["select", "avg", "(", "horsepower", ")", "from", "cars_data", "where", "year", "<", "1980", ";"], "ru": ["select", "avg", "(", "horsepower", ")", "from", "cars_data", "where", "year", "<", "1980", ";"]}, "masked_query": "SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR  <  1980;", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0432\u0430 \u0441\u0440\u0435\u0434\u043d\u044f\u044f \u043c\u043e\u0449\u043d\u043e\u0441\u0442\u044c \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439 \u0434\u043e 1980 \u0433\u043e\u0434\u0430?"}, "question": "What is the average horsepower of the cars before 1980?", "kb_id": "car_1"}, {"id": "D_0137", "source": "spider-dev", "type": "dev", "query": {"ru": "select avg(horsepower) from cars_data where year  <  1980;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 5]], "conds": []}, "select": [false, [[5, [0, [0, 20, false], null]]]], "where": [[false, 4, [0, [0, 23, false], null], 1980.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 5]], "conds": []}, "select": [false, [[5, [0, [0, 20, false], null]]]], "where": [[false, 4, [0, [0, 23, false], null], 1980.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "average", "horsepower", "for", "all", "cars", "produced", "before", "1980", "?"], "ru": ["\u041a\u0430\u043a\u0430\u044f", "\u0441\u0440\u0435\u0434\u043d\u044f\u044f", "\u043c\u043e\u0449\u043d\u043e\u0441\u0442\u044c", "\u0432", "\u043b\u043e\u0448\u0430\u0434\u0438\u043d\u044b\u0445", "\u0441\u0438\u043b\u0430\u0445", "\u0443", "\u0432\u0441\u0435\u0445", "\u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439", ",", "\u0432\u044b\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0445", "\u0434\u043e", "1980", "\u0433\u043e\u0434\u0430", "?"]}, "query_toks": {"en": ["select", "avg", "(", "horsepower", ")", "from", "cars_data", "where", "year", "<", "1980", ";"], "ru": ["select", "avg", "(", "horsepower", ")", "from", "cars_data", "where", "year", "<", "1980", ";"]}, "query_toks_no_values": {"en": ["select", "avg", "(", "horsepower", ")", "from", "cars_data", "where", "year", "<", "1980", ";"], "ru": ["select", "avg", "(", "horsepower", ")", "from", "cars_data", "where", "year", "<", "1980", ";"]}, "masked_query": "select avg(horsepower) from cars_data where year  <  1980;", "question_pauq": {"ru": "\u041a\u0430\u043a\u0430\u044f \u0441\u0440\u0435\u0434\u043d\u044f\u044f \u043c\u043e\u0449\u043d\u043e\u0441\u0442\u044c \u0432 \u043b\u043e\u0448\u0430\u0434\u0438\u043d\u044b\u0445 \u0441\u0438\u043b\u0430\u0445 \u0443 \u0432\u0441\u0435\u0445 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439, \u0432\u044b\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0445 \u0434\u043e 1980 \u0433\u043e\u0434\u0430?"}, "question": "What is the average horsepower for all cars produced before 1980 ?", "kb_id": "car_1"}, {"id": "D_0138", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';"}, "sql": {"en": {"from": {"table_units": [["table_unit", 4], ["table_unit", 5]], "conds": [[false, 2, [0, [0, 13, false], null], [0, 16, false], null]]}, "select": [false, [[5, [0, [0, 19, false], null]]]], "where": [[false, 2, [0, [0, 14, false], null], "\"volvo\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 4], ["table_unit", 5]], "conds": [[false, 2, [0, [0, 13, false], null], [0, 16, false], null]]}, "select": [false, [[5, [0, [0, 19, false], null]]]], "where": [[false, 2, [0, [0, 14, false], null], "\"volvo\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "average", "edispl", "of", "the", "cars", "of", "model", "volvo", "?"], "ru": ["\u041a\u0430\u043a\u043e\u0439", "\u0441\u0440\u0435\u0434\u043d\u0438\u0439", "edispl", "\u0443", "\u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439", "\u043c\u043e\u0434\u0435\u043b\u0438", "Volvo", "?"]}, "query_toks": {"en": ["select", "avg", "(", "t2.edispl", ")", "from", "car_names", "as", "t1", "join", "cars_data", "as", "t2", "on", "t1.makeid", "=", "t2.id", "where", "t1.model", "=", "\"volvo\"", ";"], "ru": ["select", "avg", "(", "t2.edispl", ")", "from", "car_names", "as", "t1", "join", "cars_data", "as", "t2", "on", "t1.makeid", "=", "t2.id", "where", "t1.model", "=", "\"volvo\"", ";"]}, "query_toks_no_values": {"en": ["select", "avg", "(", "t2.edispl", ")", "from", "car_names", "as", "t1", "join", "cars_data", "as", "t2", "on", "t1.makeid", "=", "t2.id", "where", "t1.model", "=", "value", ";"], "ru": ["select", "avg", "(", "t2.edispl", ")", "from", "car_names", "as", "t1", "join", "cars_data", "as", "t2", "on", "t1.makeid", "=", "t2.id", "where", "t1.model", "=", "value", ";"]}, "masked_query": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0439 \u0441\u0440\u0435\u0434\u043d\u0438\u0439 edispl \u0443 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439 \u043c\u043e\u0434\u0435\u043b\u0438 Volvo?"}, "question": "What is the average edispl of the cars of model volvo?", "kb_id": "car_1"}, {"id": "D_0139", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';"}, "sql": {"en": {"from": {"table_units": [["table_unit", 4], ["table_unit", 5]], "conds": [[false, 2, [0, [0, 13, false], null], [0, 16, false], null]]}, "select": [false, [[5, [0, [0, 19, false], null]]]], "where": [[false, 2, [0, [0, 14, false], null], "\"volvo\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 4], ["table_unit", 5]], "conds": [[false, 2, [0, [0, 13, false], null], [0, 16, false], null]]}, "select": [false, [[5, [0, [0, 19, false], null]]]], "where": [[false, 2, [0, [0, 14, false], null], "\"volvo\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "average", "edispl", "for", "all", "volvos", "?"], "ru": ["\u041a\u0430\u043a\u043e\u0435", "\u0441\u0440\u0435\u0434\u043d\u0435\u0435", "\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435", "edispl", "\u0434\u043b\u044f", "\u0432\u0441\u0435\u0445", "\u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439", "Volvo", "?"]}, "query_toks": {"en": ["select", "avg", "(", "t2.edispl", ")", "from", "car_names", "as", "t1", "join", "cars_data", "as", "t2", "on", "t1.makeid", "=", "t2.id", "where", "t1.model", "=", "\"volvo\"", ";"], "ru": ["select", "avg", "(", "t2.edispl", ")", "from", "car_names", "as", "t1", "join", "cars_data", "as", "t2", "on", "t1.makeid", "=", "t2.id", "where", "t1.model", "=", "\"volvo\"", ";"]}, "query_toks_no_values": {"en": ["select", "avg", "(", "t2.edispl", ")", "from", "car_names", "as", "t1", "join", "cars_data", "as", "t2", "on", "t1.makeid", "=", "t2.id", "where", "t1.model", "=", "value", ";"], "ru": ["select", "avg", "(", "t2.edispl", ")", "from", "car_names", "as", "t1", "join", "cars_data", "as", "t2", "on", "t1.makeid", "=", "t2.id", "where", "t1.model", "=", "value", ";"]}, "masked_query": "SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0435 \u0441\u0440\u0435\u0434\u043d\u0435\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 edispl \u0434\u043b\u044f \u0432\u0441\u0435\u0445 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439 Volvo?"}, "question": "What is the average edispl for all volvos?", "kb_id": "car_1"}, {"id": "D_0140", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 5]], "conds": []}, "select": [false, [[1, [0, [0, 22, false], null]], [0, [0, [0, 18, false], null]]]], "where": [], "groupBy": [[0, 18, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 5]], "conds": []}, "select": [false, [[1, [0, [0, 22, false], null]], [0, [0, [0, 18, false], null]]]], "where": [], "groupBy": [[0, 18, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "maximum", "accelerate", "for", "different", "number", "of", "cylinders", "?"], "ru": ["\u041a\u0430\u043a\u043e\u0435", "\u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435", "\u0443\u0441\u043a\u043e\u0440\u0435\u043d\u0438\u0435", "\u0434\u043b\u044f", "\u0440\u0430\u0437\u043d\u043e\u0433\u043e", "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430", "\u0446\u0438\u043b\u0438\u043d\u0434\u0440\u043e\u0432", "?"]}, "query_toks": {"en": ["select", "max", "(", "accelerate", ")", ",", "cylinders", "from", "cars_data", "group", "by", "cylinders", ";"], "ru": ["select", "max", "(", "accelerate", ")", ",", "cylinders", "from", "cars_data", "group", "by", "cylinders", ";"]}, "query_toks_no_values": {"en": ["select", "max", "(", "accelerate", ")", ",", "cylinders", "from", "cars_data", "group", "by", "cylinders", ";"], "ru": ["select", "max", "(", "accelerate", ")", ",", "cylinders", "from", "cars_data", "group", "by", "cylinders", ";"]}, "masked_query": "SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0435 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0443\u0441\u043a\u043e\u0440\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u0440\u0430\u0437\u043d\u043e\u0433\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0446\u0438\u043b\u0438\u043d\u0434\u0440\u043e\u0432?"}, "question": "What is the maximum accelerate for different number of cylinders?", "kb_id": "car_1"}, {"id": "D_0141", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 5]], "conds": []}, "select": [false, [[1, [0, [0, 22, false], null]], [0, [0, [0, 18, false], null]]]], "where": [], "groupBy": [[0, 18, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 5]], "conds": []}, "select": [false, [[1, [0, [0, 22, false], null]], [0, [0, [0, 18, false], null]]]], "where": [], "groupBy": [[0, 18, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "maximum", "accelerate", "for", "all", "the", "different", "cylinders", "?"], "ru": ["\u041a\u0430\u043a\u043e\u0435", "\u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435", "\u0443\u0441\u043a\u043e\u0440\u0435\u043d\u0438\u0435", "\u0434\u043b\u044f", "\u0432\u0441\u0435\u0445", "\u0446\u0438\u043b\u0438\u043d\u0434\u0440\u043e\u0432", "?"]}, "query_toks": {"en": ["select", "max", "(", "accelerate", ")", ",", "cylinders", "from", "cars_data", "group", "by", "cylinders", ";"], "ru": ["select", "max", "(", "accelerate", ")", ",", "cylinders", "from", "cars_data", "group", "by", "cylinders", ";"]}, "query_toks_no_values": {"en": ["select", "max", "(", "accelerate", ")", ",", "cylinders", "from", "cars_data", "group", "by", "cylinders", ";"], "ru": ["select", "max", "(", "accelerate", ")", ",", "cylinders", "from", "cars_data", "group", "by", "cylinders", ";"]}, "masked_query": "SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0435 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0443\u0441\u043a\u043e\u0440\u0435\u043d\u0438\u0435 \u0434\u043b\u044f \u0432\u0441\u0435\u0445 \u0446\u0438\u043b\u0438\u043d\u0434\u0440\u043e\u0432?"}, "question": "What is the maximum accelerate for all the different cylinders?", "kb_id": "car_1"}, {"id": "D_0142", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 4]], "conds": []}, "select": [false, [[0, [0, [0, 14, false], null]]]], "where": [], "groupBy": [[0, 14, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 4]], "conds": []}, "select": [false, [[0, [0, [0, 14, false], null]]]], "where": [], "groupBy": [[0, 14, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Which", "model", "has", "the", "most", "version", "(", "make", ")", "of", "cars", "?"], "ru": ["\u041a\u0430\u043a\u0430\u044f", "\u043c\u043e\u0434\u0435\u043b\u044c", "\u0438\u043c\u0435\u0435\u0442", "\u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0435\u0435", "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e", "\u0432\u0435\u0440\u0441\u0438\u0439", "(", "\u043c\u0430\u0440\u043e\u043a", ")", "\u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439", "?"]}, "query_toks": {"en": ["select", "model", "from", "car_names", "group", "by", "model", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"], "ru": ["select", "model", "from", "car_names", "group", "by", "model", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"]}, "query_toks_no_values": {"en": ["select", "model", "from", "car_names", "group", "by", "model", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"], "ru": ["select", "model", "from", "car_names", "group", "by", "model", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"]}, "masked_query": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;", "question_pauq": {"ru": "\u041a\u0430\u043a\u0430\u044f \u043c\u043e\u0434\u0435\u043b\u044c \u0438\u043c\u0435\u0435\u0442 \u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u0435\u0440\u0441\u0438\u0439 (\u043c\u0430\u0440\u043e\u043a) \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439?"}, "question": "Which model has the most version(make) of cars?", "kb_id": "car_1"}, {"id": "D_0143", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 4]], "conds": []}, "select": [false, [[0, [0, [0, 14, false], null]]]], "where": [], "groupBy": [[0, 14, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 4]], "conds": []}, "select": [false, [[0, [0, [0, 14, false], null]]]], "where": [], "groupBy": [[0, 14, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "model", "has", "the", "most", "different", "versions", "?"], "ru": ["\u041a\u0430\u043a\u0430\u044f", "\u043c\u043e\u0434\u0435\u043b\u044c", "\u0438\u043c\u0435\u0435\u0442", "\u0441\u0430\u043c\u044b\u0435", "\u0440\u0430\u0437\u043d\u044b\u0435", "\u0432\u0435\u0440\u0441\u0438\u0438", "?"]}, "query_toks": {"en": ["select", "model", "from", "car_names", "group", "by", "model", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"], "ru": ["select", "model", "from", "car_names", "group", "by", "model", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"]}, "query_toks_no_values": {"en": ["select", "model", "from", "car_names", "group", "by", "model", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"], "ru": ["select", "model", "from", "car_names", "group", "by", "model", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"]}, "masked_query": "SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;", "question_pauq": {"ru": "\u041a\u0430\u043a\u0430\u044f \u043c\u043e\u0434\u0435\u043b\u044c \u0438\u043c\u0435\u0435\u0442 \u0441\u0430\u043c\u044b\u0435 \u0440\u0430\u0437\u043d\u044b\u0435 \u0432\u0435\u0440\u0441\u0438\u0438?"}, "question": "What model has the most different versions?", "kb_id": "car_1"}, {"id": "D_0144", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 5]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 3, [0, [0, 18, false], null], 4.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 5]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 3, [0, [0, 18, false], null], 4.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["How", "many", "cars", "have", "more", "than", "4", "cylinders", "?"], "ru": ["\u0421\u043a\u043e\u043b\u044c\u043a\u043e", "\u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439", "\u0438\u043c\u0435\u044e\u0442", "\u0431\u043e\u043b\u0435\u0435", "4", "\u0446\u0438\u043b\u0438\u043d\u0434\u0440\u043e\u0432", "?"]}, "query_toks": {"en": ["select", "count", "(", "*", ")", "from", "cars_data", "where", "cylinders", ">", "4", ";"], "ru": ["select", "count", "(", "*", ")", "from", "cars_data", "where", "cylinders", ">", "4", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "*", ")", "from", "cars_data", "where", "cylinders", ">", "4", ";"], "ru": ["select", "count", "(", "*", ")", "from", "cars_data", "where", "cylinders", ">", "4", ";"]}, "masked_query": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;", "question_pauq": {"ru": "\u0421\u043a\u043e\u043b\u044c\u043a\u043e \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439 \u0438\u043c\u0435\u044e\u0442 \u0431\u043e\u043b\u0435\u0435 4 \u0446\u0438\u043b\u0438\u043d\u0434\u0440\u043e\u0432?"}, "question": "How many cars have more than 4 cylinders?", "kb_id": "car_1"}, {"id": "D_0145", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 5]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 3, [0, [0, 18, false], null], 4.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 5]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 3, [0, [0, 18, false], null], 4.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "number", "of", "cars", "with", "more", "than", "4", "cylinders", "?"], "ru": ["\u041a\u0430\u043a\u043e\u0435", "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e", "\u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439", "\u0441", "\u0431\u043e\u043b\u0435\u0435", "\u0447\u0435\u043c", "4", "\u0446\u0438\u043b\u0438\u043d\u0434\u0440\u0430\u043c\u0438", "?"]}, "query_toks": {"en": ["select", "count", "(", "*", ")", "from", "cars_data", "where", "cylinders", ">", "4", ";"], "ru": ["select", "count", "(", "*", ")", "from", "cars_data", "where", "cylinders", ">", "4", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "*", ")", "from", "cars_data", "where", "cylinders", ">", "4", ";"], "ru": ["select", "count", "(", "*", ")", "from", "cars_data", "where", "cylinders", ">", "4", ";"]}, "masked_query": "SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439 \u0441 \u0431\u043e\u043b\u0435\u0435 \u0447\u0435\u043c 4 \u0446\u0438\u043b\u0438\u043d\u0434\u0440\u0430\u043c\u0438?"}, "question": "What is the number of cars with more than 4 cylinders?", "kb_id": "car_1"}, {"id": "D_0146", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 5]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 23, false], null], 1980.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 5]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 23, false], null], 1980.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["how", "many", "cars", "were", "produced", "in", "1980", "?"], "ru": ["\u0441\u043a\u043e\u043b\u044c\u043a\u043e", "\u043c\u0430\u0448\u0438\u043d", "\u0431\u044b\u043b\u043e", "\u0432\u044b\u043f\u0443\u0449\u0435\u043d\u043e", "\u0432", "1980", "\u0433\u043e\u0434\u0443", "?"]}, "query_toks": {"en": ["select", "count", "(", "*", ")", "from", "cars_data", "where", "year", "=", "1980", ";"], "ru": ["select", "count", "(", "*", ")", "from", "cars_data", "where", "year", "=", "1980", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "*", ")", "from", "cars_data", "where", "year", "=", "1980", ";"], "ru": ["select", "count", "(", "*", ")", "from", "cars_data", "where", "year", "=", "1980", ";"]}, "masked_query": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;", "question_pauq": {"ru": "\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043c\u0430\u0448\u0438\u043d \u0431\u044b\u043b\u043e \u0432\u044b\u043f\u0443\u0449\u0435\u043d\u043e \u0432 1980 \u0433\u043e\u0434\u0443?"}, "question": "how many cars were produced in 1980?", "kb_id": "car_1"}, {"id": "D_0147", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 5]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 23, false], null], 1980.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 5]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 23, false], null], 1980.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["In", "1980", ",", "how", "many", "cars", "were", "made", "?"], "ru": ["\u0421\u043a\u043e\u043b\u044c\u043a\u043e", "\u043c\u0430\u0448\u0438\u043d", "\u0431\u044b\u043b\u043e", "\u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043d\u043e", "\u0432", "1980", "\u0433\u043e\u0434\u0443", "?"]}, "query_toks": {"en": ["select", "count", "(", "*", ")", "from", "cars_data", "where", "year", "=", "1980", ";"], "ru": ["select", "count", "(", "*", ")", "from", "cars_data", "where", "year", "=", "1980", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "*", ")", "from", "cars_data", "where", "year", "=", "1980", ";"], "ru": ["select", "count", "(", "*", ")", "from", "cars_data", "where", "year", "=", "1980", ";"]}, "masked_query": "SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;", "question_pauq": {"ru": "\u0421\u043a\u043e\u043b\u044c\u043a\u043e \u043c\u0430\u0448\u0438\u043d \u0431\u044b\u043b\u043e \u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043d\u043e \u0432 1980 \u0433\u043e\u0434\u0443?"}, "question": "In 1980, how many cars were made?", "kb_id": "car_1"}, {"id": "D_0148", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  '\u0410\u0432\u0442\u043e\u0412\u0410\u0417';"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 6, false], null], [0, 11, false], null]]}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 8, false], null], "\"American Motor Company\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 6, false], null], [0, 11, false], null]]}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 8, false], null], "\"\u0410\u0432\u0442\u043e\u0412\u0410\u0417\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["How", "many", "car", "models", "were", "produced", "by", "the", "maker", "with", "full", "name", "American", "Motor", "Company", "?"], "ru": ["\u0421\u043a\u043e\u043b\u044c\u043a\u043e", "\u043c\u043e\u0434\u0435\u043b\u0435\u0439", "\u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439", "\u0432\u044b\u043f\u0443\u0441\u0442\u0438\u043b", "\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c", "\u0441", "\u043f\u043e\u043b\u043d\u044b\u043c", "\u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435\u043c", "\u0410\u0432\u0442\u043e\u0412\u0410\u0417", "?"]}, "query_toks": {"en": ["select", "count", "(", "*", ")", "from", "car_makers", "as", "t1", "join", "model_list", "as", "t2", "on", "t1.id", "=", "t2.maker", "where", "t1.fullname", "=", "\"American Motor Company\"", ";"], "ru": ["select", "count", "(", "*", ")", "from", "car_makers", "as", "t1", "join", "model_list", "as", "t2", "on", "t1.id", "=", "t2.maker", "where", "t1.fullname", "=", "\"\u0410\u0432\u0442\u043e\u0412\u0410\u0417\"", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "*", ")", "from", "car_makers", "as", "t1", "join", "model_list", "as", "t2", "on", "t1.id", "=", "t2.maker", "where", "t1.fullname", "=", "value", ";"], "ru": ["select", "count", "(", "*", ")", "from", "car_makers", "as", "t1", "join", "model_list", "as", "t2", "on", "t1.id", "=", "t2.maker", "where", "t1.fullname", "=", "value", ";"]}, "masked_query": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';", "question_pauq": {"ru": "\u0421\u043a\u043e\u043b\u044c\u043a\u043e \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439 \u0432\u044b\u043f\u0443\u0441\u0442\u0438\u043b \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c \u0441 \u043f\u043e\u043b\u043d\u044b\u043c \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435\u043c \u0410\u0432\u0442\u043e\u0412\u0410\u0417?"}, "question": "How many car models were produced by the maker with full name American Motor Company?", "kb_id": "car_1"}, {"id": "D_0149", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  '\u0410\u0432\u0442\u043e\u0412\u0410\u0417';"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 6, false], null], [0, 11, false], null]]}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 8, false], null], "\"American Motor Company\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 6, false], null], [0, 11, false], null]]}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 8, false], null], "\"\u0410\u0432\u0442\u043e\u0412\u0410\u0417\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "number", "of", "car", "models", "created", "by", "the", "car", "maker", "American", "Motor", "Company", "?"], "ru": ["\u0421\u043a\u043e\u043b\u044c\u043a\u043e", "\u043c\u043e\u0434\u0435\u043b\u0435\u0439", "\u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439", "\u0432\u044b\u043f\u0443\u0441\u043a\u0430\u0435\u0442", "\u0430\u0432\u0442\u043e\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c", "\u0410\u0432\u0442\u043e\u0412\u0410\u0417", "?"]}, "query_toks": {"en": ["select", "count", "(", "*", ")", "from", "car_makers", "as", "t1", "join", "model_list", "as", "t2", "on", "t1.id", "=", "t2.maker", "where", "t1.fullname", "=", "\"American Motor Company\"", ";"], "ru": ["select", "count", "(", "*", ")", "from", "car_makers", "as", "t1", "join", "model_list", "as", "t2", "on", "t1.id", "=", "t2.maker", "where", "t1.fullname", "=", "\"\u0410\u0432\u0442\u043e\u0412\u0410\u0417\"", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "*", ")", "from", "car_makers", "as", "t1", "join", "model_list", "as", "t2", "on", "t1.id", "=", "t2.maker", "where", "t1.fullname", "=", "value", ";"], "ru": ["select", "count", "(", "*", ")", "from", "car_makers", "as", "t1", "join", "model_list", "as", "t2", "on", "t1.id", "=", "t2.maker", "where", "t1.fullname", "=", "value", ";"]}, "masked_query": "SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';", "question_pauq": {"ru": "\u0421\u043a\u043e\u043b\u044c\u043a\u043e \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439 \u0432\u044b\u043f\u0443\u0441\u043a\u0430\u0435\u0442 \u0430\u0432\u0442\u043e\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c \u0410\u0432\u0442\u043e\u0412\u0410\u0417?"}, "question": "What is the number of car models created by the car maker American Motor Company?", "kb_id": "car_1"}, {"id": "D_0150", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 6, false], null], [0, 11, false], null]]}, "select": [false, [[0, [0, [0, 8, false], null]], [0, [0, [0, 6, false], null]]]], "where": [], "groupBy": [[0, 6, false]], "having": [[false, 3, [0, [3, 0, false], null], 3.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 6, false], null], [0, 11, false], null]]}, "select": [false, [[0, [0, [0, 8, false], null]], [0, [0, [0, 6, false], null]]]], "where": [], "groupBy": [[0, 6, false]], "having": [[false, 3, [0, [3, 0, false], null], 3.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Which", "makers", "designed", "more", "than", "3", "car", "models", "?", "List", "full", "name", "and", "the", "id", "."], "ru": ["\u041a\u0430\u043a\u0438\u0435", "\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u0438", "\u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0430\u043b\u0438", "\u0431\u043e\u043b\u0435\u0435", "\u0442\u0440\u0435\u0445", "\u043c\u043e\u0434\u0435\u043b\u0435\u0439", "\u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439", "?", "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c", "\u043f\u043e\u043b\u043d\u043e\u0435", "\u0438\u043c\u044f", "\u0438", "id", "."]}, "query_toks": {"en": ["select", "t1.fullname", ",", "t1.id", "from", "car_makers", "as", "t1", "join", "model_list", "as", "t2", "on", "t1.id", "=", "t2.maker", "group", "by", "t1.id", "having", "count", "(", "*", ")", ">", "3", ";"], "ru": ["select", "t1.fullname", ",", "t1.id", "from", "car_makers", "as", "t1", "join", "model_list", "as", "t2", "on", "t1.id", "=", "t2.maker", "group", "by", "t1.id", "having", "count", "(", "*", ")", ">", "3", ";"]}, "query_toks_no_values": {"en": ["select", "t1.fullname", ",", "t1.id", "from", "car_makers", "as", "t1", "join", "model_list", "as", "t2", "on", "t1.id", "=", "t2.maker", "group", "by", "t1.id", "having", "count", "(", "*", ")", ">", "3", ";"], "ru": ["select", "t1.fullname", ",", "t1.id", "from", "car_makers", "as", "t1", "join", "model_list", "as", "t2", "on", "t1.id", "=", "t2.maker", "group", "by", "t1.id", "having", "count", "(", "*", ")", ">", "3", ";"]}, "masked_query": "SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;", "question_pauq": {"ru": "\u041a\u0430\u043a\u0438\u0435 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u0438 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0430\u043b\u0438 \u0431\u043e\u043b\u0435\u0435 \u0442\u0440\u0435\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439? \u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u043f\u043e\u043b\u043d\u043e\u0435 \u0438\u043c\u044f \u0438 id."}, "question": "Which makers designed more than 3 car models? List full name and the id.", "kb_id": "car_1"}, {"id": "D_0151", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 6, false], null], [0, 11, false], null]]}, "select": [false, [[0, [0, [0, 8, false], null]], [0, [0, [0, 6, false], null]]]], "where": [], "groupBy": [[0, 6, false]], "having": [[false, 3, [0, [3, 0, false], null], 3.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 6, false], null], [0, 11, false], null]]}, "select": [false, [[0, [0, [0, 8, false], null]], [0, [0, [0, 6, false], null]]]], "where": [], "groupBy": [[0, 6, false]], "having": [[false, 3, [0, [3, 0, false], null], 3.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "the", "names", "and", "ids", "of", "all", "makers", "with", "more", "than", "3", "models", "?"], "ru": ["\u041a\u0430\u043a", "\u043d\u0430\u0437\u044b\u0432\u0430\u044e\u0442\u0441\u044f", "\u0438", "\u043a\u0430\u043a\u0438\u0435", "id", "\u0443", "\u0432\u0441\u0435\u0445", "\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u0435\u0439", ",", "\u0432\u044b\u043f\u0443\u0441\u043a\u0430\u044e\u0449\u0438\u0445", "\u0431\u043e\u043b\u0435\u0435", "\u0442\u0440\u0435\u0445", "\u043c\u043e\u0434\u0435\u043b\u0435\u0439", "?"]}, "query_toks": {"en": ["select", "t1.fullname", ",", "t1.id", "from", "car_makers", "as", "t1", "join", "model_list", "as", "t2", "on", "t1.id", "=", "t2.maker", "group", "by", "t1.id", "having", "count", "(", "*", ")", ">", "3", ";"], "ru": ["select", "t1.fullname", ",", "t1.id", "from", "car_makers", "as", "t1", "join", "model_list", "as", "t2", "on", "t1.id", "=", "t2.maker", "group", "by", "t1.id", "having", "count", "(", "*", ")", ">", "3", ";"]}, "query_toks_no_values": {"en": ["select", "t1.fullname", ",", "t1.id", "from", "car_makers", "as", "t1", "join", "model_list", "as", "t2", "on", "t1.id", "=", "t2.maker", "group", "by", "t1.id", "having", "count", "(", "*", ")", ">", "3", ";"], "ru": ["select", "t1.fullname", ",", "t1.id", "from", "car_makers", "as", "t1", "join", "model_list", "as", "t2", "on", "t1.id", "=", "t2.maker", "group", "by", "t1.id", "having", "count", "(", "*", ")", ">", "3", ";"]}, "masked_query": "SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;", "question_pauq": {"ru": "\u041a\u0430\u043a \u043d\u0430\u0437\u044b\u0432\u0430\u044e\u0442\u0441\u044f \u0438 \u043a\u0430\u043a\u0438\u0435 id \u0443 \u0432\u0441\u0435\u0445 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u0435\u0439, \u0432\u044b\u043f\u0443\u0441\u043a\u0430\u044e\u0449\u0438\u0445 \u0431\u043e\u043b\u0435\u0435 \u0442\u0440\u0435\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439?"}, "question": "What are the names and ids of all makers with more than 3 models?", "kb_id": "car_1"}, {"id": "D_0152", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 4], ["table_unit", 3], ["table_unit", 2], ["table_unit", 5]], "conds": [[false, 2, [0, [0, 14, false], null], [0, 12, false], null], "and", [false, 2, [0, [0, 11, false], null], [0, 6, false], null], "and", [false, 2, [0, [0, 13, false], null], [0, 16, false], null]]}, "select": [true, [[0, [0, [0, 12, false], null]]]], "where": [[false, 2, [0, [0, 8, false], null], "\"General Motors\"", null], "or", [false, 3, [0, [0, 21, false], null], 3500.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 4], ["table_unit", 3], ["table_unit", 2], ["table_unit", 5]], "conds": [[false, 2, [0, [0, 14, false], null], [0, 12, false], null], "and", [false, 2, [0, [0, 11, false], null], [0, 6, false], null], "and", [false, 2, [0, [0, 13, false], null], [0, 16, false], null]]}, "select": [true, [[0, [0, [0, 12, false], null]]]], "where": [[false, 2, [0, [0, 8, false], null], "\"General Motors\"", null], "or", [false, 3, [0, [0, 21, false], null], 3500.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Which", "distinctive", "models", "are", "produced", "by", "maker", "with", "the", "full", "name", "General", "Motors", "or", "weighing", "more", "than", "3500", "?"], "ru": ["\u041a\u0430\u043a\u0438\u0435", "\u0440\u0430\u0437\u043d\u044b\u0435", "\u043c\u043e\u0434\u0435\u043b\u0438", "\u0432\u044b\u043f\u0443\u0441\u043a\u0430\u0435\u0442", "\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c", "\u0441", "\u043f\u043e\u043b\u043d\u044b\u043c", "\u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435\u043c", "General", "Motors", "\u0438\u043b\u0438", "\u043a\u043e\u0442\u043e\u0440\u044b\u0435", "\u0432\u0435\u0441\u044f\u0442", "\u0431\u043e\u043b\u0435\u0435", "3500", "?"]}, "query_toks": {"en": ["select", "distinct", "t2.model", "from", "car_names", "as", "t1", "join", "model_list", "as", "t2", "on", "t1.model", "=", "t2.model", "join", "car_makers", "as", "t3", "on", "t2.maker", "=", "t3.id", "join", "cars_data", "as", "t4", "on", "t1.makeid", "=", "t4.id", "where", "t3.fullname", "=", "\"General Motors\"", "or", "t4.weight", ">", "3500", ";"], "ru": ["select", "distinct", "t2.model", "from", "car_names", "as", "t1", "join", "model_list", "as", "t2", "on", "t1.model", "=", "t2.model", "join", "car_makers", "as", "t3", "on", "t2.maker", "=", "t3.id", "join", "cars_data", "as", "t4", "on", "t1.makeid", "=", "t4.id", "where", "t3.fullname", "=", "\"General Motors\"", "or", "t4.weight", ">", "3500", ";"]}, "query_toks_no_values": {"en": ["select", "distinct", "t2.model", "from", "car_names", "as", "t1", "join", "model_list", "as", "t2", "on", "t1.model", "=", "t2.model", "join", "car_makers", "as", "t3", "on", "t2.maker", "=", "t3.id", "join", "cars_data", "as", "t4", "on", "t1.makeid", "=", "t4.id", "where", "t3.fullname", "=", "value", "or", "t4.weight", ">", "3500", ";"], "ru": ["select", "distinct", "t2.model", "from", "car_names", "as", "t1", "join", "model_list", "as", "t2", "on", "t1.model", "=", "t2.model", "join", "car_makers", "as", "t3", "on", "t2.maker", "=", "t3.id", "join", "cars_data", "as", "t4", "on", "t1.makeid", "=", "t4.id", "where", "t3.fullname", "=", "value", "or", "t4.weight", ">", "3500", ";"]}, "masked_query": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;", "question_pauq": {"ru": "\u041a\u0430\u043a\u0438\u0435 \u0440\u0430\u0437\u043d\u044b\u0435 \u043c\u043e\u0434\u0435\u043b\u0438 \u0432\u044b\u043f\u0443\u0441\u043a\u0430\u0435\u0442 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c \u0441 \u043f\u043e\u043b\u043d\u044b\u043c \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435\u043c General Motors \u0438\u043b\u0438 \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0432\u0435\u0441\u044f\u0442 \u0431\u043e\u043b\u0435\u0435 3500?"}, "question": "Which distinctive models are produced by maker with the full name General Motors or weighing more than 3500?", "kb_id": "car_1"}, {"id": "D_0153", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 4], ["table_unit", 3], ["table_unit", 2], ["table_unit", 5]], "conds": [[false, 2, [0, [0, 14, false], null], [0, 12, false], null], "and", [false, 2, [0, [0, 11, false], null], [0, 6, false], null], "and", [false, 2, [0, [0, 13, false], null], [0, 16, false], null]]}, "select": [true, [[0, [0, [0, 12, false], null]]]], "where": [[false, 2, [0, [0, 8, false], null], "\"General Motors\"", null], "or", [false, 3, [0, [0, 21, false], null], 3500.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 4], ["table_unit", 3], ["table_unit", 2], ["table_unit", 5]], "conds": [[false, 2, [0, [0, 14, false], null], [0, 12, false], null], "and", [false, 2, [0, [0, 11, false], null], [0, 6, false], null], "and", [false, 2, [0, [0, 13, false], null], [0, 16, false], null]]}, "select": [true, [[0, [0, [0, 12, false], null]]]], "where": [[false, 2, [0, [0, 8, false], null], "\"General Motors\"", null], "or", [false, 3, [0, [0, 21, false], null], 3500.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "the", "different", "models", "created", "by", "either", "the", "car", "maker", "General", "Motors", "or", "weighed", "more", "than", "3500", "?"], "ru": ["\u041a\u0430\u043a\u0438\u0435", "\u0440\u0430\u0437\u043d\u044b\u0435", "\u043c\u043e\u0434\u0435\u043b\u0438", "\u0441\u043e\u0437\u0434\u0430\u043d\u044b", "\u0430\u0432\u0442\u043e\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u0435\u043c", "General", "Motors", "\u0438\u043b\u0438", "\u0432\u0435\u0441\u044f\u0442", "\u0431\u043e\u043b\u0435\u0435", "3500", "?"]}, "query_toks": {"en": ["select", "distinct", "t2.model", "from", "car_names", "as", "t1", "join", "model_list", "as", "t2", "on", "t1.model", "=", "t2.model", "join", "car_makers", "as", "t3", "on", "t2.maker", "=", "t3.id", "join", "cars_data", "as", "t4", "on", "t1.makeid", "=", "t4.id", "where", "t3.fullname", "=", "\"General Motors\"", "or", "t4.weight", ">", "3500", ";"], "ru": ["select", "distinct", "t2.model", "from", "car_names", "as", "t1", "join", "model_list", "as", "t2", "on", "t1.model", "=", "t2.model", "join", "car_makers", "as", "t3", "on", "t2.maker", "=", "t3.id", "join", "cars_data", "as", "t4", "on", "t1.makeid", "=", "t4.id", "where", "t3.fullname", "=", "\"General Motors\"", "or", "t4.weight", ">", "3500", ";"]}, "query_toks_no_values": {"en": ["select", "distinct", "t2.model", "from", "car_names", "as", "t1", "join", "model_list", "as", "t2", "on", "t1.model", "=", "t2.model", "join", "car_makers", "as", "t3", "on", "t2.maker", "=", "t3.id", "join", "cars_data", "as", "t4", "on", "t1.makeid", "=", "t4.id", "where", "t3.fullname", "=", "value", "or", "t4.weight", ">", "3500", ";"], "ru": ["select", "distinct", "t2.model", "from", "car_names", "as", "t1", "join", "model_list", "as", "t2", "on", "t1.model", "=", "t2.model", "join", "car_makers", "as", "t3", "on", "t2.maker", "=", "t3.id", "join", "cars_data", "as", "t4", "on", "t1.makeid", "=", "t4.id", "where", "t3.fullname", "=", "value", "or", "t4.weight", ">", "3500", ";"]}, "masked_query": "SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;", "question_pauq": {"ru": "\u041a\u0430\u043a\u0438\u0435 \u0440\u0430\u0437\u043d\u044b\u0435 \u043c\u043e\u0434\u0435\u043b\u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u044b \u0430\u0432\u0442\u043e\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u0435\u043c General Motors \u0438\u043b\u0438 \u0432\u0435\u0441\u044f\u0442 \u0431\u043e\u043b\u0435\u0435 3500?"}, "question": "What are the different models created by either the car maker General Motors or weighed more than 3500?", "kb_id": "car_1"}, {"id": "D_0154", "source": "spider-dev", "type": "dev", "query": {"ru": "select distinct year from cars_data where weight between 3000 and 4000;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 5]], "conds": []}, "select": [true, [[0, [0, [0, 23, false], null]]]], "where": [[false, 1, [0, [0, 21, false], null], 3000.0, 4000.0]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 5]], "conds": []}, "select": [true, [[0, [0, [0, 23, false], null]]]], "where": [[false, 1, [0, [0, 21, false], null], 3000.0, 4000.0]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["In", "which", "years", "cars", "were", "produced", "weighing", "no", "less", "than", "3000", "and", "no", "more", "than", "4000", "?"], "ru": ["\u0412", "\u043a\u0430\u043a\u0438\u0435", "\u0433\u043e\u0434\u044b", "\u0432\u044b\u043f\u0443\u0441\u043a\u0430\u043b\u0438\u0441\u044c", "\u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0438", "\u043c\u0430\u0441\u0441\u043e\u0439", "\u043d\u0435", "\u043c\u0435\u043d\u0435\u0435", "3000", "\u0438", "\u043d\u0435", "\u0431\u043e\u043b\u0435\u0435", "4000", "?"]}, "query_toks": {"en": ["select", "distinct", "year", "from", "cars_data", "where", "weight", "between", "3000", "and", "4000", ";"], "ru": ["select", "distinct", "year", "from", "cars_data", "where", "weight", "between", "3000", "and", "4000", ";"]}, "query_toks_no_values": {"en": ["select", "distinct", "year", "from", "cars_data", "where", "weight", "between", "3000", "and", "4000", ";"], "ru": ["select", "distinct", "year", "from", "cars_data", "where", "weight", "between", "3000", "and", "4000", ";"]}, "masked_query": "select distinct year from cars_data where weight between 3000 and 4000;", "question_pauq": {"ru": "\u0412 \u043a\u0430\u043a\u0438\u0435 \u0433\u043e\u0434\u044b \u0432\u044b\u043f\u0443\u0441\u043a\u0430\u043b\u0438\u0441\u044c \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0438 \u043c\u0430\u0441\u0441\u043e\u0439 \u043d\u0435 \u043c\u0435\u043d\u0435\u0435 3000 \u0438 \u043d\u0435 \u0431\u043e\u043b\u0435\u0435 4000?"}, "question": "In which years cars were produced weighing no less than 3000 and no more than 4000 ?", "kb_id": "car_1"}, {"id": "D_0155", "source": "spider-dev", "type": "dev", "query": {"ru": "select distinct year from cars_data where weight between 3000 and 4000;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 5]], "conds": []}, "select": [true, [[0, [0, [0, 23, false], null]]]], "where": [[false, 1, [0, [0, 21, false], null], 3000.0, 4000.0]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 5]], "conds": []}, "select": [true, [[0, [0, [0, 23, false], null]]]], "where": [[false, 1, [0, [0, 21, false], null], 3000.0, 4000.0]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "the", "different", "years", "in", "which", "there", "were", "cars", "produced", "that", "weighed", "less", "than", "4000", "and", "also", "cars", "that", "weighted", "more", "than", "3000", "?"], "ru": ["\u0412", "\u043a\u0430\u043a\u0438\u0435", "\u0440\u0430\u0437\u043d\u044b\u0435", "\u0433\u043e\u0434\u044b", "\u0432\u044b\u043f\u0443\u0441\u043a\u0430\u043b\u0438\u0441\u044c", "\u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0438", "\u0432\u0435\u0441\u043e\u043c", "\u043c\u0435\u043d\u0435\u0435", "4000", ",", "\u0430", "\u0442\u0430\u043a\u0436\u0435", "\u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0438", "\u0432\u0435\u0441\u043e\u043c", "\u0431\u043e\u043b\u0435\u0435", "3000", "?"]}, "query_toks": {"en": ["select", "distinct", "year", "from", "cars_data", "where", "weight", "between", "3000", "and", "4000", ";"], "ru": ["select", "distinct", "year", "from", "cars_data", "where", "weight", "between", "3000", "and", "4000", ";"]}, "query_toks_no_values": {"en": ["select", "distinct", "year", "from", "cars_data", "where", "weight", "between", "3000", "and", "4000", ";"], "ru": ["select", "distinct", "year", "from", "cars_data", "where", "weight", "between", "3000", "and", "4000", ";"]}, "masked_query": "select distinct year from cars_data where weight between 3000 and 4000;", "question_pauq": {"ru": "\u0412 \u043a\u0430\u043a\u0438\u0435 \u0440\u0430\u0437\u043d\u044b\u0435 \u0433\u043e\u0434\u044b \u0432\u044b\u043f\u0443\u0441\u043a\u0430\u043b\u0438\u0441\u044c \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0438 \u0432\u0435\u0441\u043e\u043c \u043c\u0435\u043d\u0435\u0435 4000, \u0430 \u0442\u0430\u043a\u0436\u0435 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0438 \u0432\u0435\u0441\u043e\u043c \u0431\u043e\u043b\u0435\u0435 3000?"}, "question": "What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 ?", "kb_id": "car_1"}, {"id": "D_0156", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 5]], "conds": []}, "select": [false, [[0, [0, [0, 20, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 22, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 5]], "conds": []}, "select": [false, [[0, [0, [0, 20, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 22, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "horsepower", "of", "the", "car", "with", "the", "largest", "accelerate", "?"], "ru": ["\u041a\u0430\u043a\u0430\u044f", "\u043c\u043e\u0449\u043d\u043e\u0441\u0442\u044c", "\u0443", "\u043c\u0430\u0448\u0438\u043d\u044b", "\u0441", "\u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0438\u043c", "\u0440\u0430\u0437\u0433\u043e\u043d\u043e\u043c", "?"]}, "query_toks": {"en": ["select", "t1.horsepower", "from", "cars_data", "as", "t1", "order", "by", "t1.accelerate", "desc", "limit", "1", ";"], "ru": ["select", "t1.horsepower", "from", "cars_data", "as", "t1", "order", "by", "t1.accelerate", "desc", "limit", "1", ";"]}, "query_toks_no_values": {"en": ["select", "t1.horsepower", "from", "cars_data", "as", "t1", "order", "by", "t1.accelerate", "desc", "limit", "1", ";"], "ru": ["select", "t1.horsepower", "from", "cars_data", "as", "t1", "order", "by", "t1.accelerate", "desc", "limit", "1", ";"]}, "masked_query": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;", "question_pauq": {"ru": "\u041a\u0430\u043a\u0430\u044f \u043c\u043e\u0449\u043d\u043e\u0441\u0442\u044c \u0443 \u043c\u0430\u0448\u0438\u043d\u044b \u0441 \u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0438\u043c \u0440\u0430\u0437\u0433\u043e\u043d\u043e\u043c?"}, "question": "What is the horsepower of the car with the largest accelerate?", "kb_id": "car_1"}, {"id": "D_0157", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 5]], "conds": []}, "select": [false, [[0, [0, [0, 20, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 22, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 5]], "conds": []}, "select": [false, [[0, [0, [0, 20, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 22, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "horsepower", "of", "the", "car", "with", "the", "greatest", "accelerate", "?"], "ru": ["\u041a\u0430\u043a\u0430\u044f", "\u043c\u043e\u0449\u043d\u043e\u0441\u0442\u044c", "\u0443", "\u043c\u0430\u0448\u0438\u043d\u044b", "\u0441", "\u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0438\u043c", "\u0440\u0430\u0437\u0433\u043e\u043d\u043e\u043c", "?"]}, "query_toks": {"en": ["select", "t1.horsepower", "from", "cars_data", "as", "t1", "order", "by", "t1.accelerate", "desc", "limit", "1", ";"], "ru": ["select", "t1.horsepower", "from", "cars_data", "as", "t1", "order", "by", "t1.accelerate", "desc", "limit", "1", ";"]}, "query_toks_no_values": {"en": ["select", "t1.horsepower", "from", "cars_data", "as", "t1", "order", "by", "t1.accelerate", "desc", "limit", "1", ";"], "ru": ["select", "t1.horsepower", "from", "cars_data", "as", "t1", "order", "by", "t1.accelerate", "desc", "limit", "1", ";"]}, "masked_query": "SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;", "question_pauq": {"ru": "\u041a\u0430\u043a\u0430\u044f \u043c\u043e\u0449\u043d\u043e\u0441\u0442\u044c \u0443 \u043c\u0430\u0448\u0438\u043d\u044b \u0441 \u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0438\u043c \u0440\u0430\u0437\u0433\u043e\u043d\u043e\u043c?"}, "question": "What is the horsepower of the car with the greatest accelerate?", "kb_id": "car_1"}, {"id": "D_0158", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 5], ["table_unit", 4]], "conds": [[false, 2, [0, [0, 16, false], null], [0, 13, false], null]]}, "select": [false, [[0, [0, [0, 18, false], null]]]], "where": [[false, 2, [0, [0, 14, false], null], "\"volvo\"", null]], "groupBy": [], "having": [], "orderBy": ["asc", [[0, [0, 22, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 5], ["table_unit", 4]], "conds": [[false, 2, [0, [0, 16, false], null], [0, 13, false], null]]}, "select": [false, [[0, [0, [0, 18, false], null]]]], "where": [[false, 2, [0, [0, 14, false], null], "\"volvo\"", null]], "groupBy": [], "having": [], "orderBy": ["asc", [[0, [0, 22, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["For", "model", "volvo", ",", "how", "many", "cylinders", "does", "the", "car", "with", "the", "least", "accelerate", "have", "?"], "ru": ["\u0414\u043b\u044f", "\u043c\u043e\u0434\u0435\u043b\u0438", "Volvo", ",", "\u0441\u043a\u043e\u043b\u044c\u043a\u043e", "\u0446\u0438\u043b\u0438\u043d\u0434\u0440\u043e\u0432", "\u0443", "\u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f", "\u0441", "\u043d\u0430\u0438\u043c\u0435\u043d\u044c\u0448\u0438\u043c", "\u0443\u0441\u043a\u043e\u0440\u0435\u043d\u0438\u0435\u043c", "?"]}, "query_toks": {"en": ["select", "t1.cylinders", "from", "cars_data", "as", "t1", "join", "car_names", "as", "t2", "on", "t1.id", "=", "t2.makeid", "where", "t2.model", "=", "\"volvo\"", "order", "by", "t1.accelerate", "asc", "limit", "1", ";"], "ru": ["select", "t1.cylinders", "from", "cars_data", "as", "t1", "join", "car_names", "as", "t2", "on", "t1.id", "=", "t2.makeid", "where", "t2.model", "=", "\"volvo\"", "order", "by", "t1.accelerate", "asc", "limit", "1", ";"]}, "query_toks_no_values": {"en": ["select", "t1.cylinders", "from", "cars_data", "as", "t1", "join", "car_names", "as", "t2", "on", "t1.id", "=", "t2.makeid", "where", "t2.model", "=", "value", "order", "by", "t1.accelerate", "asc", "limit", "1", ";"], "ru": ["select", "t1.cylinders", "from", "cars_data", "as", "t1", "join", "car_names", "as", "t2", "on", "t1.id", "=", "t2.makeid", "where", "t2.model", "=", "value", "order", "by", "t1.accelerate", "asc", "limit", "1", ";"]}, "masked_query": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;", "question_pauq": {"ru": "\u0414\u043b\u044f \u043c\u043e\u0434\u0435\u043b\u0438 Volvo, \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0446\u0438\u043b\u0438\u043d\u0434\u0440\u043e\u0432 \u0443 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f \u0441 \u043d\u0430\u0438\u043c\u0435\u043d\u044c\u0448\u0438\u043c \u0443\u0441\u043a\u043e\u0440\u0435\u043d\u0438\u0435\u043c?"}, "question": "For model volvo, how many cylinders does the car with the least accelerate have?", "kb_id": "car_1"}, {"id": "D_0159", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 5], ["table_unit", 4]], "conds": [[false, 2, [0, [0, 16, false], null], [0, 13, false], null]]}, "select": [false, [[0, [0, [0, 18, false], null]]]], "where": [[false, 2, [0, [0, 14, false], null], "\"volvo\"", null]], "groupBy": [], "having": [], "orderBy": ["asc", [[0, [0, 22, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 5], ["table_unit", 4]], "conds": [[false, 2, [0, [0, 16, false], null], [0, 13, false], null]]}, "select": [false, [[0, [0, [0, 18, false], null]]]], "where": [[false, 2, [0, [0, 14, false], null], "\"volvo\"", null]], "groupBy": [], "having": [], "orderBy": ["asc", [[0, [0, 22, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["For", "a", "volvo", "model", ",", "how", "many", "cylinders", "does", "the", "version", "with", "least", "accelerate", "have", "?"], "ru": ["\u0421\u043a\u043e\u043b\u044c\u043a\u043e", "\u0446\u0438\u043b\u0438\u043d\u0434\u0440\u043e\u0432", "\u0443", "\u043c\u043e\u0434\u0435\u043b\u0438", "Volvo", "\u0441", "\u043d\u0430\u0438\u043c\u0435\u043d\u044c\u0448\u0438\u043c", "\u0443\u0441\u043a\u043e\u0440\u0435\u043d\u0438\u0435\u043c", "?"]}, "query_toks": {"en": ["select", "t1.cylinders", "from", "cars_data", "as", "t1", "join", "car_names", "as", "t2", "on", "t1.id", "=", "t2.makeid", "where", "t2.model", "=", "\"volvo\"", "order", "by", "t1.accelerate", "asc", "limit", "1", ";"], "ru": ["select", "t1.cylinders", "from", "cars_data", "as", "t1", "join", "car_names", "as", "t2", "on", "t1.id", "=", "t2.makeid", "where", "t2.model", "=", "\"volvo\"", "order", "by", "t1.accelerate", "asc", "limit", "1", ";"]}, "query_toks_no_values": {"en": ["select", "t1.cylinders", "from", "cars_data", "as", "t1", "join", "car_names", "as", "t2", "on", "t1.id", "=", "t2.makeid", "where", "t2.model", "=", "value", "order", "by", "t1.accelerate", "asc", "limit", "1", ";"], "ru": ["select", "t1.cylinders", "from", "cars_data", "as", "t1", "join", "car_names", "as", "t2", "on", "t1.id", "=", "t2.makeid", "where", "t2.model", "=", "value", "order", "by", "t1.accelerate", "asc", "limit", "1", ";"]}, "masked_query": "SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;", "question_pauq": {"ru": "\u0421\u043a\u043e\u043b\u044c\u043a\u043e \u0446\u0438\u043b\u0438\u043d\u0434\u0440\u043e\u0432 \u0443 \u043c\u043e\u0434\u0435\u043b\u0438 Volvo \u0441 \u043d\u0430\u0438\u043c\u0435\u043d\u044c\u0448\u0438\u043c \u0443\u0441\u043a\u043e\u0440\u0435\u043d\u0438\u0435\u043c?"}, "question": "For a volvo model, how many cylinders does the version with least accelerate have?", "kb_id": "car_1"}, {"id": "D_0160", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );"}, "sql": {"en": {"from": {"table_units": [["table_unit", 5]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 3, [0, [0, 22, false], null], {"from": {"table_units": [["table_unit", 5]], "conds": []}, "select": [false, [[0, [0, [0, 22, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 20, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 5]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 3, [0, [0, 22, false], null], {"from": {"table_units": [["table_unit", 5]], "conds": []}, "select": [false, [[0, [0, [0, 22, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 20, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["How", "many", "cars", "have", "a", "larger", "accelerate", "than", "the", "car", "with", "the", "largest", "horsepower", "?"], "ru": ["\u0421\u043a\u043e\u043b\u044c\u043a\u043e", "\u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439", "\u0438\u043c\u0435\u044e\u0442", "\u0431\u043e\u043b\u044c\u0448\u0438\u0439", "\u0440\u0430\u0437\u0433\u043e\u043d", ",", "\u0447\u0435\u043c", "\u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044c", "\u0441", "\u0441\u0430\u043c\u043e\u0439", "\u0431\u043e\u043b\u044c\u0448\u043e\u0439", "\u043c\u043e\u0449\u043d\u043e\u0441\u0442\u044c\u044e", "?"]}, "query_toks": {"en": ["select", "count", "(", "*", ")", "from", "cars_data", "where", "accelerate", ">", "(", "select", "accelerate", "from", "cars_data", "order", "by", "horsepower", "desc", "limit", "1", ")", ";"], "ru": ["select", "count", "(", "*", ")", "from", "cars_data", "where", "accelerate", ">", "(", "select", "accelerate", "from", "cars_data", "order", "by", "horsepower", "desc", "limit", "1", ")", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "*", ")", "from", "cars_data", "where", "accelerate", ">", "(", "select", "accelerate", "from", "cars_data", "order", "by", "horsepower", "desc", "limit", "1", ")", ";"], "ru": ["select", "count", "(", "*", ")", "from", "cars_data", "where", "accelerate", ">", "(", "select", "accelerate", "from", "cars_data", "order", "by", "horsepower", "desc", "limit", "1", ")", ";"]}, "masked_query": "SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );", "question_pauq": {"ru": "\u0421\u043a\u043e\u043b\u044c\u043a\u043e \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439 \u0438\u043c\u0435\u044e\u0442 \u0431\u043e\u043b\u044c\u0448\u0438\u0439 \u0440\u0430\u0437\u0433\u043e\u043d, \u0447\u0435\u043c \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044c \u0441 \u0441\u0430\u043c\u043e\u0439 \u0431\u043e\u043b\u044c\u0448\u043e\u0439 \u043c\u043e\u0449\u043d\u043e\u0441\u0442\u044c\u044e?"}, "question": "How many cars have a larger accelerate than the car with the largest horsepower?", "kb_id": "car_1"}, {"id": "D_0161", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );"}, "sql": {"en": {"from": {"table_units": [["table_unit", 5]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 3, [0, [0, 22, false], null], {"from": {"table_units": [["table_unit", 5]], "conds": []}, "select": [false, [[0, [0, [0, 22, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 20, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 5]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 3, [0, [0, 22, false], null], {"from": {"table_units": [["table_unit", 5]], "conds": []}, "select": [false, [[0, [0, [0, 22, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 20, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "number", "of", "cars", "with", "a", "greater", "accelerate", "than", "the", "one", "with", "the", "most", "horsepower", "?"], "ru": ["\u041a\u0430\u043a\u043e\u0435", "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e", "\u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439", "\u0434\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0438\u0440\u0443\u0435\u0442", "\u0431\u043e\u043b\u0435\u0435", "\u0432\u044b\u0441\u043e\u043a\u0438\u0439", "\u0440\u0430\u0437\u0433\u043e\u043d", ",", "\u0447\u0435\u043c", "\u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044c", "\u0441", "\u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0438\u043c", "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c", "\u043b\u043e\u0448\u0430\u0434\u0438\u043d\u044b\u0445", "\u0441\u0438\u043b", "?"]}, "query_toks": {"en": ["select", "count", "(", "*", ")", "from", "cars_data", "where", "accelerate", ">", "(", "select", "accelerate", "from", "cars_data", "order", "by", "horsepower", "desc", "limit", "1", ")", ";"], "ru": ["select", "count", "(", "*", ")", "from", "cars_data", "where", "accelerate", ">", "(", "select", "accelerate", "from", "cars_data", "order", "by", "horsepower", "desc", "limit", "1", ")", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "*", ")", "from", "cars_data", "where", "accelerate", ">", "(", "select", "accelerate", "from", "cars_data", "order", "by", "horsepower", "desc", "limit", "1", ")", ";"], "ru": ["select", "count", "(", "*", ")", "from", "cars_data", "where", "accelerate", ">", "(", "select", "accelerate", "from", "cars_data", "order", "by", "horsepower", "desc", "limit", "1", ")", ";"]}, "masked_query": "SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439 \u0434\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0438\u0440\u0443\u0435\u0442 \u0431\u043e\u043b\u0435\u0435 \u0432\u044b\u0441\u043e\u043a\u0438\u0439 \u0440\u0430\u0437\u0433\u043e\u043d, \u0447\u0435\u043c \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044c \u0441 \u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0438\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c \u043b\u043e\u0448\u0430\u0434\u0438\u043d\u044b\u0445 \u0441\u0438\u043b?"}, "question": "What is the number of cars with a greater accelerate than the one with the most horsepower?", "kb_id": "car_1"}, {"id": "D_0162", "source": "spider-dev", "type": "dev", "query": {"ru": "select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 3, false], null], [0, 9, false], null]]}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [[0, 3, false]], "having": [[false, 3, [0, [3, 0, false], null], 2.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 3, false], null], [0, 9, false], null]]}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [[0, 3, false]], "having": [[false, 3, [0, [3, 0, false], null], 2.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["How", "many", "countries", "has", "more", "than", "2", "car", "makers", "?"], "ru": ["\u0412", "\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445", "\u0441\u0442\u0440\u0430\u043d\u0430\u0445", "\u0431\u043e\u043b\u0435\u0435", "\u0434\u0432\u0443\u0445", "\u0430\u0432\u0442\u043e\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u0435\u0439", "?"]}, "query_toks": {"en": ["select", "count", "(", "*", ")", "from", "countries", "as", "t1", "join", "car_makers", "as", "t2", "on", "t1.countryid", "=", "t2.country", "group", "by", "t1.countryid", "having", "count", "(", "*", ")", ">", "2", ";"], "ru": ["select", "count", "(", "*", ")", "from", "countries", "as", "t1", "join", "car_makers", "as", "t2", "on", "t1.countryid", "=", "t2.country", "group", "by", "t1.countryid", "having", "count", "(", "*", ")", ">", "2", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "*", ")", "from", "countries", "as", "t1", "join", "car_makers", "as", "t2", "on", "t1.countryid", "=", "t2.country", "group", "by", "t1.countryid", "having", "count", "(", "*", ")", ">", "2", ";"], "ru": ["select", "count", "(", "*", ")", "from", "countries", "as", "t1", "join", "car_makers", "as", "t2", "on", "t1.countryid", "=", "t2.country", "group", "by", "t1.countryid", "having", "count", "(", "*", ")", ">", "2", ";"]}, "masked_query": "select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2;", "question_pauq": {"ru": "\u0412 \u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0441\u0442\u0440\u0430\u043d\u0430\u0445 \u0431\u043e\u043b\u0435\u0435 \u0434\u0432\u0443\u0445 \u0430\u0432\u0442\u043e\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u0435\u0439?"}, "question": "How many countries has more than 2 car makers ?", "kb_id": "car_1"}, {"id": "D_0163", "source": "spider-dev", "type": "dev", "query": {"ru": "select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 3, false], null], [0, 9, false], null]]}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [[0, 3, false]], "having": [[false, 3, [0, [3, 0, false], null], 2.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 3, false], null], [0, 9, false], null]]}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [[0, 3, false]], "having": [[false, 3, [0, [3, 0, false], null], 2.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "number", "of", "countries", "with", "more", "than", "2", "car", "makers", "?"], "ru": ["\u0412", "\u043a\u0430\u043a\u043e\u043c", "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0435", "\u0441\u0442\u0440\u0430\u043d", "\u0438\u043c\u0435\u0435\u0442\u0441\u044f", "\u0431\u043e\u043b\u0435\u0435", "\u0434\u0432\u0443\u0445", "\u0430\u0432\u0442\u043e\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u0435\u0439", "?"]}, "query_toks": {"en": ["select", "count", "(", "*", ")", "from", "countries", "as", "t1", "join", "car_makers", "as", "t2", "on", "t1.countryid", "=", "t2.country", "group", "by", "t1.countryid", "having", "count", "(", "*", ")", ">", "2", ";"], "ru": ["select", "count", "(", "*", ")", "from", "countries", "as", "t1", "join", "car_makers", "as", "t2", "on", "t1.countryid", "=", "t2.country", "group", "by", "t1.countryid", "having", "count", "(", "*", ")", ">", "2", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "*", ")", "from", "countries", "as", "t1", "join", "car_makers", "as", "t2", "on", "t1.countryid", "=", "t2.country", "group", "by", "t1.countryid", "having", "count", "(", "*", ")", ">", "2", ";"], "ru": ["select", "count", "(", "*", ")", "from", "countries", "as", "t1", "join", "car_makers", "as", "t2", "on", "t1.countryid", "=", "t2.country", "group", "by", "t1.countryid", "having", "count", "(", "*", ")", ">", "2", ";"]}, "masked_query": "select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2;", "question_pauq": {"ru": "\u0412 \u043a\u0430\u043a\u043e\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0435 \u0441\u0442\u0440\u0430\u043d \u0438\u043c\u0435\u0435\u0442\u0441\u044f \u0431\u043e\u043b\u0435\u0435 \u0434\u0432\u0443\u0445 \u0430\u0432\u0442\u043e\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u0435\u0439?"}, "question": "What is the number of countries with more than 2 car makers ?", "kb_id": "car_1"}, {"id": "D_0164", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 5]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 3, [0, [0, 18, false], null], 6.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 5]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 3, [0, [0, 18, false], null], 6.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["How", "many", "cars", "has", "over", "6", "cylinders", "?"], "ru": ["\u0421\u043a\u043e\u043b\u044c\u043a\u043e", "\u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439", "\u0438\u043c\u0435\u0435\u0442", "\u0431\u043e\u043b\u0435\u0435", "6", "\u0446\u0438\u043b\u0438\u043d\u0434\u0440\u043e\u0432", "?"]}, "query_toks": {"en": ["select", "count", "(", "*", ")", "from", "cars_data", "where", "cylinders", ">", "6", ";"], "ru": ["select", "count", "(", "*", ")", "from", "cars_data", "where", "cylinders", ">", "6", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "*", ")", "from", "cars_data", "where", "cylinders", ">", "6", ";"], "ru": ["select", "count", "(", "*", ")", "from", "cars_data", "where", "cylinders", ">", "6", ";"]}, "masked_query": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;", "question_pauq": {"ru": "\u0421\u043a\u043e\u043b\u044c\u043a\u043e \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439 \u0438\u043c\u0435\u0435\u0442 \u0431\u043e\u043b\u0435\u0435 6 \u0446\u0438\u043b\u0438\u043d\u0434\u0440\u043e\u0432?"}, "question": "How many cars has over 6 cylinders?", "kb_id": "car_1"}, {"id": "D_0165", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 5]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 3, [0, [0, 18, false], null], 6.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 5]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 3, [0, [0, 18, false], null], 6.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "number", "of", "carsw", "ith", "over", "6", "cylinders", "?"], "ru": ["\u0421\u043a\u043e\u043b\u044c\u043a\u043e", "\u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439", "\u0441", "\u0431\u043e\u043b\u0435\u0435", "\u0447\u0435\u043c", "6", "\u0446\u0438\u043b\u0438\u043d\u0434\u0440\u0430\u043c\u0438", "?"]}, "query_toks": {"en": ["select", "count", "(", "*", ")", "from", "cars_data", "where", "cylinders", ">", "6", ";"], "ru": ["select", "count", "(", "*", ")", "from", "cars_data", "where", "cylinders", ">", "6", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "*", ")", "from", "cars_data", "where", "cylinders", ">", "6", ";"], "ru": ["select", "count", "(", "*", ")", "from", "cars_data", "where", "cylinders", ">", "6", ";"]}, "masked_query": "SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;", "question_pauq": {"ru": "\u0421\u043a\u043e\u043b\u044c\u043a\u043e \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439 \u0441 \u0431\u043e\u043b\u0435\u0435 \u0447\u0435\u043c 6 \u0446\u0438\u043b\u0438\u043d\u0434\u0440\u0430\u043c\u0438?"}, "question": "What is the number of carsw ith over 6 cylinders?", "kb_id": "car_1"}, {"id": "D_0166", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 4], ["table_unit", 5]], "conds": [[false, 2, [0, [0, 13, false], null], [0, 16, false], null]]}, "select": [false, [[0, [0, [0, 14, false], null]]]], "where": [[false, 2, [0, [0, 18, false], null], 4.0, null]], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 20, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 4], ["table_unit", 5]], "conds": [[false, 2, [0, [0, 13, false], null], [0, 16, false], null]]}, "select": [false, [[0, [0, [0, 14, false], null]]]], "where": [[false, 2, [0, [0, 18, false], null], 4.0, null]], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 20, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["For", "the", "cars", "with", "4", "cylinders", ",", "which", "model", "has", "the", "largest", "horsepower", "?"], "ru": ["\u041a\u0430\u043a\u0430\u044f", "\u043c\u043e\u0434\u0435\u043b\u044c", "\u0438\u043c\u0435\u0435\u0442", "\u0441\u0430\u043c\u0443\u044e", "\u0431\u043e\u043b\u044c\u0448\u0443\u044e", "\u043c\u043e\u0449\u043d\u043e\u0441\u0442\u044c", "\u0434\u043b\u044f", "\u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439", "\u0441", "4", "\u0446\u0438\u043b\u0438\u043d\u0434\u0440\u0430\u043c\u0438", "?"]}, "query_toks": {"en": ["select", "t1.model", "from", "car_names", "as", "t1", "join", "cars_data", "as", "t2", "on", "t1.makeid", "=", "t2.id", "where", "t2.cylinders", "=", "4", "order", "by", "t2.horsepower", "desc", "limit", "1", ";"], "ru": ["select", "t1.model", "from", "car_names", "as", "t1", "join", "cars_data", "as", "t2", "on", "t1.makeid", "=", "t2.id", "where", "t2.cylinders", "=", "4", "order", "by", "t2.horsepower", "desc", "limit", "1", ";"]}, "query_toks_no_values": {"en": ["select", "t1.model", "from", "car_names", "as", "t1", "join", "cars_data", "as", "t2", "on", "t1.makeid", "=", "t2.id", "where", "t2.cylinders", "=", "4", "order", "by", "t2.horsepower", "desc", "limit", "1", ";"], "ru": ["select", "t1.model", "from", "car_names", "as", "t1", "join", "cars_data", "as", "t2", "on", "t1.makeid", "=", "t2.id", "where", "t2.cylinders", "=", "4", "order", "by", "t2.horsepower", "desc", "limit", "1", ";"]}, "masked_query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;", "question_pauq": {"ru": "\u041a\u0430\u043a\u0430\u044f \u043c\u043e\u0434\u0435\u043b\u044c \u0438\u043c\u0435\u0435\u0442 \u0441\u0430\u043c\u0443\u044e \u0431\u043e\u043b\u044c\u0448\u0443\u044e \u043c\u043e\u0449\u043d\u043e\u0441\u0442\u044c \u0434\u043b\u044f \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439 \u0441 4 \u0446\u0438\u043b\u0438\u043d\u0434\u0440\u0430\u043c\u0438?"}, "question": "For the cars with 4 cylinders, which model has the largest horsepower?", "kb_id": "car_1"}, {"id": "D_0167", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 4], ["table_unit", 5]], "conds": [[false, 2, [0, [0, 13, false], null], [0, 16, false], null]]}, "select": [false, [[0, [0, [0, 14, false], null]]]], "where": [[false, 2, [0, [0, 18, false], null], 4.0, null]], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 20, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 4], ["table_unit", 5]], "conds": [[false, 2, [0, [0, 13, false], null], [0, 16, false], null]]}, "select": [false, [[0, [0, [0, 14, false], null]]]], "where": [[false, 2, [0, [0, 18, false], null], 4.0, null]], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 20, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["For", "all", "of", "the", "4", "cylinder", "cars", ",", "which", "model", "has", "the", "most", "horsepower", "?"], "ru": ["\u041a\u0430\u043a\u0430\u044f", "\u043c\u043e\u0434\u0435\u043b\u044c", "\u0438\u0437", "\u0432\u0441\u0435\u0445", "4-\u0446\u0438\u043b\u0438\u043d\u0434\u0440\u043e\u0432\u044b\u0445", "\u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439", "\u0438\u043c\u0435\u0435\u0442", "\u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0443\u044e", "\u043c\u043e\u0449\u043d\u043e\u0441\u0442\u044c", "?"]}, "query_toks": {"en": ["select", "t1.model", "from", "car_names", "as", "t1", "join", "cars_data", "as", "t2", "on", "t1.makeid", "=", "t2.id", "where", "t2.cylinders", "=", "4", "order", "by", "t2.horsepower", "desc", "limit", "1", ";"], "ru": ["select", "t1.model", "from", "car_names", "as", "t1", "join", "cars_data", "as", "t2", "on", "t1.makeid", "=", "t2.id", "where", "t2.cylinders", "=", "4", "order", "by", "t2.horsepower", "desc", "limit", "1", ";"]}, "query_toks_no_values": {"en": ["select", "t1.model", "from", "car_names", "as", "t1", "join", "cars_data", "as", "t2", "on", "t1.makeid", "=", "t2.id", "where", "t2.cylinders", "=", "4", "order", "by", "t2.horsepower", "desc", "limit", "1", ";"], "ru": ["select", "t1.model", "from", "car_names", "as", "t1", "join", "cars_data", "as", "t2", "on", "t1.makeid", "=", "t2.id", "where", "t2.cylinders", "=", "4", "order", "by", "t2.horsepower", "desc", "limit", "1", ";"]}, "masked_query": "SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;", "question_pauq": {"ru": "\u041a\u0430\u043a\u0430\u044f \u043c\u043e\u0434\u0435\u043b\u044c \u0438\u0437 \u0432\u0441\u0435\u0445 4-\u0446\u0438\u043b\u0438\u043d\u0434\u0440\u043e\u0432\u044b\u0445 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439 \u0438\u043c\u0435\u0435\u0442 \u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0443\u044e \u043c\u043e\u0449\u043d\u043e\u0441\u0442\u044c?"}, "question": "For all of the 4 cylinder cars, which model has the most horsepower?", "kb_id": "car_1"}, {"id": "D_0168", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T2.MakeId ,  T2.Make FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Horsepower  >  (SELECT min(Horsepower) FROM CARS_DATA) AND T1.Cylinders  <=  3;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 5], ["table_unit", 4]], "conds": [[false, 2, [0, [0, 16, false], null], [0, 13, false], null]]}, "select": [false, [[0, [0, [0, 13, false], null]], [0, [0, [0, 15, false], null]]]], "where": [[false, 3, [0, [0, 20, false], null], {"from": {"table_units": [["table_unit", 5]], "conds": []}, "select": [false, [[2, [0, [0, 20, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null], "and", [false, 6, [0, [0, 18, false], null], 3.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 5], ["table_unit", 4]], "conds": [[false, 2, [0, [0, 16, false], null], [0, 13, false], null]]}, "select": [false, [[0, [0, [0, 13, false], null]], [0, [0, [0, 15, false], null]]]], "where": [[false, 3, [0, [0, 20, false], null], {"from": {"table_units": [["table_unit", 5]], "conds": []}, "select": [false, [[2, [0, [0, 20, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null], "and", [false, 6, [0, [0, 18, false], null], 3.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Among", "the", "cars", "with", "more", "than", "lowest", "horsepower", ",", "which", "ones", "do", "not", "have", "more", "than", "3", "cylinders", "?", "List", "the", "car", "makeid", "and", "make", "name", "."], "ru": ["\u0421\u0440\u0435\u0434\u0438", "\u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439", "\u0441", "\u0431\u043e\u043b\u0435\u0435", "\u0447\u0435\u043c", "\u0441\u0430\u043c\u043e\u0439", "\u043d\u0438\u0437\u043a\u043e\u0439", "\u043c\u043e\u0449\u043d\u043e\u0441\u0442\u044c\u044e", "\u0443", "\u043a\u0430\u043a\u0438\u0445", "\u043d\u0435", "\u0431\u043e\u043b\u0435\u0435", "3", "\u0446\u0438\u043b\u0438\u043d\u0434\u0440\u043e\u0432", "?", "\u041f\u043e\u043a\u0430\u0436\u0438", "\u043c\u0430\u0440\u043a\u0443", "\u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f", "\u0438", "id", "\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f", "."]}, "query_toks": {"en": ["select", "t2.makeid", ",", "t2.make", "from", "cars_data", "as", "t1", "join", "car_names", "as", "t2", "on", "t1.id", "=", "t2.makeid", "where", "t1.horsepower", ">", "(", "select", "min", "(", "horsepower", ")", "from", "cars_data", ")", "and", "t1.cylinders", "<=", "3", ";"], "ru": ["select", "t2.makeid", ",", "t2.make", "from", "cars_data", "as", "t1", "join", "car_names", "as", "t2", "on", "t1.id", "=", "t2.makeid", "where", "t1.horsepower", ">", "(", "select", "min", "(", "horsepower", ")", "from", "cars_data", ")", "and", "t1.cylinders", "<=", "3", ";"]}, "query_toks_no_values": {"en": ["select", "t2.makeid", ",", "t2.make", "from", "cars_data", "as", "t1", "join", "car_names", "as", "t2", "on", "t1.id", "=", "t2.makeid", "where", "t1.horsepower", ">", "(", "select", "min", "(", "horsepower", ")", "from", "cars_data", ")", "and", "t1.cylinders", "<=", "3", ";"], "ru": ["select", "t2.makeid", ",", "t2.make", "from", "cars_data", "as", "t1", "join", "car_names", "as", "t2", "on", "t1.id", "=", "t2.makeid", "where", "t1.horsepower", ">", "(", "select", "min", "(", "horsepower", ")", "from", "cars_data", ")", "and", "t1.cylinders", "<=", "3", ";"]}, "masked_query": "SELECT T2.MakeId ,  T2.Make FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Horsepower  >  (SELECT min(Horsepower) FROM CARS_DATA) AND T1.Cylinders  <=  3;", "question_pauq": {"ru": "\u0421\u0440\u0435\u0434\u0438 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439 \u0441 \u0431\u043e\u043b\u0435\u0435 \u0447\u0435\u043c \u0441\u0430\u043c\u043e\u0439 \u043d\u0438\u0437\u043a\u043e\u0439 \u043c\u043e\u0449\u043d\u043e\u0441\u0442\u044c\u044e \u0443 \u043a\u0430\u043a\u0438\u0445 \u043d\u0435 \u0431\u043e\u043b\u0435\u0435 3 \u0446\u0438\u043b\u0438\u043d\u0434\u0440\u043e\u0432? \u041f\u043e\u043a\u0430\u0436\u0438 \u043c\u0430\u0440\u043a\u0443 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f \u0438 id \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f."}, "question": "Among the cars with more than lowest horsepower, which ones do not have more than 3 cylinders? List the car makeid and make name.", "kb_id": "car_1"}, {"id": "D_0169", "source": "spider-dev", "type": "dev", "query": {"ru": "select t2.makeid ,  t2.make from cars_data as t1 join car_names as t2 on t1.id  =  t2.makeid where t1.horsepower  >  (select min(horsepower) from cars_data) and t1.cylinders  <  4;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 5], ["table_unit", 4]], "conds": [[false, 2, [0, [0, 16, false], null], [0, 13, false], null]]}, "select": [false, [[0, [0, [0, 13, false], null]], [0, [0, [0, 15, false], null]]]], "where": [[false, 3, [0, [0, 20, false], null], {"from": {"table_units": [["table_unit", 5]], "conds": []}, "select": [false, [[2, [0, [0, 20, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null], "and", [false, 4, [0, [0, 18, false], null], 4.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 5], ["table_unit", 4]], "conds": [[false, 2, [0, [0, 16, false], null], [0, 13, false], null]]}, "select": [false, [[0, [0, [0, 13, false], null]], [0, [0, [0, 15, false], null]]]], "where": [[false, 3, [0, [0, 20, false], null], {"from": {"table_units": [["table_unit", 5]], "conds": []}, "select": [false, [[2, [0, [0, 20, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null], "and", [false, 4, [0, [0, 18, false], null], 4.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Among", "the", "cars", "that", "do", "not", "have", "the", "minimum", "horsepower", ",", "what", "are", "the", "make", "ids", "and", "names", "of", "all", "those", "with", "less", "than", "4", "cylinders", "?"], "ru": ["\u0421\u0440\u0435\u0434\u0438", "\u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439", ",", "\u043a\u043e\u0442\u043e\u0440\u044b\u0435", "\u043d\u0435", "\u0438\u043c\u0435\u044e\u0442", "\u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0439", "\u043c\u043e\u0449\u043d\u043e\u0441\u0442\u0438", ",", "\u043a\u0430\u043a\u043e\u0432\u044b", "id", "\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u0435\u0439", "\u0438", "\u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f", "\u0432\u0441\u0435\u0445", "\u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439", "\u0441", "\u043c\u0435\u043d\u0435\u0435", "\u0447\u0435\u043c", "4", "\u0446\u0438\u043b\u0438\u043d\u0434\u0440\u0430\u043c\u0438", "?"]}, "query_toks": {"en": ["select", "t2.makeid", ",", "t2.make", "from", "cars_data", "as", "t1", "join", "car_names", "as", "t2", "on", "t1.id", "=", "t2.makeid", "where", "t1.horsepower", ">", "(", "select", "min", "(", "horsepower", ")", "from", "cars_data", ")", "and", "t1.cylinders", "<", "4", ";"], "ru": ["select", "t2.makeid", ",", "t2.make", "from", "cars_data", "as", "t1", "join", "car_names", "as", "t2", "on", "t1.id", "=", "t2.makeid", "where", "t1.horsepower", ">", "(", "select", "min", "(", "horsepower", ")", "from", "cars_data", ")", "and", "t1.cylinders", "<", "4", ";"]}, "query_toks_no_values": {"en": ["select", "t2.makeid", ",", "t2.make", "from", "cars_data", "as", "t1", "join", "car_names", "as", "t2", "on", "t1.id", "=", "t2.makeid", "where", "t1.horsepower", ">", "(", "select", "min", "(", "horsepower", ")", "from", "cars_data", ")", "and", "t1.cylinders", "<", "4", ";"], "ru": ["select", "t2.makeid", ",", "t2.make", "from", "cars_data", "as", "t1", "join", "car_names", "as", "t2", "on", "t1.id", "=", "t2.makeid", "where", "t1.horsepower", ">", "(", "select", "min", "(", "horsepower", ")", "from", "cars_data", ")", "and", "t1.cylinders", "<", "4", ";"]}, "masked_query": "select t2.makeid ,  t2.make from cars_data as t1 join car_names as t2 on t1.id  =  t2.makeid where t1.horsepower  >  (select min(horsepower) from cars_data) and t1.cylinders  <  4;", "question_pauq": {"ru": "\u0421\u0440\u0435\u0434\u0438 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0435 \u0438\u043c\u0435\u044e\u0442 \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0439 \u043c\u043e\u0449\u043d\u043e\u0441\u0442\u0438, \u043a\u0430\u043a\u043e\u0432\u044b id \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u0435\u0439 \u0438 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f \u0432\u0441\u0435\u0445 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439 \u0441 \u043c\u0435\u043d\u0435\u0435 \u0447\u0435\u043c 4 \u0446\u0438\u043b\u0438\u043d\u0434\u0440\u0430\u043c\u0438?"}, "question": "Among the cars that do not have the minimum horsepower , what are the make ids and names of all those with less than 4 cylinders ?", "kb_id": "car_1"}, {"id": "D_0170", "source": "spider-dev", "type": "dev", "query": {"ru": "select max(mpg) from cars_data where cylinders  =  8 or year  <  1980;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 5]], "conds": []}, "select": [false, [[1, [0, [0, 17, false], null]]]], "where": [[false, 2, [0, [0, 18, false], null], 8.0, null], "or", [false, 4, [0, [0, 23, false], null], 1980.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 5]], "conds": []}, "select": [false, [[1, [0, [0, 17, false], null]]]], "where": [[false, 2, [0, [0, 18, false], null], 8.0, null], "or", [false, 4, [0, [0, 23, false], null], 1980.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "maximum", "miles", "per", "gallon", "of", "the", "car", "with", "8", "cylinders", "or", "produced", "before", "1980", "?"], "ru": ["\u041a\u0430\u043a\u043e\u0435", "\u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435", "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e", "\u043a\u0438\u043b\u043e\u043c\u0435\u0442\u0440\u043e\u0432", "\u043d\u0430", "\u043b\u0438\u0442\u0440", "\u0443", "\u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f", "\u0441", "8", "\u0446\u0438\u043b\u0438\u043d\u0434\u0440\u0430\u043c\u0438", "\u0438\u043b\u0438", "\u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043d\u043d\u043e\u0433\u043e", "\u0434\u043e", "1980", "\u0433\u043e\u0434\u0430", "?"]}, "query_toks": {"en": ["select", "max", "(", "mpg", ")", "from", "cars_data", "where", "cylinders", "=", "8", "or", "year", "<", "1980", ";"], "ru": ["select", "max", "(", "mpg", ")", "from", "cars_data", "where", "cylinders", "=", "8", "or", "year", "<", "1980", ";"]}, "query_toks_no_values": {"en": ["select", "max", "(", "mpg", ")", "from", "cars_data", "where", "cylinders", "=", "8", "or", "year", "<", "1980", ";"], "ru": ["select", "max", "(", "mpg", ")", "from", "cars_data", "where", "cylinders", "=", "8", "or", "year", "<", "1980", ";"]}, "masked_query": "select max(mpg) from cars_data where cylinders  =  8 or year  <  1980;", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0435 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u0438\u043b\u043e\u043c\u0435\u0442\u0440\u043e\u0432 \u043d\u0430 \u043b\u0438\u0442\u0440 \u0443 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u044f \u0441 8 \u0446\u0438\u043b\u0438\u043d\u0434\u0440\u0430\u043c\u0438 \u0438\u043b\u0438 \u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043d\u043d\u043e\u0433\u043e \u0434\u043e 1980 \u0433\u043e\u0434\u0430?"}, "question": "What is the maximum miles per gallon of the car with 8 cylinders or produced before 1980 ?", "kb_id": "car_1"}, {"id": "D_0171", "source": "spider-dev", "type": "dev", "query": {"ru": "select max(mpg) from cars_data where cylinders  =  8 or year  <  1980;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 5]], "conds": []}, "select": [false, [[1, [0, [0, 17, false], null]]]], "where": [[false, 2, [0, [0, 18, false], null], 8.0, null], "or", [false, 4, [0, [0, 23, false], null], 1980.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 5]], "conds": []}, "select": [false, [[1, [0, [0, 17, false], null]]]], "where": [[false, 2, [0, [0, 18, false], null], 8.0, null], "or", [false, 4, [0, [0, 23, false], null], 1980.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "maximum", "mpg", "of", "the", "cars", "that", "had", "8", "cylinders", "or", "that", "were", "produced", "before", "1980", "?"], "ru": ["\u041a\u0430\u043a\u043e\u0432", "\u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439", "\u0440\u0430\u0441\u0445\u043e\u0434", "\u0442\u043e\u043f\u043b\u0438\u0432\u0430", "\u0434\u043b\u044f", "\u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439", "\u0441", "8", "\u0446\u0438\u043b\u0438\u043d\u0434\u0440\u0430\u043c\u0438", "\u0438\u043b\u0438", "\u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439", ",", "\u0432\u044b\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0445", "\u0434\u043e", "1980", "\u0433\u043e\u0434\u0430", "?"]}, "query_toks": {"en": ["select", "max", "(", "mpg", ")", "from", "cars_data", "where", "cylinders", "=", "8", "or", "year", "<", "1980", ";"], "ru": ["select", "max", "(", "mpg", ")", "from", "cars_data", "where", "cylinders", "=", "8", "or", "year", "<", "1980", ";"]}, "query_toks_no_values": {"en": ["select", "max", "(", "mpg", ")", "from", "cars_data", "where", "cylinders", "=", "8", "or", "year", "<", "1980", ";"], "ru": ["select", "max", "(", "mpg", ")", "from", "cars_data", "where", "cylinders", "=", "8", "or", "year", "<", "1980", ";"]}, "masked_query": "select max(mpg) from cars_data where cylinders  =  8 or year  <  1980;", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0432 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u0440\u0430\u0441\u0445\u043e\u0434 \u0442\u043e\u043f\u043b\u0438\u0432\u0430 \u0434\u043b\u044f \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439 \u0441 8 \u0446\u0438\u043b\u0438\u043d\u0434\u0440\u0430\u043c\u0438 \u0438\u043b\u0438 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439, \u0432\u044b\u043f\u0443\u0449\u0435\u043d\u043d\u044b\u0445 \u0434\u043e 1980 \u0433\u043e\u0434\u0430?"}, "question": "What is the maximum mpg of the cars that had 8 cylinders or that were produced before 1980 ?", "kb_id": "car_1"}, {"id": "D_0172", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';"}, "sql": {"en": {"from": {"table_units": [["table_unit", 3], ["table_unit", 4], ["table_unit", 5], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 12, false], null], [0, 14, false], null], "and", [false, 2, [0, [0, 13, false], null], [0, 16, false], null], "and", [false, 2, [0, [0, 11, false], null], [0, 6, false], null]]}, "select": [true, [[0, [0, [0, 12, false], null]]]], "where": [[false, 4, [0, [0, 21, false], null], 3500.0, null], "and", [false, 7, [0, [0, 8, false], null], "\"Ford Motor Company\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 3], ["table_unit", 4], ["table_unit", 5], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 12, false], null], [0, 14, false], null], "and", [false, 2, [0, [0, 13, false], null], [0, 16, false], null], "and", [false, 2, [0, [0, 11, false], null], [0, 6, false], null]]}, "select": [true, [[0, [0, [0, 12, false], null]]]], "where": [[false, 4, [0, [0, 21, false], null], 3500.0, null], "and", [false, 7, [0, [0, 8, false], null], "\"Ford Motor Company\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Which", "models", "are", "lighter", "than", "3500", "but", "not", "built", "by", "the", "'Ford", "Motor", "Company", "'", "?"], "ru": ["\u041a\u0430\u043a\u0438\u0435", "\u043c\u043e\u0434\u0435\u043b\u0438", "\u043b\u0435\u0433\u0447\u0435", "3500", ",", "\u043d\u043e", "\u043d\u0435", "\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u044f\u0442\u0441\u044f", "Ford", "Motor", "Company", "?"]}, "query_toks": {"en": ["select", "distinct", "t1.model", "from", "model_list", "as", "t1", "join", "car_names", "as", "t2", "on", "t1.model", "=", "t2.model", "join", "cars_data", "as", "t3", "on", "t2.makeid", "=", "t3.id", "join", "car_makers", "as", "t4", "on", "t1.maker", "=", "t4.id", "where", "t3.weight", "<", "3500", "and", "t4.fullname", "!=", "\"Ford Motor Company\"", ";"], "ru": ["select", "distinct", "t1.model", "from", "model_list", "as", "t1", "join", "car_names", "as", "t2", "on", "t1.model", "=", "t2.model", "join", "cars_data", "as", "t3", "on", "t2.makeid", "=", "t3.id", "join", "car_makers", "as", "t4", "on", "t1.maker", "=", "t4.id", "where", "t3.weight", "<", "3500", "and", "t4.fullname", "!=", "\"Ford Motor Company\"", ";"]}, "query_toks_no_values": {"en": ["select", "distinct", "t1.model", "from", "model_list", "as", "t1", "join", "car_names", "as", "t2", "on", "t1.model", "=", "t2.model", "join", "cars_data", "as", "t3", "on", "t2.makeid", "=", "t3.id", "join", "car_makers", "as", "t4", "on", "t1.maker", "=", "t4.id", "where", "t3.weight", "<", "3500", "and", "t4.fullname", "!=", "value", ";"], "ru": ["select", "distinct", "t1.model", "from", "model_list", "as", "t1", "join", "car_names", "as", "t2", "on", "t1.model", "=", "t2.model", "join", "cars_data", "as", "t3", "on", "t2.makeid", "=", "t3.id", "join", "car_makers", "as", "t4", "on", "t1.maker", "=", "t4.id", "where", "t3.weight", "<", "3500", "and", "t4.fullname", "!=", "value", ";"]}, "masked_query": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';", "question_pauq": {"ru": "\u041a\u0430\u043a\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0438 \u043b\u0435\u0433\u0447\u0435 3500, \u043d\u043e \u043d\u0435 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u044f\u0442\u0441\u044f Ford Motor Company?"}, "question": "Which models are lighter than 3500 but not built by the 'Ford Motor Company'?", "kb_id": "car_1"}, {"id": "D_0173", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';"}, "sql": {"en": {"from": {"table_units": [["table_unit", 3], ["table_unit", 4], ["table_unit", 5], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 12, false], null], [0, 14, false], null], "and", [false, 2, [0, [0, 13, false], null], [0, 16, false], null], "and", [false, 2, [0, [0, 11, false], null], [0, 6, false], null]]}, "select": [true, [[0, [0, [0, 12, false], null]]]], "where": [[false, 4, [0, [0, 21, false], null], 3500.0, null], "and", [false, 7, [0, [0, 8, false], null], "\"Ford Motor Company\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 3], ["table_unit", 4], ["table_unit", 5], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 12, false], null], [0, 14, false], null], "and", [false, 2, [0, [0, 13, false], null], [0, 16, false], null], "and", [false, 2, [0, [0, 11, false], null], [0, 6, false], null]]}, "select": [true, [[0, [0, [0, 12, false], null]]]], "where": [[false, 4, [0, [0, 21, false], null], 3500.0, null], "and", [false, 7, [0, [0, 8, false], null], "\"Ford Motor Company\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "the", "different", "models", "wthat", "are", "lighter", "than", "3500", "but", "were", "not", "built", "by", "the", "Ford", "Motor", "Company", "?"], "ru": ["\u041a\u0430\u043a\u0438\u0435", "\u043c\u043e\u0434\u0435\u043b\u0438", "\u043b\u0435\u0433\u0447\u0435", "3500", ",", "\u043d\u043e", "\u043d\u0435", "\u0431\u044b\u043b\u0438", "\u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043d\u044b", "Ford", "Motor", "Company", "?"]}, "query_toks": {"en": ["select", "distinct", "t1.model", "from", "model_list", "as", "t1", "join", "car_names", "as", "t2", "on", "t1.model", "=", "t2.model", "join", "cars_data", "as", "t3", "on", "t2.makeid", "=", "t3.id", "join", "car_makers", "as", "t4", "on", "t1.maker", "=", "t4.id", "where", "t3.weight", "<", "3500", "and", "t4.fullname", "!=", "\"Ford Motor Company\"", ";"], "ru": ["select", "distinct", "t1.model", "from", "model_list", "as", "t1", "join", "car_names", "as", "t2", "on", "t1.model", "=", "t2.model", "join", "cars_data", "as", "t3", "on", "t2.makeid", "=", "t3.id", "join", "car_makers", "as", "t4", "on", "t1.maker", "=", "t4.id", "where", "t3.weight", "<", "3500", "and", "t4.fullname", "!=", "\"Ford Motor Company\"", ";"]}, "query_toks_no_values": {"en": ["select", "distinct", "t1.model", "from", "model_list", "as", "t1", "join", "car_names", "as", "t2", "on", "t1.model", "=", "t2.model", "join", "cars_data", "as", "t3", "on", "t2.makeid", "=", "t3.id", "join", "car_makers", "as", "t4", "on", "t1.maker", "=", "t4.id", "where", "t3.weight", "<", "3500", "and", "t4.fullname", "!=", "value", ";"], "ru": ["select", "distinct", "t1.model", "from", "model_list", "as", "t1", "join", "car_names", "as", "t2", "on", "t1.model", "=", "t2.model", "join", "cars_data", "as", "t3", "on", "t2.makeid", "=", "t3.id", "join", "car_makers", "as", "t4", "on", "t1.maker", "=", "t4.id", "where", "t3.weight", "<", "3500", "and", "t4.fullname", "!=", "value", ";"]}, "masked_query": "SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';", "question_pauq": {"ru": "\u041a\u0430\u043a\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0438 \u043b\u0435\u0433\u0447\u0435 3500, \u043d\u043e \u043d\u0435 \u0431\u044b\u043b\u0438 \u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043d\u044b Ford Motor Company?"}, "question": "What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?", "kb_id": "car_1"}, {"id": "D_0174", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 4, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": {"from": {"table_units": [["table_unit", 1], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 3, false], null], [0, 9, false], null]]}, "select": [false, [[0, [0, [0, 4, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 4, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": {"from": {"table_units": [["table_unit", 1], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 3, false], null], [0, 9, false], null]]}, "select": [false, [[0, [0, [0, 4, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}}, "question_toks": {"en": ["What", "are", "the", "name", "of", "the", "countries", "where", "there", "is", "not", "a", "single", "car", "maker", "?"], "ru": ["\u041a\u0430\u043a", "\u043d\u0430\u0437\u044b\u0432\u0430\u044e\u0442\u0441\u044f", "\u0441\u0442\u0440\u0430\u043d\u044b", ",", "\u0433\u0434\u0435", "\u043d\u0435\u0442", "\u043d\u0438", "\u043e\u0434\u043d\u043e\u0433\u043e", "\u0430\u0432\u0442\u043e\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f", "?"]}, "query_toks": {"en": ["select", "countryname", "from", "countries", "except", "select", "t1.countryname", "from", "countries", "as", "t1", "join", "car_makers", "as", "t2", "on", "t1.countryid", "=", "t2.country", ";"], "ru": ["select", "countryname", "from", "countries", "except", "select", "t1.countryname", "from", "countries", "as", "t1", "join", "car_makers", "as", "t2", "on", "t1.countryid", "=", "t2.country", ";"]}, "query_toks_no_values": {"en": ["select", "countryname", "from", "countries", "except", "select", "t1.countryname", "from", "countries", "as", "t1", "join", "car_makers", "as", "t2", "on", "t1.countryid", "=", "t2.country", ";"], "ru": ["select", "countryname", "from", "countries", "except", "select", "t1.countryname", "from", "countries", "as", "t1", "join", "car_makers", "as", "t2", "on", "t1.countryid", "=", "t2.country", ";"]}, "masked_query": "SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;", "question_pauq": {"ru": "\u041a\u0430\u043a \u043d\u0430\u0437\u044b\u0432\u0430\u044e\u0442\u0441\u044f \u0441\u0442\u0440\u0430\u043d\u044b, \u0433\u0434\u0435 \u043d\u0435\u0442 \u043d\u0438 \u043e\u0434\u043d\u043e\u0433\u043e \u0430\u0432\u0442\u043e\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f?"}, "question": "What are the name of the countries where there is not a single car maker?", "kb_id": "car_1"}, {"id": "D_0175", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 4, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": {"from": {"table_units": [["table_unit", 1], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 3, false], null], [0, 9, false], null]]}, "select": [false, [[0, [0, [0, 4, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 4, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": {"from": {"table_units": [["table_unit", 1], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 3, false], null], [0, 9, false], null]]}, "select": [false, [[0, [0, [0, 4, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}}, "question_toks": {"en": ["What", "are", "the", "names", "of", "the", "countries", "with", "no", "car", "makers", "?"], "ru": ["\u041a\u0430\u043a", "\u043d\u0430\u0437\u044b\u0432\u0430\u044e\u0442\u0441\u044f", "\u0441\u0442\u0440\u0430\u043d\u044b", ",", "\u0432", "\u043a\u043e\u0442\u043e\u0440\u044b\u0445", "\u043d\u0435\u0442", "\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u0435\u0439", "\u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439", "?"]}, "query_toks": {"en": ["select", "countryname", "from", "countries", "except", "select", "t1.countryname", "from", "countries", "as", "t1", "join", "car_makers", "as", "t2", "on", "t1.countryid", "=", "t2.country", ";"], "ru": ["select", "countryname", "from", "countries", "except", "select", "t1.countryname", "from", "countries", "as", "t1", "join", "car_makers", "as", "t2", "on", "t1.countryid", "=", "t2.country", ";"]}, "query_toks_no_values": {"en": ["select", "countryname", "from", "countries", "except", "select", "t1.countryname", "from", "countries", "as", "t1", "join", "car_makers", "as", "t2", "on", "t1.countryid", "=", "t2.country", ";"], "ru": ["select", "countryname", "from", "countries", "except", "select", "t1.countryname", "from", "countries", "as", "t1", "join", "car_makers", "as", "t2", "on", "t1.countryid", "=", "t2.country", ";"]}, "masked_query": "SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;", "question_pauq": {"ru": "\u041a\u0430\u043a \u043d\u0430\u0437\u044b\u0432\u0430\u044e\u0442\u0441\u044f \u0441\u0442\u0440\u0430\u043d\u044b, \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043d\u0435\u0442 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u0435\u0439 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439?"}, "question": "What are the names of the countries with no car makers?", "kb_id": "car_1"}, {"id": "D_0176", "source": "spider-dev", "type": "dev", "query": {"ru": "select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker group by t1.id having count(*)  >=  2 intersect select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker join car_names as t3 on t2.model  =  t3.model group by t1.id having count(*)  >  3;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 6, false], null], [0, 11, false], null]]}, "select": [false, [[0, [0, [0, 6, false], null]], [0, [0, [0, 7, false], null]]]], "where": [], "groupBy": [[0, 6, false]], "having": [[false, 5, [0, [3, 0, false], null], 2.0, null]], "orderBy": [], "limit": null, "intersect": {"from": {"table_units": [["table_unit", 2], ["table_unit", 3], ["table_unit", 4]], "conds": [[false, 2, [0, [0, 6, false], null], [0, 11, false], null], "and", [false, 2, [0, [0, 12, false], null], [0, 14, false], null]]}, "select": [false, [[0, [0, [0, 6, false], null]], [0, [0, [0, 7, false], null]]]], "where": [], "groupBy": [[0, 6, false]], "having": [[false, 3, [0, [3, 0, false], null], 3.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 6, false], null], [0, 11, false], null]]}, "select": [false, [[0, [0, [0, 6, false], null]], [0, [0, [0, 7, false], null]]]], "where": [], "groupBy": [[0, 6, false]], "having": [[false, 5, [0, [3, 0, false], null], 2.0, null]], "orderBy": [], "limit": null, "intersect": {"from": {"table_units": [["table_unit", 2], ["table_unit", 3], ["table_unit", 4]], "conds": [[false, 2, [0, [0, 6, false], null], [0, 11, false], null], "and", [false, 2, [0, [0, 12, false], null], [0, 14, false], null]]}, "select": [false, [[0, [0, [0, 6, false], null]], [0, [0, [0, 7, false], null]]]], "where": [], "groupBy": [[0, 6, false]], "having": [[false, 3, [0, [3, 0, false], null], 3.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "union": null, "except": null}}, "question_toks": {"en": ["Which", "are", "the", "car", "makers", "which", "produce", "at", "least", "2", "models", "and", "more", "than", "3", "car", "makers", "?", "List", "the", "id", "and", "the", "maker", "."], "ru": ["\u041a\u0430\u043a\u0438\u0435", "\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u0438", "\u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439", "\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u044f\u0442", "\u043d\u0435", "\u043c\u0435\u043d\u0435\u0435", "2", "\u043c\u043e\u0434\u0435\u043b\u0435\u0439", "\u0438", "\u0431\u043e\u043b\u0435\u0435", "3", "\u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439", "?", "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c", "id", "\u0438", "\u043c\u0430\u0440\u043a\u0443", "\u043c\u0430\u0448\u0438\u043d\u044b", "."]}, "query_toks": {"en": ["select", "t1.id", ",", "t1.maker", "from", "car_makers", "as", "t1", "join", "model_list", "as", "t2", "on", "t1.id", "=", "t2.maker", "group", "by", "t1.id", "having", "count", "(", "*", ")", ">=", "2", "intersect", "select", "t1.id", ",", "t1.maker", "from", "car_makers", "as", "t1", "join", "model_list", "as", "t2", "on", "t1.id", "=", "t2.maker", "join", "car_names", "as", "t3", "on", "t2.model", "=", "t3.model", "group", "by", "t1.id", "having", "count", "(", "*", ")", ">", "3", ";"], "ru": ["select", "t1.id", ",", "t1.maker", "from", "car_makers", "as", "t1", "join", "model_list", "as", "t2", "on", "t1.id", "=", "t2.maker", "group", "by", "t1.id", "having", "count", "(", "*", ")", ">=", "2", "intersect", "select", "t1.id", ",", "t1.maker", "from", "car_makers", "as", "t1", "join", "model_list", "as", "t2", "on", "t1.id", "=", "t2.maker", "join", "car_names", "as", "t3", "on", "t2.model", "=", "t3.model", "group", "by", "t1.id", "having", "count", "(", "*", ")", ">", "3", ";"]}, "query_toks_no_values": {"en": ["select", "t1.id", ",", "t1.maker", "from", "car_makers", "as", "t1", "join", "model_list", "as", "t2", "on", "t1.id", "=", "t2.maker", "group", "by", "t1.id", "having", "count", "(", "*", ")", ">=", "2", "intersect", "select", "t1.id", ",", "t1.maker", "from", "car_makers", "as", "t1", "join", "model_list", "as", "t2", "on", "t1.id", "=", "t2.maker", "join", "car_names", "as", "t3", "on", "t2.model", "=", "t3.model", "group", "by", "t1.id", "having", "count", "(", "*", ")", ">", "3", ";"], "ru": ["select", "t1.id", ",", "t1.maker", "from", "car_makers", "as", "t1", "join", "model_list", "as", "t2", "on", "t1.id", "=", "t2.maker", "group", "by", "t1.id", "having", "count", "(", "*", ")", ">=", "2", "intersect", "select", "t1.id", ",", "t1.maker", "from", "car_makers", "as", "t1", "join", "model_list", "as", "t2", "on", "t1.id", "=", "t2.maker", "join", "car_names", "as", "t3", "on", "t2.model", "=", "t3.model", "group", "by", "t1.id", "having", "count", "(", "*", ")", ">", "3", ";"]}, "masked_query": "select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker group by t1.id having count(*)  >=  2 intersect select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker join car_names as t3 on t2.model  =  t3.model group by t1.id having count(*)  >  3;", "question_pauq": {"ru": "\u041a\u0430\u043a\u0438\u0435 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u0438 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u044f\u0442 \u043d\u0435 \u043c\u0435\u043d\u0435\u0435 2 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0438 \u0431\u043e\u043b\u0435\u0435 3 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439? \u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c id \u0438 \u043c\u0430\u0440\u043a\u0443 \u043c\u0430\u0448\u0438\u043d\u044b."}, "question": "Which are the car makers which produce at least 2 models and more than 3 car makers ? List the id and the maker .", "kb_id": "car_1"}, {"id": "D_0177", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >=  2 INTERSECT SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model GROUP BY T1.Id HAVING count(*)  >  3;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 6, false], null], [0, 11, false], null]]}, "select": [false, [[0, [0, [0, 6, false], null]], [0, [0, [0, 7, false], null]]]], "where": [], "groupBy": [[0, 6, false]], "having": [[false, 5, [0, [3, 0, false], null], 2.0, null]], "orderBy": [], "limit": null, "intersect": {"from": {"table_units": [["table_unit", 2], ["table_unit", 3], ["table_unit", 4]], "conds": [[false, 2, [0, [0, 6, false], null], [0, 11, false], null], "and", [false, 2, [0, [0, 12, false], null], [0, 14, false], null]]}, "select": [false, [[0, [0, [0, 6, false], null]], [0, [0, [0, 7, false], null]]]], "where": [], "groupBy": [[0, 6, false]], "having": [[false, 3, [0, [3, 0, false], null], 3.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 6, false], null], [0, 11, false], null]]}, "select": [false, [[0, [0, [0, 6, false], null]], [0, [0, [0, 7, false], null]]]], "where": [], "groupBy": [[0, 6, false]], "having": [[false, 5, [0, [3, 0, false], null], 2.0, null]], "orderBy": [], "limit": null, "intersect": {"from": {"table_units": [["table_unit", 2], ["table_unit", 3], ["table_unit", 4]], "conds": [[false, 2, [0, [0, 6, false], null], [0, 11, false], null], "and", [false, 2, [0, [0, 12, false], null], [0, 14, false], null]]}, "select": [false, [[0, [0, [0, 6, false], null]], [0, [0, [0, 7, false], null]]]], "where": [], "groupBy": [[0, 6, false]], "having": [[false, 3, [0, [3, 0, false], null], 3.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "the", "ids", "and", "makers", "of", "all", "car", "makers", "that", "produce", "at", "least", "2", "models", "and", "make", "more", "than", "3", "cars", "?"], "ru": ["\u041a\u0430\u043a\u043e\u0432\u044b", "id", "\u0438", "\u043c\u0430\u0440\u043a\u0438", "\u043c\u0430\u0448\u0438\u043d", "\u0432\u0441\u0435\u0445", "\u0430\u0432\u0442\u043e\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u0435\u0439", ",", "\u043a\u043e\u0442\u043e\u0440\u044b\u0435", "\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u044f\u0442", "\u043a\u0430\u043a", "\u043c\u0438\u043d\u0438\u043c\u0443\u043c", "2", "\u043c\u043e\u0434\u0435\u043b\u0438", "\u0438", "\u0431\u043e\u043b\u0435\u0435", "3", "\u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439", "?"]}, "query_toks": {"en": ["select", "t1.id", ",", "t1.maker", "from", "car_makers", "as", "t1", "join", "model_list", "as", "t2", "on", "t1.id", "=", "t2.maker", "group", "by", "t1.id", "having", "count", "(", "*", ")", ">=", "2", "intersect", "select", "t1.id", ",", "t1.maker", "from", "car_makers", "as", "t1", "join", "model_list", "as", "t2", "on", "t1.id", "=", "t2.maker", "join", "car_names", "as", "t3", "on", "t2.model", "=", "t3.model", "group", "by", "t1.id", "having", "count", "(", "*", ")", ">", "3", ";"], "ru": ["select", "t1.id", ",", "t1.maker", "from", "car_makers", "as", "t1", "join", "model_list", "as", "t2", "on", "t1.id", "=", "t2.maker", "group", "by", "t1.id", "having", "count", "(", "*", ")", ">=", "2", "intersect", "select", "t1.id", ",", "t1.maker", "from", "car_makers", "as", "t1", "join", "model_list", "as", "t2", "on", "t1.id", "=", "t2.maker", "join", "car_names", "as", "t3", "on", "t2.model", "=", "t3.model", "group", "by", "t1.id", "having", "count", "(", "*", ")", ">", "3", ";"]}, "query_toks_no_values": {"en": ["select", "t1.id", ",", "t1.maker", "from", "car_makers", "as", "t1", "join", "model_list", "as", "t2", "on", "t1.id", "=", "t2.maker", "group", "by", "t1.id", "having", "count", "(", "*", ")", ">=", "2", "intersect", "select", "t1.id", ",", "t1.maker", "from", "car_makers", "as", "t1", "join", "model_list", "as", "t2", "on", "t1.id", "=", "t2.maker", "join", "car_names", "as", "t3", "on", "t2.model", "=", "t3.model", "group", "by", "t1.id", "having", "count", "(", "*", ")", ">", "3", ";"], "ru": ["select", "t1.id", ",", "t1.maker", "from", "car_makers", "as", "t1", "join", "model_list", "as", "t2", "on", "t1.id", "=", "t2.maker", "group", "by", "t1.id", "having", "count", "(", "*", ")", ">=", "2", "intersect", "select", "t1.id", ",", "t1.maker", "from", "car_makers", "as", "t1", "join", "model_list", "as", "t2", "on", "t1.id", "=", "t2.maker", "join", "car_names", "as", "t3", "on", "t2.model", "=", "t3.model", "group", "by", "t1.id", "having", "count", "(", "*", ")", ">", "3", ";"]}, "masked_query": "SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >=  2 INTERSECT SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model GROUP BY T1.Id HAVING count(*)  >  3;", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0432\u044b id \u0438 \u043c\u0430\u0440\u043a\u0438 \u043c\u0430\u0448\u0438\u043d \u0432\u0441\u0435\u0445 \u0430\u0432\u0442\u043e\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u0435\u0439, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u044f\u0442 \u043a\u0430\u043a \u043c\u0438\u043d\u0438\u043c\u0443\u043c 2 \u043c\u043e\u0434\u0435\u043b\u0438 \u0438 \u0431\u043e\u043b\u0435\u0435 3 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439?"}, "question": "What are the ids and makers of all car makers that produce at least 2 models and make more than 3 cars?", "kb_id": "car_1"}, {"id": "D_0178", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.countryId HAVING count(*)  >  3 UNION SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country JOIN MODEL_LIST AS T3 ON T2.Id  =  T3.Maker WHERE T3.Model  =  'fiat';"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 3, false], null], [0, 9, false], null]]}, "select": [false, [[0, [0, [0, 3, false], null]], [0, [0, [0, 4, false], null]]]], "where": [], "groupBy": [[0, 3, false]], "having": [[false, 3, [0, [3, 0, false], null], 3.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": {"from": {"table_units": [["table_unit", 1], ["table_unit", 2], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 3, false], null], [0, 9, false], null], "and", [false, 2, [0, [0, 6, false], null], [0, 11, false], null]]}, "select": [false, [[0, [0, [0, 3, false], null]], [0, [0, [0, 4, false], null]]]], "where": [[false, 2, [0, [0, 12, false], null], "\"fiat\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 3, false], null], [0, 9, false], null]]}, "select": [false, [[0, [0, [0, 3, false], null]], [0, [0, [0, 4, false], null]]]], "where": [], "groupBy": [[0, 3, false]], "having": [[false, 3, [0, [3, 0, false], null], 3.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": {"from": {"table_units": [["table_unit", 1], ["table_unit", 2], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 3, false], null], [0, 9, false], null], "and", [false, 2, [0, [0, 6, false], null], [0, 11, false], null]]}, "select": [false, [[0, [0, [0, 3, false], null]], [0, [0, [0, 4, false], null]]]], "where": [[false, 2, [0, [0, 12, false], null], "\"fiat\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "except": null}}, "question_toks": {"en": ["What", "are", "the", "id", "and", "names", "of", "the", "countries", "which", "have", "more", "than", "3", "car", "makers", "or", "produce", "the", "'fiat", "'", "model", "?"], "ru": ["\u041a\u0430\u043a\u043e\u0432\u044b", "id", "\u0438", "\u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f", "\u0441\u0442\u0440\u0430\u043d", ",", "\u0432", "\u043a\u043e\u0442\u043e\u0440\u044b\u0445", "\u0438\u043c\u0435\u0435\u0442\u0441\u044f", "\u0431\u043e\u043b\u0435\u0435", "3", "\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u0435\u0439", "\u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439", "\u0438\u043b\u0438", "\u043a\u043e\u0442\u043e\u0440\u044b\u0435", "\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u044f\u0442", "\u043c\u043e\u0434\u0435\u043b\u044c", "\u00ab", "Fiat", "\u00bb", "?"]}, "query_toks": {"en": ["select", "t1.countryid", ",", "t1.countryname", "from", "countries", "as", "t1", "join", "car_makers", "as", "t2", "on", "t1.countryid", "=", "t2.country", "group", "by", "t1.countryid", "having", "count", "(", "*", ")", ">", "3", "union", "select", "t1.countryid", ",", "t1.countryname", "from", "countries", "as", "t1", "join", "car_makers", "as", "t2", "on", "t1.countryid", "=", "t2.country", "join", "model_list", "as", "t3", "on", "t2.id", "=", "t3.maker", "where", "t3.model", "=", "\"fiat\"", ";"], "ru": ["select", "t1.countryid", ",", "t1.countryname", "from", "countries", "as", "t1", "join", "car_makers", "as", "t2", "on", "t1.countryid", "=", "t2.country", "group", "by", "t1.countryid", "having", "count", "(", "*", ")", ">", "3", "union", "select", "t1.countryid", ",", "t1.countryname", "from", "countries", "as", "t1", "join", "car_makers", "as", "t2", "on", "t1.countryid", "=", "t2.country", "join", "model_list", "as", "t3", "on", "t2.id", "=", "t3.maker", "where", "t3.model", "=", "\"fiat\"", ";"]}, "query_toks_no_values": {"en": ["select", "t1.countryid", ",", "t1.countryname", "from", "countries", "as", "t1", "join", "car_makers", "as", "t2", "on", "t1.countryid", "=", "t2.country", "group", "by", "t1.countryid", "having", "count", "(", "*", ")", ">", "3", "union", "select", "t1.countryid", ",", "t1.countryname", "from", "countries", "as", "t1", "join", "car_makers", "as", "t2", "on", "t1.countryid", "=", "t2.country", "join", "model_list", "as", "t3", "on", "t2.id", "=", "t3.maker", "where", "t3.model", "=", "value", ";"], "ru": ["select", "t1.countryid", ",", "t1.countryname", "from", "countries", "as", "t1", "join", "car_makers", "as", "t2", "on", "t1.countryid", "=", "t2.country", "group", "by", "t1.countryid", "having", "count", "(", "*", ")", ">", "3", "union", "select", "t1.countryid", ",", "t1.countryname", "from", "countries", "as", "t1", "join", "car_makers", "as", "t2", "on", "t1.countryid", "=", "t2.country", "join", "model_list", "as", "t3", "on", "t2.id", "=", "t3.maker", "where", "t3.model", "=", "value", ";"]}, "masked_query": "SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.countryId HAVING count(*)  >  3 UNION SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country JOIN MODEL_LIST AS T3 ON T2.Id  =  T3.Maker WHERE T3.Model  =  'fiat';", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0432\u044b id \u0438 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f \u0441\u0442\u0440\u0430\u043d, \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0438\u043c\u0435\u0435\u0442\u0441\u044f \u0431\u043e\u043b\u0435\u0435 3 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u0435\u0439 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439 \u0438\u043b\u0438 \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u044f\u0442 \u043c\u043e\u0434\u0435\u043b\u044c \u00abFiat\u00bb?"}, "question": "What are the id and names of the countries which have more than 3 car makers or produce the 'fiat' model?", "kb_id": "car_1"}, {"id": "D_0179", "source": "spider-dev", "type": "dev", "query": {"ru": "select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  3 union select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country join model_list as t3 on t2.id  =  t3.maker where t3.model  =  'fiat';"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 3, false], null], [0, 9, false], null]]}, "select": [false, [[0, [0, [0, 3, false], null]], [0, [0, [0, 4, false], null]]]], "where": [], "groupBy": [[0, 3, false]], "having": [[false, 3, [0, [3, 0, false], null], 3.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": {"from": {"table_units": [["table_unit", 1], ["table_unit", 2], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 3, false], null], [0, 9, false], null], "and", [false, 2, [0, [0, 6, false], null], [0, 11, false], null]]}, "select": [false, [[0, [0, [0, 3, false], null]], [0, [0, [0, 4, false], null]]]], "where": [[false, 2, [0, [0, 12, false], null], "\"fiat\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 3, false], null], [0, 9, false], null]]}, "select": [false, [[0, [0, [0, 3, false], null]], [0, [0, [0, 4, false], null]]]], "where": [], "groupBy": [[0, 3, false]], "having": [[false, 3, [0, [3, 0, false], null], 3.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": {"from": {"table_units": [["table_unit", 1], ["table_unit", 2], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 3, false], null], [0, 9, false], null], "and", [false, 2, [0, [0, 6, false], null], [0, 11, false], null]]}, "select": [false, [[0, [0, [0, 3, false], null]], [0, [0, [0, 4, false], null]]]], "where": [[false, 2, [0, [0, 12, false], null], "\"fiat\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "except": null}}, "question_toks": {"en": ["What", "are", "the", "ids", "and", "names", "of", "all", "countries", "that", "either", "have", "more", "than", "3", "car", "makers", "or", "produce", "fiat", "model", "?"], "ru": ["\u041a\u0430\u043a\u043e\u0432\u044b", "id", "\u0438", "\u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f", "\u0432\u0441\u0435\u0445", "\u0441\u0442\u0440\u0430\u043d", ",", "\u0432", "\u043a\u043e\u0442\u043e\u0440\u044b\u0445", "\u043b\u0438\u0431\u043e", "\u0431\u043e\u043b\u0435\u0435", "\u0442\u0440\u0435\u0445", "\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u0435\u0439", "\u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439", ",", "\u043b\u0438\u0431\u043e", "\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u044f\u0442\u0441\u044f", "\u043c\u043e\u0434\u0435\u043b\u0438", "Fiat", "?"]}, "query_toks": {"en": ["select", "t1.countryid", ",", "t1.countryname", "from", "countries", "as", "t1", "join", "car_makers", "as", "t2", "on", "t1.countryid", "=", "t2.country", "group", "by", "t1.countryid", "having", "count", "(", "*", ")", ">", "3", "union", "select", "t1.countryid", ",", "t1.countryname", "from", "countries", "as", "t1", "join", "car_makers", "as", "t2", "on", "t1.countryid", "=", "t2.country", "join", "model_list", "as", "t3", "on", "t2.id", "=", "t3.maker", "where", "t3.model", "=", "\"fiat\"", ";"], "ru": ["select", "t1.countryid", ",", "t1.countryname", "from", "countries", "as", "t1", "join", "car_makers", "as", "t2", "on", "t1.countryid", "=", "t2.country", "group", "by", "t1.countryid", "having", "count", "(", "*", ")", ">", "3", "union", "select", "t1.countryid", ",", "t1.countryname", "from", "countries", "as", "t1", "join", "car_makers", "as", "t2", "on", "t1.countryid", "=", "t2.country", "join", "model_list", "as", "t3", "on", "t2.id", "=", "t3.maker", "where", "t3.model", "=", "\"fiat\"", ";"]}, "query_toks_no_values": {"en": ["select", "t1.countryid", ",", "t1.countryname", "from", "countries", "as", "t1", "join", "car_makers", "as", "t2", "on", "t1.countryid", "=", "t2.country", "group", "by", "t1.countryid", "having", "count", "(", "*", ")", ">", "3", "union", "select", "t1.countryid", ",", "t1.countryname", "from", "countries", "as", "t1", "join", "car_makers", "as", "t2", "on", "t1.countryid", "=", "t2.country", "join", "model_list", "as", "t3", "on", "t2.id", "=", "t3.maker", "where", "t3.model", "=", "value", ";"], "ru": ["select", "t1.countryid", ",", "t1.countryname", "from", "countries", "as", "t1", "join", "car_makers", "as", "t2", "on", "t1.countryid", "=", "t2.country", "group", "by", "t1.countryid", "having", "count", "(", "*", ")", ">", "3", "union", "select", "t1.countryid", ",", "t1.countryname", "from", "countries", "as", "t1", "join", "car_makers", "as", "t2", "on", "t1.countryid", "=", "t2.country", "join", "model_list", "as", "t3", "on", "t2.id", "=", "t3.maker", "where", "t3.model", "=", "value", ";"]}, "masked_query": "select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  3 union select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country join model_list as t3 on t2.id  =  t3.maker where t3.model  =  'fiat';", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0432\u044b id \u0438 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f \u0432\u0441\u0435\u0445 \u0441\u0442\u0440\u0430\u043d, \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043b\u0438\u0431\u043e \u0431\u043e\u043b\u0435\u0435 \u0442\u0440\u0435\u0445 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u0435\u0439 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439, \u043b\u0438\u0431\u043e \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u044f\u0442\u0441\u044f \u043c\u043e\u0434\u0435\u043b\u0438 Fiat?"}, "question": "What are the ids and names of all countries that either have more than 3 car makers or produce fiat model ?", "kb_id": "car_1"}, {"id": "D_0180", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT Country FROM AIRLINES WHERE Airline  =  \"S7\";"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 4, false], null]]]], "where": [[false, 2, [0, [0, 2, false], null], "\"JetBlue Airways\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 4, false], null]]]], "where": [[false, 2, [0, [0, 2, false], null], "\"S7\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Which", "country", "does", "Airline", "``", "JetBlue", "Airways", "''", "belong", "to", "?"], "ru": ["\u041a", "\u043a\u0430\u043a\u043e\u0439", "\u0441\u0442\u0440\u0430\u043d\u0435", "\u043f\u0440\u0438\u043d\u0430\u0434\u043b\u0435\u0436\u0438\u0442", "\u0430\u0432\u0438\u0430\u043a\u043e\u043c\u043f\u0430\u043d\u0438\u044f", "S7", "?"]}, "query_toks": {"en": ["select", "country", "from", "airlines", "where", "airline", "=", "\"JetBlue Airways\"", ";"], "ru": ["select", "country", "from", "airlines", "where", "airline", "=", "\"S7\"", ";"]}, "query_toks_no_values": {"en": ["select", "country", "from", "airlines", "where", "airline", "=", "value", ";"], "ru": ["select", "country", "from", "airlines", "where", "airline", "=", "value", ";"]}, "masked_query": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\";", "question_pauq": {"ru": "\u041a \u043a\u0430\u043a\u043e\u0439 \u0441\u0442\u0440\u0430\u043d\u0435 \u043f\u0440\u0438\u043d\u0430\u0434\u043b\u0435\u0436\u0438\u0442 \u0430\u0432\u0438\u0430\u043a\u043e\u043c\u043f\u0430\u043d\u0438\u044f S7?"}, "question": "Which country does Airline \"JetBlue Airways\" belong to?", "kb_id": "flight_2"}, {"id": "D_0181", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT Country FROM AIRLINES WHERE Airline  =  \"S7\";"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 4, false], null]]]], "where": [[false, 2, [0, [0, 2, false], null], "\"JetBlue Airways\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 4, false], null]]]], "where": [[false, 2, [0, [0, 2, false], null], "\"S7\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "country", "is", "Jetblue", "Airways", "affiliated", "with", "?"], "ru": ["\u0418\u0437", "\u043a\u0430\u043a\u043e\u0439", "\u0441\u0442\u0440\u0430\u043d\u044b", "\u0430\u0432\u0438\u0430\u043a\u043e\u043c\u043f\u0430\u043d\u0438\u044f", "S7", "?"]}, "query_toks": {"en": ["select", "country", "from", "airlines", "where", "airline", "=", "\"JetBlue Airways\"", ";"], "ru": ["select", "country", "from", "airlines", "where", "airline", "=", "\"S7\"", ";"]}, "query_toks_no_values": {"en": ["select", "country", "from", "airlines", "where", "airline", "=", "value", ";"], "ru": ["select", "country", "from", "airlines", "where", "airline", "=", "value", ";"]}, "masked_query": "SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\";", "question_pauq": {"ru": "\u0418\u0437 \u043a\u0430\u043a\u043e\u0439 \u0441\u0442\u0440\u0430\u043d\u044b \u0430\u0432\u0438\u0430\u043a\u043e\u043c\u043f\u0430\u043d\u0438\u044f S7?"}, "question": "What country is Jetblue Airways affiliated with?", "kb_id": "flight_2"}, {"id": "D_0182", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\";"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 3, false], null]]]], "where": [[false, 2, [0, [0, 2, false], null], "\"JetBlue Airways\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 3, false], null]]]], "where": [[false, 2, [0, [0, 2, false], null], "\"JetBlue Airways\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "abbreviation", "of", "Airline", "``", "JetBlue", "Airways", "''", "?"], "ru": ["\u041a\u0430\u043a\u043e\u0435", "\u0441\u043e\u043a\u0440\u0430\u0449\u0435\u043d\u0438\u0435", "\u0443", "\u0430\u0432\u0438\u0430\u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438", "JetBlue", "Airways", "?"]}, "query_toks": {"en": ["select", "abbreviation", "from", "airlines", "where", "airline", "=", "\"JetBlue Airways\"", ";"], "ru": ["select", "abbreviation", "from", "airlines", "where", "airline", "=", "\"JetBlue Airways\"", ";"]}, "query_toks_no_values": {"en": ["select", "abbreviation", "from", "airlines", "where", "airline", "=", "value", ";"], "ru": ["select", "abbreviation", "from", "airlines", "where", "airline", "=", "value", ";"]}, "masked_query": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\";", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0435 \u0441\u043e\u043a\u0440\u0430\u0449\u0435\u043d\u0438\u0435 \u0443 \u0430\u0432\u0438\u0430\u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438 JetBlue Airways?"}, "question": "What is the abbreviation of Airline \"JetBlue Airways\"?", "kb_id": "flight_2"}, {"id": "D_0183", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\";"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 3, false], null]]]], "where": [[false, 2, [0, [0, 2, false], null], "\"JetBlue Airways\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 3, false], null]]]], "where": [[false, 2, [0, [0, 2, false], null], "\"JetBlue Airways\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Which", "abbreviation", "corresponds", "to", "Jetblue", "Airways", "?"], "ru": ["\u041a\u0430\u043a\u0430\u044f", "\u0430\u0431\u0431\u0440\u0435\u0432\u0438\u0430\u0442\u0443\u0440\u0430", "\u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442", "Jetblue", "Airways", "?"]}, "query_toks": {"en": ["select", "abbreviation", "from", "airlines", "where", "airline", "=", "\"JetBlue Airways\"", ";"], "ru": ["select", "abbreviation", "from", "airlines", "where", "airline", "=", "\"JetBlue Airways\"", ";"]}, "query_toks_no_values": {"en": ["select", "abbreviation", "from", "airlines", "where", "airline", "=", "value", ";"], "ru": ["select", "abbreviation", "from", "airlines", "where", "airline", "=", "value", ";"]}, "masked_query": "SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\";", "question_pauq": {"ru": "\u041a\u0430\u043a\u0430\u044f \u0430\u0431\u0431\u0440\u0435\u0432\u0438\u0430\u0442\u0443\u0440\u0430 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 Jetblue Airways?"}, "question": "Which abbreviation corresponds to Jetblue Airways?", "kb_id": "flight_2"}, {"id": "D_0184", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"\u0420\u043e\u0441\u0441\u0438\u044f\";"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 2, false], null]], [0, [0, [0, 3, false], null]]]], "where": [[false, 2, [0, [0, 4, false], null], "\"USA\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 2, false], null]], [0, [0, [0, 3, false], null]]]], "where": [[false, 2, [0, [0, 4, false], null], "\"\u0420\u043e\u0441\u0441\u0438\u044f\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["List", "all", "airline", "names", "and", "their", "abbreviations", "in", "``", "USA", "''", "."], "ru": ["\u041f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0438\u0442\u0435", "\u0432\u0441\u0435", "\u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f", "\u0430\u0432\u0438\u0430\u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0439", "\u0438", "\u0438\u0445", "\u0441\u043e\u043a\u0440\u0430\u0449\u0435\u043d\u0438\u044f", "\u0432", "\u00ab", "\u0420\u043e\u0441\u0441\u0438\u0438", "\u00bb", "."]}, "query_toks": {"en": ["select", "airline", ",", "abbreviation", "from", "airlines", "where", "country", "=", "\"USA\"", ";"], "ru": ["select", "airline", ",", "abbreviation", "from", "airlines", "where", "country", "=", "\"\u0420\u043e\u0441\u0441\u0438\u044f\"", ";"]}, "query_toks_no_values": {"en": ["select", "airline", ",", "abbreviation", "from", "airlines", "where", "country", "=", "value", ";"], "ru": ["select", "airline", ",", "abbreviation", "from", "airlines", "where", "country", "=", "value", ";"]}, "masked_query": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\";", "question_pauq": {"ru": "\u041f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0438\u0442\u0435 \u0432\u0441\u0435 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f \u0430\u0432\u0438\u0430\u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0439 \u0438 \u0438\u0445 \u0441\u043e\u043a\u0440\u0430\u0449\u0435\u043d\u0438\u044f \u0432 \u00ab\u0420\u043e\u0441\u0441\u0438\u0438\u00bb."}, "question": "List all airline names and their abbreviations in \"USA\".", "kb_id": "flight_2"}, {"id": "D_0185", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"\u0420\u043e\u0441\u0441\u0438\u044f\";"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 2, false], null]], [0, [0, [0, 3, false], null]]]], "where": [[false, 2, [0, [0, 4, false], null], "\"USA\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 2, false], null]], [0, [0, [0, 3, false], null]]]], "where": [[false, 2, [0, [0, 4, false], null], "\"\u0420\u043e\u0441\u0441\u0438\u044f\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "the", "airline", "names", "and", "abbreviations", "for", "airlines", "in", "the", "USA", "?"], "ru": ["\u041a\u0430\u043a\u0438\u0435", "\u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f", "\u0430\u0432\u0438\u0430\u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0439", "\u0438", "\u0430\u0431\u0431\u0440\u0435\u0432\u0438\u0430\u0442\u0443\u0440\u044b", "\u0430\u0432\u0438\u0430\u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0439", "\u0432", "\u0420\u043e\u0441\u0441\u0438\u0438", "?"]}, "query_toks": {"en": ["select", "airline", ",", "abbreviation", "from", "airlines", "where", "country", "=", "\"USA\"", ";"], "ru": ["select", "airline", ",", "abbreviation", "from", "airlines", "where", "country", "=", "\"\u0420\u043e\u0441\u0441\u0438\u044f\"", ";"]}, "query_toks_no_values": {"en": ["select", "airline", ",", "abbreviation", "from", "airlines", "where", "country", "=", "value", ";"], "ru": ["select", "airline", ",", "abbreviation", "from", "airlines", "where", "country", "=", "value", ";"]}, "masked_query": "SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\";", "question_pauq": {"ru": "\u041a\u0430\u043a\u0438\u0435 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f \u0430\u0432\u0438\u0430\u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0439 \u0438 \u0430\u0431\u0431\u0440\u0435\u0432\u0438\u0430\u0442\u0443\u0440\u044b \u0430\u0432\u0438\u0430\u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0439 \u0432 \u0420\u043e\u0441\u0441\u0438\u0438?"}, "question": "What are the airline names and abbreviations for airlines in the USA?", "kb_id": "flight_2"}, {"id": "D_0186", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"\u0410\u043d\u0430\u043f\u0430\";"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 6, false], null]], [0, [0, [0, 7, false], null]]]], "where": [[false, 2, [0, [0, 5, false], null], "\"Anthony\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 6, false], null]], [0, [0, [0, 7, false], null]]]], "where": [[false, 2, [0, [0, 5, false], null], "\"\u0410\u043d\u0430\u043f\u0430\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["List", "the", "airport", "code", "and", "name", "in", "the", "city", "of", "Anthony", "."], "ru": ["\u0423\u043a\u0430\u0436\u0438\u0442\u0435", "\u043a\u043e\u0434", "\u0438", "\u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435", "\u0430\u044d\u0440\u043e\u043f\u043e\u0440\u0442\u0430", "\u0432", "\u0433\u043e\u0440\u043e\u0434\u0435", "\u0410\u043d\u0430\u043f\u0430", "."]}, "query_toks": {"en": ["select", "airportcode", ",", "airportname", "from", "airports", "where", "city", "=", "\"Anthony\"", ";"], "ru": ["select", "airportcode", ",", "airportname", "from", "airports", "where", "city", "=", "\"\u0410\u043d\u0430\u043f\u0430\"", ";"]}, "query_toks_no_values": {"en": ["select", "airportcode", ",", "airportname", "from", "airports", "where", "city", "=", "value", ";"], "ru": ["select", "airportcode", ",", "airportname", "from", "airports", "where", "city", "=", "value", ";"]}, "masked_query": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\";", "question_pauq": {"ru": "\u0423\u043a\u0430\u0436\u0438\u0442\u0435 \u043a\u043e\u0434 \u0438 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u0430\u044d\u0440\u043e\u043f\u043e\u0440\u0442\u0430 \u0432 \u0433\u043e\u0440\u043e\u0434\u0435 \u0410\u043d\u0430\u043f\u0430."}, "question": "List the airport code and name in the city of Anthony.", "kb_id": "flight_2"}, {"id": "D_0187", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"\u0410\u043d\u0430\u043f\u0430\";"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 6, false], null]], [0, [0, [0, 7, false], null]]]], "where": [[false, 2, [0, [0, 5, false], null], "\"Anthony\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 6, false], null]], [0, [0, [0, 7, false], null]]]], "where": [[false, 2, [0, [0, 5, false], null], "\"\u0410\u043d\u0430\u043f\u0430\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Give", "the", "airport", "code", "and", "airport", "name", "corresonding", "to", "the", "city", "Anthony", "."], "ru": ["\u0423\u043a\u0430\u0436\u0438\u0442\u0435", "\u043a\u043e\u0434", "\u0430\u044d\u0440\u043e\u043f\u043e\u0440\u0442\u0430", "\u0438", "\u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435", "\u0430\u044d\u0440\u043e\u043f\u043e\u0440\u0442\u0430", ",", "\u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0435", "\u0433\u043e\u0440\u043e\u0434\u0443", "\u0410\u043d\u0430\u043f\u0430", "."]}, "query_toks": {"en": ["select", "airportcode", ",", "airportname", "from", "airports", "where", "city", "=", "\"Anthony\"", ";"], "ru": ["select", "airportcode", ",", "airportname", "from", "airports", "where", "city", "=", "\"\u0410\u043d\u0430\u043f\u0430\"", ";"]}, "query_toks_no_values": {"en": ["select", "airportcode", ",", "airportname", "from", "airports", "where", "city", "=", "value", ";"], "ru": ["select", "airportcode", ",", "airportname", "from", "airports", "where", "city", "=", "value", ";"]}, "masked_query": "SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\";", "question_pauq": {"ru": "\u0423\u043a\u0430\u0436\u0438\u0442\u0435 \u043a\u043e\u0434 \u0430\u044d\u0440\u043e\u043f\u043e\u0440\u0442\u0430 \u0438 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u0430\u044d\u0440\u043e\u043f\u043e\u0440\u0442\u0430, \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0435 \u0433\u043e\u0440\u043e\u0434\u0443 \u0410\u043d\u0430\u043f\u0430."}, "question": "Give the airport code and airport name corresonding to the city Anthony.", "kb_id": "flight_2"}, {"id": "D_0188", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT count(*) FROM AIRLINES;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["How", "many", "airlines", "do", "we", "have", "?"], "ru": ["\u0421\u043a\u043e\u043b\u044c\u043a\u043e", "\u0443", "\u043d\u0430\u0441", "\u0430\u0432\u0438\u0430\u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0439", "?"]}, "query_toks": {"en": ["select", "count", "(", "*", ")", "from", "airlines", ";"], "ru": ["select", "count", "(", "*", ")", "from", "airlines", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "*", ")", "from", "airlines", ";"], "ru": ["select", "count", "(", "*", ")", "from", "airlines", ";"]}, "masked_query": "SELECT count(*) FROM AIRLINES;", "question_pauq": {"ru": "\u0421\u043a\u043e\u043b\u044c\u043a\u043e \u0443 \u043d\u0430\u0441 \u0430\u0432\u0438\u0430\u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0439?"}, "question": "How many airlines do we have?", "kb_id": "flight_2"}, {"id": "D_0189", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT count(*) FROM AIRLINES;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "total", "number", "of", "airlines", "?"], "ru": ["\u041a\u0430\u043a\u043e\u0435", "\u043e\u0431\u0449\u0435\u0435", "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e", "\u0430\u0432\u0438\u0430\u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0439", "?"]}, "query_toks": {"en": ["select", "count", "(", "*", ")", "from", "airlines", ";"], "ru": ["select", "count", "(", "*", ")", "from", "airlines", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "*", ")", "from", "airlines", ";"], "ru": ["select", "count", "(", "*", ")", "from", "airlines", ";"]}, "masked_query": "SELECT count(*) FROM AIRLINES;", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0435 \u043e\u0431\u0449\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0430\u0432\u0438\u0430\u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0439?"}, "question": "What is the total number of airlines?", "kb_id": "flight_2"}, {"id": "D_0190", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT count(*) FROM AIRPORTS;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["How", "many", "airports", "do", "we", "have", "?"], "ru": ["\u0421\u043a\u043e\u043b\u044c\u043a\u043e", "\u0443", "\u043d\u0430\u0441", "\u0430\u044d\u0440\u043e\u043f\u043e\u0440\u0442\u043e\u0432", "?"]}, "query_toks": {"en": ["select", "count", "(", "*", ")", "from", "airports", ";"], "ru": ["select", "count", "(", "*", ")", "from", "airports", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "*", ")", "from", "airports", ";"], "ru": ["select", "count", "(", "*", ")", "from", "airports", ";"]}, "masked_query": "SELECT count(*) FROM AIRPORTS;", "question_pauq": {"ru": "\u0421\u043a\u043e\u043b\u044c\u043a\u043e \u0443 \u043d\u0430\u0441 \u0430\u044d\u0440\u043e\u043f\u043e\u0440\u0442\u043e\u0432?"}, "question": "How many airports do we have?", "kb_id": "flight_2"}, {"id": "D_0191", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT count(*) FROM AIRPORTS;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Return", "the", "number", "of", "airports", "."], "ru": ["\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c", "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e", "\u0430\u044d\u0440\u043e\u043f\u043e\u0440\u0442\u043e\u0432", "."]}, "query_toks": {"en": ["select", "count", "(", "*", ")", "from", "airports", ";"], "ru": ["select", "count", "(", "*", ")", "from", "airports", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "*", ")", "from", "airports", ";"], "ru": ["select", "count", "(", "*", ")", "from", "airports", ";"]}, "masked_query": "SELECT count(*) FROM AIRPORTS;", "question_pauq": {"ru": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0430\u044d\u0440\u043e\u043f\u043e\u0440\u0442\u043e\u0432."}, "question": "Return the number of  airports.", "kb_id": "flight_2"}, {"id": "D_0192", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT count(*) FROM FLIGHTS;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["How", "many", "flights", "do", "we", "have", "?"], "ru": ["\u0421\u043a\u043e\u043b\u044c\u043a\u043e", "\u0443", "\u043d\u0430\u0441", "\u0440\u0435\u0439\u0441\u043e\u0432", "?"]}, "query_toks": {"en": ["select", "count", "(", "*", ")", "from", "flights", ";"], "ru": ["select", "count", "(", "*", ")", "from", "flights", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "*", ")", "from", "flights", ";"], "ru": ["select", "count", "(", "*", ")", "from", "flights", ";"]}, "masked_query": "SELECT count(*) FROM FLIGHTS;", "question_pauq": {"ru": "\u0421\u043a\u043e\u043b\u044c\u043a\u043e \u0443 \u043d\u0430\u0441 \u0440\u0435\u0439\u0441\u043e\u0432?"}, "question": "How many flights do we have?", "kb_id": "flight_2"}, {"id": "D_0193", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT count(*) FROM FLIGHTS;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Return", "the", "number", "of", "flights", "."], "ru": ["\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c", "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e", "\u0440\u0435\u0439\u0441\u043e\u0432", "."]}, "query_toks": {"en": ["select", "count", "(", "*", ")", "from", "flights", ";"], "ru": ["select", "count", "(", "*", ")", "from", "flights", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "*", ")", "from", "flights", ";"], "ru": ["select", "count", "(", "*", ")", "from", "flights", ";"]}, "masked_query": "SELECT count(*) FROM FLIGHTS;", "question_pauq": {"ru": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0440\u0435\u0439\u0441\u043e\u0432."}, "question": "Return the number of flights.", "kb_id": "flight_2"}, {"id": "D_0194", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\";"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [[false, 2, [0, [0, 3, false], null], "\"UAL\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [[false, 2, [0, [0, 3, false], null], "\"UAL\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Which", "airline", "has", "abbreviation", "'UAL", "'", "?"], "ru": ["\u0423", "\u043a\u0430\u043a\u043e\u0439", "\u0430\u0432\u0438\u0430\u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438", "\u0435\u0441\u0442\u044c", "\u0430\u0431\u0431\u0440\u0435\u0432\u0438\u0430\u0442\u0443\u0440\u0430", "UAL", "?"]}, "query_toks": {"en": ["select", "airline", "from", "airlines", "where", "abbreviation", "=", "\"UAL\"", ";"], "ru": ["select", "airline", "from", "airlines", "where", "abbreviation", "=", "\"UAL\"", ";"]}, "query_toks_no_values": {"en": ["select", "airline", "from", "airlines", "where", "abbreviation", "=", "value", ";"], "ru": ["select", "airline", "from", "airlines", "where", "abbreviation", "=", "value", ";"]}, "masked_query": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\";", "question_pauq": {"ru": "\u0423 \u043a\u0430\u043a\u043e\u0439 \u0430\u0432\u0438\u0430\u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438 \u0435\u0441\u0442\u044c \u0430\u0431\u0431\u0440\u0435\u0432\u0438\u0430\u0442\u0443\u0440\u0430 UAL?"}, "question": "Which airline has abbreviation 'UAL'?", "kb_id": "flight_2"}, {"id": "D_0195", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\";"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [[false, 2, [0, [0, 3, false], null], "\"UAL\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [[false, 2, [0, [0, 3, false], null], "\"UAL\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Give", "the", "airline", "with", "abbreviation", "'UAL", "'", "."], "ru": ["\u0423\u043a\u0430\u0436\u0438\u0442\u0435", "\u0430\u0432\u0438\u0430\u043a\u043e\u043c\u043f\u0430\u043d\u0438\u044e", "\u0441", "\u0441\u043e\u043a\u0440\u0430\u0449\u0435\u043d\u0438\u0435\u043c", "\u00ab", "UAL", "\u00bb", "."]}, "query_toks": {"en": ["select", "airline", "from", "airlines", "where", "abbreviation", "=", "\"UAL\"", ";"], "ru": ["select", "airline", "from", "airlines", "where", "abbreviation", "=", "\"UAL\"", ";"]}, "query_toks_no_values": {"en": ["select", "airline", "from", "airlines", "where", "abbreviation", "=", "value", ";"], "ru": ["select", "airline", "from", "airlines", "where", "abbreviation", "=", "value", ";"]}, "masked_query": "SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\";", "question_pauq": {"ru": "\u0423\u043a\u0430\u0436\u0438\u0442\u0435 \u0430\u0432\u0438\u0430\u043a\u043e\u043c\u043f\u0430\u043d\u0438\u044e \u0441 \u0441\u043e\u043a\u0440\u0430\u0449\u0435\u043d\u0438\u0435\u043c \u00abUAL\u00bb."}, "question": "Give the airline with abbreviation 'UAL'.", "kb_id": "flight_2"}, {"id": "D_0196", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"\u0420\u043e\u0441\u0441\u0438\u044f\";"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 4, false], null], "\"USA\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 4, false], null], "\"\u0420\u043e\u0441\u0441\u0438\u044f\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["How", "many", "airlines", "are", "from", "USA", "?"], "ru": ["\u0421\u043a\u043e\u043b\u044c\u043a\u043e", "\u0430\u0432\u0438\u0430\u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0439", "\u0438\u0437", "\u0420\u043e\u0441\u0441\u0438\u0438", "?"]}, "query_toks": {"en": ["select", "count", "(", "*", ")", "from", "airlines", "where", "country", "=", "\"USA\"", ";"], "ru": ["select", "count", "(", "*", ")", "from", "airlines", "where", "country", "=", "\"\u0420\u043e\u0441\u0441\u0438\u044f\"", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "*", ")", "from", "airlines", "where", "country", "=", "value", ";"], "ru": ["select", "count", "(", "*", ")", "from", "airlines", "where", "country", "=", "value", ";"]}, "masked_query": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\";", "question_pauq": {"ru": "\u0421\u043a\u043e\u043b\u044c\u043a\u043e \u0430\u0432\u0438\u0430\u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0439 \u0438\u0437 \u0420\u043e\u0441\u0441\u0438\u0438?"}, "question": "How many airlines are from USA?", "kb_id": "flight_2"}, {"id": "D_0197", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"\u0420\u043e\u0441\u0441\u0438\u044f\";"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 4, false], null], "\"USA\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 4, false], null], "\"\u0420\u043e\u0441\u0441\u0438\u044f\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Return", "the", "number", "of", "airlines", "in", "the", "USA", "."], "ru": ["\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c", "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e", "\u0430\u0432\u0438\u0430\u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0439", "\u0432", "\u0420\u043e\u0441\u0441\u0438\u0438", "."]}, "query_toks": {"en": ["select", "count", "(", "*", ")", "from", "airlines", "where", "country", "=", "\"USA\"", ";"], "ru": ["select", "count", "(", "*", ")", "from", "airlines", "where", "country", "=", "\"\u0420\u043e\u0441\u0441\u0438\u044f\"", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "*", ")", "from", "airlines", "where", "country", "=", "value", ";"], "ru": ["select", "count", "(", "*", ")", "from", "airlines", "where", "country", "=", "value", ";"]}, "masked_query": "SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\";", "question_pauq": {"ru": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0430\u0432\u0438\u0430\u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0439 \u0432 \u0420\u043e\u0441\u0441\u0438\u0438."}, "question": "Return the number of airlines in the USA.", "kb_id": "flight_2"}, {"id": "D_0198", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"\u0412\u043d\u0443\u043a\u043e\u0432\u043e\";"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 5, false], null]], [0, [0, [0, 8, false], null]]]], "where": [[false, 2, [0, [0, 7, false], null], "\"Alton\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 5, false], null]], [0, [0, [0, 8, false], null]]]], "where": [[false, 2, [0, [0, 7, false], null], "\"\u0412\u043d\u0443\u043a\u043e\u0432\u043e\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Which", "city", "and", "country", "is", "the", "Alton", "airport", "at", "?"], "ru": ["\u0412", "\u043a\u0430\u043a\u043e\u043c", "\u0433\u043e\u0440\u043e\u0434\u0435", "\u0438", "\u0441\u0442\u0440\u0430\u043d\u0435", "\u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f", "\u0430\u044d\u0440\u043e\u043f\u043e\u0440\u0442", "\u0412\u043d\u0443\u043a\u043e\u0432\u043e", "?"]}, "query_toks": {"en": ["select", "city", ",", "country", "from", "airports", "where", "airportname", "=", "\"Alton\"", ";"], "ru": ["select", "city", ",", "country", "from", "airports", "where", "airportname", "=", "\"\u0412\u043d\u0443\u043a\u043e\u0432\u043e\"", ";"]}, "query_toks_no_values": {"en": ["select", "city", ",", "country", "from", "airports", "where", "airportname", "=", "value", ";"], "ru": ["select", "city", ",", "country", "from", "airports", "where", "airportname", "=", "value", ";"]}, "masked_query": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\";", "question_pauq": {"ru": "\u0412 \u043a\u0430\u043a\u043e\u043c \u0433\u043e\u0440\u043e\u0434\u0435 \u0438 \u0441\u0442\u0440\u0430\u043d\u0435 \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u0430\u044d\u0440\u043e\u043f\u043e\u0440\u0442 \u0412\u043d\u0443\u043a\u043e\u0432\u043e?"}, "question": "Which city and country is the Alton airport at?", "kb_id": "flight_2"}, {"id": "D_0199", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"\u0412\u043d\u0443\u043a\u043e\u0432\u043e\";"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 5, false], null]], [0, [0, [0, 8, false], null]]]], "where": [[false, 2, [0, [0, 7, false], null], "\"Alton\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 5, false], null]], [0, [0, [0, 8, false], null]]]], "where": [[false, 2, [0, [0, 7, false], null], "\"\u0412\u043d\u0443\u043a\u043e\u0432\u043e\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Give", "the", "city", "and", "country", "for", "the", "Alton", "airport", "."], "ru": ["\u0423\u043a\u0430\u0437\u0430\u0442\u044c", "\u0433\u043e\u0440\u043e\u0434", "\u0438", "\u0441\u0442\u0440\u0430\u043d\u0443", "\u0434\u043b\u044f", "\u0430\u044d\u0440\u043e\u043f\u043e\u0440\u0442\u0430", "\u0412\u043d\u0443\u043a\u043e\u0432\u043e", "."]}, "query_toks": {"en": ["select", "city", ",", "country", "from", "airports", "where", "airportname", "=", "\"Alton\"", ";"], "ru": ["select", "city", ",", "country", "from", "airports", "where", "airportname", "=", "\"\u0412\u043d\u0443\u043a\u043e\u0432\u043e\"", ";"]}, "query_toks_no_values": {"en": ["select", "city", ",", "country", "from", "airports", "where", "airportname", "=", "value", ";"], "ru": ["select", "city", ",", "country", "from", "airports", "where", "airportname", "=", "value", ";"]}, "masked_query": "SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\";", "question_pauq": {"ru": "\u0423\u043a\u0430\u0437\u0430\u0442\u044c \u0433\u043e\u0440\u043e\u0434 \u0438 \u0441\u0442\u0440\u0430\u043d\u0443 \u0434\u043b\u044f \u0430\u044d\u0440\u043e\u043f\u043e\u0440\u0442\u0430 \u0412\u043d\u0443\u043a\u043e\u0432\u043e."}, "question": "Give the city and country for the Alton airport.", "kb_id": "flight_2"}, {"id": "D_0200", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"VKO\";"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 7, false], null]]]], "where": [[false, 2, [0, [0, 6, false], null], "\"AKO\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 7, false], null]]]], "where": [[false, 2, [0, [0, 6, false], null], "\"VKO\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "airport", "name", "for", "airport", "'AKO", "'", "?"], "ru": ["\u041a\u0430\u043a", "\u043d\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f", "\u0430\u044d\u0440\u043e\u043f\u043e\u0440\u0442", "VKO", "?"]}, "query_toks": {"en": ["select", "airportname", "from", "airports", "where", "airportcode", "=", "\"AKO\"", ";"], "ru": ["select", "airportname", "from", "airports", "where", "airportcode", "=", "\"VKO\"", ";"]}, "query_toks_no_values": {"en": ["select", "airportname", "from", "airports", "where", "airportcode", "=", "value", ";"], "ru": ["select", "airportname", "from", "airports", "where", "airportcode", "=", "value", ";"]}, "masked_query": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\";", "question_pauq": {"ru": "\u041a\u0430\u043a \u043d\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0430\u044d\u0440\u043e\u043f\u043e\u0440\u0442 VKO?"}, "question": "What is the airport name for airport 'AKO'?", "kb_id": "flight_2"}, {"id": "D_0201", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"VKO\";"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 7, false], null]]]], "where": [[false, 2, [0, [0, 6, false], null], "\"AKO\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 7, false], null]]]], "where": [[false, 2, [0, [0, 6, false], null], "\"VKO\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Return", "the", "name", "of", "the", "airport", "with", "code", "'AKO", "'", "."], "ru": ["\u0412\u0435\u0440\u043d\u0438\u0442\u0435", "\u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435", "\u0430\u044d\u0440\u043e\u043f\u043e\u0440\u0442\u0430", "\u0441", "\u043a\u043e\u0434\u043e\u043c", "\u00ab", "V\u041a\u041e", "\u00bb", "."]}, "query_toks": {"en": ["select", "airportname", "from", "airports", "where", "airportcode", "=", "\"AKO\"", ";"], "ru": ["select", "airportname", "from", "airports", "where", "airportcode", "=", "\"VKO\"", ";"]}, "query_toks_no_values": {"en": ["select", "airportname", "from", "airports", "where", "airportcode", "=", "value", ";"], "ru": ["select", "airportname", "from", "airports", "where", "airportcode", "=", "value", ";"]}, "masked_query": "SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\";", "question_pauq": {"ru": "\u0412\u0435\u0440\u043d\u0438\u0442\u0435 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u0430\u044d\u0440\u043e\u043f\u043e\u0440\u0442\u0430 \u0441 \u043a\u043e\u0434\u043e\u043c \u00abV\u041a\u041e\u00bb."}, "question": "Return the name of the airport with code 'AKO'.", "kb_id": "flight_2"}, {"id": "D_0202", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT AirportName FROM AIRPORTS WHERE City = \"\u041c\u043e\u0441\u043a\u0432\u0430\";"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 7, false], null]]]], "where": [[false, 2, [0, [0, 5, false], null], "\"Aberdeen\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 7, false], null]]]], "where": [[false, 2, [0, [0, 5, false], null], "\"\u041c\u043e\u0441\u043a\u0432\u0430\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "airport", "names", "at", "City", "'Aberdeen", "'", "?"], "ru": ["\u041a\u0430\u043a", "\u043d\u0430\u0437\u044b\u0432\u0430\u044e\u0442\u0441\u044f", "\u0430\u044d\u0440\u043e\u043f\u043e\u0440\u0442\u044b", "\u0432", "\u0433\u043e\u0440\u043e\u0434\u0435", "\u041c\u043e\u0441\u043a\u0432\u0430", "?"]}, "query_toks": {"en": ["select", "airportname", "from", "airports", "where", "city", "=", "\"Aberdeen\"", ";"], "ru": ["select", "airportname", "from", "airports", "where", "city", "=", "\"\u041c\u043e\u0441\u043a\u0432\u0430\"", ";"]}, "query_toks_no_values": {"en": ["select", "airportname", "from", "airports", "where", "city", "=", "value", ";"], "ru": ["select", "airportname", "from", "airports", "where", "city", "=", "value", ";"]}, "masked_query": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\";", "question_pauq": {"ru": "\u041a\u0430\u043a \u043d\u0430\u0437\u044b\u0432\u0430\u044e\u0442\u0441\u044f \u0430\u044d\u0440\u043e\u043f\u043e\u0440\u0442\u044b \u0432 \u0433\u043e\u0440\u043e\u0434\u0435 \u041c\u043e\u0441\u043a\u0432\u0430?"}, "question": "What are airport names at City 'Aberdeen'?", "kb_id": "flight_2"}, {"id": "D_0203", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT AirportName FROM AIRPORTS WHERE City = \"\u041c\u043e\u0441\u043a\u0432\u0430\";"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 7, false], null]]]], "where": [[false, 2, [0, [0, 5, false], null], "\"Aberdeen\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 7, false], null]]]], "where": [[false, 2, [0, [0, 5, false], null], "\"\u041c\u043e\u0441\u043a\u0432\u0430\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "the", "names", "of", "airports", "in", "Aberdeen", "?"], "ru": ["\u041a\u0430\u043a", "\u043d\u0430\u0437\u044b\u0432\u0430\u044e\u0442\u0441\u044f", "\u0430\u044d\u0440\u043e\u043f\u043e\u0440\u0442\u044b", "\u0432", "\u041c\u043e\u0441\u043a\u0432\u0435", "?"]}, "query_toks": {"en": ["select", "airportname", "from", "airports", "where", "city", "=", "\"Aberdeen\"", ";"], "ru": ["select", "airportname", "from", "airports", "where", "city", "=", "\"\u041c\u043e\u0441\u043a\u0432\u0430\"", ";"]}, "query_toks_no_values": {"en": ["select", "airportname", "from", "airports", "where", "city", "=", "value", ";"], "ru": ["select", "airportname", "from", "airports", "where", "city", "=", "value", ";"]}, "masked_query": "SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\";", "question_pauq": {"ru": "\u041a\u0430\u043a \u043d\u0430\u0437\u044b\u0432\u0430\u044e\u0442\u0441\u044f \u0430\u044d\u0440\u043e\u043f\u043e\u0440\u0442\u044b \u0432 \u041c\u043e\u0441\u043a\u0432\u0435?"}, "question": "What are the names of airports in Aberdeen?", "kb_id": "flight_2"}, {"id": "D_0204", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\";"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 12, false], null], "\"APG\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 12, false], null], "\"APG\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["How", "many", "flights", "depart", "from", "'APG", "'", "?"], "ru": ["\u0421\u043a\u043e\u043b\u044c\u043a\u043e", "\u0440\u0435\u0439\u0441\u043e\u0432", "\u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442\u0441\u044f", "\u0438\u0437", "APG", "?"]}, "query_toks": {"en": ["select", "count", "(", "*", ")", "from", "flights", "where", "sourceairport", "=", "\"APG\"", ";"], "ru": ["select", "count", "(", "*", ")", "from", "flights", "where", "sourceairport", "=", "\"APG\"", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "*", ")", "from", "flights", "where", "sourceairport", "=", "value", ";"], "ru": ["select", "count", "(", "*", ")", "from", "flights", "where", "sourceairport", "=", "value", ";"]}, "masked_query": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\";", "question_pauq": {"ru": "\u0421\u043a\u043e\u043b\u044c\u043a\u043e \u0440\u0435\u0439\u0441\u043e\u0432 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0438\u0437 APG?"}, "question": "How many flights depart from 'APG'?", "kb_id": "flight_2"}, {"id": "D_0205", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\";"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 12, false], null], "\"APG\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 12, false], null], "\"APG\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Count", "the", "number", "of", "flights", "departing", "from", "'APG", "'", "."], "ru": ["\u041f\u043e\u0434\u0441\u0447\u0438\u0442\u0430\u0439\u0442\u0435", "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e", "\u0440\u0435\u0439\u0441\u043e\u0432", ",", "\u0432\u044b\u043b\u0435\u0442\u0430\u044e\u0449\u0438\u0445", "\u0438\u0437", "\u00ab", "APG", "\u00bb", "."]}, "query_toks": {"en": ["select", "count", "(", "*", ")", "from", "flights", "where", "sourceairport", "=", "\"APG\"", ";"], "ru": ["select", "count", "(", "*", ")", "from", "flights", "where", "sourceairport", "=", "\"APG\"", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "*", ")", "from", "flights", "where", "sourceairport", "=", "value", ";"], "ru": ["select", "count", "(", "*", ")", "from", "flights", "where", "sourceairport", "=", "value", ";"]}, "masked_query": "SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\";", "question_pauq": {"ru": "\u041f\u043e\u0434\u0441\u0447\u0438\u0442\u0430\u0439\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0440\u0435\u0439\u0441\u043e\u0432, \u0432\u044b\u043b\u0435\u0442\u0430\u044e\u0449\u0438\u0445 \u0438\u0437 \u00abAPG\u00bb."}, "question": "Count the number of flights departing from 'APG'.", "kb_id": "flight_2"}, {"id": "D_0206", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\";"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 13, false], null], "\"ATO\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 13, false], null], "\"ATO\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["How", "many", "flights", "have", "destination", "ATO", "?"], "ru": ["\u0421\u043a\u043e\u043b\u044c\u043a\u043e", "\u0440\u0435\u0439\u0441\u043e\u0432", "\u0438\u043c\u0435\u0435\u0442", "\u043f\u0443\u043d\u043a\u0442", "\u043d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f", "ATO", "?"]}, "query_toks": {"en": ["select", "count", "(", "*", ")", "from", "flights", "where", "destairport", "=", "\"ATO\"", ";"], "ru": ["select", "count", "(", "*", ")", "from", "flights", "where", "destairport", "=", "\"ATO\"", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "*", ")", "from", "flights", "where", "destairport", "=", "value", ";"], "ru": ["select", "count", "(", "*", ")", "from", "flights", "where", "destairport", "=", "value", ";"]}, "masked_query": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\";", "question_pauq": {"ru": "\u0421\u043a\u043e\u043b\u044c\u043a\u043e \u0440\u0435\u0439\u0441\u043e\u0432 \u0438\u043c\u0435\u0435\u0442 \u043f\u0443\u043d\u043a\u0442 \u043d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f ATO?"}, "question": "How many flights have destination ATO?", "kb_id": "flight_2"}, {"id": "D_0207", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\";"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 13, false], null], "\"ATO\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 13, false], null], "\"ATO\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Count", "the", "number", "of", "flights", "into", "ATO", "."], "ru": ["\u041f\u043e\u0434\u0441\u0447\u0438\u0442\u0430\u0439\u0442\u0435", "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e", "\u0440\u0435\u0439\u0441\u043e\u0432", "\u0432", "\u0410\u0422\u041e", "."]}, "query_toks": {"en": ["select", "count", "(", "*", ")", "from", "flights", "where", "destairport", "=", "\"ATO\"", ";"], "ru": ["select", "count", "(", "*", ")", "from", "flights", "where", "destairport", "=", "\"ATO\"", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "*", ")", "from", "flights", "where", "destairport", "=", "value", ";"], "ru": ["select", "count", "(", "*", ")", "from", "flights", "where", "destairport", "=", "value", ";"]}, "masked_query": "SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\";", "question_pauq": {"ru": "\u041f\u043e\u0434\u0441\u0447\u0438\u0442\u0430\u0439\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0440\u0435\u0439\u0441\u043e\u0432 \u0432 \u0410\u0422\u041e."}, "question": "Count the number of flights into ATO.", "kb_id": "flight_2"}, {"id": "D_0208", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"\u0427\u0435\u043b\u044f\u0431\u0438\u043d\u0441\u043a\";"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 12, false], null], [0, 6, false], null]]}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 5, false], null], "\"Aberdeen\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 12, false], null], [0, 6, false], null]]}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 5, false], null], "\"\u0427\u0435\u043b\u044f\u0431\u0438\u043d\u0441\u043a\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["How", "many", "flights", "depart", "from", "City", "Aberdeen", "?"], "ru": ["\u0421\u043a\u043e\u043b\u044c\u043a\u043e", "\u0440\u0435\u0439\u0441\u043e\u0432", "\u0432\u044b\u043b\u0435\u0442\u0430\u0435\u0442", "\u0438\u0437", "\u0433\u043e\u0440\u043e\u0434\u0430", "\u0427\u0435\u043b\u044f\u0431\u0438\u043d\u0441\u043a", "?"]}, "query_toks": {"en": ["select", "count", "(", "*", ")", "from", "flights", "as", "t1", "join", "airports", "as", "t2", "on", "t1.sourceairport", "=", "t2.airportcode", "where", "t2.city", "=", "\"Aberdeen\"", ";"], "ru": ["select", "count", "(", "*", ")", "from", "flights", "as", "t1", "join", "airports", "as", "t2", "on", "t1.sourceairport", "=", "t2.airportcode", "where", "t2.city", "=", "\"\u0427\u0435\u043b\u044f\u0431\u0438\u043d\u0441\u043a\"", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "*", ")", "from", "flights", "as", "t1", "join", "airports", "as", "t2", "on", "t1.sourceairport", "=", "t2.airportcode", "where", "t2.city", "=", "value", ";"], "ru": ["select", "count", "(", "*", ")", "from", "flights", "as", "t1", "join", "airports", "as", "t2", "on", "t1.sourceairport", "=", "t2.airportcode", "where", "t2.city", "=", "value", ";"]}, "masked_query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\";", "question_pauq": {"ru": "\u0421\u043a\u043e\u043b\u044c\u043a\u043e \u0440\u0435\u0439\u0441\u043e\u0432 \u0432\u044b\u043b\u0435\u0442\u0430\u0435\u0442 \u0438\u0437 \u0433\u043e\u0440\u043e\u0434\u0430 \u0427\u0435\u043b\u044f\u0431\u0438\u043d\u0441\u043a?"}, "question": "How many flights depart from City Aberdeen?", "kb_id": "flight_2"}, {"id": "D_0209", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"\u0427\u0435\u043b\u044f\u0431\u0438\u043d\u0441\u043a\";"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 12, false], null], [0, 6, false], null]]}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 5, false], null], "\"Aberdeen\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 12, false], null], [0, 6, false], null]]}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 5, false], null], "\"\u0427\u0435\u043b\u044f\u0431\u0438\u043d\u0441\u043a\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Return", "the", "number", "of", "flights", "departing", "from", "Aberdeen", "."], "ru": ["\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c", "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e", "\u0440\u0435\u0439\u0441\u043e\u0432", ",", "\u0432\u044b\u043b\u0435\u0442\u0430\u044e\u0449\u0438\u0445", "\u0438\u0437", "\u0427\u0435\u043b\u044f\u0431\u0438\u043d\u0441\u043a\u0430", "."]}, "query_toks": {"en": ["select", "count", "(", "*", ")", "from", "flights", "as", "t1", "join", "airports", "as", "t2", "on", "t1.sourceairport", "=", "t2.airportcode", "where", "t2.city", "=", "\"Aberdeen\"", ";"], "ru": ["select", "count", "(", "*", ")", "from", "flights", "as", "t1", "join", "airports", "as", "t2", "on", "t1.sourceairport", "=", "t2.airportcode", "where", "t2.city", "=", "\"\u0427\u0435\u043b\u044f\u0431\u0438\u043d\u0441\u043a\"", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "*", ")", "from", "flights", "as", "t1", "join", "airports", "as", "t2", "on", "t1.sourceairport", "=", "t2.airportcode", "where", "t2.city", "=", "value", ";"], "ru": ["select", "count", "(", "*", ")", "from", "flights", "as", "t1", "join", "airports", "as", "t2", "on", "t1.sourceairport", "=", "t2.airportcode", "where", "t2.city", "=", "value", ";"]}, "masked_query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\";", "question_pauq": {"ru": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0440\u0435\u0439\u0441\u043e\u0432, \u0432\u044b\u043b\u0435\u0442\u0430\u044e\u0449\u0438\u0445 \u0438\u0437 \u0427\u0435\u043b\u044f\u0431\u0438\u043d\u0441\u043a\u0430."}, "question": "Return the number of flights departing from Aberdeen.", "kb_id": "flight_2"}, {"id": "D_0210", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"\u0427\u0435\u043b\u044f\u0431\u0438\u043d\u0441\u043a\";"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 13, false], null], [0, 6, false], null]]}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 5, false], null], "\"Aberdeen\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 13, false], null], [0, 6, false], null]]}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 5, false], null], "\"\u0427\u0435\u043b\u044f\u0431\u0438\u043d\u0441\u043a\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["How", "many", "flights", "arriving", "in", "Aberdeen", "city", "?"], "ru": ["\u0421\u043a\u043e\u043b\u044c\u043a\u043e", "\u0440\u0435\u0439\u0441\u043e\u0432", "\u043f\u0440\u0438\u0431\u044b\u0432\u0430\u0435\u0442", "\u0432", "\u0433\u043e\u0440\u043e\u0434", "\u0427\u0435\u043b\u044f\u0431\u0438\u043d\u0441\u043a", "?"]}, "query_toks": {"en": ["select", "count", "(", "*", ")", "from", "flights", "as", "t1", "join", "airports", "as", "t2", "on", "t1.destairport", "=", "t2.airportcode", "where", "t2.city", "=", "\"Aberdeen\"", ";"], "ru": ["select", "count", "(", "*", ")", "from", "flights", "as", "t1", "join", "airports", "as", "t2", "on", "t1.destairport", "=", "t2.airportcode", "where", "t2.city", "=", "\"\u0427\u0435\u043b\u044f\u0431\u0438\u043d\u0441\u043a\"", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "*", ")", "from", "flights", "as", "t1", "join", "airports", "as", "t2", "on", "t1.destairport", "=", "t2.airportcode", "where", "t2.city", "=", "value", ";"], "ru": ["select", "count", "(", "*", ")", "from", "flights", "as", "t1", "join", "airports", "as", "t2", "on", "t1.destairport", "=", "t2.airportcode", "where", "t2.city", "=", "value", ";"]}, "masked_query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\";", "question_pauq": {"ru": "\u0421\u043a\u043e\u043b\u044c\u043a\u043e \u0440\u0435\u0439\u0441\u043e\u0432 \u043f\u0440\u0438\u0431\u044b\u0432\u0430\u0435\u0442 \u0432 \u0433\u043e\u0440\u043e\u0434 \u0427\u0435\u043b\u044f\u0431\u0438\u043d\u0441\u043a?"}, "question": "How many flights arriving in Aberdeen city?", "kb_id": "flight_2"}, {"id": "D_0211", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"\u0427\u0435\u043b\u044f\u0431\u0438\u043d\u0441\u043a\";"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 13, false], null], [0, 6, false], null]]}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 5, false], null], "\"Aberdeen\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 13, false], null], [0, 6, false], null]]}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 5, false], null], "\"\u0427\u0435\u043b\u044f\u0431\u0438\u043d\u0441\u043a\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Return", "the", "number", "of", "flights", "arriving", "in", "Aberdeen", "."], "ru": ["\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c", "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e", "\u0440\u0435\u0439\u0441\u043e\u0432", ",", "\u043f\u0440\u0438\u0431\u044b\u0432\u0430\u044e\u0449\u0438\u0445", "\u0432", "\u0427\u0435\u043b\u044f\u0431\u0438\u043d\u0441\u043a", "."]}, "query_toks": {"en": ["select", "count", "(", "*", ")", "from", "flights", "as", "t1", "join", "airports", "as", "t2", "on", "t1.destairport", "=", "t2.airportcode", "where", "t2.city", "=", "\"Aberdeen\"", ";"], "ru": ["select", "count", "(", "*", ")", "from", "flights", "as", "t1", "join", "airports", "as", "t2", "on", "t1.destairport", "=", "t2.airportcode", "where", "t2.city", "=", "\"\u0427\u0435\u043b\u044f\u0431\u0438\u043d\u0441\u043a\"", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "*", ")", "from", "flights", "as", "t1", "join", "airports", "as", "t2", "on", "t1.destairport", "=", "t2.airportcode", "where", "t2.city", "=", "value", ";"], "ru": ["select", "count", "(", "*", ")", "from", "flights", "as", "t1", "join", "airports", "as", "t2", "on", "t1.destairport", "=", "t2.airportcode", "where", "t2.city", "=", "value", ";"]}, "masked_query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\";", "question_pauq": {"ru": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0440\u0435\u0439\u0441\u043e\u0432, \u043f\u0440\u0438\u0431\u044b\u0432\u0430\u044e\u0449\u0438\u0445 \u0432 \u0427\u0435\u043b\u044f\u0431\u0438\u043d\u0441\u043a."}, "question": "Return the number of flights arriving in Aberdeen.", "kb_id": "flight_2"}, {"id": "D_0212", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \"\u041a\u0430\u043b\u0438\u043d\u0438\u043d\u0433\u0440\u0430\u0434\" AND T3.City  =  \"\u0412\u043e\u0440\u043e\u043d\u0435\u0436\";"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2], ["table_unit", 1], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 13, false], null], [0, 6, false], null], "and", [false, 2, [0, [0, 12, false], null], [0, 6, false], null]]}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 5, false], null], "\"Ashley\"", null], "and", [false, 2, [0, [0, 5, false], null], "\"Aberdeen\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2], ["table_unit", 1], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 13, false], null], [0, 6, false], null], "and", [false, 2, [0, [0, 12, false], null], [0, 6, false], null]]}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 5, false], null], "\"\u041a\u0430\u043b\u0438\u043d\u0438\u043d\u0433\u0440\u0430\u0434\"", null], "and", [false, 2, [0, [0, 5, false], null], "\"\u0412\u043e\u0440\u043e\u043d\u0435\u0436\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["How", "many", "flights", "depart", "from", "City", "'Aberdeen", "'", "and", "have", "destination", "City", "'Ashley", "'", "?"], "ru": ["\u0421\u043a\u043e\u043b\u044c\u043a\u043e", "\u0440\u0435\u0439\u0441\u043e\u0432", "\u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442\u0441\u044f", "\u0438\u0437", "\u0433\u043e\u0440\u043e\u0434\u0430", "\u0412\u043e\u0440\u043e\u043d\u0435\u0436", "\u0432", "\u0433\u043e\u0440\u043e\u0434", "\u041a\u0430\u043b\u0438\u043d\u0438\u043d\u0433\u0440\u0430\u0434", "?"]}, "query_toks": {"en": ["select", "count", "(", "*", ")", "from", "flights", "as", "t1", "join", "airports", "as", "t2", "on", "t1.destairport", "=", "t2.airportcode", "join", "airports", "as", "t3", "on", "t1.sourceairport", "=", "t3.airportcode", "where", "t2.city", "=", "\"Ashley\"", "and", "t3.city", "=", "\"Aberdeen\"", ";"], "ru": ["select", "count", "(", "*", ")", "from", "flights", "as", "t1", "join", "airports", "as", "t2", "on", "t1.destairport", "=", "t2.airportcode", "join", "airports", "as", "t3", "on", "t1.sourceairport", "=", "t3.airportcode", "where", "t2.city", "=", "\"\u041a\u0430\u043b\u0438\u043d\u0438\u043d\u0433\u0440\u0430\u0434\"", "and", "t3.city", "=", "\"\u0412\u043e\u0440\u043e\u043d\u0435\u0436\"", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "*", ")", "from", "flights", "as", "t1", "join", "airports", "as", "t2", "on", "t1.destairport", "=", "t2.airportcode", "join", "airports", "as", "t3", "on", "t1.sourceairport", "=", "t3.airportcode", "where", "t2.city", "=", "value", "and", "t3.city", "=", "value", ";"], "ru": ["select", "count", "(", "*", ")", "from", "flights", "as", "t1", "join", "airports", "as", "t2", "on", "t1.destairport", "=", "t2.airportcode", "join", "airports", "as", "t3", "on", "t1.sourceairport", "=", "t3.airportcode", "where", "t2.city", "=", "value", "and", "t3.city", "=", "value", ";"]}, "masked_query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \"Ashley\" AND T3.City  =  \"Aberdeen\";", "question_pauq": {"ru": "\u0421\u043a\u043e\u043b\u044c\u043a\u043e \u0440\u0435\u0439\u0441\u043e\u0432 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0438\u0437 \u0433\u043e\u0440\u043e\u0434\u0430 \u0412\u043e\u0440\u043e\u043d\u0435\u0436 \u0432 \u0433\u043e\u0440\u043e\u0434 \u041a\u0430\u043b\u0438\u043d\u0438\u043d\u0433\u0440\u0430\u0434?"}, "question": "How many flights depart from City 'Aberdeen' and have destination City 'Ashley'?", "kb_id": "flight_2"}, {"id": "D_0213", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \"\u041a\u0430\u043b\u0438\u043d\u0438\u043d\u0433\u0440\u0430\u0434\" AND T3.City  =  \"\u0412\u043e\u0440\u043e\u043d\u0435\u0436\";"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2], ["table_unit", 1], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 13, false], null], [0, 6, false], null], "and", [false, 2, [0, [0, 12, false], null], [0, 6, false], null]]}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 5, false], null], "\"Ashley\"", null], "and", [false, 2, [0, [0, 5, false], null], "\"Aberdeen\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2], ["table_unit", 1], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 13, false], null], [0, 6, false], null], "and", [false, 2, [0, [0, 12, false], null], [0, 6, false], null]]}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 5, false], null], "\"\u041a\u0430\u043b\u0438\u043d\u0438\u043d\u0433\u0440\u0430\u0434\"", null], "and", [false, 2, [0, [0, 5, false], null], "\"\u0412\u043e\u0440\u043e\u043d\u0435\u0436\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["How", "many", "flights", "fly", "from", "Aberdeen", "to", "Ashley", "?"], "ru": ["\u0421\u043a\u043e\u043b\u044c\u043a\u043e", "\u0440\u0435\u0439\u0441\u043e\u0432", "\u043b\u0435\u0442\u0430\u044e\u0442", "\u043f\u043e", "\u043d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044e", "\u0412\u043e\u0440\u043e\u043d\u0435\u0436", "-", "\u041a\u0430\u043b\u0438\u043d\u0438\u043d\u0433\u0440\u0430\u0434", "?"]}, "query_toks": {"en": ["select", "count", "(", "*", ")", "from", "flights", "as", "t1", "join", "airports", "as", "t2", "on", "t1.destairport", "=", "t2.airportcode", "join", "airports", "as", "t3", "on", "t1.sourceairport", "=", "t3.airportcode", "where", "t2.city", "=", "\"Ashley\"", "and", "t3.city", "=", "\"Aberdeen\"", ";"], "ru": ["select", "count", "(", "*", ")", "from", "flights", "as", "t1", "join", "airports", "as", "t2", "on", "t1.destairport", "=", "t2.airportcode", "join", "airports", "as", "t3", "on", "t1.sourceairport", "=", "t3.airportcode", "where", "t2.city", "=", "\"\u041a\u0430\u043b\u0438\u043d\u0438\u043d\u0433\u0440\u0430\u0434\"", "and", "t3.city", "=", "\"\u0412\u043e\u0440\u043e\u043d\u0435\u0436\"", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "*", ")", "from", "flights", "as", "t1", "join", "airports", "as", "t2", "on", "t1.destairport", "=", "t2.airportcode", "join", "airports", "as", "t3", "on", "t1.sourceairport", "=", "t3.airportcode", "where", "t2.city", "=", "value", "and", "t3.city", "=", "value", ";"], "ru": ["select", "count", "(", "*", ")", "from", "flights", "as", "t1", "join", "airports", "as", "t2", "on", "t1.destairport", "=", "t2.airportcode", "join", "airports", "as", "t3", "on", "t1.sourceairport", "=", "t3.airportcode", "where", "t2.city", "=", "value", "and", "t3.city", "=", "value", ";"]}, "masked_query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \"Ashley\" AND T3.City  =  \"Aberdeen\";", "question_pauq": {"ru": "\u0421\u043a\u043e\u043b\u044c\u043a\u043e \u0440\u0435\u0439\u0441\u043e\u0432 \u043b\u0435\u0442\u0430\u044e\u0442 \u043f\u043e \u043d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044e \u0412\u043e\u0440\u043e\u043d\u0435\u0436 - \u041a\u0430\u043b\u0438\u043d\u0438\u043d\u0433\u0440\u0430\u0434?"}, "question": "How many flights fly from Aberdeen to Ashley?", "kb_id": "flight_2"}, {"id": "D_0214", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"\u0410\u044d\u0440\u043e\u0444\u043b\u043e\u0442\";"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 10, false], null], [0, 1, false], null]]}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 2, false], null], "\"JetBlue Airways\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 10, false], null], [0, 1, false], null]]}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 2, false], null], "\"\u0410\u044d\u0440\u043e\u0444\u043b\u043e\u0442\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["How", "many", "flights", "does", "airline", "'JetBlue", "Airways", "'", "have", "?"], "ru": ["\u0421\u043a\u043e\u043b\u044c\u043a\u043e", "\u0440\u0435\u0439\u0441\u043e\u0432", "\u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442", "\u0430\u0432\u0438\u0430\u043a\u043e\u043c\u043f\u0430\u043d\u0438\u044f", "\u0410\u044d\u0440\u043e\u0444\u043b\u043e\u0442", "?"]}, "query_toks": {"en": ["select", "count", "(", "*", ")", "from", "flights", "as", "t1", "join", "airlines", "as", "t2", "on", "t1.airline", "=", "t2.uid", "where", "t2.airline", "=", "\"JetBlue Airways\"", ";"], "ru": ["select", "count", "(", "*", ")", "from", "flights", "as", "t1", "join", "airlines", "as", "t2", "on", "t1.airline", "=", "t2.uid", "where", "t2.airline", "=", "\"\u0410\u044d\u0440\u043e\u0444\u043b\u043e\u0442\"", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "*", ")", "from", "flights", "as", "t1", "join", "airlines", "as", "t2", "on", "t1.airline", "=", "t2.uid", "where", "t2.airline", "=", "value", ";"], "ru": ["select", "count", "(", "*", ")", "from", "flights", "as", "t1", "join", "airlines", "as", "t2", "on", "t1.airline", "=", "t2.uid", "where", "t2.airline", "=", "value", ";"]}, "masked_query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\";", "question_pauq": {"ru": "\u0421\u043a\u043e\u043b\u044c\u043a\u043e \u0440\u0435\u0439\u0441\u043e\u0432 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0435\u0442 \u0430\u0432\u0438\u0430\u043a\u043e\u043c\u043f\u0430\u043d\u0438\u044f \u0410\u044d\u0440\u043e\u0444\u043b\u043e\u0442?"}, "question": "How many flights does airline 'JetBlue Airways' have?", "kb_id": "flight_2"}, {"id": "D_0215", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"\u0410\u044d\u0440\u043e\u0444\u043b\u043e\u0442\";"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 10, false], null], [0, 1, false], null]]}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 2, false], null], "\"JetBlue Airways\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 10, false], null], [0, 1, false], null]]}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 2, false], null], "\"\u0410\u044d\u0440\u043e\u0444\u043b\u043e\u0442\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Give", "the", "number", "of", "Jetblue", "Airways", "flights", "."], "ru": ["\u0423\u043a\u0430\u0436\u0438\u0442\u0435", "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e", "\u0440\u0435\u0439\u0441\u043e\u0432", "\u0410\u044d\u0440\u043e\u0444\u043b\u043e\u0442\u0430", "."]}, "query_toks": {"en": ["select", "count", "(", "*", ")", "from", "flights", "as", "t1", "join", "airlines", "as", "t2", "on", "t1.airline", "=", "t2.uid", "where", "t2.airline", "=", "\"JetBlue Airways\"", ";"], "ru": ["select", "count", "(", "*", ")", "from", "flights", "as", "t1", "join", "airlines", "as", "t2", "on", "t1.airline", "=", "t2.uid", "where", "t2.airline", "=", "\"\u0410\u044d\u0440\u043e\u0444\u043b\u043e\u0442\"", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "*", ")", "from", "flights", "as", "t1", "join", "airlines", "as", "t2", "on", "t1.airline", "=", "t2.uid", "where", "t2.airline", "=", "value", ";"], "ru": ["select", "count", "(", "*", ")", "from", "flights", "as", "t1", "join", "airlines", "as", "t2", "on", "t1.airline", "=", "t2.uid", "where", "t2.airline", "=", "value", ";"]}, "masked_query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\";", "question_pauq": {"ru": "\u0423\u043a\u0430\u0436\u0438\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0440\u0435\u0439\u0441\u043e\u0432 \u0410\u044d\u0440\u043e\u0444\u043b\u043e\u0442\u0430."}, "question": "Give the number of Jetblue Airways flights.", "kb_id": "flight_2"}, {"id": "D_0216", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"\u0410\u044d\u0440\u043e\u0444\u043b\u043e\u0442\" AND T2.DestAirport  =  \"KGD\";"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 10, false], null], [0, 1, false], null]]}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 2, false], null], "\"United Airlines\"", null], "and", [false, 2, [0, [0, 13, false], null], "\"ASY\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 10, false], null], [0, 1, false], null]]}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 2, false], null], "\"\u0410\u044d\u0440\u043e\u0444\u043b\u043e\u0442\"", null], "and", [false, 2, [0, [0, 13, false], null], "\"KGD\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["How", "many", "'United", "Airlines", "'", "flights", "go", "to", "Airport", "'ASY", "'", "?"], "ru": ["\u0421\u043a\u043e\u043b\u044c\u043a\u043e", "\u0440\u0435\u0439\u0441\u043e\u0432", "\u0410\u044d\u0440\u043e\u0444\u043b\u043e\u0442\u0430", "\u043b\u0435\u0442\u0430\u0435\u0442", "\u0432", "\u0430\u044d\u0440\u043e\u043f\u043e\u0440\u0442", "KGD", "?"]}, "query_toks": {"en": ["select", "count", "(", "*", ")", "from", "airlines", "as", "t1", "join", "flights", "as", "t2", "on", "t2.airline", "=", "t1.uid", "where", "t1.airline", "=", "\"United Airlines\"", "and", "t2.destairport", "=", "\"ASY\"", ";"], "ru": ["select", "count", "(", "*", ")", "from", "airlines", "as", "t1", "join", "flights", "as", "t2", "on", "t2.airline", "=", "t1.uid", "where", "t1.airline", "=", "\"\u0410\u044d\u0440\u043e\u0444\u043b\u043e\u0442\"", "and", "t2.destairport", "=", "\"KGD\"", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "*", ")", "from", "airlines", "as", "t1", "join", "flights", "as", "t2", "on", "t2.airline", "=", "t1.uid", "where", "t1.airline", "=", "value", "and", "t2.destairport", "=", "value", ";"], "ru": ["select", "count", "(", "*", ")", "from", "airlines", "as", "t1", "join", "flights", "as", "t2", "on", "t2.airline", "=", "t1.uid", "where", "t1.airline", "=", "value", "and", "t2.destairport", "=", "value", ";"]}, "masked_query": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\";", "question_pauq": {"ru": "\u0421\u043a\u043e\u043b\u044c\u043a\u043e \u0440\u0435\u0439\u0441\u043e\u0432 \u0410\u044d\u0440\u043e\u0444\u043b\u043e\u0442\u0430 \u043b\u0435\u0442\u0430\u0435\u0442 \u0432 \u0430\u044d\u0440\u043e\u043f\u043e\u0440\u0442 KGD?"}, "question": "How many 'United Airlines' flights go to Airport 'ASY'?", "kb_id": "flight_2"}, {"id": "D_0217", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"\u0410\u044d\u0440\u043e\u0444\u043b\u043e\u0442\" AND T2.DestAirport  =  \"KGD\";"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 10, false], null], [0, 1, false], null]]}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 2, false], null], "\"United Airlines\"", null], "and", [false, 2, [0, [0, 13, false], null], "\"ASY\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 10, false], null], [0, 1, false], null]]}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 2, false], null], "\"\u0410\u044d\u0440\u043e\u0444\u043b\u043e\u0442\"", null], "and", [false, 2, [0, [0, 13, false], null], "\"KGD\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Count", "the", "number", "of", "United", "Airlines", "flights", "arriving", "in", "ASY", "Airport", "."], "ru": ["\u041f\u043e\u0434\u0441\u0447\u0438\u0442\u0430\u0439\u0442\u0435", "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e", "\u0440\u0435\u0439\u0441\u043e\u0432", "\u0410\u044d\u0440\u043e\u0444\u043b\u043e\u0442\u0430", ",", "\u043f\u0440\u0438\u0431\u044b\u0432\u0430\u044e\u0449\u0438\u0445", "\u0432", "\u0430\u044d\u0440\u043e\u043f\u043e\u0440\u0442", "KGD", "."]}, "query_toks": {"en": ["select", "count", "(", "*", ")", "from", "airlines", "as", "t1", "join", "flights", "as", "t2", "on", "t2.airline", "=", "t1.uid", "where", "t1.airline", "=", "\"United Airlines\"", "and", "t2.destairport", "=", "\"ASY\"", ";"], "ru": ["select", "count", "(", "*", ")", "from", "airlines", "as", "t1", "join", "flights", "as", "t2", "on", "t2.airline", "=", "t1.uid", "where", "t1.airline", "=", "\"\u0410\u044d\u0440\u043e\u0444\u043b\u043e\u0442\"", "and", "t2.destairport", "=", "\"KGD\"", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "*", ")", "from", "airlines", "as", "t1", "join", "flights", "as", "t2", "on", "t2.airline", "=", "t1.uid", "where", "t1.airline", "=", "value", "and", "t2.destairport", "=", "value", ";"], "ru": ["select", "count", "(", "*", ")", "from", "airlines", "as", "t1", "join", "flights", "as", "t2", "on", "t2.airline", "=", "t1.uid", "where", "t1.airline", "=", "value", "and", "t2.destairport", "=", "value", ";"]}, "masked_query": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\";", "question_pauq": {"ru": "\u041f\u043e\u0434\u0441\u0447\u0438\u0442\u0430\u0439\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0440\u0435\u0439\u0441\u043e\u0432 \u0410\u044d\u0440\u043e\u0444\u043b\u043e\u0442\u0430, \u043f\u0440\u0438\u0431\u044b\u0432\u0430\u044e\u0449\u0438\u0445 \u0432 \u0430\u044d\u0440\u043e\u043f\u043e\u0440\u0442 KGD."}, "question": "Count the number of United Airlines flights arriving in ASY Airport.", "kb_id": "flight_2"}, {"id": "D_0218", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"\u041f\u043e\u0431\u0435\u0434\u0430\" AND T2.SourceAirport  =  \"CEK\";"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 10, false], null], [0, 1, false], null]]}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 2, false], null], "\"United Airlines\"", null], "and", [false, 2, [0, [0, 12, false], null], "\"AHD\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 10, false], null], [0, 1, false], null]]}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 2, false], null], "\"\u041f\u043e\u0431\u0435\u0434\u0430\"", null], "and", [false, 2, [0, [0, 12, false], null], "\"CEK\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["How", "many", "'United", "Airlines", "'", "flights", "depart", "from", "Airport", "'AHD", "'", "?"], "ru": ["\u0421\u043a\u043e\u043b\u044c\u043a\u043e", "\u0440\u0435\u0439\u0441\u043e\u0432", "\u041f\u043e\u0431\u0435\u0434\u0430", "\u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442\u0441\u044f", "\u0438\u0437", "\u0430\u044d\u0440\u043e\u043f\u043e\u0440\u0442\u0430", "CEK", "?"]}, "query_toks": {"en": ["select", "count", "(", "*", ")", "from", "airlines", "as", "t1", "join", "flights", "as", "t2", "on", "t2.airline", "=", "t1.uid", "where", "t1.airline", "=", "\"United Airlines\"", "and", "t2.sourceairport", "=", "\"AHD\"", ";"], "ru": ["select", "count", "(", "*", ")", "from", "airlines", "as", "t1", "join", "flights", "as", "t2", "on", "t2.airline", "=", "t1.uid", "where", "t1.airline", "=", "\"\u041f\u043e\u0431\u0435\u0434\u0430\"", "and", "t2.sourceairport", "=", "\"CEK\"", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "*", ")", "from", "airlines", "as", "t1", "join", "flights", "as", "t2", "on", "t2.airline", "=", "t1.uid", "where", "t1.airline", "=", "value", "and", "t2.sourceairport", "=", "value", ";"], "ru": ["select", "count", "(", "*", ")", "from", "airlines", "as", "t1", "join", "flights", "as", "t2", "on", "t2.airline", "=", "t1.uid", "where", "t1.airline", "=", "value", "and", "t2.sourceairport", "=", "value", ";"]}, "masked_query": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\";", "question_pauq": {"ru": "\u0421\u043a\u043e\u043b\u044c\u043a\u043e \u0440\u0435\u0439\u0441\u043e\u0432 \u041f\u043e\u0431\u0435\u0434\u0430 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0438\u0437 \u0430\u044d\u0440\u043e\u043f\u043e\u0440\u0442\u0430 CEK?"}, "question": "How many 'United Airlines' flights depart from Airport 'AHD'?", "kb_id": "flight_2"}, {"id": "D_0219", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"\u0410\u044d\u0440\u043e\u0444\u043b\u043e\u0442\" AND T2.SourceAirport  =  \"KGD\";"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 10, false], null], [0, 1, false], null]]}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 2, false], null], "\"United Airlines\"", null], "and", [false, 2, [0, [0, 12, false], null], "\"AHD\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 10, false], null], [0, 1, false], null]]}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 2, false], null], "\"\u0410\u044d\u0440\u043e\u0444\u043b\u043e\u0442\"", null], "and", [false, 2, [0, [0, 12, false], null], "\"KGD\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Return", "the", "number", "of", "United", "Airlines", "flights", "leaving", "from", "AHD", "Airport", "."], "ru": ["\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c", "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e", "\u0440\u0435\u0439\u0441\u043e\u0432", "\u0410\u044d\u0440\u043e\u0444\u043b\u043e\u0442\u0430", ",", "\u0432\u044b\u043b\u0435\u0442\u0430\u044e\u0449\u0438\u0445", "\u0438\u0437", "\u0430\u044d\u0440\u043e\u043f\u043e\u0440\u0442\u0430", "KGD", "."]}, "query_toks": {"en": ["select", "count", "(", "*", ")", "from", "airlines", "as", "t1", "join", "flights", "as", "t2", "on", "t2.airline", "=", "t1.uid", "where", "t1.airline", "=", "\"United Airlines\"", "and", "t2.sourceairport", "=", "\"AHD\"", ";"], "ru": ["select", "count", "(", "*", ")", "from", "airlines", "as", "t1", "join", "flights", "as", "t2", "on", "t2.airline", "=", "t1.uid", "where", "t1.airline", "=", "\"\u0410\u044d\u0440\u043e\u0444\u043b\u043e\u0442\"", "and", "t2.sourceairport", "=", "\"KGD\"", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "*", ")", "from", "airlines", "as", "t1", "join", "flights", "as", "t2", "on", "t2.airline", "=", "t1.uid", "where", "t1.airline", "=", "value", "and", "t2.sourceairport", "=", "value", ";"], "ru": ["select", "count", "(", "*", ")", "from", "airlines", "as", "t1", "join", "flights", "as", "t2", "on", "t2.airline", "=", "t1.uid", "where", "t1.airline", "=", "value", "and", "t2.sourceairport", "=", "value", ";"]}, "masked_query": "SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\";", "question_pauq": {"ru": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0440\u0435\u0439\u0441\u043e\u0432 \u0410\u044d\u0440\u043e\u0444\u043b\u043e\u0442\u0430, \u0432\u044b\u043b\u0435\u0442\u0430\u044e\u0449\u0438\u0445 \u0438\u0437 \u0430\u044d\u0440\u043e\u043f\u043e\u0440\u0442\u0430 KGD."}, "question": "Return the number of United Airlines flights leaving from AHD Airport.", "kb_id": "flight_2"}, {"id": "D_0220", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"\u0427\u0435\u043b\u044f\u0431\u0438\u043d\u0441\u043a\" AND T3.Airline  =  \"S7\";"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2], ["table_unit", 1], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 13, false], null], [0, 6, false], null], "and", [false, 2, [0, [0, 1, false], null], [0, 10, false], null]]}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 5, false], null], "\"Aberdeen\"", null], "and", [false, 2, [0, [0, 2, false], null], "\"United Airlines\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2], ["table_unit", 1], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 13, false], null], [0, 6, false], null], "and", [false, 2, [0, [0, 1, false], null], [0, 10, false], null]]}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 5, false], null], "\"\u0427\u0435\u043b\u044f\u0431\u0438\u043d\u0441\u043a\"", null], "and", [false, 2, [0, [0, 2, false], null], "\"S7\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["How", "many", "United", "Airlines", "flights", "go", "to", "City", "'Aberdeen", "'", "?"], "ru": ["\u0421\u043a\u043e\u043b\u044c\u043a\u043e", "\u0440\u0435\u0439\u0441\u043e\u0432", "S7", "\u043b\u0435\u0442\u0430\u0435\u0442", "\u0432", "\u0433\u043e\u0440\u043e\u0434", "\u0427\u0435\u043b\u044f\u0431\u0438\u043d\u0441\u043a", "?"]}, "query_toks": {"en": ["select", "count", "(", "*", ")", "from", "flights", "as", "t1", "join", "airports", "as", "t2", "on", "t1.destairport", "=", "t2.airportcode", "join", "airlines", "as", "t3", "on", "t3.uid", "=", "t1.airline", "where", "t2.city", "=", "\"Aberdeen\"", "and", "t3.airline", "=", "\"United Airlines\"", ";"], "ru": ["select", "count", "(", "*", ")", "from", "flights", "as", "t1", "join", "airports", "as", "t2", "on", "t1.destairport", "=", "t2.airportcode", "join", "airlines", "as", "t3", "on", "t3.uid", "=", "t1.airline", "where", "t2.city", "=", "\"\u0427\u0435\u043b\u044f\u0431\u0438\u043d\u0441\u043a\"", "and", "t3.airline", "=", "\"S7\"", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "*", ")", "from", "flights", "as", "t1", "join", "airports", "as", "t2", "on", "t1.destairport", "=", "t2.airportcode", "join", "airlines", "as", "t3", "on", "t3.uid", "=", "t1.airline", "where", "t2.city", "=", "value", "and", "t3.airline", "=", "value", ";"], "ru": ["select", "count", "(", "*", ")", "from", "flights", "as", "t1", "join", "airports", "as", "t2", "on", "t1.destairport", "=", "t2.airportcode", "join", "airlines", "as", "t3", "on", "t3.uid", "=", "t1.airline", "where", "t2.city", "=", "value", "and", "t3.airline", "=", "value", ";"]}, "masked_query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\";", "question_pauq": {"ru": "\u0421\u043a\u043e\u043b\u044c\u043a\u043e \u0440\u0435\u0439\u0441\u043e\u0432 S7 \u043b\u0435\u0442\u0430\u0435\u0442 \u0432 \u0433\u043e\u0440\u043e\u0434 \u0427\u0435\u043b\u044f\u0431\u0438\u043d\u0441\u043a?"}, "question": "How many United Airlines flights go to City 'Aberdeen'?", "kb_id": "flight_2"}, {"id": "D_0221", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"\u041c\u043e\u0441\u043a\u0432\u0430\" AND T3.Airline  =  \"S7\";"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2], ["table_unit", 1], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 13, false], null], [0, 6, false], null], "and", [false, 2, [0, [0, 1, false], null], [0, 10, false], null]]}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 5, false], null], "\"Aberdeen\"", null], "and", [false, 2, [0, [0, 2, false], null], "\"United Airlines\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2], ["table_unit", 1], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 13, false], null], [0, 6, false], null], "and", [false, 2, [0, [0, 1, false], null], [0, 10, false], null]]}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 5, false], null], "\"\u041c\u043e\u0441\u043a\u0432\u0430\"", null], "and", [false, 2, [0, [0, 2, false], null], "\"S7\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Count", "the", "number", "of", "United", "Airlines", "flights", "that", "arrive", "in", "Aberdeen", "."], "ru": ["\u041f\u043e\u0434\u0441\u0447\u0438\u0442\u0430\u0439\u0442\u0435", "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e", "\u0440\u0435\u0439\u0441\u043e\u0432", "S7", ",", "\u043f\u0440\u0438\u0431\u044b\u0432\u0430\u044e\u0449\u0438\u0445", "\u0432", "\u041c\u043e\u0441\u043a\u0432\u0443", "."]}, "query_toks": {"en": ["select", "count", "(", "*", ")", "from", "flights", "as", "t1", "join", "airports", "as", "t2", "on", "t1.destairport", "=", "t2.airportcode", "join", "airlines", "as", "t3", "on", "t3.uid", "=", "t1.airline", "where", "t2.city", "=", "\"Aberdeen\"", "and", "t3.airline", "=", "\"United Airlines\"", ";"], "ru": ["select", "count", "(", "*", ")", "from", "flights", "as", "t1", "join", "airports", "as", "t2", "on", "t1.destairport", "=", "t2.airportcode", "join", "airlines", "as", "t3", "on", "t3.uid", "=", "t1.airline", "where", "t2.city", "=", "\"\u041c\u043e\u0441\u043a\u0432\u0430\"", "and", "t3.airline", "=", "\"S7\"", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "*", ")", "from", "flights", "as", "t1", "join", "airports", "as", "t2", "on", "t1.destairport", "=", "t2.airportcode", "join", "airlines", "as", "t3", "on", "t3.uid", "=", "t1.airline", "where", "t2.city", "=", "value", "and", "t3.airline", "=", "value", ";"], "ru": ["select", "count", "(", "*", ")", "from", "flights", "as", "t1", "join", "airports", "as", "t2", "on", "t1.destairport", "=", "t2.airportcode", "join", "airlines", "as", "t3", "on", "t3.uid", "=", "t1.airline", "where", "t2.city", "=", "value", "and", "t3.airline", "=", "value", ";"]}, "masked_query": "SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\";", "question_pauq": {"ru": "\u041f\u043e\u0434\u0441\u0447\u0438\u0442\u0430\u0439\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0440\u0435\u0439\u0441\u043e\u0432 S7, \u043f\u0440\u0438\u0431\u044b\u0432\u0430\u044e\u0449\u0438\u0445 \u0432 \u041c\u043e\u0441\u043a\u0432\u0443."}, "question": "Count the number of United Airlines flights that arrive in Aberdeen.", "kb_id": "flight_2"}, {"id": "D_0222", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 6, false], null], [0, 13, false], null]]}, "select": [false, [[0, [0, [0, 5, false], null]]]], "where": [], "groupBy": [[0, 5, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 6, false], null], [0, 13, false], null]]}, "select": [false, [[0, [0, [0, 5, false], null]]]], "where": [], "groupBy": [[0, 5, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Which", "city", "has", "most", "number", "of", "arriving", "flights", "?"], "ru": ["\u0412", "\u043a\u0430\u043a\u043e\u0439", "\u0433\u043e\u0440\u043e\u0434", "\u043f\u0440\u0438\u0431\u044b\u0432\u0430\u0435\u0442", "\u0431\u043e\u043b\u044c\u0448\u0435", "\u0432\u0441\u0435\u0433\u043e", "\u0440\u0435\u0439\u0441\u043e\u0432", "?"]}, "query_toks": {"en": ["select", "t1.city", "from", "airports", "as", "t1", "join", "flights", "as", "t2", "on", "t1.airportcode", "=", "t2.destairport", "group", "by", "t1.city", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"], "ru": ["select", "t1.city", "from", "airports", "as", "t1", "join", "flights", "as", "t2", "on", "t1.airportcode", "=", "t2.destairport", "group", "by", "t1.city", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"]}, "query_toks_no_values": {"en": ["select", "t1.city", "from", "airports", "as", "t1", "join", "flights", "as", "t2", "on", "t1.airportcode", "=", "t2.destairport", "group", "by", "t1.city", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"], "ru": ["select", "t1.city", "from", "airports", "as", "t1", "join", "flights", "as", "t2", "on", "t1.airportcode", "=", "t2.destairport", "group", "by", "t1.city", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"]}, "masked_query": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1;", "question_pauq": {"ru": "\u0412 \u043a\u0430\u043a\u043e\u0439 \u0433\u043e\u0440\u043e\u0434 \u043f\u0440\u0438\u0431\u044b\u0432\u0430\u0435\u0442 \u0431\u043e\u043b\u044c\u0448\u0435 \u0432\u0441\u0435\u0433\u043e \u0440\u0435\u0439\u0441\u043e\u0432?"}, "question": "Which city has most number of arriving flights?", "kb_id": "flight_2"}, {"id": "D_0223", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 6, false], null], [0, 13, false], null]]}, "select": [false, [[0, [0, [0, 5, false], null]]]], "where": [], "groupBy": [[0, 5, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 6, false], null], [0, 13, false], null]]}, "select": [false, [[0, [0, [0, 5, false], null]]]], "where": [], "groupBy": [[0, 5, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Which", "city", "has", "the", "most", "frequent", "destination", "airport", "?"], "ru": ["\u0412", "\u043a\u0430\u043a\u043e\u0439", "\u0430\u044d\u0440\u043e\u043f\u043e\u0440\u0442", "\u0433\u043e\u0440\u043e\u0434\u0430", "\u0447\u0430\u0449\u0435", "\u0432\u0441\u0435\u0433\u043e", "\u043f\u0440\u0438\u0431\u044b\u0432\u0430\u044e\u0442", "\u0440\u0435\u0439\u0441\u044b", "?"]}, "query_toks": {"en": ["select", "t1.city", "from", "airports", "as", "t1", "join", "flights", "as", "t2", "on", "t1.airportcode", "=", "t2.destairport", "group", "by", "t1.city", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"], "ru": ["select", "t1.city", "from", "airports", "as", "t1", "join", "flights", "as", "t2", "on", "t1.airportcode", "=", "t2.destairport", "group", "by", "t1.city", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"]}, "query_toks_no_values": {"en": ["select", "t1.city", "from", "airports", "as", "t1", "join", "flights", "as", "t2", "on", "t1.airportcode", "=", "t2.destairport", "group", "by", "t1.city", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"], "ru": ["select", "t1.city", "from", "airports", "as", "t1", "join", "flights", "as", "t2", "on", "t1.airportcode", "=", "t2.destairport", "group", "by", "t1.city", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"]}, "masked_query": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1;", "question_pauq": {"ru": "\u0412 \u043a\u0430\u043a\u043e\u0439 \u0430\u044d\u0440\u043e\u043f\u043e\u0440\u0442 \u0433\u043e\u0440\u043e\u0434\u0430 \u0447\u0430\u0449\u0435 \u0432\u0441\u0435\u0433\u043e \u043f\u0440\u0438\u0431\u044b\u0432\u0430\u044e\u0442 \u0440\u0435\u0439\u0441\u044b?"}, "question": "Which city has the most frequent destination airport?", "kb_id": "flight_2"}, {"id": "D_0224", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 6, false], null], [0, 12, false], null]]}, "select": [false, [[0, [0, [0, 5, false], null]]]], "where": [], "groupBy": [[0, 5, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 6, false], null], [0, 12, false], null]]}, "select": [false, [[0, [0, [0, 5, false], null]]]], "where": [], "groupBy": [[0, 5, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Which", "city", "has", "most", "number", "of", "departing", "flights", "?"], "ru": ["\u0418\u0437", "\u043a\u0430\u043a\u043e\u0433\u043e", "\u0433\u043e\u0440\u043e\u0434\u0430", "\u0432\u044b\u043b\u0435\u0442\u0430\u0435\u0442", "\u0431\u043e\u043b\u044c\u0448\u0435", "\u0432\u0441\u0435\u0433\u043e", "\u0440\u0435\u0439\u0441\u043e\u0432", "?"]}, "query_toks": {"en": ["select", "t1.city", "from", "airports", "as", "t1", "join", "flights", "as", "t2", "on", "t1.airportcode", "=", "t2.sourceairport", "group", "by", "t1.city", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"], "ru": ["select", "t1.city", "from", "airports", "as", "t1", "join", "flights", "as", "t2", "on", "t1.airportcode", "=", "t2.sourceairport", "group", "by", "t1.city", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"]}, "query_toks_no_values": {"en": ["select", "t1.city", "from", "airports", "as", "t1", "join", "flights", "as", "t2", "on", "t1.airportcode", "=", "t2.sourceairport", "group", "by", "t1.city", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"], "ru": ["select", "t1.city", "from", "airports", "as", "t1", "join", "flights", "as", "t2", "on", "t1.airportcode", "=", "t2.sourceairport", "group", "by", "t1.city", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"]}, "masked_query": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1;", "question_pauq": {"ru": "\u0418\u0437 \u043a\u0430\u043a\u043e\u0433\u043e \u0433\u043e\u0440\u043e\u0434\u0430 \u0432\u044b\u043b\u0435\u0442\u0430\u0435\u0442 \u0431\u043e\u043b\u044c\u0448\u0435 \u0432\u0441\u0435\u0433\u043e \u0440\u0435\u0439\u0441\u043e\u0432?"}, "question": "Which city has most number of departing flights?", "kb_id": "flight_2"}, {"id": "D_0225", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 6, false], null], [0, 12, false], null]]}, "select": [false, [[0, [0, [0, 5, false], null]]]], "where": [], "groupBy": [[0, 5, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 6, false], null], [0, 12, false], null]]}, "select": [false, [[0, [0, [0, 5, false], null]]]], "where": [], "groupBy": [[0, 5, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Which", "city", "is", "the", "most", "frequent", "source", "airport", "?"], "ru": ["\u0418\u0437", "\u0430\u044d\u0440\u043e\u043f\u043e\u0440\u0442\u0430", "\u043a\u0430\u043a\u043e\u0433\u043e", "\u0433\u043e\u0440\u043e\u0434\u0430", "\u0447\u0430\u0449\u0435", "\u0432\u0441\u0435\u0433\u043e", "\u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u044e\u0442\u0441\u044f", "\u0440\u0435\u0439\u0441\u044b", "?"]}, "query_toks": {"en": ["select", "t1.city", "from", "airports", "as", "t1", "join", "flights", "as", "t2", "on", "t1.airportcode", "=", "t2.sourceairport", "group", "by", "t1.city", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"], "ru": ["select", "t1.city", "from", "airports", "as", "t1", "join", "flights", "as", "t2", "on", "t1.airportcode", "=", "t2.sourceairport", "group", "by", "t1.city", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"]}, "query_toks_no_values": {"en": ["select", "t1.city", "from", "airports", "as", "t1", "join", "flights", "as", "t2", "on", "t1.airportcode", "=", "t2.sourceairport", "group", "by", "t1.city", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"], "ru": ["select", "t1.city", "from", "airports", "as", "t1", "join", "flights", "as", "t2", "on", "t1.airportcode", "=", "t2.sourceairport", "group", "by", "t1.city", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"]}, "masked_query": "SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1;", "question_pauq": {"ru": "\u0418\u0437 \u0430\u044d\u0440\u043e\u043f\u043e\u0440\u0442\u0430 \u043a\u0430\u043a\u043e\u0433\u043e \u0433\u043e\u0440\u043e\u0434\u0430 \u0447\u0430\u0449\u0435 \u0432\u0441\u0435\u0433\u043e \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u0440\u0435\u0439\u0441\u044b?"}, "question": "Which city is the most frequent source airport?", "kb_id": "flight_2"}, {"id": "D_0226", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 6, false], null], [0, 13, false], null]]}, "select": [false, [[0, [0, [0, 6, false], null]]]], "where": [], "groupBy": [[0, 6, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 6, false], null], [0, 13, false], null]]}, "select": [false, [[0, [0, [0, 6, false], null]]]], "where": [], "groupBy": [[0, 6, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "code", "of", "airport", "that", "has", "the", "highest", "number", "of", "flights", "?"], "ru": ["\u041a\u0430\u043a\u043e\u0432", "\u043a\u043e\u0434", "\u0430\u044d\u0440\u043e\u043f\u043e\u0440\u0442\u0430", ",", "\u0432", "\u043a\u043e\u0442\u043e\u0440\u043e\u043c", "\u0431\u043e\u043b\u044c\u0448\u0435", "\u0432\u0441\u0435\u0433\u043e", "\u0440\u0435\u0439\u0441\u043e\u0432", "?"]}, "query_toks": {"en": ["select", "t1.airportcode", "from", "airports", "as", "t1", "join", "flights", "as", "t2", "on", "t1.airportcode", "=", "t2.destairport", "or", "t1.airportcode", "=", "t2.sourceairport", "group", "by", "t1.airportcode", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"], "ru": ["select", "t1.airportcode", "from", "airports", "as", "t1", "join", "flights", "as", "t2", "on", "t1.airportcode", "=", "t2.destairport", "or", "t1.airportcode", "=", "t2.sourceairport", "group", "by", "t1.airportcode", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"]}, "query_toks_no_values": {"en": ["select", "t1.airportcode", "from", "airports", "as", "t1", "join", "flights", "as", "t2", "on", "t1.airportcode", "=", "t2.destairport", "or", "t1.airportcode", "=", "t2.sourceairport", "group", "by", "t1.airportcode", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"], "ru": ["select", "t1.airportcode", "from", "airports", "as", "t1", "join", "flights", "as", "t2", "on", "t1.airportcode", "=", "t2.destairport", "or", "t1.airportcode", "=", "t2.sourceairport", "group", "by", "t1.airportcode", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"]}, "masked_query": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1;", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0432 \u043a\u043e\u0434 \u0430\u044d\u0440\u043e\u043f\u043e\u0440\u0442\u0430, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u0431\u043e\u043b\u044c\u0448\u0435 \u0432\u0441\u0435\u0433\u043e \u0440\u0435\u0439\u0441\u043e\u0432?"}, "question": "What is the code of airport that has the highest number of flights?", "kb_id": "flight_2"}, {"id": "D_0227", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 6, false], null], [0, 13, false], null]]}, "select": [false, [[0, [0, [0, 6, false], null]]]], "where": [], "groupBy": [[0, 6, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 6, false], null], [0, 13, false], null]]}, "select": [false, [[0, [0, [0, 6, false], null]]]], "where": [], "groupBy": [[0, 6, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "airport", "code", "of", "the", "airport", "with", "the", "most", "flights", "?"], "ru": ["\u041a\u0430\u043a\u043e\u0432", "\u043a\u043e\u0434", "\u0430\u044d\u0440\u043e\u043f\u043e\u0440\u0442\u0430", "\u0441", "\u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0438\u043c", "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c", "\u0440\u0435\u0439\u0441\u043e\u0432", "?"]}, "query_toks": {"en": ["select", "t1.airportcode", "from", "airports", "as", "t1", "join", "flights", "as", "t2", "on", "t1.airportcode", "=", "t2.destairport", "or", "t1.airportcode", "=", "t2.sourceairport", "group", "by", "t1.airportcode", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"], "ru": ["select", "t1.airportcode", "from", "airports", "as", "t1", "join", "flights", "as", "t2", "on", "t1.airportcode", "=", "t2.destairport", "or", "t1.airportcode", "=", "t2.sourceairport", "group", "by", "t1.airportcode", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"]}, "query_toks_no_values": {"en": ["select", "t1.airportcode", "from", "airports", "as", "t1", "join", "flights", "as", "t2", "on", "t1.airportcode", "=", "t2.destairport", "or", "t1.airportcode", "=", "t2.sourceairport", "group", "by", "t1.airportcode", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"], "ru": ["select", "t1.airportcode", "from", "airports", "as", "t1", "join", "flights", "as", "t2", "on", "t1.airportcode", "=", "t2.destairport", "or", "t1.airportcode", "=", "t2.sourceairport", "group", "by", "t1.airportcode", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"]}, "masked_query": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1;", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0432 \u043a\u043e\u0434 \u0430\u044d\u0440\u043e\u043f\u043e\u0440\u0442\u0430 \u0441 \u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0438\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c \u0440\u0435\u0439\u0441\u043e\u0432?"}, "question": "What is the airport code of the airport with the most flights?", "kb_id": "flight_2"}, {"id": "D_0228", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 6, false], null], [0, 13, false], null]]}, "select": [false, [[0, [0, [0, 6, false], null]]]], "where": [], "groupBy": [[0, 6, false]], "having": [], "orderBy": ["asc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 6, false], null], [0, 13, false], null]]}, "select": [false, [[0, [0, [0, 6, false], null]]]], "where": [], "groupBy": [[0, 6, false]], "having": [], "orderBy": ["asc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "code", "of", "airport", "that", "has", "fewest", "number", "of", "flights", "?"], "ru": ["\u041a\u0430\u043a\u043e\u0432", "\u043a\u043e\u0434", "\u0430\u044d\u0440\u043e\u043f\u043e\u0440\u0442\u0430", ",", "\u0432", "\u043a\u043e\u0442\u043e\u0440\u043e\u043c", "\u043c\u0435\u043d\u044c\u0448\u0435", "\u0432\u0441\u0435\u0433\u043e", "\u0440\u0435\u0439\u0441\u043e\u0432", "?"]}, "query_toks": {"en": ["select", "t1.airportcode", "from", "airports", "as", "t1", "join", "flights", "as", "t2", "on", "t1.airportcode", "=", "t2.destairport", "or", "t1.airportcode", "=", "t2.sourceairport", "group", "by", "t1.airportcode", "order", "by", "count", "(", "*", ")", "limit", "1", ";"], "ru": ["select", "t1.airportcode", "from", "airports", "as", "t1", "join", "flights", "as", "t2", "on", "t1.airportcode", "=", "t2.destairport", "or", "t1.airportcode", "=", "t2.sourceairport", "group", "by", "t1.airportcode", "order", "by", "count", "(", "*", ")", "limit", "1", ";"]}, "query_toks_no_values": {"en": ["select", "t1.airportcode", "from", "airports", "as", "t1", "join", "flights", "as", "t2", "on", "t1.airportcode", "=", "t2.destairport", "or", "t1.airportcode", "=", "t2.sourceairport", "group", "by", "t1.airportcode", "order", "by", "count", "(", "*", ")", "limit", "1", ";"], "ru": ["select", "t1.airportcode", "from", "airports", "as", "t1", "join", "flights", "as", "t2", "on", "t1.airportcode", "=", "t2.destairport", "or", "t1.airportcode", "=", "t2.sourceairport", "group", "by", "t1.airportcode", "order", "by", "count", "(", "*", ")", "limit", "1", ";"]}, "masked_query": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1;", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0432 \u043a\u043e\u0434 \u0430\u044d\u0440\u043e\u043f\u043e\u0440\u0442\u0430, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u043c\u0435\u043d\u044c\u0448\u0435 \u0432\u0441\u0435\u0433\u043e \u0440\u0435\u0439\u0441\u043e\u0432?"}, "question": "What is the code of airport that has fewest number of flights?", "kb_id": "flight_2"}, {"id": "D_0229", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 6, false], null], [0, 13, false], null]]}, "select": [false, [[0, [0, [0, 6, false], null]]]], "where": [], "groupBy": [[0, 6, false]], "having": [], "orderBy": ["asc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 6, false], null], [0, 13, false], null]]}, "select": [false, [[0, [0, [0, 6, false], null]]]], "where": [], "groupBy": [[0, 6, false]], "having": [], "orderBy": ["asc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Give", "the", "code", "of", "the", "airport", "with", "the", "least", "flights", "."], "ru": ["\u0423\u043a\u0430\u0436\u0438\u0442\u0435", "\u043a\u043e\u0434", "\u0430\u044d\u0440\u043e\u043f\u043e\u0440\u0442\u0430", "\u0441", "\u043d\u0430\u0438\u043c\u0435\u043d\u044c\u0448\u0438\u043c", "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c", "\u0440\u0435\u0439\u0441\u043e\u0432", "."]}, "query_toks": {"en": ["select", "t1.airportcode", "from", "airports", "as", "t1", "join", "flights", "as", "t2", "on", "t1.airportcode", "=", "t2.destairport", "or", "t1.airportcode", "=", "t2.sourceairport", "group", "by", "t1.airportcode", "order", "by", "count", "(", "*", ")", "limit", "1", ";"], "ru": ["select", "t1.airportcode", "from", "airports", "as", "t1", "join", "flights", "as", "t2", "on", "t1.airportcode", "=", "t2.destairport", "or", "t1.airportcode", "=", "t2.sourceairport", "group", "by", "t1.airportcode", "order", "by", "count", "(", "*", ")", "limit", "1", ";"]}, "query_toks_no_values": {"en": ["select", "t1.airportcode", "from", "airports", "as", "t1", "join", "flights", "as", "t2", "on", "t1.airportcode", "=", "t2.destairport", "or", "t1.airportcode", "=", "t2.sourceairport", "group", "by", "t1.airportcode", "order", "by", "count", "(", "*", ")", "limit", "1", ";"], "ru": ["select", "t1.airportcode", "from", "airports", "as", "t1", "join", "flights", "as", "t2", "on", "t1.airportcode", "=", "t2.destairport", "or", "t1.airportcode", "=", "t2.sourceairport", "group", "by", "t1.airportcode", "order", "by", "count", "(", "*", ")", "limit", "1", ";"]}, "masked_query": "SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1;", "question_pauq": {"ru": "\u0423\u043a\u0430\u0436\u0438\u0442\u0435 \u043a\u043e\u0434 \u0430\u044d\u0440\u043e\u043f\u043e\u0440\u0442\u0430 \u0441 \u043d\u0430\u0438\u043c\u0435\u043d\u044c\u0448\u0438\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c \u0440\u0435\u0439\u0441\u043e\u0432."}, "question": "Give the code of the airport with the least flights.", "kb_id": "flight_2"}, {"id": "D_0230", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 10, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [], "groupBy": [[0, 2, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 10, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [], "groupBy": [[0, 2, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Which", "airline", "has", "most", "number", "of", "flights", "?"], "ru": ["\u0423", "\u043a\u0430\u043a\u043e\u0439", "\u0430\u0432\u0438\u0430\u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438", "\u0431\u043e\u043b\u044c\u0448\u0435", "\u0432\u0441\u0435\u0433\u043e", "\u0440\u0435\u0439\u0441\u043e\u0432", "?"]}, "query_toks": {"en": ["select", "t1.airline", "from", "airlines", "as", "t1", "join", "flights", "as", "t2", "on", "t1.uid", "=", "t2.airline", "group", "by", "t1.airline", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"], "ru": ["select", "t1.airline", "from", "airlines", "as", "t1", "join", "flights", "as", "t2", "on", "t1.uid", "=", "t2.airline", "group", "by", "t1.airline", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"]}, "query_toks_no_values": {"en": ["select", "t1.airline", "from", "airlines", "as", "t1", "join", "flights", "as", "t2", "on", "t1.uid", "=", "t2.airline", "group", "by", "t1.airline", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"], "ru": ["select", "t1.airline", "from", "airlines", "as", "t1", "join", "flights", "as", "t2", "on", "t1.uid", "=", "t2.airline", "group", "by", "t1.airline", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"]}, "masked_query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1;", "question_pauq": {"ru": "\u0423 \u043a\u0430\u043a\u043e\u0439 \u0430\u0432\u0438\u0430\u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438 \u0431\u043e\u043b\u044c\u0448\u0435 \u0432\u0441\u0435\u0433\u043e \u0440\u0435\u0439\u0441\u043e\u0432?"}, "question": "Which airline has most number of flights?", "kb_id": "flight_2"}, {"id": "D_0231", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 10, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [], "groupBy": [[0, 2, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 10, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [], "groupBy": [[0, 2, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "airline", "serves", "the", "most", "flights", "?"], "ru": ["\u041a\u0430\u043a\u0430\u044f", "\u0430\u0432\u0438\u0430\u043a\u043e\u043c\u043f\u0430\u043d\u0438\u044f", "\u043e\u0431\u0441\u043b\u0443\u0436\u0438\u0432\u0430\u0435\u0442", "\u0431\u043e\u043b\u044c\u0448\u0435", "\u0432\u0441\u0435\u0433\u043e", "\u0440\u0435\u0439\u0441\u043e\u0432", "?"]}, "query_toks": {"en": ["select", "t1.airline", "from", "airlines", "as", "t1", "join", "flights", "as", "t2", "on", "t1.uid", "=", "t2.airline", "group", "by", "t1.airline", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"], "ru": ["select", "t1.airline", "from", "airlines", "as", "t1", "join", "flights", "as", "t2", "on", "t1.uid", "=", "t2.airline", "group", "by", "t1.airline", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"]}, "query_toks_no_values": {"en": ["select", "t1.airline", "from", "airlines", "as", "t1", "join", "flights", "as", "t2", "on", "t1.uid", "=", "t2.airline", "group", "by", "t1.airline", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"], "ru": ["select", "t1.airline", "from", "airlines", "as", "t1", "join", "flights", "as", "t2", "on", "t1.uid", "=", "t2.airline", "group", "by", "t1.airline", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"]}, "masked_query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1;", "question_pauq": {"ru": "\u041a\u0430\u043a\u0430\u044f \u0430\u0432\u0438\u0430\u043a\u043e\u043c\u043f\u0430\u043d\u0438\u044f \u043e\u0431\u0441\u043b\u0443\u0436\u0438\u0432\u0430\u0435\u0442 \u0431\u043e\u043b\u044c\u0448\u0435 \u0432\u0441\u0435\u0433\u043e \u0440\u0435\u0439\u0441\u043e\u0432?"}, "question": "What airline serves the most flights?", "kb_id": "flight_2"}, {"id": "D_0232", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 10, false], null]]}, "select": [false, [[0, [0, [0, 3, false], null]], [0, [0, [0, 4, false], null]]]], "where": [], "groupBy": [[0, 2, false]], "having": [], "orderBy": ["asc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 10, false], null]]}, "select": [false, [[0, [0, [0, 3, false], null]], [0, [0, [0, 4, false], null]]]], "where": [], "groupBy": [[0, 2, false]], "having": [], "orderBy": ["asc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Find", "the", "abbreviation", "and", "country", "of", "the", "airline", "that", "has", "fewest", "number", "of", "flights", "?"], "ru": ["\u041d\u0430\u0439\u0434\u0438\u0442\u0435", "\u0430\u0431\u0431\u0440\u0435\u0432\u0438\u0430\u0442\u0443\u0440\u0443", "\u0438", "\u0441\u0442\u0440\u0430\u043d\u0443", "\u0430\u0432\u0438\u0430\u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438", ",", "\u0443", "\u043a\u043e\u0442\u043e\u0440\u043e\u0439", "\u043c\u0435\u043d\u044c\u0448\u0435", "\u0432\u0441\u0435\u0433\u043e", "\u0440\u0435\u0439\u0441\u043e\u0432"]}, "query_toks": {"en": ["select", "t1.abbreviation", ",", "t1.country", "from", "airlines", "as", "t1", "join", "flights", "as", "t2", "on", "t1.uid", "=", "t2.airline", "group", "by", "t1.airline", "order", "by", "count", "(", "*", ")", "limit", "1", ";"], "ru": ["select", "t1.abbreviation", ",", "t1.country", "from", "airlines", "as", "t1", "join", "flights", "as", "t2", "on", "t1.uid", "=", "t2.airline", "group", "by", "t1.airline", "order", "by", "count", "(", "*", ")", "limit", "1", ";"]}, "query_toks_no_values": {"en": ["select", "t1.abbreviation", ",", "t1.country", "from", "airlines", "as", "t1", "join", "flights", "as", "t2", "on", "t1.uid", "=", "t2.airline", "group", "by", "t1.airline", "order", "by", "count", "(", "*", ")", "limit", "1", ";"], "ru": ["select", "t1.abbreviation", ",", "t1.country", "from", "airlines", "as", "t1", "join", "flights", "as", "t2", "on", "t1.uid", "=", "t2.airline", "group", "by", "t1.airline", "order", "by", "count", "(", "*", ")", "limit", "1", ";"]}, "masked_query": "SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1;", "question_pauq": {"ru": "\u041d\u0430\u0439\u0434\u0438\u0442\u0435 \u0430\u0431\u0431\u0440\u0435\u0432\u0438\u0430\u0442\u0443\u0440\u0443 \u0438 \u0441\u0442\u0440\u0430\u043d\u0443 \u0430\u0432\u0438\u0430\u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438, \u0443 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u043c\u0435\u043d\u044c\u0448\u0435 \u0432\u0441\u0435\u0433\u043e \u0440\u0435\u0439\u0441\u043e\u0432"}, "question": "Find the abbreviation and country of the airline that has fewest number of flights?", "kb_id": "flight_2"}, {"id": "D_0233", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 10, false], null]]}, "select": [false, [[0, [0, [0, 3, false], null]], [0, [0, [0, 4, false], null]]]], "where": [], "groupBy": [[0, 2, false]], "having": [], "orderBy": ["asc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 10, false], null]]}, "select": [false, [[0, [0, [0, 3, false], null]], [0, [0, [0, 4, false], null]]]], "where": [], "groupBy": [[0, 2, false]], "having": [], "orderBy": ["asc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "abbreviation", "of", "the", "airilne", "has", "the", "fewest", "flights", "and", "what", "country", "is", "it", "in", "?"], "ru": ["\u041a\u0430\u043a\u0430\u044f", "\u0430\u0431\u0431\u0440\u0435\u0432\u0438\u0430\u0442\u0443\u0440\u0430", "\u0430\u0432\u0438\u0430\u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438", "\u0438\u043c\u0435\u0435\u0442", "\u043d\u0430\u0438\u043c\u0435\u043d\u044c\u0448\u0435\u0435", "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e", "\u0440\u0435\u0439\u0441\u043e\u0432", "\u0438", "\u0432", "\u043a\u0430\u043a\u043e\u0439", "\u0441\u0442\u0440\u0430\u043d\u0435", "\u043e\u043d\u0430", "\u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f", "?"]}, "query_toks": {"en": ["select", "t1.abbreviation", ",", "t1.country", "from", "airlines", "as", "t1", "join", "flights", "as", "t2", "on", "t1.uid", "=", "t2.airline", "group", "by", "t1.airline", "order", "by", "count", "(", "*", ")", "limit", "1", ";"], "ru": ["select", "t1.abbreviation", ",", "t1.country", "from", "airlines", "as", "t1", "join", "flights", "as", "t2", "on", "t1.uid", "=", "t2.airline", "group", "by", "t1.airline", "order", "by", "count", "(", "*", ")", "limit", "1", ";"]}, "query_toks_no_values": {"en": ["select", "t1.abbreviation", ",", "t1.country", "from", "airlines", "as", "t1", "join", "flights", "as", "t2", "on", "t1.uid", "=", "t2.airline", "group", "by", "t1.airline", "order", "by", "count", "(", "*", ")", "limit", "1", ";"], "ru": ["select", "t1.abbreviation", ",", "t1.country", "from", "airlines", "as", "t1", "join", "flights", "as", "t2", "on", "t1.uid", "=", "t2.airline", "group", "by", "t1.airline", "order", "by", "count", "(", "*", ")", "limit", "1", ";"]}, "masked_query": "SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1;", "question_pauq": {"ru": "\u041a\u0430\u043a\u0430\u044f \u0430\u0431\u0431\u0440\u0435\u0432\u0438\u0430\u0442\u0443\u0440\u0430 \u0430\u0432\u0438\u0430\u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438 \u0438\u043c\u0435\u0435\u0442 \u043d\u0430\u0438\u043c\u0435\u043d\u044c\u0448\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0440\u0435\u0439\u0441\u043e\u0432 \u0438 \u0432 \u043a\u0430\u043a\u043e\u0439 \u0441\u0442\u0440\u0430\u043d\u0435 \u043e\u043d\u0430 \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f?"}, "question": "What is the abbreviation of the airilne has the fewest flights and what country is it in?", "kb_id": "flight_2"}, {"id": "D_0234", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\";"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 10, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [[false, 2, [0, [0, 12, false], null], "\"AHD\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 10, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [[false, 2, [0, [0, 12, false], null], "\"AHD\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "airlines", "that", "have", "some", "flight", "departing", "from", "airport", "'AHD", "'", "?"], "ru": ["\u041a\u0430\u043a\u0438\u0435", "\u0430\u0432\u0438\u0430\u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438", "\u0432\u044b\u043b\u0435\u0442\u0430\u044e\u0442", "\u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u043c\u0438", "\u0440\u0435\u0439\u0441\u0430\u043c\u0438", "\u0438\u0437", "\u0430\u044d\u0440\u043e\u043f\u043e\u0440\u0442\u0430", "AHD", "?"]}, "query_toks": {"en": ["select", "t1.airline", "from", "airlines", "as", "t1", "join", "flights", "as", "t2", "on", "t1.uid", "=", "t2.airline", "where", "t2.sourceairport", "=", "\"AHD\"", ";"], "ru": ["select", "t1.airline", "from", "airlines", "as", "t1", "join", "flights", "as", "t2", "on", "t1.uid", "=", "t2.airline", "where", "t2.sourceairport", "=", "\"AHD\"", ";"]}, "query_toks_no_values": {"en": ["select", "t1.airline", "from", "airlines", "as", "t1", "join", "flights", "as", "t2", "on", "t1.uid", "=", "t2.airline", "where", "t2.sourceairport", "=", "value", ";"], "ru": ["select", "t1.airline", "from", "airlines", "as", "t1", "join", "flights", "as", "t2", "on", "t1.uid", "=", "t2.airline", "where", "t2.sourceairport", "=", "value", ";"]}, "masked_query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\";", "question_pauq": {"ru": "\u041a\u0430\u043a\u0438\u0435 \u0430\u0432\u0438\u0430\u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438 \u0432\u044b\u043b\u0435\u0442\u0430\u044e\u0442 \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u043c\u0438 \u0440\u0435\u0439\u0441\u0430\u043c\u0438 \u0438\u0437 \u0430\u044d\u0440\u043e\u043f\u043e\u0440\u0442\u0430 AHD?"}, "question": "What are airlines that have some flight departing from airport 'AHD'?", "kb_id": "flight_2"}, {"id": "D_0235", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\";"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 10, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [[false, 2, [0, [0, 12, false], null], "\"AHD\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 10, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [[false, 2, [0, [0, 12, false], null], "\"AHD\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Which", "airlines", "have", "a", "flight", "with", "source", "airport", "AHD", "?"], "ru": ["\u041a\u0430\u043a\u0438\u0435", "\u0430\u0432\u0438\u0430\u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438", "\u043b\u0435\u0442\u0430\u044e\u0442", "\u0438\u0437", "\u0430\u044d\u0440\u043e\u043f\u043e\u0440\u0442\u0430", "AHD", "?"]}, "query_toks": {"en": ["select", "t1.airline", "from", "airlines", "as", "t1", "join", "flights", "as", "t2", "on", "t1.uid", "=", "t2.airline", "where", "t2.sourceairport", "=", "\"AHD\"", ";"], "ru": ["select", "t1.airline", "from", "airlines", "as", "t1", "join", "flights", "as", "t2", "on", "t1.uid", "=", "t2.airline", "where", "t2.sourceairport", "=", "\"AHD\"", ";"]}, "query_toks_no_values": {"en": ["select", "t1.airline", "from", "airlines", "as", "t1", "join", "flights", "as", "t2", "on", "t1.uid", "=", "t2.airline", "where", "t2.sourceairport", "=", "value", ";"], "ru": ["select", "t1.airline", "from", "airlines", "as", "t1", "join", "flights", "as", "t2", "on", "t1.uid", "=", "t2.airline", "where", "t2.sourceairport", "=", "value", ";"]}, "masked_query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\";", "question_pauq": {"ru": "\u041a\u0430\u043a\u0438\u0435 \u0430\u0432\u0438\u0430\u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438 \u043b\u0435\u0442\u0430\u044e\u0442 \u0438\u0437 \u0430\u044d\u0440\u043e\u043f\u043e\u0440\u0442\u0430 AHD?"}, "question": "Which airlines have a flight with source airport AHD?", "kb_id": "flight_2"}, {"id": "D_0236", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\";"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 10, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [[false, 2, [0, [0, 13, false], null], "\"AHD\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 10, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [[false, 2, [0, [0, 13, false], null], "\"AHD\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "airlines", "that", "have", "flights", "arriving", "at", "airport", "'AHD", "'", "?"], "ru": ["\u041a\u0430\u043a\u0438\u0435", "\u0430\u0432\u0438\u0430\u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438", "\u0438\u043c\u0435\u044e\u0442", "\u0440\u0435\u0439\u0441\u044b", ",", "\u043f\u0440\u0438\u0431\u044b\u0432\u0430\u044e\u0449\u0438\u0435", "\u0432", "\u0430\u044d\u0440\u043e\u043f\u043e\u0440\u0442", "AHD", "?"]}, "query_toks": {"en": ["select", "t1.airline", "from", "airlines", "as", "t1", "join", "flights", "as", "t2", "on", "t1.uid", "=", "t2.airline", "where", "t2.destairport", "=", "\"AHD\"", ";"], "ru": ["select", "t1.airline", "from", "airlines", "as", "t1", "join", "flights", "as", "t2", "on", "t1.uid", "=", "t2.airline", "where", "t2.destairport", "=", "\"AHD\"", ";"]}, "query_toks_no_values": {"en": ["select", "t1.airline", "from", "airlines", "as", "t1", "join", "flights", "as", "t2", "on", "t1.uid", "=", "t2.airline", "where", "t2.destairport", "=", "value", ";"], "ru": ["select", "t1.airline", "from", "airlines", "as", "t1", "join", "flights", "as", "t2", "on", "t1.uid", "=", "t2.airline", "where", "t2.destairport", "=", "value", ";"]}, "masked_query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\";", "question_pauq": {"ru": "\u041a\u0430\u043a\u0438\u0435 \u0430\u0432\u0438\u0430\u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438 \u0438\u043c\u0435\u044e\u0442 \u0440\u0435\u0439\u0441\u044b, \u043f\u0440\u0438\u0431\u044b\u0432\u0430\u044e\u0449\u0438\u0435 \u0432 \u0430\u044d\u0440\u043e\u043f\u043e\u0440\u0442 AHD?"}, "question": "What are airlines that have flights arriving at airport 'AHD'?", "kb_id": "flight_2"}, {"id": "D_0237", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\";"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 10, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [[false, 2, [0, [0, 13, false], null], "\"AHD\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 10, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [[false, 2, [0, [0, 13, false], null], "\"AHD\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Which", "airlines", "have", "a", "flight", "with", "destination", "airport", "AHD", "?"], "ru": ["\u041a\u0430\u043a\u0438\u0435", "\u0430\u0432\u0438\u0430\u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438", "\u043b\u0435\u0442\u0430\u044e\u0442", "\u0432", "\u0430\u044d\u0440\u043e\u043f\u043e\u0440\u0442", "\u043d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f", "AHD", "?"]}, "query_toks": {"en": ["select", "t1.airline", "from", "airlines", "as", "t1", "join", "flights", "as", "t2", "on", "t1.uid", "=", "t2.airline", "where", "t2.destairport", "=", "\"AHD\"", ";"], "ru": ["select", "t1.airline", "from", "airlines", "as", "t1", "join", "flights", "as", "t2", "on", "t1.uid", "=", "t2.airline", "where", "t2.destairport", "=", "\"AHD\"", ";"]}, "query_toks_no_values": {"en": ["select", "t1.airline", "from", "airlines", "as", "t1", "join", "flights", "as", "t2", "on", "t1.uid", "=", "t2.airline", "where", "t2.destairport", "=", "value", ";"], "ru": ["select", "t1.airline", "from", "airlines", "as", "t1", "join", "flights", "as", "t2", "on", "t1.uid", "=", "t2.airline", "where", "t2.destairport", "=", "value", ";"]}, "masked_query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\";", "question_pauq": {"ru": "\u041a\u0430\u043a\u0438\u0435 \u0430\u0432\u0438\u0430\u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438 \u043b\u0435\u0442\u0430\u044e\u0442 \u0432 \u0430\u044d\u0440\u043e\u043f\u043e\u0440\u0442 \u043d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f AHD?"}, "question": "Which airlines have a flight with destination airport AHD?", "kb_id": "flight_2"}, {"id": "D_0238", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\";"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 10, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [[false, 2, [0, [0, 12, false], null], "\"APG\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": {"from": {"table_units": [["table_unit", 0], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 10, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [[false, 2, [0, [0, 12, false], null], "\"CVO\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 10, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [[false, 2, [0, [0, 12, false], null], "\"APG\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": {"from": {"table_units": [["table_unit", 0], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 10, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [[false, 2, [0, [0, 12, false], null], "\"CVO\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "union": null, "except": null}}, "question_toks": {"en": ["Find", "all", "airlines", "that", "have", "flights", "from", "both", "airports", "'APG", "'", "and", "'CVO", "'", "."], "ru": ["\u041d\u0430\u0439\u0434\u0438\u0442\u0435", "\u0432\u0441\u0435", "\u0430\u0432\u0438\u0430\u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438", ",", "\u0443", "\u043a\u043e\u0442\u043e\u0440\u044b\u0445", "\u0435\u0441\u0442\u044c", "\u0440\u0435\u0439\u0441\u044b", "\u0438\u0437", "\u043e\u0431\u043e\u0438\u0445", "\u0430\u044d\u0440\u043e\u043f\u043e\u0440\u0442\u043e\u0432", "``", "APG", "''", "\u0438", "``", "CVO", "''", "."]}, "query_toks": {"en": ["select", "t1.airline", "from", "airlines", "as", "t1", "join", "flights", "as", "t2", "on", "t1.uid", "=", "t2.airline", "where", "t2.sourceairport", "=", "\"APG\"", "intersect", "select", "t1.airline", "from", "airlines", "as", "t1", "join", "flights", "as", "t2", "on", "t1.uid", "=", "t2.airline", "where", "t2.sourceairport", "=", "\"CVO\"", ";"], "ru": ["select", "t1.airline", "from", "airlines", "as", "t1", "join", "flights", "as", "t2", "on", "t1.uid", "=", "t2.airline", "where", "t2.sourceairport", "=", "\"APG\"", "intersect", "select", "t1.airline", "from", "airlines", "as", "t1", "join", "flights", "as", "t2", "on", "t1.uid", "=", "t2.airline", "where", "t2.sourceairport", "=", "\"CVO\"", ";"]}, "query_toks_no_values": {"en": ["select", "t1.airline", "from", "airlines", "as", "t1", "join", "flights", "as", "t2", "on", "t1.uid", "=", "t2.airline", "where", "t2.sourceairport", "=", "value", "intersect", "select", "t1.airline", "from", "airlines", "as", "t1", "join", "flights", "as", "t2", "on", "t1.uid", "=", "t2.airline", "where", "t2.sourceairport", "=", "value", ";"], "ru": ["select", "t1.airline", "from", "airlines", "as", "t1", "join", "flights", "as", "t2", "on", "t1.uid", "=", "t2.airline", "where", "t2.sourceairport", "=", "value", "intersect", "select", "t1.airline", "from", "airlines", "as", "t1", "join", "flights", "as", "t2", "on", "t1.uid", "=", "t2.airline", "where", "t2.sourceairport", "=", "value", ";"]}, "masked_query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\";", "question_pauq": {"ru": "\u041d\u0430\u0439\u0434\u0438\u0442\u0435 \u0432\u0441\u0435 \u0430\u0432\u0438\u0430\u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438, \u0443 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0435\u0441\u0442\u044c \u0440\u0435\u0439\u0441\u044b \u0438\u0437 \u043e\u0431\u043e\u0438\u0445 \u0430\u044d\u0440\u043e\u043f\u043e\u0440\u0442\u043e\u0432 \"APG\" \u0438 \"CVO\"."}, "question": "Find all airlines that have flights from both airports 'APG' and 'CVO'.", "kb_id": "flight_2"}, {"id": "D_0239", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\";"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 10, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [[false, 2, [0, [0, 12, false], null], "\"APG\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": {"from": {"table_units": [["table_unit", 0], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 10, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [[false, 2, [0, [0, 12, false], null], "\"CVO\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 10, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [[false, 2, [0, [0, 12, false], null], "\"APG\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": {"from": {"table_units": [["table_unit", 0], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 10, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [[false, 2, [0, [0, 12, false], null], "\"CVO\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "union": null, "except": null}}, "question_toks": {"en": ["Which", "airlines", "have", "departing", "flights", "from", "both", "APG", "and", "CVO", "airports", "?"], "ru": ["\u041a\u0430\u043a\u0438\u0435", "\u0430\u0432\u0438\u0430\u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438", "\u0432\u044b\u043b\u0435\u0442\u0430\u044e\u0442", "\u0438\u0437", "\u0430\u044d\u0440\u043e\u043f\u043e\u0440\u0442\u043e\u0432", "APG", "\u0438", "CVO", "?"]}, "query_toks": {"en": ["select", "t1.airline", "from", "airlines", "as", "t1", "join", "flights", "as", "t2", "on", "t1.uid", "=", "t2.airline", "where", "t2.sourceairport", "=", "\"APG\"", "intersect", "select", "t1.airline", "from", "airlines", "as", "t1", "join", "flights", "as", "t2", "on", "t1.uid", "=", "t2.airline", "where", "t2.sourceairport", "=", "\"CVO\"", ";"], "ru": ["select", "t1.airline", "from", "airlines", "as", "t1", "join", "flights", "as", "t2", "on", "t1.uid", "=", "t2.airline", "where", "t2.sourceairport", "=", "\"APG\"", "intersect", "select", "t1.airline", "from", "airlines", "as", "t1", "join", "flights", "as", "t2", "on", "t1.uid", "=", "t2.airline", "where", "t2.sourceairport", "=", "\"CVO\"", ";"]}, "query_toks_no_values": {"en": ["select", "t1.airline", "from", "airlines", "as", "t1", "join", "flights", "as", "t2", "on", "t1.uid", "=", "t2.airline", "where", "t2.sourceairport", "=", "value", "intersect", "select", "t1.airline", "from", "airlines", "as", "t1", "join", "flights", "as", "t2", "on", "t1.uid", "=", "t2.airline", "where", "t2.sourceairport", "=", "value", ";"], "ru": ["select", "t1.airline", "from", "airlines", "as", "t1", "join", "flights", "as", "t2", "on", "t1.uid", "=", "t2.airline", "where", "t2.sourceairport", "=", "value", "intersect", "select", "t1.airline", "from", "airlines", "as", "t1", "join", "flights", "as", "t2", "on", "t1.uid", "=", "t2.airline", "where", "t2.sourceairport", "=", "value", ";"]}, "masked_query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\";", "question_pauq": {"ru": "\u041a\u0430\u043a\u0438\u0435 \u0430\u0432\u0438\u0430\u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438 \u0432\u044b\u043b\u0435\u0442\u0430\u044e\u0442 \u0438\u0437 \u0430\u044d\u0440\u043e\u043f\u043e\u0440\u0442\u043e\u0432 APG \u0438 CVO?"}, "question": "Which airlines have departing flights from both APG and CVO airports?", "kb_id": "flight_2"}, {"id": "D_0240", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\";"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 10, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [[false, 2, [0, [0, 12, false], null], "\"CVO\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": {"from": {"table_units": [["table_unit", 0], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 10, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [[false, 2, [0, [0, 12, false], null], "\"APG\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "ru": {"from": {"table_units": [["table_unit", 0], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 10, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [[false, 2, [0, [0, 12, false], null], "\"CVO\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": {"from": {"table_units": [["table_unit", 0], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 10, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [[false, 2, [0, [0, 12, false], null], "\"APG\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}}, "question_toks": {"en": ["Find", "all", "airlines", "that", "have", "flights", "from", "airport", "'CVO", "'", "but", "not", "from", "'APG", "'", "."], "ru": ["\u041d\u0430\u0439\u0434\u0438\u0442\u0435", "\u0432\u0441\u0435", "\u0430\u0432\u0438\u0430\u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438", ",", "\u0443", "\u043a\u043e\u0442\u043e\u0440\u044b\u0445", "\u0435\u0441\u0442\u044c", "\u0440\u0435\u0439\u0441\u044b", "\u0438\u0437", "\u0430\u044d\u0440\u043e\u043f\u043e\u0440\u0442\u0430", "``", "CVO", "''", ",", "\u043d\u043e", "\u043d\u0435", "\u0438\u0437", "\u0430\u044d\u0440\u043e\u043f\u043e\u0440\u0442\u0430", "``", "APG", "''", "."]}, "query_toks": {"en": ["select", "t1.airline", "from", "airlines", "as", "t1", "join", "flights", "as", "t2", "on", "t1.uid", "=", "t2.airline", "where", "t2.sourceairport", "=", "\"CVO\"", "except", "select", "t1.airline", "from", "airlines", "as", "t1", "join", "flights", "as", "t2", "on", "t1.uid", "=", "t2.airline", "where", "t2.sourceairport", "=", "\"APG\"", ";"], "ru": ["select", "t1.airline", "from", "airlines", "as", "t1", "join", "flights", "as", "t2", "on", "t1.uid", "=", "t2.airline", "where", "t2.sourceairport", "=", "\"CVO\"", "except", "select", "t1.airline", "from", "airlines", "as", "t1", "join", "flights", "as", "t2", "on", "t1.uid", "=", "t2.airline", "where", "t2.sourceairport", "=", "\"APG\"", ";"]}, "query_toks_no_values": {"en": ["select", "t1.airline", "from", "airlines", "as", "t1", "join", "flights", "as", "t2", "on", "t1.uid", "=", "t2.airline", "where", "t2.sourceairport", "=", "value", "except", "select", "t1.airline", "from", "airlines", "as", "t1", "join", "flights", "as", "t2", "on", "t1.uid", "=", "t2.airline", "where", "t2.sourceairport", "=", "value", ";"], "ru": ["select", "t1.airline", "from", "airlines", "as", "t1", "join", "flights", "as", "t2", "on", "t1.uid", "=", "t2.airline", "where", "t2.sourceairport", "=", "value", "except", "select", "t1.airline", "from", "airlines", "as", "t1", "join", "flights", "as", "t2", "on", "t1.uid", "=", "t2.airline", "where", "t2.sourceairport", "=", "value", ";"]}, "masked_query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\";", "question_pauq": {"ru": "\u041d\u0430\u0439\u0434\u0438\u0442\u0435 \u0432\u0441\u0435 \u0430\u0432\u0438\u0430\u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438, \u0443 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0435\u0441\u0442\u044c \u0440\u0435\u0439\u0441\u044b \u0438\u0437 \u0430\u044d\u0440\u043e\u043f\u043e\u0440\u0442\u0430 \"CVO\", \u043d\u043e \u043d\u0435 \u0438\u0437 \u0430\u044d\u0440\u043e\u043f\u043e\u0440\u0442\u0430 \"APG\"."}, "question": "Find all airlines that have flights from airport 'CVO' but not from 'APG'.", "kb_id": "flight_2"}, {"id": "D_0241", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\";"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 10, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [[false, 2, [0, [0, 12, false], null], "\"CVO\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": {"from": {"table_units": [["table_unit", 0], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 10, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [[false, 2, [0, [0, 12, false], null], "\"APG\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "ru": {"from": {"table_units": [["table_unit", 0], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 10, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [[false, 2, [0, [0, 12, false], null], "\"CVO\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": {"from": {"table_units": [["table_unit", 0], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 10, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [[false, 2, [0, [0, 12, false], null], "\"APG\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}}, "question_toks": {"en": ["Which", "airlines", "have", "departures", "from", "CVO", "but", "not", "from", "APG", "airports", "?"], "ru": ["\u041a\u0430\u043a\u0438\u0435", "\u0430\u0432\u0438\u0430\u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438", "\u0432\u044b\u043b\u0435\u0442\u0430\u044e\u0442", "\u0438\u0437", "CVO", ",", "\u043d\u043e", "\u043d\u0435", "\u0438\u0437", "\u0430\u044d\u0440\u043e\u043f\u043e\u0440\u0442\u043e\u0432", "APG", "?"]}, "query_toks": {"en": ["select", "t1.airline", "from", "airlines", "as", "t1", "join", "flights", "as", "t2", "on", "t1.uid", "=", "t2.airline", "where", "t2.sourceairport", "=", "\"CVO\"", "except", "select", "t1.airline", "from", "airlines", "as", "t1", "join", "flights", "as", "t2", "on", "t1.uid", "=", "t2.airline", "where", "t2.sourceairport", "=", "\"APG\"", ";"], "ru": ["select", "t1.airline", "from", "airlines", "as", "t1", "join", "flights", "as", "t2", "on", "t1.uid", "=", "t2.airline", "where", "t2.sourceairport", "=", "\"CVO\"", "except", "select", "t1.airline", "from", "airlines", "as", "t1", "join", "flights", "as", "t2", "on", "t1.uid", "=", "t2.airline", "where", "t2.sourceairport", "=", "\"APG\"", ";"]}, "query_toks_no_values": {"en": ["select", "t1.airline", "from", "airlines", "as", "t1", "join", "flights", "as", "t2", "on", "t1.uid", "=", "t2.airline", "where", "t2.sourceairport", "=", "value", "except", "select", "t1.airline", "from", "airlines", "as", "t1", "join", "flights", "as", "t2", "on", "t1.uid", "=", "t2.airline", "where", "t2.sourceairport", "=", "value", ";"], "ru": ["select", "t1.airline", "from", "airlines", "as", "t1", "join", "flights", "as", "t2", "on", "t1.uid", "=", "t2.airline", "where", "t2.sourceairport", "=", "value", "except", "select", "t1.airline", "from", "airlines", "as", "t1", "join", "flights", "as", "t2", "on", "t1.uid", "=", "t2.airline", "where", "t2.sourceairport", "=", "value", ";"]}, "masked_query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\";", "question_pauq": {"ru": "\u041a\u0430\u043a\u0438\u0435 \u0430\u0432\u0438\u0430\u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438 \u0432\u044b\u043b\u0435\u0442\u0430\u044e\u0442 \u0438\u0437 CVO, \u043d\u043e \u043d\u0435 \u0438\u0437 \u0430\u044d\u0440\u043e\u043f\u043e\u0440\u0442\u043e\u0432 APG?"}, "question": "Which airlines have departures from CVO but not from APG airports?", "kb_id": "flight_2"}, {"id": "D_0242", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 10, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [], "groupBy": [[0, 2, false]], "having": [[false, 3, [0, [3, 0, false], null], 10.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 10, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [], "groupBy": [[0, 2, false]], "having": [[false, 3, [0, [3, 0, false], null], 10.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Find", "all", "airlines", "that", "have", "at", "least", "10", "flights", "."], "ru": ["\u041d\u0430\u0439\u0434\u0438\u0442\u0435", "\u0432\u0441\u0435", "\u0430\u0432\u0438\u0430\u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438", ",", "\u0443", "\u043a\u043e\u0442\u043e\u0440\u044b\u0445", "\u0435\u0441\u0442\u044c", "\u043d\u0435", "\u043c\u0435\u043d\u0435\u0435", "10", "\u0440\u0435\u0439\u0441\u043e\u0432", "."]}, "query_toks": {"en": ["select", "t1.airline", "from", "airlines", "as", "t1", "join", "flights", "as", "t2", "on", "t1.uid", "=", "t2.airline", "group", "by", "t1.airline", "having", "count", "(", "*", ")", ">", "10", ";"], "ru": ["select", "t1.airline", "from", "airlines", "as", "t1", "join", "flights", "as", "t2", "on", "t1.uid", "=", "t2.airline", "group", "by", "t1.airline", "having", "count", "(", "*", ")", ">", "10", ";"]}, "query_toks_no_values": {"en": ["select", "t1.airline", "from", "airlines", "as", "t1", "join", "flights", "as", "t2", "on", "t1.uid", "=", "t2.airline", "group", "by", "t1.airline", "having", "count", "(", "*", ")", ">", "10", ";"], "ru": ["select", "t1.airline", "from", "airlines", "as", "t1", "join", "flights", "as", "t2", "on", "t1.uid", "=", "t2.airline", "group", "by", "t1.airline", "having", "count", "(", "*", ")", ">", "10", ";"]}, "masked_query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10;", "question_pauq": {"ru": "\u041d\u0430\u0439\u0434\u0438\u0442\u0435 \u0432\u0441\u0435 \u0430\u0432\u0438\u0430\u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438, \u0443 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0435\u0441\u0442\u044c \u043d\u0435 \u043c\u0435\u043d\u0435\u0435 10 \u0440\u0435\u0439\u0441\u043e\u0432."}, "question": "Find all airlines that have at least 10 flights.", "kb_id": "flight_2"}, {"id": "D_0243", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 10, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [], "groupBy": [[0, 2, false]], "having": [[false, 3, [0, [3, 0, false], null], 10.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 10, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [], "groupBy": [[0, 2, false]], "having": [[false, 3, [0, [3, 0, false], null], 10.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Which", "airlines", "have", "at", "least", "10", "flights", "?"], "ru": ["\u0423", "\u043a\u0430\u043a\u0438\u0445", "\u0430\u0432\u0438\u0430\u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0439", "\u0435\u0441\u0442\u044c", "\u043d\u0435", "\u043c\u0435\u043d\u0435\u0435", "10", "\u0440\u0435\u0439\u0441\u043e\u0432", "?"]}, "query_toks": {"en": ["select", "t1.airline", "from", "airlines", "as", "t1", "join", "flights", "as", "t2", "on", "t1.uid", "=", "t2.airline", "group", "by", "t1.airline", "having", "count", "(", "*", ")", ">", "10", ";"], "ru": ["select", "t1.airline", "from", "airlines", "as", "t1", "join", "flights", "as", "t2", "on", "t1.uid", "=", "t2.airline", "group", "by", "t1.airline", "having", "count", "(", "*", ")", ">", "10", ";"]}, "query_toks_no_values": {"en": ["select", "t1.airline", "from", "airlines", "as", "t1", "join", "flights", "as", "t2", "on", "t1.uid", "=", "t2.airline", "group", "by", "t1.airline", "having", "count", "(", "*", ")", ">", "10", ";"], "ru": ["select", "t1.airline", "from", "airlines", "as", "t1", "join", "flights", "as", "t2", "on", "t1.uid", "=", "t2.airline", "group", "by", "t1.airline", "having", "count", "(", "*", ")", ">", "10", ";"]}, "masked_query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10;", "question_pauq": {"ru": "\u0423 \u043a\u0430\u043a\u0438\u0445 \u0430\u0432\u0438\u0430\u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0439 \u0435\u0441\u0442\u044c \u043d\u0435 \u043c\u0435\u043d\u0435\u0435 10 \u0440\u0435\u0439\u0441\u043e\u0432?"}, "question": "Which airlines have at least 10 flights?", "kb_id": "flight_2"}, {"id": "D_0244", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 10, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [], "groupBy": [[0, 2, false]], "having": [[false, 4, [0, [3, 0, false], null], 200.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 10, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [], "groupBy": [[0, 2, false]], "having": [[false, 4, [0, [3, 0, false], null], 200.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Find", "all", "airlines", "that", "have", "fewer", "than", "200", "flights", "."], "ru": ["\u041d\u0430\u0439\u0434\u0438\u0442\u0435", "\u0432\u0441\u0435", "\u0430\u0432\u0438\u0430\u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438", ",", "\u0443", "\u043a\u043e\u0442\u043e\u0440\u044b\u0445", "\u043c\u0435\u043d\u044c\u0448\u0435", "200", "\u0440\u0435\u0439\u0441\u043e\u0432", "."]}, "query_toks": {"en": ["select", "t1.airline", "from", "airlines", "as", "t1", "join", "flights", "as", "t2", "on", "t1.uid", "=", "t2.airline", "group", "by", "t1.airline", "having", "count", "(", "*", ")", "<", "200", ";"], "ru": ["select", "t1.airline", "from", "airlines", "as", "t1", "join", "flights", "as", "t2", "on", "t1.uid", "=", "t2.airline", "group", "by", "t1.airline", "having", "count", "(", "*", ")", "<", "200", ";"]}, "query_toks_no_values": {"en": ["select", "t1.airline", "from", "airlines", "as", "t1", "join", "flights", "as", "t2", "on", "t1.uid", "=", "t2.airline", "group", "by", "t1.airline", "having", "count", "(", "*", ")", "<", "200", ";"], "ru": ["select", "t1.airline", "from", "airlines", "as", "t1", "join", "flights", "as", "t2", "on", "t1.uid", "=", "t2.airline", "group", "by", "t1.airline", "having", "count", "(", "*", ")", "<", "200", ";"]}, "masked_query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200;", "question_pauq": {"ru": "\u041d\u0430\u0439\u0434\u0438\u0442\u0435 \u0432\u0441\u0435 \u0430\u0432\u0438\u0430\u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438, \u0443 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043c\u0435\u043d\u044c\u0448\u0435 200 \u0440\u0435\u0439\u0441\u043e\u0432."}, "question": "Find all airlines that have fewer than 200 flights.", "kb_id": "flight_2"}, {"id": "D_0245", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 10, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [], "groupBy": [[0, 2, false]], "having": [[false, 4, [0, [3, 0, false], null], 200.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 10, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [], "groupBy": [[0, 2, false]], "having": [[false, 4, [0, [3, 0, false], null], 200.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Which", "airlines", "have", "less", "than", "200", "flights", "?"], "ru": ["\u0423", "\u043a\u0430\u043a\u0438\u0445", "\u0430\u0432\u0438\u0430\u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0439", "\u043c\u0435\u043d\u044c\u0448\u0435", "200", "\u0440\u0435\u0439\u0441\u043e\u0432", "?"]}, "query_toks": {"en": ["select", "t1.airline", "from", "airlines", "as", "t1", "join", "flights", "as", "t2", "on", "t1.uid", "=", "t2.airline", "group", "by", "t1.airline", "having", "count", "(", "*", ")", "<", "200", ";"], "ru": ["select", "t1.airline", "from", "airlines", "as", "t1", "join", "flights", "as", "t2", "on", "t1.uid", "=", "t2.airline", "group", "by", "t1.airline", "having", "count", "(", "*", ")", "<", "200", ";"]}, "query_toks_no_values": {"en": ["select", "t1.airline", "from", "airlines", "as", "t1", "join", "flights", "as", "t2", "on", "t1.uid", "=", "t2.airline", "group", "by", "t1.airline", "having", "count", "(", "*", ")", "<", "200", ";"], "ru": ["select", "t1.airline", "from", "airlines", "as", "t1", "join", "flights", "as", "t2", "on", "t1.uid", "=", "t2.airline", "group", "by", "t1.airline", "having", "count", "(", "*", ")", "<", "200", ";"]}, "masked_query": "SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200;", "question_pauq": {"ru": "\u0423 \u043a\u0430\u043a\u0438\u0445 \u0430\u0432\u0438\u0430\u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0439 \u043c\u0435\u043d\u044c\u0448\u0435 200 \u0440\u0435\u0439\u0441\u043e\u0432?"}, "question": "Which airlines have less than 200 flights?", "kb_id": "flight_2"}, {"id": "D_0246", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"\u041f\u043e\u0431\u0435\u0434\u0430\";"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 10, false], null]]}, "select": [false, [[0, [0, [0, 11, false], null]]]], "where": [[false, 2, [0, [0, 2, false], null], "\"United Airlines\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 10, false], null]]}, "select": [false, [[0, [0, [0, 11, false], null]]]], "where": [[false, 2, [0, [0, 2, false], null], "\"\u041f\u043e\u0431\u0435\u0434\u0430\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "flight", "numbers", "of", "Airline", "``", "United", "Airlines", "''", "?"], "ru": ["\u041a\u0430\u043a\u0438\u0435", "\u043d\u043e\u043c\u0435\u0440\u0430", "\u0440\u0435\u0439\u0441\u043e\u0432", "\u0443", "\u0430\u0432\u0438\u0430\u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438", "\u041f\u043e\u0431\u0435\u0434\u0430", "?"]}, "query_toks": {"en": ["select", "t1.flightno", "from", "flights", "as", "t1", "join", "airlines", "as", "t2", "on", "t2.uid", "=", "t1.airline", "where", "t2.airline", "=", "\"United Airlines\"", ";"], "ru": ["select", "t1.flightno", "from", "flights", "as", "t1", "join", "airlines", "as", "t2", "on", "t2.uid", "=", "t1.airline", "where", "t2.airline", "=", "\"\u041f\u043e\u0431\u0435\u0434\u0430\"", ";"]}, "query_toks_no_values": {"en": ["select", "t1.flightno", "from", "flights", "as", "t1", "join", "airlines", "as", "t2", "on", "t2.uid", "=", "t1.airline", "where", "t2.airline", "=", "value", ";"], "ru": ["select", "t1.flightno", "from", "flights", "as", "t1", "join", "airlines", "as", "t2", "on", "t2.uid", "=", "t1.airline", "where", "t2.airline", "=", "value", ";"]}, "masked_query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\";", "question_pauq": {"ru": "\u041a\u0430\u043a\u0438\u0435 \u043d\u043e\u043c\u0435\u0440\u0430 \u0440\u0435\u0439\u0441\u043e\u0432 \u0443 \u0430\u0432\u0438\u0430\u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438 \u041f\u043e\u0431\u0435\u0434\u0430?"}, "question": "What are flight numbers of Airline \"United Airlines\"?", "kb_id": "flight_2"}, {"id": "D_0247", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"\u041f\u043e\u0431\u0435\u0434\u0430\";"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 10, false], null]]}, "select": [false, [[0, [0, [0, 11, false], null]]]], "where": [[false, 2, [0, [0, 2, false], null], "\"United Airlines\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 10, false], null]]}, "select": [false, [[0, [0, [0, 11, false], null]]]], "where": [[false, 2, [0, [0, 2, false], null], "\"\u041f\u043e\u0431\u0435\u0434\u0430\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Which", "flight", "numbers", "correspond", "to", "United", "Airlines", "flights", "?"], "ru": ["\u041a\u0430\u043a\u0438\u0435", "\u043d\u043e\u043c\u0435\u0440\u0430", "\u0440\u0435\u0439\u0441\u043e\u0432", "\u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0442", "\u0440\u0435\u0439\u0441\u0430\u043c", "\u041f\u043e\u0431\u0435\u0434\u0430", "?"]}, "query_toks": {"en": ["select", "t1.flightno", "from", "flights", "as", "t1", "join", "airlines", "as", "t2", "on", "t2.uid", "=", "t1.airline", "where", "t2.airline", "=", "\"United Airlines\"", ";"], "ru": ["select", "t1.flightno", "from", "flights", "as", "t1", "join", "airlines", "as", "t2", "on", "t2.uid", "=", "t1.airline", "where", "t2.airline", "=", "\"\u041f\u043e\u0431\u0435\u0434\u0430\"", ";"]}, "query_toks_no_values": {"en": ["select", "t1.flightno", "from", "flights", "as", "t1", "join", "airlines", "as", "t2", "on", "t2.uid", "=", "t1.airline", "where", "t2.airline", "=", "value", ";"], "ru": ["select", "t1.flightno", "from", "flights", "as", "t1", "join", "airlines", "as", "t2", "on", "t2.uid", "=", "t1.airline", "where", "t2.airline", "=", "value", ";"]}, "masked_query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\";", "question_pauq": {"ru": "\u041a\u0430\u043a\u0438\u0435 \u043d\u043e\u043c\u0435\u0440\u0430 \u0440\u0435\u0439\u0441\u043e\u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0442 \u0440\u0435\u0439\u0441\u0430\u043c \u041f\u043e\u0431\u0435\u0434\u0430?"}, "question": "Which flight numbers correspond to United Airlines flights?", "kb_id": "flight_2"}, {"id": "D_0248", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\";"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 11, false], null]]]], "where": [[false, 2, [0, [0, 12, false], null], "\"APG\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 11, false], null]]]], "where": [[false, 2, [0, [0, 12, false], null], "\"APG\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "flight", "numbers", "of", "flights", "departing", "from", "Airport", "``", "APG", "''", "?"], "ru": ["\u041a\u0430\u043a\u0438\u0435", "\u043d\u043e\u043c\u0435\u0440\u0430", "\u0440\u0435\u0439\u0441\u043e\u0432", "\u0432\u044b\u043b\u0435\u0442\u0430\u044e\u0442", "\u0438\u0437", "\u0430\u044d\u0440\u043e\u043f\u043e\u0440\u0442\u0430", "\u00ab", "APG", "\u00bb", "?"]}, "query_toks": {"en": ["select", "flightno", "from", "flights", "where", "sourceairport", "=", "\"APG\"", ";"], "ru": ["select", "flightno", "from", "flights", "where", "sourceairport", "=", "\"APG\"", ";"]}, "query_toks_no_values": {"en": ["select", "flightno", "from", "flights", "where", "sourceairport", "=", "value", ";"], "ru": ["select", "flightno", "from", "flights", "where", "sourceairport", "=", "value", ";"]}, "masked_query": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\";", "question_pauq": {"ru": "\u041a\u0430\u043a\u0438\u0435 \u043d\u043e\u043c\u0435\u0440\u0430 \u0440\u0435\u0439\u0441\u043e\u0432 \u0432\u044b\u043b\u0435\u0442\u0430\u044e\u0442 \u0438\u0437 \u0430\u044d\u0440\u043e\u043f\u043e\u0440\u0442\u0430 \u00abAPG\u00bb?"}, "question": "What are flight numbers of flights departing from Airport \"APG\"?", "kb_id": "flight_2"}, {"id": "D_0249", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\";"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 11, false], null]]]], "where": [[false, 2, [0, [0, 12, false], null], "\"APG\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 11, false], null]]]], "where": [[false, 2, [0, [0, 12, false], null], "\"APG\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Give", "the", "flight", "numbers", "of", "flights", "leaving", "from", "APG", "."], "ru": ["\u0423\u043a\u0430\u0436\u0438\u0442\u0435", "\u043d\u043e\u043c\u0435\u0440\u0430", "\u0440\u0435\u0439\u0441\u043e\u0432", "\u0432\u044b\u043b\u0435\u0442\u0430\u044e\u0449\u0438\u0445", "\u0438\u0437", "APG", "."]}, "query_toks": {"en": ["select", "flightno", "from", "flights", "where", "sourceairport", "=", "\"APG\"", ";"], "ru": ["select", "flightno", "from", "flights", "where", "sourceairport", "=", "\"APG\"", ";"]}, "query_toks_no_values": {"en": ["select", "flightno", "from", "flights", "where", "sourceairport", "=", "value", ";"], "ru": ["select", "flightno", "from", "flights", "where", "sourceairport", "=", "value", ";"]}, "masked_query": "SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\";", "question_pauq": {"ru": "\u0423\u043a\u0430\u0436\u0438\u0442\u0435 \u043d\u043e\u043c\u0435\u0440\u0430 \u0440\u0435\u0439\u0441\u043e\u0432 \u0432\u044b\u043b\u0435\u0442\u0430\u044e\u0449\u0438\u0445 \u0438\u0437 APG."}, "question": "Give the flight numbers of flights leaving from APG.", "kb_id": "flight_2"}, {"id": "D_0250", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\";"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 11, false], null]]]], "where": [[false, 2, [0, [0, 13, false], null], "\"APG\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 11, false], null]]]], "where": [[false, 2, [0, [0, 13, false], null], "\"APG\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "flight", "numbers", "of", "flights", "arriving", "at", "Airport", "``", "APG", "''", "?"], "ru": ["\u041a\u0430\u043a\u0438\u0435", "\u043d\u043e\u043c\u0435\u0440\u0430", "\u0440\u0435\u0439\u0441\u043e\u0432", "\u043f\u0440\u0438\u0431\u044b\u0432\u0430\u044e\u0442", "\u0432", "\u0430\u044d\u0440\u043e\u043f\u043e\u0440\u0442", "\u00ab", "APG", "\u00bb", "?"]}, "query_toks": {"en": ["select", "flightno", "from", "flights", "where", "destairport", "=", "\"APG\"", ";"], "ru": ["select", "flightno", "from", "flights", "where", "destairport", "=", "\"APG\"", ";"]}, "query_toks_no_values": {"en": ["select", "flightno", "from", "flights", "where", "destairport", "=", "value", ";"], "ru": ["select", "flightno", "from", "flights", "where", "destairport", "=", "value", ";"]}, "masked_query": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\";", "question_pauq": {"ru": "\u041a\u0430\u043a\u0438\u0435 \u043d\u043e\u043c\u0435\u0440\u0430 \u0440\u0435\u0439\u0441\u043e\u0432 \u043f\u0440\u0438\u0431\u044b\u0432\u0430\u044e\u0442 \u0432 \u0430\u044d\u0440\u043e\u043f\u043e\u0440\u0442 \u00abAPG\u00bb?"}, "question": "What are flight numbers of flights arriving at Airport \"APG\"?", "kb_id": "flight_2"}, {"id": "D_0251", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\";"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 11, false], null]]]], "where": [[false, 2, [0, [0, 13, false], null], "\"APG\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 11, false], null]]]], "where": [[false, 2, [0, [0, 13, false], null], "\"APG\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Give", "the", "flight", "numbers", "of", "flights", "landing", "at", "APG", "."], "ru": ["\u041f\u0440\u0438\u0432\u0435\u0434\u0438\u0442\u0435", "\u043d\u043e\u043c\u0435\u0440\u0430", "\u0440\u0435\u0439\u0441\u043e\u0432", ",", "\u043f\u0440\u0438\u043b\u0435\u0442\u0430\u044e\u0449\u0438\u0445", "\u0432", "APG", "."]}, "query_toks": {"en": ["select", "flightno", "from", "flights", "where", "destairport", "=", "\"APG\"", ";"], "ru": ["select", "flightno", "from", "flights", "where", "destairport", "=", "\"APG\"", ";"]}, "query_toks_no_values": {"en": ["select", "flightno", "from", "flights", "where", "destairport", "=", "value", ";"], "ru": ["select", "flightno", "from", "flights", "where", "destairport", "=", "value", ";"]}, "masked_query": "SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\";", "question_pauq": {"ru": "\u041f\u0440\u0438\u0432\u0435\u0434\u0438\u0442\u0435 \u043d\u043e\u043c\u0435\u0440\u0430 \u0440\u0435\u0439\u0441\u043e\u0432, \u043f\u0440\u0438\u043b\u0435\u0442\u0430\u044e\u0449\u0438\u0445 \u0432 APG."}, "question": "Give the flight numbers of flights landing at APG.", "kb_id": "flight_2"}, {"id": "D_0252", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"\u041a\u0430\u043b\u0438\u043d\u0438\u043d\u0433\u0440\u0430\u0434\";"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 12, false], null], [0, 6, false], null]]}, "select": [false, [[0, [0, [0, 11, false], null]]]], "where": [[false, 2, [0, [0, 5, false], null], "\"Aberdeen\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 12, false], null], [0, 6, false], null]]}, "select": [false, [[0, [0, [0, 11, false], null]]]], "where": [[false, 2, [0, [0, 5, false], null], "\"\u041a\u0430\u043b\u0438\u043d\u0438\u043d\u0433\u0440\u0430\u0434\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "flight", "numbers", "of", "flights", "departing", "from", "City", "``", "Aberdeen", "``", "?"], "ru": ["\u041a\u0430\u043a\u0438\u0435", "\u043d\u043e\u043c\u0435\u0440\u0430", "\u0440\u0435\u0439\u0441\u043e\u0432", "\u0432\u044b\u043b\u0435\u0442\u0430\u044e\u0442", "\u0438\u0437", "\u0433\u043e\u0440\u043e\u0434\u0430", "\u00ab", "\u041a\u0430\u043b\u0438\u043d\u0438\u043d\u0433\u0440\u0430\u0434", "\u00bb", "?"]}, "query_toks": {"en": ["select", "t1.flightno", "from", "flights", "as", "t1", "join", "airports", "as", "t2", "on", "t1.sourceairport", "=", "t2.airportcode", "where", "t2.city", "=", "\"Aberdeen\"", ";"], "ru": ["select", "t1.flightno", "from", "flights", "as", "t1", "join", "airports", "as", "t2", "on", "t1.sourceairport", "=", "t2.airportcode", "where", "t2.city", "=", "\"\u041a\u0430\u043b\u0438\u043d\u0438\u043d\u0433\u0440\u0430\u0434\"", ";"]}, "query_toks_no_values": {"en": ["select", "t1.flightno", "from", "flights", "as", "t1", "join", "airports", "as", "t2", "on", "t1.sourceairport", "=", "t2.airportcode", "where", "t2.city", "=", "value", ";"], "ru": ["select", "t1.flightno", "from", "flights", "as", "t1", "join", "airports", "as", "t2", "on", "t1.sourceairport", "=", "t2.airportcode", "where", "t2.city", "=", "value", ";"]}, "masked_query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\";", "question_pauq": {"ru": "\u041a\u0430\u043a\u0438\u0435 \u043d\u043e\u043c\u0435\u0440\u0430 \u0440\u0435\u0439\u0441\u043e\u0432 \u0432\u044b\u043b\u0435\u0442\u0430\u044e\u0442 \u0438\u0437 \u0433\u043e\u0440\u043e\u0434\u0430 \u00ab\u041a\u0430\u043b\u0438\u043d\u0438\u043d\u0433\u0440\u0430\u0434\u00bb?"}, "question": "What are flight numbers of flights departing from City \"Aberdeen \"?", "kb_id": "flight_2"}, {"id": "D_0253", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"\u041a\u0430\u043b\u0438\u043d\u0438\u043d\u0433\u0440\u0430\u0434\";"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 12, false], null], [0, 6, false], null]]}, "select": [false, [[0, [0, [0, 11, false], null]]]], "where": [[false, 2, [0, [0, 5, false], null], "\"Aberdeen\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 12, false], null], [0, 6, false], null]]}, "select": [false, [[0, [0, [0, 11, false], null]]]], "where": [[false, 2, [0, [0, 5, false], null], "\"\u041a\u0430\u043b\u0438\u043d\u0438\u043d\u0433\u0440\u0430\u0434\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Give", "the", "flight", "numbers", "of", "flights", "leaving", "from", "Aberdeen", "."], "ru": ["\u0421\u043e\u043e\u0431\u0449\u0438\u0442\u0435", "\u043d\u043e\u043c\u0435\u0440\u0430", "\u0440\u0435\u0439\u0441\u043e\u0432", ",", "\u0432\u044b\u043b\u0435\u0442\u0430\u044e\u0449\u0438\u0445", "\u0438\u0437", "\u041a\u0430\u043b\u0438\u043d\u0438\u043d\u0433\u0440\u0430\u0434\u0430", "."]}, "query_toks": {"en": ["select", "t1.flightno", "from", "flights", "as", "t1", "join", "airports", "as", "t2", "on", "t1.sourceairport", "=", "t2.airportcode", "where", "t2.city", "=", "\"Aberdeen\"", ";"], "ru": ["select", "t1.flightno", "from", "flights", "as", "t1", "join", "airports", "as", "t2", "on", "t1.sourceairport", "=", "t2.airportcode", "where", "t2.city", "=", "\"\u041a\u0430\u043b\u0438\u043d\u0438\u043d\u0433\u0440\u0430\u0434\"", ";"]}, "query_toks_no_values": {"en": ["select", "t1.flightno", "from", "flights", "as", "t1", "join", "airports", "as", "t2", "on", "t1.sourceairport", "=", "t2.airportcode", "where", "t2.city", "=", "value", ";"], "ru": ["select", "t1.flightno", "from", "flights", "as", "t1", "join", "airports", "as", "t2", "on", "t1.sourceairport", "=", "t2.airportcode", "where", "t2.city", "=", "value", ";"]}, "masked_query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\";", "question_pauq": {"ru": "\u0421\u043e\u043e\u0431\u0449\u0438\u0442\u0435 \u043d\u043e\u043c\u0435\u0440\u0430 \u0440\u0435\u0439\u0441\u043e\u0432, \u0432\u044b\u043b\u0435\u0442\u0430\u044e\u0449\u0438\u0445 \u0438\u0437 \u041a\u0430\u043b\u0438\u043d\u0438\u043d\u0433\u0440\u0430\u0434\u0430."}, "question": "Give the flight numbers of flights leaving from Aberdeen.", "kb_id": "flight_2"}, {"id": "D_0254", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"\u041c\u043e\u0441\u043a\u0432\u0430\";"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 13, false], null], [0, 6, false], null]]}, "select": [false, [[0, [0, [0, 11, false], null]]]], "where": [[false, 2, [0, [0, 5, false], null], "\"Aberdeen\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 13, false], null], [0, 6, false], null]]}, "select": [false, [[0, [0, [0, 11, false], null]]]], "where": [[false, 2, [0, [0, 5, false], null], "\"\u041c\u043e\u0441\u043a\u0432\u0430\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "flight", "numbers", "of", "flights", "arriving", "at", "City", "``", "Aberdeen", "''", "?"], "ru": ["\u041a\u0430\u043a\u0438\u0435", "\u043d\u043e\u043c\u0435\u0440\u0430", "\u0440\u0435\u0439\u0441\u043e\u0432", "\u043f\u0440\u0438\u0431\u044b\u0432\u0430\u044e\u0442", "\u0432", "\u0433\u043e\u0440\u043e\u0434", "``", "\u041c\u043e\u0441\u043a\u0432\u0430", "''", "?"]}, "query_toks": {"en": ["select", "t1.flightno", "from", "flights", "as", "t1", "join", "airports", "as", "t2", "on", "t1.destairport", "=", "t2.airportcode", "where", "t2.city", "=", "\"Aberdeen\"", ";"], "ru": ["select", "t1.flightno", "from", "flights", "as", "t1", "join", "airports", "as", "t2", "on", "t1.destairport", "=", "t2.airportcode", "where", "t2.city", "=", "\"\u041c\u043e\u0441\u043a\u0432\u0430\"", ";"]}, "query_toks_no_values": {"en": ["select", "t1.flightno", "from", "flights", "as", "t1", "join", "airports", "as", "t2", "on", "t1.destairport", "=", "t2.airportcode", "where", "t2.city", "=", "value", ";"], "ru": ["select", "t1.flightno", "from", "flights", "as", "t1", "join", "airports", "as", "t2", "on", "t1.destairport", "=", "t2.airportcode", "where", "t2.city", "=", "value", ";"]}, "masked_query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\";", "question_pauq": {"ru": "\u041a\u0430\u043a\u0438\u0435 \u043d\u043e\u043c\u0435\u0440\u0430 \u0440\u0435\u0439\u0441\u043e\u0432 \u043f\u0440\u0438\u0431\u044b\u0432\u0430\u044e\u0442 \u0432 \u0433\u043e\u0440\u043e\u0434 \"\u041c\u043e\u0441\u043a\u0432\u0430\"?"}, "question": "What are flight numbers of flights arriving at City \"Aberdeen\"?", "kb_id": "flight_2"}, {"id": "D_0255", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"\u041c\u043e\u0441\u043a\u0432\u0430\";"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 13, false], null], [0, 6, false], null]]}, "select": [false, [[0, [0, [0, 11, false], null]]]], "where": [[false, 2, [0, [0, 5, false], null], "\"Aberdeen\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 13, false], null], [0, 6, false], null]]}, "select": [false, [[0, [0, [0, 11, false], null]]]], "where": [[false, 2, [0, [0, 5, false], null], "\"\u041c\u043e\u0441\u043a\u0432\u0430\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Give", "the", "flight", "numbers", "of", "flights", "arriving", "in", "Aberdeen", "."], "ru": ["\u0421\u043e\u043e\u0431\u0449\u0438\u0442\u0435", "\u043d\u043e\u043c\u0435\u0440\u0430", "\u0440\u0435\u0439\u0441\u043e\u0432", ",", "\u043f\u0440\u0438\u0431\u044b\u0432\u0430\u044e\u0449\u0438\u0445", "\u0432", "\u041c\u043e\u0441\u043a\u0432\u0443", "."]}, "query_toks": {"en": ["select", "t1.flightno", "from", "flights", "as", "t1", "join", "airports", "as", "t2", "on", "t1.destairport", "=", "t2.airportcode", "where", "t2.city", "=", "\"Aberdeen\"", ";"], "ru": ["select", "t1.flightno", "from", "flights", "as", "t1", "join", "airports", "as", "t2", "on", "t1.destairport", "=", "t2.airportcode", "where", "t2.city", "=", "\"\u041c\u043e\u0441\u043a\u0432\u0430\"", ";"]}, "query_toks_no_values": {"en": ["select", "t1.flightno", "from", "flights", "as", "t1", "join", "airports", "as", "t2", "on", "t1.destairport", "=", "t2.airportcode", "where", "t2.city", "=", "value", ";"], "ru": ["select", "t1.flightno", "from", "flights", "as", "t1", "join", "airports", "as", "t2", "on", "t1.destairport", "=", "t2.airportcode", "where", "t2.city", "=", "value", ";"]}, "masked_query": "SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\";", "question_pauq": {"ru": "\u0421\u043e\u043e\u0431\u0449\u0438\u0442\u0435 \u043d\u043e\u043c\u0435\u0440\u0430 \u0440\u0435\u0439\u0441\u043e\u0432, \u043f\u0440\u0438\u0431\u044b\u0432\u0430\u044e\u0449\u0438\u0445 \u0432 \u041c\u043e\u0441\u043a\u0432\u0443."}, "question": "Give the flight numbers of flights arriving in Aberdeen.", "kb_id": "flight_2"}, {"id": "D_0256", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  \"\u0410\u043d\u0430\u043f\u0430\" OR T2.city  =  \"\u0412\u043e\u0440\u043e\u043d\u0435\u0436\";"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 13, false], null], [0, 6, false], null]]}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 5, false], null], "\"Aberdeen\"", null], "or", [false, 2, [0, [0, 5, false], null], "\"Abilene\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 13, false], null], [0, 6, false], null]]}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 5, false], null], "\"\u0410\u043d\u0430\u043f\u0430\"", null], "or", [false, 2, [0, [0, 5, false], null], "\"\u0412\u043e\u0440\u043e\u043d\u0435\u0436\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Find", "the", "number", "of", "flights", "landing", "in", "the", "city", "of", "Aberdeen", "or", "Abilene", "."], "ru": ["\u041d\u0430\u0439\u0434\u0438\u0442\u0435", "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e", "\u0440\u0435\u0439\u0441\u043e\u0432", ",", "\u043a\u043e\u0442\u043e\u0440\u044b\u0435", "\u043f\u0440\u0438\u0437\u0435\u043c\u043b\u044f\u044e\u0442\u0441\u044f", "\u0432", "\u0433\u043e\u0440\u043e\u0434\u0435", "\u0410\u043d\u0430\u043f\u0430", "\u0438\u043b\u0438", "\u0412\u043e\u0440\u043e\u043d\u0435\u0436", "."]}, "query_toks": {"en": ["select", "count", "(", "*", ")", "from", "flights", "as", "t1", "join", "airports", "as", "t2", "on", "t1.destairport", "=", "t2.airportcode", "where", "t2.city", "=", "\"Aberdeen\"", "or", "t2.city", "=", "\"Abilene\"", ";"], "ru": ["select", "count", "(", "*", ")", "from", "flights", "as", "t1", "join", "airports", "as", "t2", "on", "t1.destairport", "=", "t2.airportcode", "where", "t2.city", "=", "\"\u0410\u043d\u0430\u043f\u0430\"", "or", "t2.city", "=", "\"\u0412\u043e\u0440\u043e\u043d\u0435\u0436\"", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "*", ")", "from", "flights", "as", "t1", "join", "airports", "as", "t2", "on", "t1.destairport", "=", "t2.airportcode", "where", "t2.city", "=", "value", "or", "t2.city", "=", "value", ";"], "ru": ["select", "count", "(", "*", ")", "from", "flights", "as", "t1", "join", "airports", "as", "t2", "on", "t1.destairport", "=", "t2.airportcode", "where", "t2.city", "=", "value", "or", "t2.city", "=", "value", ";"]}, "masked_query": "SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  \"Aberdeen\" OR T2.city  =  \"Abilene\";", "question_pauq": {"ru": "\u041d\u0430\u0439\u0434\u0438\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0440\u0435\u0439\u0441\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u0440\u0438\u0437\u0435\u043c\u043b\u044f\u044e\u0442\u0441\u044f \u0432 \u0433\u043e\u0440\u043e\u0434\u0435 \u0410\u043d\u0430\u043f\u0430 \u0438\u043b\u0438 \u0412\u043e\u0440\u043e\u043d\u0435\u0436."}, "question": "Find the number of flights landing in the city of Aberdeen or Abilene.", "kb_id": "flight_2"}, {"id": "D_0257", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  \"\u0410\u043d\u0430\u043f\u0430\" OR T2.city  =  \"\u0412\u043e\u0440\u043e\u043d\u0435\u0436\";"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 13, false], null], [0, 6, false], null]]}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 5, false], null], "\"Aberdeen\"", null], "or", [false, 2, [0, [0, 5, false], null], "\"Abilene\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 13, false], null], [0, 6, false], null]]}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 5, false], null], "\"\u0410\u043d\u0430\u043f\u0430\"", null], "or", [false, 2, [0, [0, 5, false], null], "\"\u0412\u043e\u0440\u043e\u043d\u0435\u0436\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["How", "many", "flights", "land", "in", "Aberdeen", "or", "Abilene", "?"], "ru": ["\u0421\u043a\u043e\u043b\u044c\u043a\u043e", "\u0440\u0435\u0439\u0441\u043e\u0432", "\u043f\u0440\u0438\u0437\u0435\u043c\u043b\u044f\u0435\u0442\u0441\u044f", "\u0432", "\u0410\u043d\u0430\u043f\u0435", "\u0438\u043b\u0438", "\u0412\u043e\u0440\u043e\u043d\u0435\u0436\u0435", "?"]}, "query_toks": {"en": ["select", "count", "(", "*", ")", "from", "flights", "as", "t1", "join", "airports", "as", "t2", "on", "t1.destairport", "=", "t2.airportcode", "where", "t2.city", "=", "\"Aberdeen\"", "or", "t2.city", "=", "\"Abilene\"", ";"], "ru": ["select", "count", "(", "*", ")", "from", "flights", "as", "t1", "join", "airports", "as", "t2", "on", "t1.destairport", "=", "t2.airportcode", "where", "t2.city", "=", "\"\u0410\u043d\u0430\u043f\u0430\"", "or", "t2.city", "=", "\"\u0412\u043e\u0440\u043e\u043d\u0435\u0436\"", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "*", ")", "from", "flights", "as", "t1", "join", "airports", "as", "t2", "on", "t1.destairport", "=", "t2.airportcode", "where", "t2.city", "=", "value", "or", "t2.city", "=", "value", ";"], "ru": ["select", "count", "(", "*", ")", "from", "flights", "as", "t1", "join", "airports", "as", "t2", "on", "t1.destairport", "=", "t2.airportcode", "where", "t2.city", "=", "value", "or", "t2.city", "=", "value", ";"]}, "masked_query": "SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  \"Aberdeen\" OR T2.city  =  \"Abilene\";", "question_pauq": {"ru": "\u0421\u043a\u043e\u043b\u044c\u043a\u043e \u0440\u0435\u0439\u0441\u043e\u0432 \u043f\u0440\u0438\u0437\u0435\u043c\u043b\u044f\u0435\u0442\u0441\u044f \u0432 \u0410\u043d\u0430\u043f\u0435 \u0438\u043b\u0438 \u0412\u043e\u0440\u043e\u043d\u0435\u0436\u0435?"}, "question": "How many flights land in Aberdeen or Abilene?", "kb_id": "flight_2"}, {"id": "D_0258", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights);"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 7, false], null]]]], "where": [[true, 8, [0, [0, 6, false], null], {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 12, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 13, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 7, false], null]]]], "where": [[true, 8, [0, [0, 6, false], null], {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 12, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 13, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Find", "the", "name", "of", "airports", "which", "do", "not", "have", "any", "flight", "in", "and", "out", "."], "ru": ["\u041d\u0430\u0439\u0434\u0438\u0442\u0435", "\u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f", "\u0430\u044d\u0440\u043e\u043f\u043e\u0440\u0442\u043e\u0432", ",", "\u0432", "\u043a\u043e\u0442\u043e\u0440\u044b\u0435", "\u043d\u0435\u0442", "\u0440\u0435\u0439\u0441\u043e\u0432", "."]}, "query_toks": {"en": ["select", "airportname", "from", "airports", "where", "airportcode", "not", "in", "(", "select", "sourceairport", "from", "flights", "union", "select", "destairport", "from", "flights", ")", ";"], "ru": ["select", "airportname", "from", "airports", "where", "airportcode", "not", "in", "(", "select", "sourceairport", "from", "flights", "union", "select", "destairport", "from", "flights", ")", ";"]}, "query_toks_no_values": {"en": ["select", "airportname", "from", "airports", "where", "airportcode", "not", "in", "(", "select", "sourceairport", "from", "flights", "union", "select", "destairport", "from", "flights", ")", ";"], "ru": ["select", "airportname", "from", "airports", "where", "airportcode", "not", "in", "(", "select", "sourceairport", "from", "flights", "union", "select", "destairport", "from", "flights", ")", ";"]}, "masked_query": "SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights);", "question_pauq": {"ru": "\u041d\u0430\u0439\u0434\u0438\u0442\u0435 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f \u0430\u044d\u0440\u043e\u043f\u043e\u0440\u0442\u043e\u0432, \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0435\u0442 \u0440\u0435\u0439\u0441\u043e\u0432."}, "question": "Find the name of airports which do not have any flight in and out.", "kb_id": "flight_2"}, {"id": "D_0259", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights);"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 7, false], null]]]], "where": [[true, 8, [0, [0, 6, false], null], {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 12, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 13, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 7, false], null]]]], "where": [[true, 8, [0, [0, 6, false], null], {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 12, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 13, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Which", "airports", "do", "not", "have", "departing", "or", "arriving", "flights", "?"], "ru": ["\u0412", "\u043a\u0430\u043a\u0438\u0435", "\u0430\u044d\u0440\u043e\u043f\u043e\u0440\u0442\u044b", "\u043d\u0435", "\u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u044e\u0442\u0441\u044f", "\u0438", "\u043d\u0435", "\u043f\u0440\u0438\u043b\u0435\u0442\u0430\u044e\u0442", "\u0440\u0435\u0439\u0441\u044b", "?"]}, "query_toks": {"en": ["select", "airportname", "from", "airports", "where", "airportcode", "not", "in", "(", "select", "sourceairport", "from", "flights", "union", "select", "destairport", "from", "flights", ")", ";"], "ru": ["select", "airportname", "from", "airports", "where", "airportcode", "not", "in", "(", "select", "sourceairport", "from", "flights", "union", "select", "destairport", "from", "flights", ")", ";"]}, "query_toks_no_values": {"en": ["select", "airportname", "from", "airports", "where", "airportcode", "not", "in", "(", "select", "sourceairport", "from", "flights", "union", "select", "destairport", "from", "flights", ")", ";"], "ru": ["select", "airportname", "from", "airports", "where", "airportcode", "not", "in", "(", "select", "sourceairport", "from", "flights", "union", "select", "destairport", "from", "flights", ")", ";"]}, "masked_query": "SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights);", "question_pauq": {"ru": "\u0412 \u043a\u0430\u043a\u0438\u0435 \u0430\u044d\u0440\u043e\u043f\u043e\u0440\u0442\u044b \u043d\u0435 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u0438 \u043d\u0435 \u043f\u0440\u0438\u043b\u0435\u0442\u0430\u044e\u0442 \u0440\u0435\u0439\u0441\u044b?"}, "question": "Which airports do not have departing or arriving flights?", "kb_id": "flight_2"}, {"id": "D_0260", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT count(*) FROM employee;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["How", "many", "employees", "are", "there", "?"], "ru": ["\u0421\u043a\u043e\u043b\u044c\u043a\u043e", "\u0442\u0430\u043c", "\u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a\u043e\u0432", "?"]}, "query_toks": {"en": ["select", "count", "(", "*", ")", "from", "employee", ";"], "ru": ["select", "count", "(", "*", ")", "from", "employee", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "*", ")", "from", "employee", ";"], "ru": ["select", "count", "(", "*", ")", "from", "employee", ";"]}, "masked_query": "SELECT count(*) FROM employee;", "question_pauq": {"ru": "\u0421\u043a\u043e\u043b\u044c\u043a\u043e \u0442\u0430\u043c \u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a\u043e\u0432?"}, "question": "How many employees are there?", "kb_id": "employee_hire_evaluation"}, {"id": "D_0261", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT count(*) FROM employee;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Count", "the", "number", "of", "employees"], "ru": ["\u041f\u043e\u0434\u0441\u0447\u0438\u0442\u0430\u0439\u0442\u0435", "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e", "\u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a\u043e\u0432"]}, "query_toks": {"en": ["select", "count", "(", "*", ")", "from", "employee", ";"], "ru": ["select", "count", "(", "*", ")", "from", "employee", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "*", ")", "from", "employee", ";"], "ru": ["select", "count", "(", "*", ")", "from", "employee", ";"]}, "masked_query": "SELECT count(*) FROM employee;", "question_pauq": {"ru": "\u041f\u043e\u0434\u0441\u0447\u0438\u0442\u0430\u0439\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a\u043e\u0432"}, "question": "Count the number of employees", "kb_id": "employee_hire_evaluation"}, {"id": "D_0262", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT name FROM employee ORDER BY age;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["asc", [[0, [0, 3, false], null]]], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["asc", [[0, [0, 3, false], null]]], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Sort", "employee", "names", "by", "their", "age", "in", "ascending", "order", "."], "ru": ["\u041e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u0443\u0439\u0442\u0435", "\u0438\u043c\u0435\u043d\u0430", "\u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a\u043e\u0432", "\u043f\u043e", "\u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0443", "\u0432", "\u043f\u043e\u0440\u044f\u0434\u043a\u0435", "\u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430\u043d\u0438\u044f", "."]}, "query_toks": {"en": ["select", "name", "from", "employee", "order", "by", "age", ";"], "ru": ["select", "name", "from", "employee", "order", "by", "age", ";"]}, "query_toks_no_values": {"en": ["select", "name", "from", "employee", "order", "by", "age", ";"], "ru": ["select", "name", "from", "employee", "order", "by", "age", ";"]}, "masked_query": "SELECT name FROM employee ORDER BY age;", "question_pauq": {"ru": "\u041e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u0443\u0439\u0442\u0435 \u0438\u043c\u0435\u043d\u0430 \u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a\u043e\u0432 \u043f\u043e \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0443 \u0432 \u043f\u043e\u0440\u044f\u0434\u043a\u0435 \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430\u043d\u0438\u044f."}, "question": "Sort employee names by their age in ascending order.", "kb_id": "employee_hire_evaluation"}, {"id": "D_0263", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT name FROM employee ORDER BY age;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["asc", [[0, [0, 3, false], null]]], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["asc", [[0, [0, 3, false], null]]], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["List", "the", "names", "of", "employees", "and", "sort", "in", "ascending", "order", "of", "age", "."], "ru": ["\u041f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0438\u0442\u0435", "\u0438\u043c\u0435\u043d\u0430", "\u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a\u043e\u0432", "\u0438", "\u043e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u0443\u0439\u0442\u0435", "\u0438\u0445", "\u0432", "\u043f\u043e\u0440\u044f\u0434\u043a\u0435", "\u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430\u043d\u0438\u044f", "\u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430", "."]}, "query_toks": {"en": ["select", "name", "from", "employee", "order", "by", "age", ";"], "ru": ["select", "name", "from", "employee", "order", "by", "age", ";"]}, "query_toks_no_values": {"en": ["select", "name", "from", "employee", "order", "by", "age", ";"], "ru": ["select", "name", "from", "employee", "order", "by", "age", ";"]}, "masked_query": "SELECT name FROM employee ORDER BY age;", "question_pauq": {"ru": "\u041f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0438\u0442\u0435 \u0438\u043c\u0435\u043d\u0430 \u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a\u043e\u0432 \u0438 \u043e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u0443\u0439\u0442\u0435 \u0438\u0445 \u0432 \u043f\u043e\u0440\u044f\u0434\u043a\u0435 \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430\u043d\u0438\u044f \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430."}, "question": "List the names of employees and sort in ascending order of age.", "kb_id": "employee_hire_evaluation"}, {"id": "D_0264", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT count(*) ,  city FROM employee GROUP BY city;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]], [0, [0, [0, 4, false], null]]]], "where": [], "groupBy": [[0, 4, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]], [0, [0, [0, 4, false], null]]]], "where": [], "groupBy": [[0, 4, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "number", "of", "employees", "from", "each", "city", "?"], "ru": ["\u041a\u0430\u043a\u043e\u0435", "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e", "\u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a\u043e\u0432", "\u0438\u0437", "\u043a\u0430\u0436\u0434\u043e\u0433\u043e", "\u0433\u043e\u0440\u043e\u0434\u0430", "?"]}, "query_toks": {"en": ["select", "count", "(", "*", ")", ",", "city", "from", "employee", "group", "by", "city", ";"], "ru": ["select", "count", "(", "*", ")", ",", "city", "from", "employee", "group", "by", "city", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "*", ")", ",", "city", "from", "employee", "group", "by", "city", ";"], "ru": ["select", "count", "(", "*", ")", ",", "city", "from", "employee", "group", "by", "city", ";"]}, "masked_query": "SELECT count(*) ,  city FROM employee GROUP BY city;", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a\u043e\u0432 \u0438\u0437 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0433\u043e\u0440\u043e\u0434\u0430?"}, "question": "What is the number of employees from each city?", "kb_id": "employee_hire_evaluation"}, {"id": "D_0265", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT count(*) ,  city FROM employee GROUP BY city;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]], [0, [0, [0, 4, false], null]]]], "where": [], "groupBy": [[0, 4, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]], [0, [0, [0, 4, false], null]]]], "where": [], "groupBy": [[0, 4, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Count", "the", "number", "of", "employees", "for", "each", "city", "."], "ru": ["\u041f\u043e\u0434\u0441\u0447\u0438\u0442\u0430\u0439\u0442\u0435", "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e", "\u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a\u043e\u0432", "\u0432", "\u043a\u0430\u0436\u0434\u043e\u043c", "\u0433\u043e\u0440\u043e\u0434\u0435", "."]}, "query_toks": {"en": ["select", "count", "(", "*", ")", ",", "city", "from", "employee", "group", "by", "city", ";"], "ru": ["select", "count", "(", "*", ")", ",", "city", "from", "employee", "group", "by", "city", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "*", ")", ",", "city", "from", "employee", "group", "by", "city", ";"], "ru": ["select", "count", "(", "*", ")", ",", "city", "from", "employee", "group", "by", "city", ";"]}, "masked_query": "SELECT count(*) ,  city FROM employee GROUP BY city;", "question_pauq": {"ru": "\u041f\u043e\u0434\u0441\u0447\u0438\u0442\u0430\u0439\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a\u043e\u0432 \u0432 \u043a\u0430\u0436\u0434\u043e\u043c \u0433\u043e\u0440\u043e\u0434\u0435."}, "question": "Count the number of employees for each city.", "kb_id": "employee_hire_evaluation"}, {"id": "D_0266", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 4, false], null]]]], "where": [[false, 4, [0, [0, 3, false], null], 30.0, null]], "groupBy": [[0, 4, false]], "having": [[false, 3, [0, [3, 0, false], null], 1.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 4, false], null]]]], "where": [[false, 4, [0, [0, 3, false], null], 30.0, null]], "groupBy": [[0, 4, false]], "having": [[false, 3, [0, [3, 0, false], null], 1.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Which", "cities", "do", "more", "than", "one", "employee", "under", "age", "30", "come", "from", "?"], "ru": ["\u0418\u0437", "\u043a\u0430\u043a\u0438\u0445", "\u0433\u043e\u0440\u043e\u0434\u043e\u0432", "\u043f\u0440\u0438\u0435\u0437\u0436\u0430\u0435\u0442", "\u0431\u043e\u043b\u0435\u0435", "\u043e\u0434\u043d\u043e\u0433\u043e", "\u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a\u0430", "\u0432", "\u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0435", "\u0434\u043e", "30", "\u043b\u0435\u0442", "?"]}, "query_toks": {"en": ["select", "city", "from", "employee", "where", "age", "<", "30", "group", "by", "city", "having", "count", "(", "*", ")", ">", "1", ";"], "ru": ["select", "city", "from", "employee", "where", "age", "<", "30", "group", "by", "city", "having", "count", "(", "*", ")", ">", "1", ";"]}, "query_toks_no_values": {"en": ["select", "city", "from", "employee", "where", "age", "<", "30", "group", "by", "city", "having", "count", "(", "*", ")", ">", "1", ";"], "ru": ["select", "city", "from", "employee", "where", "age", "<", "30", "group", "by", "city", "having", "count", "(", "*", ")", ">", "1", ";"]}, "masked_query": "SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1;", "question_pauq": {"ru": "\u0418\u0437 \u043a\u0430\u043a\u0438\u0445 \u0433\u043e\u0440\u043e\u0434\u043e\u0432 \u043f\u0440\u0438\u0435\u0437\u0436\u0430\u0435\u0442 \u0431\u043e\u043b\u0435\u0435 \u043e\u0434\u043d\u043e\u0433\u043e \u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a\u0430 \u0432 \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0435 \u0434\u043e 30 \u043b\u0435\u0442?"}, "question": "Which cities do more than one employee under age 30 come from?", "kb_id": "employee_hire_evaluation"}, {"id": "D_0267", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 4, false], null]]]], "where": [[false, 4, [0, [0, 3, false], null], 30.0, null]], "groupBy": [[0, 4, false]], "having": [[false, 3, [0, [3, 0, false], null], 1.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 4, false], null]]]], "where": [[false, 4, [0, [0, 3, false], null], 30.0, null]], "groupBy": [[0, 4, false]], "having": [[false, 3, [0, [3, 0, false], null], 1.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Find", "the", "cities", "that", "have", "more", "than", "one", "employee", "under", "age", "30", "."], "ru": ["\u041d\u0430\u0439\u0434\u0438\u0442\u0435", "\u0433\u043e\u0440\u043e\u0434\u0430", ",", "\u0432", "\u043a\u043e\u0442\u043e\u0440\u044b\u0445", "\u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442", "\u0431\u043e\u043b\u0435\u0435", "\u043e\u0434\u043d\u043e\u0433\u043e", "\u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a\u0430", "\u043c\u043b\u0430\u0434\u0448\u0435", "30", "\u043b\u0435\u0442", "."]}, "query_toks": {"en": ["select", "city", "from", "employee", "where", "age", "<", "30", "group", "by", "city", "having", "count", "(", "*", ")", ">", "1", ";"], "ru": ["select", "city", "from", "employee", "where", "age", "<", "30", "group", "by", "city", "having", "count", "(", "*", ")", ">", "1", ";"]}, "query_toks_no_values": {"en": ["select", "city", "from", "employee", "where", "age", "<", "30", "group", "by", "city", "having", "count", "(", "*", ")", ">", "1", ";"], "ru": ["select", "city", "from", "employee", "where", "age", "<", "30", "group", "by", "city", "having", "count", "(", "*", ")", ">", "1", ";"]}, "masked_query": "SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1;", "question_pauq": {"ru": "\u041d\u0430\u0439\u0434\u0438\u0442\u0435 \u0433\u043e\u0440\u043e\u0434\u0430, \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u0431\u043e\u043b\u0435\u0435 \u043e\u0434\u043d\u043e\u0433\u043e \u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a\u0430 \u043c\u043b\u0430\u0434\u0448\u0435 30 \u043b\u0435\u0442."}, "question": "Find the cities that have more than one employee under age 30.", "kb_id": "employee_hire_evaluation"}, {"id": "D_0268", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]], [0, [0, [0, 7, false], null]]]], "where": [], "groupBy": [[0, 7, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]], [0, [0, [0, 7, false], null]]]], "where": [], "groupBy": [[0, 7, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Find", "the", "number", "of", "shops", "in", "each", "location", "."], "ru": ["\u041d\u0430\u0439\u0434\u0438\u0442\u0435", "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e", "\u043c\u0430\u0433\u0430\u0437\u0438\u043d\u043e\u0432", "\u0432", "\u043a\u0430\u0436\u0434\u043e\u043c", "\u043c\u0435\u0441\u0442\u0435", "."]}, "query_toks": {"en": ["select", "count", "(", "*", ")", ",", "location", "from", "shop", "group", "by", "location", ";"], "ru": ["select", "count", "(", "*", ")", ",", "location", "from", "shop", "group", "by", "location", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "*", ")", ",", "location", "from", "shop", "group", "by", "location", ";"], "ru": ["select", "count", "(", "*", ")", ",", "location", "from", "shop", "group", "by", "location", ";"]}, "masked_query": "SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION;", "question_pauq": {"ru": "\u041d\u0430\u0439\u0434\u0438\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0430\u0433\u0430\u0437\u0438\u043d\u043e\u0432 \u0432 \u043a\u0430\u0436\u0434\u043e\u043c \u043c\u0435\u0441\u0442\u0435."}, "question": "Find the number of shops in each location.", "kb_id": "employee_hire_evaluation"}, {"id": "D_0269", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]], [0, [0, [0, 7, false], null]]]], "where": [], "groupBy": [[0, 7, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]], [0, [0, [0, 7, false], null]]]], "where": [], "groupBy": [[0, 7, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["How", "many", "shops", "are", "there", "in", "each", "location", "?"], "ru": ["\u0421\u043a\u043e\u043b\u044c\u043a\u043e", "\u043c\u0430\u0433\u0430\u0437\u0438\u043d\u043e\u0432", "\u0432", "\u043a\u0430\u0436\u0434\u043e\u043c", "\u043c\u0435\u0441\u0442\u0435", "?"]}, "query_toks": {"en": ["select", "count", "(", "*", ")", ",", "location", "from", "shop", "group", "by", "location", ";"], "ru": ["select", "count", "(", "*", ")", ",", "location", "from", "shop", "group", "by", "location", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "*", ")", ",", "location", "from", "shop", "group", "by", "location", ";"], "ru": ["select", "count", "(", "*", ")", ",", "location", "from", "shop", "group", "by", "location", ";"]}, "masked_query": "SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION;", "question_pauq": {"ru": "\u0421\u043a\u043e\u043b\u044c\u043a\u043e \u043c\u0430\u0433\u0430\u0437\u0438\u043d\u043e\u0432 \u0432 \u043a\u0430\u0436\u0434\u043e\u043c \u043c\u0435\u0441\u0442\u0435?"}, "question": "How many shops are there in each location?", "kb_id": "employee_hire_evaluation"}, {"id": "D_0270", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 10, false], null]], [0, [0, [0, 8, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 9, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 10, false], null]], [0, [0, [0, 8, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 9, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Find", "the", "manager", "name", "and", "district", "of", "the", "shop", "whose", "number", "of", "products", "is", "the", "largest", "."], "ru": ["\u041d\u0430\u0439\u0434\u0438\u0442\u0435", "\u0438\u043c\u044f", "\u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440\u0430", "\u0438", "\u0440\u0430\u0439\u043e\u043d", "\u043c\u0430\u0433\u0430\u0437\u0438\u043d\u0430", ",", "\u0432", "\u043a\u043e\u0442\u043e\u0440\u043e\u043c", "\u0431\u043e\u043b\u044c\u0448\u0435", "\u0432\u0441\u0435\u0433\u043e", "\u0442\u043e\u0432\u0430\u0440\u043e\u0432", "."]}, "query_toks": {"en": ["select", "manager_name", ",", "district", "from", "shop", "order", "by", "number_products", "desc", "limit", "1", ";"], "ru": ["select", "manager_name", ",", "district", "from", "shop", "order", "by", "number_products", "desc", "limit", "1", ";"]}, "query_toks_no_values": {"en": ["select", "manager_name", ",", "district", "from", "shop", "order", "by", "number_products", "desc", "limit", "1", ";"], "ru": ["select", "manager_name", ",", "district", "from", "shop", "order", "by", "number_products", "desc", "limit", "1", ";"]}, "masked_query": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1;", "question_pauq": {"ru": "\u041d\u0430\u0439\u0434\u0438\u0442\u0435 \u0438\u043c\u044f \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440\u0430 \u0438 \u0440\u0430\u0439\u043e\u043d \u043c\u0430\u0433\u0430\u0437\u0438\u043d\u0430, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u0431\u043e\u043b\u044c\u0448\u0435 \u0432\u0441\u0435\u0433\u043e \u0442\u043e\u0432\u0430\u0440\u043e\u0432."}, "question": "Find the manager name and district of the shop whose number of products is the largest.", "kb_id": "employee_hire_evaluation"}, {"id": "D_0271", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 10, false], null]], [0, [0, [0, 8, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 9, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 10, false], null]], [0, [0, [0, 8, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 9, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "the", "manager", "name", "and", "district", "of", "the", "shop", "that", "sells", "the", "largest", "number", "of", "products", "?"], "ru": ["\u041a\u0430\u043a", "\u0437\u043e\u0432\u0443\u0442", "\u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440\u0430", "\u0438", "\u043a\u0430\u043a\u043e\u0439", "\u0440\u0430\u0439\u043e\u043d", "\u0443", "\u043c\u0430\u0433\u0430\u0437\u0438\u043d\u0430", ",", "\u0432", "\u043a\u043e\u0442\u043e\u0440\u043e\u043c", "\u043f\u0440\u043e\u0434\u0430\u0435\u0442\u0441\u044f", "\u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0435\u0435", "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e", "\u0442\u043e\u0432\u0430\u0440\u043e\u0432", "?"]}, "query_toks": {"en": ["select", "manager_name", ",", "district", "from", "shop", "order", "by", "number_products", "desc", "limit", "1", ";"], "ru": ["select", "manager_name", ",", "district", "from", "shop", "order", "by", "number_products", "desc", "limit", "1", ";"]}, "query_toks_no_values": {"en": ["select", "manager_name", ",", "district", "from", "shop", "order", "by", "number_products", "desc", "limit", "1", ";"], "ru": ["select", "manager_name", ",", "district", "from", "shop", "order", "by", "number_products", "desc", "limit", "1", ";"]}, "masked_query": "SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1;", "question_pauq": {"ru": "\u041a\u0430\u043a \u0437\u043e\u0432\u0443\u0442 \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440\u0430 \u0438 \u043a\u0430\u043a\u043e\u0439 \u0440\u0430\u0439\u043e\u043d \u0443 \u043c\u0430\u0433\u0430\u0437\u0438\u043d\u0430, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u043f\u0440\u043e\u0434\u0430\u0435\u0442\u0441\u044f \u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0442\u043e\u0432\u0430\u0440\u043e\u0432?"}, "question": "What are the manager name and district of the shop that sells the largest number of products?", "kb_id": "employee_hire_evaluation"}, {"id": "D_0272", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT min(Number_products) ,  max(Number_products) FROM shop;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[2, [0, [0, 9, false], null]], [1, [0, [0, 9, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[2, [0, [0, 9, false], null]], [1, [0, [0, 9, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["find", "the", "minimum", "and", "maximum", "number", "of", "products", "of", "all", "stores", "."], "ru": ["\u043d\u0430\u0439\u0442\u0438", "\u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435", "\u0438", "\u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435", "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e", "\u0442\u043e\u0432\u0430\u0440\u043e\u0432", "\u0432\u043e", "\u0432\u0441\u0435\u0445", "\u043c\u0430\u0433\u0430\u0437\u0438\u043d\u0430\u0445", "."]}, "query_toks": {"en": ["select", "min", "(", "number_products", ")", ",", "max", "(", "number_products", ")", "from", "shop", ";"], "ru": ["select", "min", "(", "number_products", ")", ",", "max", "(", "number_products", ")", "from", "shop", ";"]}, "query_toks_no_values": {"en": ["select", "min", "(", "number_products", ")", ",", "max", "(", "number_products", ")", "from", "shop", ";"], "ru": ["select", "min", "(", "number_products", ")", ",", "max", "(", "number_products", ")", "from", "shop", ";"]}, "masked_query": "SELECT min(Number_products) ,  max(Number_products) FROM shop;", "question_pauq": {"ru": "\u043d\u0430\u0439\u0442\u0438 \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0438 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0442\u043e\u0432\u0430\u0440\u043e\u0432 \u0432\u043e \u0432\u0441\u0435\u0445 \u043c\u0430\u0433\u0430\u0437\u0438\u043d\u0430\u0445."}, "question": "find the minimum and maximum number of products of all stores.", "kb_id": "employee_hire_evaluation"}, {"id": "D_0273", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT min(Number_products) ,  max(Number_products) FROM shop;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[2, [0, [0, 9, false], null]], [1, [0, [0, 9, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[2, [0, [0, 9, false], null]], [1, [0, [0, 9, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "the", "minimum", "and", "maximum", "number", "of", "products", "across", "all", "the", "shops", "?"], "ru": ["\u041a\u0430\u043a\u043e\u0435", "\u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435", "\u0438", "\u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435", "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e", "\u0442\u043e\u0432\u0430\u0440\u043e\u0432", "\u0432\u043e", "\u0432\u0441\u0435\u0445", "\u043c\u0430\u0433\u0430\u0437\u0438\u043d\u0430\u0445", "?"]}, "query_toks": {"en": ["select", "min", "(", "number_products", ")", ",", "max", "(", "number_products", ")", "from", "shop", ";"], "ru": ["select", "min", "(", "number_products", ")", ",", "max", "(", "number_products", ")", "from", "shop", ";"]}, "query_toks_no_values": {"en": ["select", "min", "(", "number_products", ")", ",", "max", "(", "number_products", ")", "from", "shop", ";"], "ru": ["select", "min", "(", "number_products", ")", ",", "max", "(", "number_products", ")", "from", "shop", ";"]}, "masked_query": "SELECT min(Number_products) ,  max(Number_products) FROM shop;", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0435 \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0438 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0442\u043e\u0432\u0430\u0440\u043e\u0432 \u0432\u043e \u0432\u0441\u0435\u0445 \u043c\u0430\u0433\u0430\u0437\u0438\u043d\u0430\u0445?"}, "question": "What are the minimum and maximum number of products across all the shops?", "kb_id": "employee_hire_evaluation"}, {"id": "D_0274", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 6, false], null]], [0, [0, [0, 7, false], null]], [0, [0, [0, 8, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 9, false], null]]], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 6, false], null]], [0, [0, [0, 7, false], null]], [0, [0, [0, 8, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 9, false], null]]], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Return", "the", "name", ",", "location", "and", "district", "of", "all", "shops", "in", "descending", "order", "of", "number", "of", "products", "."], "ru": ["\u041f\u043e\u043a\u0430\u0436\u0438", "\u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435", ",", "\u043c\u0435\u0441\u0442\u043e\u043d\u0430\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u0435", "\u0438", "\u0440\u0430\u0439\u043e\u043d", "\u0432\u0441\u0435\u0445", "\u043c\u0430\u0433\u0430\u0437\u0438\u043d\u043e\u0432", "\u0432", "\u043f\u043e\u0440\u044f\u0434\u043a\u0435", "\u0443\u0431\u044b\u0432\u0430\u043d\u0438\u044f", "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430", "\u0442\u043e\u0432\u0430\u0440\u043e\u0432", "."]}, "query_toks": {"en": ["select", "name", ",", "location", ",", "district", "from", "shop", "order", "by", "number_products", "desc", ";"], "ru": ["select", "name", ",", "location", ",", "district", "from", "shop", "order", "by", "number_products", "desc", ";"]}, "query_toks_no_values": {"en": ["select", "name", ",", "location", ",", "district", "from", "shop", "order", "by", "number_products", "desc", ";"], "ru": ["select", "name", ",", "location", ",", "district", "from", "shop", "order", "by", "number_products", "desc", ";"]}, "masked_query": "SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC;", "question_pauq": {"ru": "\u041f\u043e\u043a\u0430\u0436\u0438 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435, \u043c\u0435\u0441\u0442\u043e\u043d\u0430\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u0435 \u0438 \u0440\u0430\u0439\u043e\u043d \u0432\u0441\u0435\u0445 \u043c\u0430\u0433\u0430\u0437\u0438\u043d\u043e\u0432 \u0432 \u043f\u043e\u0440\u044f\u0434\u043a\u0435 \u0443\u0431\u044b\u0432\u0430\u043d\u0438\u044f \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0442\u043e\u0432\u0430\u0440\u043e\u0432."}, "question": "Return the name, location and district of all shops in descending order of number of products.", "kb_id": "employee_hire_evaluation"}, {"id": "D_0275", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 6, false], null]], [0, [0, [0, 7, false], null]], [0, [0, [0, 8, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 9, false], null]]], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 6, false], null]], [0, [0, [0, 7, false], null]], [0, [0, [0, 8, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 9, false], null]]], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Sort", "all", "the", "shops", "by", "number", "products", "in", "descending", "order", ",", "and", "return", "the", "name", ",", "location", "and", "district", "of", "each", "shop", "."], "ru": ["\u041e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u0443\u0439", "\u0432\u0441\u0435", "\u043c\u0430\u0433\u0430\u0437\u0438\u043d\u044b", "\u043f\u043e", "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0443", "\u0442\u043e\u0432\u0430\u0440\u043e\u0432", "\u0432", "\u043f\u043e\u0440\u044f\u0434\u043a\u0435", "\u0443\u0431\u044b\u0432\u0430\u043d\u0438\u044f", "\u0438", "\u043f\u043e\u043a\u0430\u0436\u0438", "\u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435", ",", "\u043c\u0435\u0441\u0442\u043e\u043d\u0430\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u0435", "\u0438", "\u0440\u0430\u0439\u043e\u043d", "\u043a\u0430\u0436\u0434\u043e\u0433\u043e", "\u043c\u0430\u0433\u0430\u0437\u0438\u043d\u0430", "."]}, "query_toks": {"en": ["select", "name", ",", "location", ",", "district", "from", "shop", "order", "by", "number_products", "desc", ";"], "ru": ["select", "name", ",", "location", ",", "district", "from", "shop", "order", "by", "number_products", "desc", ";"]}, "query_toks_no_values": {"en": ["select", "name", ",", "location", ",", "district", "from", "shop", "order", "by", "number_products", "desc", ";"], "ru": ["select", "name", ",", "location", ",", "district", "from", "shop", "order", "by", "number_products", "desc", ";"]}, "masked_query": "SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC;", "question_pauq": {"ru": "\u041e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u0443\u0439 \u0432\u0441\u0435 \u043c\u0430\u0433\u0430\u0437\u0438\u043d\u044b \u043f\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0443 \u0442\u043e\u0432\u0430\u0440\u043e\u0432 \u0432 \u043f\u043e\u0440\u044f\u0434\u043a\u0435 \u0443\u0431\u044b\u0432\u0430\u043d\u0438\u044f \u0438 \u043f\u043e\u043a\u0430\u0436\u0438 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435, \u043c\u0435\u0441\u0442\u043e\u043d\u0430\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u0435 \u0438 \u0440\u0430\u0439\u043e\u043d \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043c\u0430\u0433\u0430\u0437\u0438\u043d\u0430."}, "question": "Sort all the shops by number products in descending order, and return the name, location and district of each shop.", "kb_id": "employee_hire_evaluation"}, {"id": "D_0276", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop);"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 6, false], null]]]], "where": [[false, 3, [0, [0, 9, false], null], {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[5, [0, [0, 9, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 6, false], null]]]], "where": [[false, 3, [0, [0, 9, false], null], {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[5, [0, [0, 9, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Find", "the", "names", "of", "stores", "whose", "number", "products", "is", "more", "than", "the", "average", "number", "of", "products", "."], "ru": ["\u041d\u0430\u0439\u0442\u0438", "\u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f", "\u043c\u0430\u0433\u0430\u0437\u0438\u043d\u043e\u0432", ",", "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e", "\u0442\u043e\u0432\u0430\u0440\u043e\u0432", "\u043a\u043e\u0442\u043e\u0440\u044b\u0445", "\u043f\u0440\u0435\u0432\u044b\u0448\u0430\u0435\u0442", "\u0441\u0440\u0435\u0434\u043d\u0435\u0435", "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e", "\u0442\u043e\u0432\u0430\u0440\u043e\u0432", "."]}, "query_toks": {"en": ["select", "name", "from", "shop", "where", "number_products", ">", "(", "select", "avg", "(", "number_products", ")", "from", "shop", ")", ";"], "ru": ["select", "name", "from", "shop", "where", "number_products", ">", "(", "select", "avg", "(", "number_products", ")", "from", "shop", ")", ";"]}, "query_toks_no_values": {"en": ["select", "name", "from", "shop", "where", "number_products", ">", "(", "select", "avg", "(", "number_products", ")", "from", "shop", ")", ";"], "ru": ["select", "name", "from", "shop", "where", "number_products", ">", "(", "select", "avg", "(", "number_products", ")", "from", "shop", ")", ";"]}, "masked_query": "SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop);", "question_pauq": {"ru": "\u041d\u0430\u0439\u0442\u0438 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f \u043c\u0430\u0433\u0430\u0437\u0438\u043d\u043e\u0432, \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0442\u043e\u0432\u0430\u0440\u043e\u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043f\u0440\u0435\u0432\u044b\u0448\u0430\u0435\u0442 \u0441\u0440\u0435\u0434\u043d\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0442\u043e\u0432\u0430\u0440\u043e\u0432."}, "question": "Find the names of stores whose number products is more than the average number of products.", "kb_id": "employee_hire_evaluation"}, {"id": "D_0277", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop);"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 6, false], null]]]], "where": [[false, 3, [0, [0, 9, false], null], {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[5, [0, [0, 9, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 6, false], null]]]], "where": [[false, 3, [0, [0, 9, false], null], {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[5, [0, [0, 9, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Which", "shops", "'", "number", "products", "is", "above", "the", "average", "?", "Give", "me", "the", "shop", "names", "."], "ru": ["\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e", "\u0442\u043e\u0432\u0430\u0440\u043e\u0432", "\u0432", "\u043a\u0430\u043a\u0438\u0445", "\u043c\u0430\u0433\u0430\u0437\u0438\u043d\u0430\u0445", "\u0432\u044b\u0448\u0435", "\u0441\u0440\u0435\u0434\u043d\u0435\u0433\u043e", "?", "\u041e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u0442\u044c", "\u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f", "\u043c\u0430\u0433\u0430\u0437\u0438\u043d\u043e\u0432", "."]}, "query_toks": {"en": ["select", "name", "from", "shop", "where", "number_products", ">", "(", "select", "avg", "(", "number_products", ")", "from", "shop", ")", ";"], "ru": ["select", "name", "from", "shop", "where", "number_products", ">", "(", "select", "avg", "(", "number_products", ")", "from", "shop", ")", ";"]}, "query_toks_no_values": {"en": ["select", "name", "from", "shop", "where", "number_products", ">", "(", "select", "avg", "(", "number_products", ")", "from", "shop", ")", ";"], "ru": ["select", "name", "from", "shop", "where", "number_products", ">", "(", "select", "avg", "(", "number_products", ")", "from", "shop", ")", ";"]}, "masked_query": "SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop);", "question_pauq": {"ru": "\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0442\u043e\u0432\u0430\u0440\u043e\u0432 \u0432 \u043a\u0430\u043a\u0438\u0445 \u043c\u0430\u0433\u0430\u0437\u0438\u043d\u0430\u0445 \u0432\u044b\u0448\u0435 \u0441\u0440\u0435\u0434\u043d\u0435\u0433\u043e? \u041e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u0442\u044c \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f \u043c\u0430\u0433\u0430\u0437\u0438\u043d\u043e\u0432."}, "question": "Which shops' number products is above the average? Give me the shop names.", "kb_id": "employee_hire_evaluation"}, {"id": "D_0278", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 15, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [], "groupBy": [[0, 15, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 15, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [], "groupBy": [[0, 15, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["find", "the", "name", "of", "employee", "who", "was", "awarded", "the", "most", "times", "in", "the", "evaluation", "."], "ru": ["\u043d\u0430\u0439\u0434\u0438\u0442\u0435", "\u0438\u043c\u044f", "\u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a\u0430", ",", "\u043a\u043e\u0442\u043e\u0440\u044b\u0439", "\u043f\u043e\u043b\u0443\u0447\u0438\u043b", "\u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0435\u0435", "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e", "\u043d\u0430\u0433\u0440\u0430\u0434", "\u043f\u0440\u0438", "\u043e\u0446\u0435\u043d\u043a\u0435", "."]}, "query_toks": {"en": ["select", "t1.name", "from", "employee", "as", "t1", "join", "evaluation", "as", "t2", "on", "t1.employee_id", "=", "t2.employee_id", "group", "by", "t2.employee_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"], "ru": ["select", "t1.name", "from", "employee", "as", "t1", "join", "evaluation", "as", "t2", "on", "t1.employee_id", "=", "t2.employee_id", "group", "by", "t2.employee_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"]}, "query_toks_no_values": {"en": ["select", "t1.name", "from", "employee", "as", "t1", "join", "evaluation", "as", "t2", "on", "t1.employee_id", "=", "t2.employee_id", "group", "by", "t2.employee_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"], "ru": ["select", "t1.name", "from", "employee", "as", "t1", "join", "evaluation", "as", "t2", "on", "t1.employee_id", "=", "t2.employee_id", "group", "by", "t2.employee_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"]}, "masked_query": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1;", "question_pauq": {"ru": "\u043d\u0430\u0439\u0434\u0438\u0442\u0435 \u0438\u043c\u044f \u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u043e\u043b\u0443\u0447\u0438\u043b \u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043d\u0430\u0433\u0440\u0430\u0434 \u043f\u0440\u0438 \u043e\u0446\u0435\u043d\u043a\u0435."}, "question": "find the name of employee who was awarded the most times in the evaluation.", "kb_id": "employee_hire_evaluation"}, {"id": "D_0279", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 15, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [], "groupBy": [[0, 15, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 15, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [], "groupBy": [[0, 15, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Which", "employee", "received", "the", "most", "awards", "in", "evaluations", "?", "Give", "me", "the", "employee", "name", "."], "ru": ["\u041a\u0430\u043a\u043e\u0439", "\u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a", "\u043f\u043e\u043b\u0443\u0447\u0438\u043b", "\u0431\u043e\u043b\u044c\u0448\u0435", "\u0432\u0441\u0435\u0433\u043e", "\u043d\u0430\u0433\u0440\u0430\u0434", "\u0432", "\u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0435", "\u043e\u0446\u0435\u043d\u043a\u0438", "?", "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c", "\u0438\u043c\u044f", "\u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a\u0430", "."]}, "query_toks": {"en": ["select", "t1.name", "from", "employee", "as", "t1", "join", "evaluation", "as", "t2", "on", "t1.employee_id", "=", "t2.employee_id", "group", "by", "t2.employee_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"], "ru": ["select", "t1.name", "from", "employee", "as", "t1", "join", "evaluation", "as", "t2", "on", "t1.employee_id", "=", "t2.employee_id", "group", "by", "t2.employee_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"]}, "query_toks_no_values": {"en": ["select", "t1.name", "from", "employee", "as", "t1", "join", "evaluation", "as", "t2", "on", "t1.employee_id", "=", "t2.employee_id", "group", "by", "t2.employee_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"], "ru": ["select", "t1.name", "from", "employee", "as", "t1", "join", "evaluation", "as", "t2", "on", "t1.employee_id", "=", "t2.employee_id", "group", "by", "t2.employee_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"]}, "masked_query": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1;", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0439 \u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a \u043f\u043e\u043b\u0443\u0447\u0438\u043b \u0431\u043e\u043b\u044c\u0448\u0435 \u0432\u0441\u0435\u0433\u043e \u043d\u0430\u0433\u0440\u0430\u0434 \u0432 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0435 \u043e\u0446\u0435\u043d\u043a\u0438? \u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0438\u043c\u044f \u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a\u0430."}, "question": "Which employee received the most awards in evaluations? Give me the employee name.", "kb_id": "employee_hire_evaluation"}, {"id": "D_0280", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 15, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 17, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 15, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 17, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Find", "the", "name", "of", "the", "employee", "who", "got", "the", "highest", "one", "time", "bonus", "."], "ru": ["\u041d\u0430\u0439\u0434\u0438\u0442\u0435", "\u0438\u043c\u044f", "\u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a\u0430", ",", "\u043f\u043e\u043b\u0443\u0447\u0438\u0432\u0448\u0435\u0433\u043e", "\u0441\u0430\u043c\u044b\u0439", "\u0432\u044b\u0441\u043e\u043a\u0438\u0439", "\u0440\u0430\u0437\u043e\u0432\u044b\u0439", "\u0431\u043e\u043d\u0443\u0441", "."]}, "query_toks": {"en": ["select", "t1.name", "from", "employee", "as", "t1", "join", "evaluation", "as", "t2", "on", "t1.employee_id", "=", "t2.employee_id", "order", "by", "t2.bonus", "desc", "limit", "1", ";"], "ru": ["select", "t1.name", "from", "employee", "as", "t1", "join", "evaluation", "as", "t2", "on", "t1.employee_id", "=", "t2.employee_id", "order", "by", "t2.bonus", "desc", "limit", "1", ";"]}, "query_toks_no_values": {"en": ["select", "t1.name", "from", "employee", "as", "t1", "join", "evaluation", "as", "t2", "on", "t1.employee_id", "=", "t2.employee_id", "order", "by", "t2.bonus", "desc", "limit", "1", ";"], "ru": ["select", "t1.name", "from", "employee", "as", "t1", "join", "evaluation", "as", "t2", "on", "t1.employee_id", "=", "t2.employee_id", "order", "by", "t2.bonus", "desc", "limit", "1", ";"]}, "masked_query": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1;", "question_pauq": {"ru": "\u041d\u0430\u0439\u0434\u0438\u0442\u0435 \u0438\u043c\u044f \u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a\u0430, \u043f\u043e\u043b\u0443\u0447\u0438\u0432\u0448\u0435\u0433\u043e \u0441\u0430\u043c\u044b\u0439 \u0432\u044b\u0441\u043e\u043a\u0438\u0439 \u0440\u0430\u0437\u043e\u0432\u044b\u0439 \u0431\u043e\u043d\u0443\u0441."}, "question": "Find the name of the employee who got the highest one time bonus.", "kb_id": "employee_hire_evaluation"}, {"id": "D_0281", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 15, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 17, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 15, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 17, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Which", "employee", "received", "the", "biggest", "bonus", "?", "Give", "me", "the", "employee", "name", "."], "ru": ["\u041a\u0430\u043a\u043e\u0439", "\u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a", "\u043f\u043e\u043b\u0443\u0447\u0438\u043b", "\u0441\u0430\u043c\u044b\u0439", "\u0431\u043e\u043b\u044c\u0448\u043e\u0439", "\u0431\u043e\u043d\u0443\u0441", "?", "\u0418\u043c\u044f", "\u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a\u0430", "."]}, "query_toks": {"en": ["select", "t1.name", "from", "employee", "as", "t1", "join", "evaluation", "as", "t2", "on", "t1.employee_id", "=", "t2.employee_id", "order", "by", "t2.bonus", "desc", "limit", "1", ";"], "ru": ["select", "t1.name", "from", "employee", "as", "t1", "join", "evaluation", "as", "t2", "on", "t1.employee_id", "=", "t2.employee_id", "order", "by", "t2.bonus", "desc", "limit", "1", ";"]}, "query_toks_no_values": {"en": ["select", "t1.name", "from", "employee", "as", "t1", "join", "evaluation", "as", "t2", "on", "t1.employee_id", "=", "t2.employee_id", "order", "by", "t2.bonus", "desc", "limit", "1", ";"], "ru": ["select", "t1.name", "from", "employee", "as", "t1", "join", "evaluation", "as", "t2", "on", "t1.employee_id", "=", "t2.employee_id", "order", "by", "t2.bonus", "desc", "limit", "1", ";"]}, "masked_query": "SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1;", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0439 \u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a \u043f\u043e\u043b\u0443\u0447\u0438\u043b \u0441\u0430\u043c\u044b\u0439 \u0431\u043e\u043b\u044c\u0448\u043e\u0439 \u0431\u043e\u043d\u0443\u0441? \u0418\u043c\u044f \u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a\u0430."}, "question": "Which employee received the biggest bonus? Give me the employee name.", "kb_id": "employee_hire_evaluation"}, {"id": "D_0282", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation);"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [[true, 8, [0, [0, 1, false], null], {"from": {"table_units": [["table_unit", 3]], "conds": []}, "select": [false, [[0, [0, [0, 15, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [[true, 8, [0, [0, 1, false], null], {"from": {"table_units": [["table_unit", 3]], "conds": []}, "select": [false, [[0, [0, [0, 15, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Find", "the", "names", "of", "employees", "who", "never", "won", "any", "award", "in", "the", "evaluation", "."], "ru": ["\u0418\u043c\u0435\u043d\u0430", "\u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a\u043e\u0432", ",", "\u043a\u043e\u0442\u043e\u0440\u044b\u0435", "\u043d\u0438\u043a\u043e\u0433\u0434\u0430", "\u043d\u0435", "\u043f\u043e\u043b\u0443\u0447\u0430\u043b\u0438", "\u043d\u0430\u0433\u0440\u0430\u0434\u044b", "\u0432", "\u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0435", "\u043e\u0446\u0435\u043d\u043a\u0438", "\u043f\u0435\u0440\u0441\u043e\u043d\u0430\u043b\u0430", "."]}, "query_toks": {"en": ["select", "name", "from", "employee", "where", "employee_id", "not", "in", "(", "select", "employee_id", "from", "evaluation", ")", ";"], "ru": ["select", "name", "from", "employee", "where", "employee_id", "not", "in", "(", "select", "employee_id", "from", "evaluation", ")", ";"]}, "query_toks_no_values": {"en": ["select", "name", "from", "employee", "where", "employee_id", "not", "in", "(", "select", "employee_id", "from", "evaluation", ")", ";"], "ru": ["select", "name", "from", "employee", "where", "employee_id", "not", "in", "(", "select", "employee_id", "from", "evaluation", ")", ";"]}, "masked_query": "SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation);", "question_pauq": {"ru": "\u0418\u043c\u0435\u043d\u0430 \u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0438\u043a\u043e\u0433\u0434\u0430 \u043d\u0435 \u043f\u043e\u043b\u0443\u0447\u0430\u043b\u0438 \u043d\u0430\u0433\u0440\u0430\u0434\u044b \u0432 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0435 \u043e\u0446\u0435\u043d\u043a\u0438 \u043f\u0435\u0440\u0441\u043e\u043d\u0430\u043b\u0430."}, "question": "Find the names of employees who never won any award in the evaluation.", "kb_id": "employee_hire_evaluation"}, {"id": "D_0283", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation);"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [[true, 8, [0, [0, 1, false], null], {"from": {"table_units": [["table_unit", 3]], "conds": []}, "select": [false, [[0, [0, [0, 15, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [[true, 8, [0, [0, 1, false], null], {"from": {"table_units": [["table_unit", 3]], "conds": []}, "select": [false, [[0, [0, [0, 15, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "the", "names", "of", "the", "employees", "who", "never", "received", "any", "evaluation", "?"], "ru": ["\u041a\u0430\u043a", "\u0437\u043e\u0432\u0443\u0442", "\u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a\u043e\u0432", ",", "\u043a\u043e\u0442\u043e\u0440\u044b\u0435", "\u043d\u0438\u043a\u043e\u0433\u0434\u0430", "\u043d\u0435", "\u043f\u043e\u043b\u0443\u0447\u0430\u043b\u0438", "\u043e\u0446\u0435\u043d\u043e\u043a", "?"]}, "query_toks": {"en": ["select", "name", "from", "employee", "where", "employee_id", "not", "in", "(", "select", "employee_id", "from", "evaluation", ")", ";"], "ru": ["select", "name", "from", "employee", "where", "employee_id", "not", "in", "(", "select", "employee_id", "from", "evaluation", ")", ";"]}, "query_toks_no_values": {"en": ["select", "name", "from", "employee", "where", "employee_id", "not", "in", "(", "select", "employee_id", "from", "evaluation", ")", ";"], "ru": ["select", "name", "from", "employee", "where", "employee_id", "not", "in", "(", "select", "employee_id", "from", "evaluation", ")", ";"]}, "masked_query": "SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation);", "question_pauq": {"ru": "\u041a\u0430\u043a \u0437\u043e\u0432\u0443\u0442 \u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0438\u043a\u043e\u0433\u0434\u0430 \u043d\u0435 \u043f\u043e\u043b\u0443\u0447\u0430\u043b\u0438 \u043e\u0446\u0435\u043d\u043e\u043a?"}, "question": "What are the names of the employees who never received any evaluation?", "kb_id": "employee_hire_evaluation"}, {"id": "D_0284", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 11, false], null], [0, 5, false], null]]}, "select": [false, [[0, [0, [0, 6, false], null]]]], "where": [], "groupBy": [[0, 11, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 11, false], null], [0, 5, false], null]]}, "select": [false, [[0, [0, [0, 6, false], null]]]], "where": [], "groupBy": [[0, 11, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "name", "of", "the", "shop", "that", "is", "hiring", "the", "largest", "number", "of", "employees", "?"], "ru": ["\u041a\u0430\u043a", "\u043d\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f", "\u043c\u0430\u0433\u0430\u0437\u0438\u043d", ",", "\u0432", "\u043a\u043e\u0442\u043e\u0440\u043e\u043c", "\u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442", "\u0431\u043e\u043b\u044c\u0448\u0435", "\u0432\u0441\u0435\u0433\u043e", "\u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a\u043e\u0432", "?"]}, "query_toks": {"en": ["select", "t2.name", "from", "hiring", "as", "t1", "join", "shop", "as", "t2", "on", "t1.shop_id", "=", "t2.shop_id", "group", "by", "t1.shop_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"], "ru": ["select", "t2.name", "from", "hiring", "as", "t1", "join", "shop", "as", "t2", "on", "t1.shop_id", "=", "t2.shop_id", "group", "by", "t1.shop_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"]}, "query_toks_no_values": {"en": ["select", "t2.name", "from", "hiring", "as", "t1", "join", "shop", "as", "t2", "on", "t1.shop_id", "=", "t2.shop_id", "group", "by", "t1.shop_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"], "ru": ["select", "t2.name", "from", "hiring", "as", "t1", "join", "shop", "as", "t2", "on", "t1.shop_id", "=", "t2.shop_id", "group", "by", "t1.shop_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"]}, "masked_query": "SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1;", "question_pauq": {"ru": "\u041a\u0430\u043a \u043d\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u043c\u0430\u0433\u0430\u0437\u0438\u043d, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u0431\u043e\u043b\u044c\u0448\u0435 \u0432\u0441\u0435\u0433\u043e \u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a\u043e\u0432?"}, "question": "What is the name of the shop that is hiring the largest number of employees?", "kb_id": "employee_hire_evaluation"}, {"id": "D_0285", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 11, false], null], [0, 5, false], null]]}, "select": [false, [[0, [0, [0, 6, false], null]]]], "where": [], "groupBy": [[0, 11, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 11, false], null], [0, 5, false], null]]}, "select": [false, [[0, [0, [0, 6, false], null]]]], "where": [], "groupBy": [[0, 11, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Which", "shop", "has", "the", "most", "employees", "?", "Give", "me", "the", "shop", "name", "."], "ru": ["\u0412", "\u043a\u0430\u043a\u043e\u043c", "\u043c\u0430\u0433\u0430\u0437\u0438\u043d\u0435", "\u0431\u043e\u043b\u044c\u0448\u0435", "\u0432\u0441\u0435\u0433\u043e", "\u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a\u043e\u0432", "?", "\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435", "\u043c\u0430\u0433\u0430\u0437\u0438\u043d\u0430", "."]}, "query_toks": {"en": ["select", "t2.name", "from", "hiring", "as", "t1", "join", "shop", "as", "t2", "on", "t1.shop_id", "=", "t2.shop_id", "group", "by", "t1.shop_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"], "ru": ["select", "t2.name", "from", "hiring", "as", "t1", "join", "shop", "as", "t2", "on", "t1.shop_id", "=", "t2.shop_id", "group", "by", "t1.shop_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"]}, "query_toks_no_values": {"en": ["select", "t2.name", "from", "hiring", "as", "t1", "join", "shop", "as", "t2", "on", "t1.shop_id", "=", "t2.shop_id", "group", "by", "t1.shop_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"], "ru": ["select", "t2.name", "from", "hiring", "as", "t1", "join", "shop", "as", "t2", "on", "t1.shop_id", "=", "t2.shop_id", "group", "by", "t1.shop_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"]}, "masked_query": "SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1;", "question_pauq": {"ru": "\u0412 \u043a\u0430\u043a\u043e\u043c \u043c\u0430\u0433\u0430\u0437\u0438\u043d\u0435 \u0431\u043e\u043b\u044c\u0448\u0435 \u0432\u0441\u0435\u0433\u043e \u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a\u043e\u0432? \u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043c\u0430\u0433\u0430\u0437\u0438\u043d\u0430."}, "question": "Which shop has the most employees? Give me the shop name.", "kb_id": "employee_hire_evaluation"}, {"id": "D_0286", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring);"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 6, false], null]]]], "where": [[true, 8, [0, [0, 5, false], null], {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 11, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 6, false], null]]]], "where": [[true, 8, [0, [0, 5, false], null], {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 11, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Find", "the", "name", "of", "the", "shops", "that", "do", "not", "hire", "any", "employee", "."], "ru": ["\u041d\u0430\u0439\u0442\u0438", "\u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f", "\u043c\u0430\u0433\u0430\u0437\u0438\u043d\u043e\u0432", ",", "\u0432", "\u043a\u043e\u0442\u043e\u0440\u044b\u0445", "\u043d\u0435\u0442", "\u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a\u043e\u0432", "."]}, "query_toks": {"en": ["select", "name", "from", "shop", "where", "shop_id", "not", "in", "(", "select", "shop_id", "from", "hiring", ")", ";"], "ru": ["select", "name", "from", "shop", "where", "shop_id", "not", "in", "(", "select", "shop_id", "from", "hiring", ")", ";"]}, "query_toks_no_values": {"en": ["select", "name", "from", "shop", "where", "shop_id", "not", "in", "(", "select", "shop_id", "from", "hiring", ")", ";"], "ru": ["select", "name", "from", "shop", "where", "shop_id", "not", "in", "(", "select", "shop_id", "from", "hiring", ")", ";"]}, "masked_query": "SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring);", "question_pauq": {"ru": "\u041d\u0430\u0439\u0442\u0438 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f \u043c\u0430\u0433\u0430\u0437\u0438\u043d\u043e\u0432, \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043d\u0435\u0442 \u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a\u043e\u0432."}, "question": "Find the name of the shops that do not hire any employee.", "kb_id": "employee_hire_evaluation"}, {"id": "D_0287", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring);"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 6, false], null]]]], "where": [[true, 8, [0, [0, 5, false], null], {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 11, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 6, false], null]]]], "where": [[true, 8, [0, [0, 5, false], null], {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 11, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Which", "shops", "run", "with", "no", "employees", "?", "Find", "the", "shop", "names"], "ru": ["\u041a\u0430\u043a\u0438\u0435", "\u043c\u0430\u0433\u0430\u0437\u0438\u043d\u044b", "\u0440\u0430\u0431\u043e\u0442\u0430\u044e\u0442", "\u0431\u0435\u0437", "\u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a\u043e\u0432", "?", "\u041d\u0430\u0439\u0434\u0438", "\u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f", "\u043c\u0430\u0433\u0430\u0437\u0438\u043d\u043e\u0432"]}, "query_toks": {"en": ["select", "name", "from", "shop", "where", "shop_id", "not", "in", "(", "select", "shop_id", "from", "hiring", ")", ";"], "ru": ["select", "name", "from", "shop", "where", "shop_id", "not", "in", "(", "select", "shop_id", "from", "hiring", ")", ";"]}, "query_toks_no_values": {"en": ["select", "name", "from", "shop", "where", "shop_id", "not", "in", "(", "select", "shop_id", "from", "hiring", ")", ";"], "ru": ["select", "name", "from", "shop", "where", "shop_id", "not", "in", "(", "select", "shop_id", "from", "hiring", ")", ";"]}, "masked_query": "SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring);", "question_pauq": {"ru": "\u041a\u0430\u043a\u0438\u0435 \u043c\u0430\u0433\u0430\u0437\u0438\u043d\u044b \u0440\u0430\u0431\u043e\u0442\u0430\u044e\u0442 \u0431\u0435\u0437 \u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a\u043e\u0432? \u041d\u0430\u0439\u0434\u0438 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f \u043c\u0430\u0433\u0430\u0437\u0438\u043d\u043e\u0432"}, "question": "Which shops run with no employees? Find the shop names", "kb_id": "employee_hire_evaluation"}, {"id": "D_0288", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 11, false], null], [0, 5, false], null]]}, "select": [false, [[3, [0, [0, 0, false], null]], [0, [0, [0, 6, false], null]]]], "where": [], "groupBy": [[0, 6, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 11, false], null], [0, 5, false], null]]}, "select": [false, [[3, [0, [0, 0, false], null]], [0, [0, [0, 6, false], null]]]], "where": [], "groupBy": [[0, 6, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Find", "the", "number", "of", "employees", "hired", "in", "each", "shop", ";", "show", "the", "shop", "name", "as", "well", "."], "ru": ["\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e", "\u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a\u043e\u0432", ",", "\u043d\u0430\u043d\u044f\u0442\u044b\u0445", "\u0432", "\u043a\u0430\u0436\u0434\u043e\u043c", "\u043c\u0430\u0433\u0430\u0437\u0438\u043d\u0435", ";", "\u0442\u0430\u043a\u0436\u0435", "\u0443\u043a\u0430\u0437\u0430\u0442\u044c", "\u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435", "\u043c\u0430\u0433\u0430\u0437\u0438\u043d\u0430", "."]}, "query_toks": {"en": ["select", "count", "(", "*", ")", ",", "t2.name", "from", "hiring", "as", "t1", "join", "shop", "as", "t2", "on", "t1.shop_id", "=", "t2.shop_id", "group", "by", "t2.name", ";"], "ru": ["select", "count", "(", "*", ")", ",", "t2.name", "from", "hiring", "as", "t1", "join", "shop", "as", "t2", "on", "t1.shop_id", "=", "t2.shop_id", "group", "by", "t2.name", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "*", ")", ",", "t2.name", "from", "hiring", "as", "t1", "join", "shop", "as", "t2", "on", "t1.shop_id", "=", "t2.shop_id", "group", "by", "t2.name", ";"], "ru": ["select", "count", "(", "*", ")", ",", "t2.name", "from", "hiring", "as", "t1", "join", "shop", "as", "t2", "on", "t1.shop_id", "=", "t2.shop_id", "group", "by", "t2.name", ";"]}, "masked_query": "SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name;", "question_pauq": {"ru": "\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a\u043e\u0432, \u043d\u0430\u043d\u044f\u0442\u044b\u0445 \u0432 \u043a\u0430\u0436\u0434\u043e\u043c \u043c\u0430\u0433\u0430\u0437\u0438\u043d\u0435; \u0442\u0430\u043a\u0436\u0435 \u0443\u043a\u0430\u0437\u0430\u0442\u044c \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043c\u0430\u0433\u0430\u0437\u0438\u043d\u0430."}, "question": "Find the number of employees hired in each shop; show the shop name as well.", "kb_id": "employee_hire_evaluation"}, {"id": "D_0289", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 11, false], null], [0, 5, false], null]]}, "select": [false, [[3, [0, [0, 0, false], null]], [0, [0, [0, 6, false], null]]]], "where": [], "groupBy": [[0, 6, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 11, false], null], [0, 5, false], null]]}, "select": [false, [[3, [0, [0, 0, false], null]], [0, [0, [0, 6, false], null]]]], "where": [], "groupBy": [[0, 6, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["For", "each", "shop", ",", "return", "the", "number", "of", "employees", "working", "there", "and", "the", "name", "of", "the", "shop", "."], "ru": ["\u0414\u043b\u044f", "\u043a\u0430\u0436\u0434\u043e\u0433\u043e", "\u043c\u0430\u0433\u0430\u0437\u0438\u043d\u0430", "\u043f\u043e\u043a\u0430\u0437\u0430\u0442\u044c", "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e", "\u0440\u0430\u0431\u043e\u0442\u0430\u044e\u0449\u0438\u0445", "\u0432", "\u043d\u0435\u043c", "\u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a\u043e\u0432", "\u0438", "\u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435", "\u043c\u0430\u0433\u0430\u0437\u0438\u043d\u0430", "."]}, "query_toks": {"en": ["select", "count", "(", "*", ")", ",", "t2.name", "from", "hiring", "as", "t1", "join", "shop", "as", "t2", "on", "t1.shop_id", "=", "t2.shop_id", "group", "by", "t2.name", ";"], "ru": ["select", "count", "(", "*", ")", ",", "t2.name", "from", "hiring", "as", "t1", "join", "shop", "as", "t2", "on", "t1.shop_id", "=", "t2.shop_id", "group", "by", "t2.name", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "*", ")", ",", "t2.name", "from", "hiring", "as", "t1", "join", "shop", "as", "t2", "on", "t1.shop_id", "=", "t2.shop_id", "group", "by", "t2.name", ";"], "ru": ["select", "count", "(", "*", ")", ",", "t2.name", "from", "hiring", "as", "t1", "join", "shop", "as", "t2", "on", "t1.shop_id", "=", "t2.shop_id", "group", "by", "t2.name", ";"]}, "masked_query": "SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name;", "question_pauq": {"ru": "\u0414\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043c\u0430\u0433\u0430\u0437\u0438\u043d\u0430 \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0440\u0430\u0431\u043e\u0442\u0430\u044e\u0449\u0438\u0445 \u0432 \u043d\u0435\u043c \u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a\u043e\u0432 \u0438 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043c\u0430\u0433\u0430\u0437\u0438\u043d\u0430."}, "question": "For each shop, return the number of employees working there and the name of the shop.", "kb_id": "employee_hire_evaluation"}, {"id": "D_0290", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT sum(bonus) FROM evaluation;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 3]], "conds": []}, "select": [false, [[4, [0, [0, 17, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 3]], "conds": []}, "select": [false, [[4, [0, [0, 17, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "total", "bonus", "given", "in", "all", "evaluations", "?"], "ru": ["\u041a\u0430\u043a\u043e\u0439", "\u043e\u0431\u0449\u0438\u0439", "\u0431\u043e\u043d\u0443\u0441", "\u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442\u0441\u044f", "\u0432\u043e", "\u0432\u0441\u0435\u0445", "\u043e\u0446\u0435\u043d\u043a\u0430\u0445", "?"]}, "query_toks": {"en": ["select", "sum", "(", "bonus", ")", "from", "evaluation", ";"], "ru": ["select", "sum", "(", "bonus", ")", "from", "evaluation", ";"]}, "query_toks_no_values": {"en": ["select", "sum", "(", "bonus", ")", "from", "evaluation", ";"], "ru": ["select", "sum", "(", "bonus", ")", "from", "evaluation", ";"]}, "masked_query": "SELECT sum(bonus) FROM evaluation;", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0439 \u043e\u0431\u0449\u0438\u0439 \u0431\u043e\u043d\u0443\u0441 \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0432\u043e \u0432\u0441\u0435\u0445 \u043e\u0446\u0435\u043d\u043a\u0430\u0445?"}, "question": "What is total bonus given in all evaluations?", "kb_id": "employee_hire_evaluation"}, {"id": "D_0291", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT sum(bonus) FROM evaluation;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 3]], "conds": []}, "select": [false, [[4, [0, [0, 17, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 3]], "conds": []}, "select": [false, [[4, [0, [0, 17, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Find", "the", "total", "amount", "of", "bonus", "given", "in", "all", "the", "evaluations", "."], "ru": ["\u041d\u0430\u0439\u0434\u0438\u0442\u0435", "\u043e\u0431\u0449\u0443\u044e", "\u0441\u0443\u043c\u043c\u0443", "\u0431\u043e\u043d\u0443\u0441\u0430", ",", "\u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u043e\u0433\u043e", "\u0432\u043e", "\u0432\u0441\u0435\u0445", "\u043e\u0446\u0435\u043d\u043a\u0430\u0445", "."]}, "query_toks": {"en": ["select", "sum", "(", "bonus", ")", "from", "evaluation", ";"], "ru": ["select", "sum", "(", "bonus", ")", "from", "evaluation", ";"]}, "query_toks_no_values": {"en": ["select", "sum", "(", "bonus", ")", "from", "evaluation", ";"], "ru": ["select", "sum", "(", "bonus", ")", "from", "evaluation", ";"]}, "masked_query": "SELECT sum(bonus) FROM evaluation;", "question_pauq": {"ru": "\u041d\u0430\u0439\u0434\u0438\u0442\u0435 \u043e\u0431\u0449\u0443\u044e \u0441\u0443\u043c\u043c\u0443 \u0431\u043e\u043d\u0443\u0441\u0430, \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u043e\u0433\u043e \u0432\u043e \u0432\u0441\u0435\u0445 \u043e\u0446\u0435\u043d\u043a\u0430\u0445."}, "question": "Find the total amount of bonus given in all the evaluations.", "kb_id": "employee_hire_evaluation"}, {"id": "D_0292", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT * FROM hiring;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 0, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 0, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Give", "me", "all", "the", "information", "about", "hiring", "."], "ru": ["\u041f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c", "\u0432\u0441\u044e", "\u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e", "\u043e", "\u043d\u0430\u0439\u043c\u0435", "."]}, "query_toks": {"en": ["select", "*", "from", "hiring", ";"], "ru": ["select", "*", "from", "hiring", ";"]}, "query_toks_no_values": {"en": ["select", "*", "from", "hiring", ";"], "ru": ["select", "*", "from", "hiring", ";"]}, "masked_query": "SELECT * FROM hiring;", "question_pauq": {"ru": "\u041f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c \u0432\u0441\u044e \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u043d\u0430\u0439\u043c\u0435."}, "question": "Give me all the information about hiring.", "kb_id": "employee_hire_evaluation"}, {"id": "D_0293", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT * FROM hiring;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 0, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 0, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "all", "the", "information", "about", "hiring", "?"], "ru": ["\u041a\u0430\u043a\u0430\u044f", "\u0435\u0441\u0442\u044c", "\u0432\u0441\u044f", "\u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f", "\u043e", "\u043d\u0430\u0439\u043c\u0435", "?"]}, "query_toks": {"en": ["select", "*", "from", "hiring", ";"], "ru": ["select", "*", "from", "hiring", ";"]}, "query_toks_no_values": {"en": ["select", "*", "from", "hiring", ";"], "ru": ["select", "*", "from", "hiring", ";"]}, "masked_query": "SELECT * FROM hiring;", "question_pauq": {"ru": "\u041a\u0430\u043a\u0430\u044f \u0435\u0441\u0442\u044c \u0432\u0441\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u043d\u0430\u0439\u043c\u0435?"}, "question": "What is all the information about hiring?", "kb_id": "employee_hire_evaluation"}, {"id": "D_0294", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 8, false], null]]]], "where": [[false, 4, [0, [0, 9, false], null], 3000.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 8, false], null]]]], "where": [[false, 3, [0, [0, 9, false], null], 10000.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 8, false], null]]]], "where": [[false, 4, [0, [0, 9, false], null], 3000.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 8, false], null]]]], "where": [[false, 3, [0, [0, 9, false], null], 10000.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "union": null, "except": null}}, "question_toks": {"en": ["Which", "district", "has", "both", "stores", "with", "less", "than", "3000", "products", "and", "stores", "with", "more", "than", "10000", "products", "?"], "ru": ["\u0412", "\u043a\u0430\u043a\u043e\u043c", "\u0440\u0430\u0439\u043e\u043d\u0435", "\u0435\u0441\u0442\u044c", "\u043c\u0430\u0433\u0430\u0437\u0438\u043d\u044b", "\u0441", "\u043c\u0435\u043d\u0435\u0435", "\u0447\u0435\u043c", "3000", "\u0442\u043e\u0432\u0430\u0440\u043e\u0432", "\u0438", "\u043c\u0430\u0433\u0430\u0437\u0438\u043d\u044b", "\u0441", "\u0431\u043e\u043b\u0435\u0435", "\u0447\u0435\u043c", "10000", "\u0442\u043e\u0432\u0430\u0440\u043e\u0432", "?"]}, "query_toks": {"en": ["select", "district", "from", "shop", "where", "number_products", "<", "3000", "intersect", "select", "district", "from", "shop", "where", "number_products", ">", "10000", ";"], "ru": ["select", "district", "from", "shop", "where", "number_products", "<", "3000", "intersect", "select", "district", "from", "shop", "where", "number_products", ">", "10000", ";"]}, "query_toks_no_values": {"en": ["select", "district", "from", "shop", "where", "number_products", "<", "3000", "intersect", "select", "district", "from", "shop", "where", "number_products", ">", "10000", ";"], "ru": ["select", "district", "from", "shop", "where", "number_products", "<", "3000", "intersect", "select", "district", "from", "shop", "where", "number_products", ">", "10000", ";"]}, "masked_query": "SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000;", "question_pauq": {"ru": "\u0412 \u043a\u0430\u043a\u043e\u043c \u0440\u0430\u0439\u043e\u043d\u0435 \u0435\u0441\u0442\u044c \u043c\u0430\u0433\u0430\u0437\u0438\u043d\u044b \u0441 \u043c\u0435\u043d\u0435\u0435 \u0447\u0435\u043c 3000 \u0442\u043e\u0432\u0430\u0440\u043e\u0432 \u0438 \u043c\u0430\u0433\u0430\u0437\u0438\u043d\u044b \u0441 \u0431\u043e\u043b\u0435\u0435 \u0447\u0435\u043c 10000 \u0442\u043e\u0432\u0430\u0440\u043e\u0432?"}, "question": "Which district has both stores with less than 3000 products and stores with more than 10000 products?", "kb_id": "employee_hire_evaluation"}, {"id": "D_0295", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 8, false], null]]]], "where": [[false, 4, [0, [0, 9, false], null], 3000.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 8, false], null]]]], "where": [[false, 3, [0, [0, 9, false], null], 10000.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 8, false], null]]]], "where": [[false, 4, [0, [0, 9, false], null], 3000.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 8, false], null]]]], "where": [[false, 3, [0, [0, 9, false], null], 10000.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "union": null, "except": null}}, "question_toks": {"en": ["Find", "the", "districts", "in", "which", "there", "are", "both", "shops", "selling", "less", "than", "3000", "products", "and", "shops", "selling", "more", "than", "10000", "products", "."], "ru": ["\u041d\u0430\u0439\u0434\u0438\u0442\u0435", "\u0440\u0430\u0439\u043e\u043d\u044b", ",", "\u0432", "\u043a\u043e\u0442\u043e\u0440\u044b\u0445", "\u0435\u0441\u0442\u044c", "\u043c\u0430\u0433\u0430\u0437\u0438\u043d\u044b", ",", "\u043f\u0440\u043e\u0434\u0430\u044e\u0449\u0438\u0435", "\u043c\u0435\u043d\u0435\u0435", "3000", "\u0442\u043e\u0432\u0430\u0440\u043e\u0432", ",", "\u0438", "\u043c\u0430\u0433\u0430\u0437\u0438\u043d\u044b", ",", "\u043f\u0440\u043e\u0434\u0430\u044e\u0449\u0438\u0435", "\u0431\u043e\u043b\u0435\u0435", "10000", "\u0442\u043e\u0432\u0430\u0440\u043e\u0432", "."]}, "query_toks": {"en": ["select", "district", "from", "shop", "where", "number_products", "<", "3000", "intersect", "select", "district", "from", "shop", "where", "number_products", ">", "10000", ";"], "ru": ["select", "district", "from", "shop", "where", "number_products", "<", "3000", "intersect", "select", "district", "from", "shop", "where", "number_products", ">", "10000", ";"]}, "query_toks_no_values": {"en": ["select", "district", "from", "shop", "where", "number_products", "<", "3000", "intersect", "select", "district", "from", "shop", "where", "number_products", ">", "10000", ";"], "ru": ["select", "district", "from", "shop", "where", "number_products", "<", "3000", "intersect", "select", "district", "from", "shop", "where", "number_products", ">", "10000", ";"]}, "masked_query": "SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000;", "question_pauq": {"ru": "\u041d\u0430\u0439\u0434\u0438\u0442\u0435 \u0440\u0430\u0439\u043e\u043d\u044b, \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0435\u0441\u0442\u044c \u043c\u0430\u0433\u0430\u0437\u0438\u043d\u044b, \u043f\u0440\u043e\u0434\u0430\u044e\u0449\u0438\u0435 \u043c\u0435\u043d\u0435\u0435 3000 \u0442\u043e\u0432\u0430\u0440\u043e\u0432, \u0438 \u043c\u0430\u0433\u0430\u0437\u0438\u043d\u044b, \u043f\u0440\u043e\u0434\u0430\u044e\u0449\u0438\u0435 \u0431\u043e\u043b\u0435\u0435 10000 \u0442\u043e\u0432\u0430\u0440\u043e\u0432."}, "question": "Find the districts in which there are both shops selling less than 3000 products and shops selling more than 10000 products.", "kb_id": "employee_hire_evaluation"}, {"id": "D_0296", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT count(DISTINCT LOCATION) FROM shop;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[3, [0, [0, 7, true], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[3, [0, [0, 7, true], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["How", "many", "different", "store", "locations", "are", "there", "?"], "ru": ["\u0421\u043a\u043e\u043b\u044c\u043a\u043e", "\u0435\u0441\u0442\u044c", "\u0432\u0441\u0435\u0433\u043e", "\u0440\u0430\u0437\u043d\u044b\u0445", "\u043c\u0430\u0433\u0430\u0437\u0438\u043d\u043e\u0432", "?"]}, "query_toks": {"en": ["select", "count", "(", "distinct", "location", ")", "from", "shop", ";"], "ru": ["select", "count", "(", "distinct", "location", ")", "from", "shop", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "distinct", "location", ")", "from", "shop", ";"], "ru": ["select", "count", "(", "distinct", "location", ")", "from", "shop", ";"]}, "masked_query": "SELECT count(DISTINCT LOCATION) FROM shop;", "question_pauq": {"ru": "\u0421\u043a\u043e\u043b\u044c\u043a\u043e \u0435\u0441\u0442\u044c \u0432\u0441\u0435\u0433\u043e \u0440\u0430\u0437\u043d\u044b\u0445 \u043c\u0430\u0433\u0430\u0437\u0438\u043d\u043e\u0432?"}, "question": "How many different store locations are there?", "kb_id": "employee_hire_evaluation"}, {"id": "D_0297", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT count(DISTINCT LOCATION) FROM shop;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[3, [0, [0, 7, true], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[3, [0, [0, 7, true], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Count", "the", "number", "of", "distinct", "store", "locations", "."], "ru": ["\u041f\u043e\u0434\u0441\u0447\u0438\u0442\u0430\u0439\u0442\u0435", "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e", "\u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445", "\u043c\u0430\u0433\u0430\u0437\u0438\u043d\u043e\u0432", "."]}, "query_toks": {"en": ["select", "count", "(", "distinct", "location", ")", "from", "shop", ";"], "ru": ["select", "count", "(", "distinct", "location", ")", "from", "shop", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "distinct", "location", ")", "from", "shop", ";"], "ru": ["select", "count", "(", "distinct", "location", ")", "from", "shop", ";"]}, "masked_query": "SELECT count(DISTINCT LOCATION) FROM shop;", "question_pauq": {"ru": "\u041f\u043e\u0434\u0441\u0447\u0438\u0442\u0430\u0439\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u043c\u0430\u0433\u0430\u0437\u0438\u043d\u043e\u0432."}, "question": "Count the number of distinct store locations.", "kb_id": "employee_hire_evaluation"}, {"id": "D_0298", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT count(*) FROM Documents;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["How", "many", "documents", "do", "we", "have", "?"], "ru": ["\u0421\u043a\u043e\u043b\u044c\u043a\u043e", "\u0443", "\u043d\u0430\u0441", "\u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u043e\u0432", "?"]}, "query_toks": {"en": ["select", "count", "(", "*", ")", "from", "documents", ";"], "ru": ["select", "count", "(", "*", ")", "from", "documents", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "*", ")", "from", "documents", ";"], "ru": ["select", "count", "(", "*", ")", "from", "documents", ";"]}, "masked_query": "SELECT count(*) FROM Documents;", "question_pauq": {"ru": "\u0421\u043a\u043e\u043b\u044c\u043a\u043e \u0443 \u043d\u0430\u0441 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u043e\u0432?"}, "question": "How many documents do we have?", "kb_id": "cre_Doc_Template_Mgt"}, {"id": "D_0299", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT count(*) FROM Documents;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Count", "the", "number", "of", "documents", "."], "ru": ["\u041f\u043e\u0434\u0441\u0447\u0438\u0442\u0430\u0439\u0442\u0435", "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e", "\u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u043e\u0432", "."]}, "query_toks": {"en": ["select", "count", "(", "*", ")", "from", "documents", ";"], "ru": ["select", "count", "(", "*", ")", "from", "documents", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "*", ")", "from", "documents", ";"], "ru": ["select", "count", "(", "*", ")", "from", "documents", ";"]}, "masked_query": "SELECT count(*) FROM Documents;", "question_pauq": {"ru": "\u041f\u043e\u0434\u0441\u0447\u0438\u0442\u0430\u0439\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u043e\u0432."}, "question": "Count the number of documents.", "kb_id": "cre_Doc_Template_Mgt"}, {"id": "D_0300", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT document_id ,  document_name ,  document_description FROM Documents;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 9, false], null]], [0, [0, [0, 11, false], null]], [0, [0, [0, 12, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 9, false], null]], [0, [0, [0, 11, false], null]], [0, [0, [0, 12, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["List", "document", "IDs", ",", "document", "names", ",", "and", "document", "descriptions", "for", "all", "documents", "."], "ru": ["\u041f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0438\u0442\u0435", "id", "\u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u043e\u0432", ",", "\u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f", "\u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u043e\u0432", "\u0438", "\u043e\u043f\u0438\u0441\u0430\u043d\u0438\u044f", "\u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u043e\u0432", "\u0434\u043b\u044f", "\u0432\u0441\u0435\u0445", "\u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u043e\u0432", "."]}, "query_toks": {"en": ["select", "document_id", ",", "document_name", ",", "document_description", "from", "documents", ";"], "ru": ["select", "document_id", ",", "document_name", ",", "document_description", "from", "documents", ";"]}, "query_toks_no_values": {"en": ["select", "document_id", ",", "document_name", ",", "document_description", "from", "documents", ";"], "ru": ["select", "document_id", ",", "document_name", ",", "document_description", "from", "documents", ";"]}, "masked_query": "SELECT document_id ,  document_name ,  document_description FROM Documents;", "question_pauq": {"ru": "\u041f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0438\u0442\u0435 id \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u043e\u0432, \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u043e\u0432 \u0438 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u043e\u0432 \u0434\u043b\u044f \u0432\u0441\u0435\u0445 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u043e\u0432."}, "question": "List document IDs, document names, and document descriptions for all documents.", "kb_id": "cre_Doc_Template_Mgt"}, {"id": "D_0301", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT document_id ,  document_name ,  document_description FROM Documents;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 9, false], null]], [0, [0, [0, 11, false], null]], [0, [0, [0, 12, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 9, false], null]], [0, [0, [0, 11, false], null]], [0, [0, [0, 12, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "the", "ids", ",", "names", ",", "and", "descriptions", "for", "all", "documents", "?"], "ru": ["\u041a\u0430\u043a\u0438\u0435", "id", ",", "\u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f", "\u0438", "\u043e\u043f\u0438\u0441\u0430\u043d\u0438\u044f", "\u0443", "\u0432\u0441\u0435\u0445", "\u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u043e\u0432", "?"]}, "query_toks": {"en": ["select", "document_id", ",", "document_name", ",", "document_description", "from", "documents", ";"], "ru": ["select", "document_id", ",", "document_name", ",", "document_description", "from", "documents", ";"]}, "query_toks_no_values": {"en": ["select", "document_id", ",", "document_name", ",", "document_description", "from", "documents", ";"], "ru": ["select", "document_id", ",", "document_name", ",", "document_description", "from", "documents", ";"]}, "masked_query": "SELECT document_id ,  document_name ,  document_description FROM Documents;", "question_pauq": {"ru": "\u041a\u0430\u043a\u0438\u0435 id, \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f \u0438 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u0443 \u0432\u0441\u0435\u0445 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u043e\u0432?"}, "question": "What are the ids, names, and descriptions for all documents?", "kb_id": "cre_Doc_Template_Mgt"}, {"id": "D_0302", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%\u0434%\";"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 11, false], null]], [0, [0, [0, 10, false], null]]]], "where": [[false, 9, [0, [0, 12, false], null], "\"%w%\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 11, false], null]], [0, [0, [0, 10, false], null]]]], "where": [[false, 9, [0, [0, 12, false], null], "\"%\u0434%\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "document", "name", "and", "template", "id", "for", "document", "with", "description", "with", "the", "letter", "'", "w", "'", "in", "it", "?"], "ru": ["\u041a\u0430\u043a\u043e\u0435", "\u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435", "\u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430", "\u0438", "id", "\u0448\u0430\u0431\u043b\u043e\u043d\u0430", "\u0434\u043b\u044f", "\u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430", "\u0441", "\u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435\u043c", ",", "\u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u043c", "\u0431\u0443\u043a\u0432\u0443", "\u201c", "\u0434", "''", "?"]}, "query_toks": {"en": ["select", "document_name", ",", "template_id", "from", "documents", "where", "document_description", "like", "\"%w%\"", ";"], "ru": ["select", "document_name", ",", "template_id", "from", "documents", "where", "document_description", "like", "\"%\u0434%\"", ";"]}, "query_toks_no_values": {"en": ["select", "document_name", ",", "template_id", "from", "documents", "where", "document_description", "like", "value", ";"], "ru": ["select", "document_name", ",", "template_id", "from", "documents", "where", "document_description", "like", "value", ";"]}, "masked_query": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\";", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0435 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430 \u0438 id \u0448\u0430\u0431\u043b\u043e\u043d\u0430 \u0434\u043b\u044f \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430 \u0441 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435\u043c, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u043c \u0431\u0443\u043a\u0432\u0443 \u201c\u0434\"?"}, "question": "What is the document name and template id for document with description with the letter 'w' in it?", "kb_id": "cre_Doc_Template_Mgt"}, {"id": "D_0303", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%\u0434%\";"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 11, false], null]], [0, [0, [0, 10, false], null]]]], "where": [[false, 9, [0, [0, 12, false], null], "\"%w%\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 11, false], null]], [0, [0, [0, 10, false], null]]]], "where": [[false, 9, [0, [0, 12, false], null], "\"%\u0434%\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Return", "the", "names", "and", "template", "ids", "for", "documents", "that", "contain", "the", "letter", "w", "in", "their", "description", "."], "ru": ["\u041e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u0442\u044c", "\u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f", "\u0438", "id", "\u0448\u0430\u0431\u043b\u043e\u043d\u043e\u0432", "\u0434\u043b\u044f", "\u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u043e\u0432", ",", "\u043a\u043e\u0442\u043e\u0440\u044b\u0435", "\u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442", "\u0431\u0443\u043a\u0432\u0443", "``", "\u0434", "''", "\u0432", "\u0441\u0432\u043e\u0435\u043c", "\u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0438", "."]}, "query_toks": {"en": ["select", "document_name", ",", "template_id", "from", "documents", "where", "document_description", "like", "\"%w%\"", ";"], "ru": ["select", "document_name", ",", "template_id", "from", "documents", "where", "document_description", "like", "\"%\u0434%\"", ";"]}, "query_toks_no_values": {"en": ["select", "document_name", ",", "template_id", "from", "documents", "where", "document_description", "like", "value", ";"], "ru": ["select", "document_name", ",", "template_id", "from", "documents", "where", "document_description", "like", "value", ";"]}, "masked_query": "SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\";", "question_pauq": {"ru": "\u041e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u0442\u044c \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f \u0438 id \u0448\u0430\u0431\u043b\u043e\u043d\u043e\u0432 \u0434\u043b\u044f \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442 \u0431\u0443\u043a\u0432\u0443 \"\u0434\" \u0432 \u0441\u0432\u043e\u0435\u043c \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0438."}, "question": "Return the names and template ids for documents that contain the letter w in their description.", "kb_id": "cre_Doc_Template_Mgt"}, {"id": "D_0304", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"\u041a\u0443\u043f\u0440\u0438\u043d CV\";"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 9, false], null]], [0, [0, [0, 10, false], null]], [0, [0, [0, 12, false], null]]]], "where": [[false, 2, [0, [0, 11, false], null], "\"Robbin CV\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 9, false], null]], [0, [0, [0, 10, false], null]], [0, [0, [0, 12, false], null]]]], "where": [[false, 2, [0, [0, 11, false], null], "\"\u041a\u0443\u043f\u0440\u0438\u043d CV\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "document", "id", ",", "template", "id", "and", "description", "for", "document", "named", "``", "Robbin", "CV", "''", "?"], "ru": ["\u041a\u0430\u043a\u043e\u0432", "id", "\u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430", ",", "id", "\u0448\u0430\u0431\u043b\u043e\u043d\u0430", "\u0438", "\u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435", "\u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430", "\u0441", "\u0438\u043c\u0435\u043d\u0435\u043c", "``", "\u041a\u0443\u043f\u0440\u0438\u043d", "CV", "''", "?"]}, "query_toks": {"en": ["select", "document_id", ",", "template_id", ",", "document_description", "from", "documents", "where", "document_name", "=", "\"Robbin CV\"", ";"], "ru": ["select", "document_id", ",", "template_id", ",", "document_description", "from", "documents", "where", "document_name", "=", "\"\u041a\u0443\u043f\u0440\u0438\u043d CV\"", ";"]}, "query_toks_no_values": {"en": ["select", "document_id", ",", "template_id", ",", "document_description", "from", "documents", "where", "document_name", "=", "value", ";"], "ru": ["select", "document_id", ",", "template_id", ",", "document_description", "from", "documents", "where", "document_name", "=", "value", ";"]}, "masked_query": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\";", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0432 id \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430, id \u0448\u0430\u0431\u043b\u043e\u043d\u0430 \u0438 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430 \u0441 \u0438\u043c\u0435\u043d\u0435\u043c \"\u041a\u0443\u043f\u0440\u0438\u043d CV\"?"}, "question": "What is the document id, template id and description for document named \"Robbin CV\"?", "kb_id": "cre_Doc_Template_Mgt"}, {"id": "D_0305", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"\u041a\u0443\u043f\u0440\u0438\u043d CV\";"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 9, false], null]], [0, [0, [0, 10, false], null]], [0, [0, [0, 12, false], null]]]], "where": [[false, 2, [0, [0, 11, false], null], "\"Robbin CV\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 9, false], null]], [0, [0, [0, 10, false], null]], [0, [0, [0, 12, false], null]]]], "where": [[false, 2, [0, [0, 11, false], null], "\"\u041a\u0443\u043f\u0440\u0438\u043d CV\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Return", "the", "document", "id", ",", "template", "id", ",", "and", "description", "for", "the", "document", "with", "the", "name", "Robbin", "CV", "."], "ru": ["\u041f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c", "id", "\u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430", ",", "id", "\u0448\u0430\u0431\u043b\u043e\u043d\u0430", "\u0438", "\u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435", "\u0434\u043b\u044f", "\u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430", "\u0441", "\u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435\u043c", "\u041a\u0443\u043f\u0440\u0438\u043d", "CV", "."]}, "query_toks": {"en": ["select", "document_id", ",", "template_id", ",", "document_description", "from", "documents", "where", "document_name", "=", "\"Robbin CV\"", ";"], "ru": ["select", "document_id", ",", "template_id", ",", "document_description", "from", "documents", "where", "document_name", "=", "\"\u041a\u0443\u043f\u0440\u0438\u043d CV\"", ";"]}, "query_toks_no_values": {"en": ["select", "document_id", ",", "template_id", ",", "document_description", "from", "documents", "where", "document_name", "=", "value", ";"], "ru": ["select", "document_id", ",", "template_id", ",", "document_description", "from", "documents", "where", "document_name", "=", "value", ";"]}, "masked_query": "SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\";", "question_pauq": {"ru": "\u041f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c id \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430, id \u0448\u0430\u0431\u043b\u043e\u043d\u0430 \u0438 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0434\u043b\u044f \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430 \u0441 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435\u043c \u041a\u0443\u043f\u0440\u0438\u043d CV."}, "question": "Return the document id, template id, and description for the document with the name Robbin CV.", "kb_id": "cre_Doc_Template_Mgt"}, {"id": "D_0306", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT count(DISTINCT template_id) FROM Documents;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[3, [0, [0, 10, true], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[3, [0, [0, 10, true], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["How", "many", "different", "templates", "do", "all", "document", "use", "?"], "ru": ["\u0421\u043a\u043e\u043b\u044c\u043a\u043e", "\u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445", "\u0448\u0430\u0431\u043b\u043e\u043d\u043e\u0432", "\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f", "\u0432\u043e", "\u0432\u0441\u0435\u0445", "\u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0445", "?"]}, "query_toks": {"en": ["select", "count", "(", "distinct", "template_id", ")", "from", "documents", ";"], "ru": ["select", "count", "(", "distinct", "template_id", ")", "from", "documents", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "distinct", "template_id", ")", "from", "documents", ";"], "ru": ["select", "count", "(", "distinct", "template_id", ")", "from", "documents", ";"]}, "masked_query": "SELECT count(DISTINCT template_id) FROM Documents;", "question_pauq": {"ru": "\u0421\u043a\u043e\u043b\u044c\u043a\u043e \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u0448\u0430\u0431\u043b\u043e\u043d\u043e\u0432 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0432\u043e \u0432\u0441\u0435\u0445 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0445?"}, "question": "How many different templates do all document use?", "kb_id": "cre_Doc_Template_Mgt"}, {"id": "D_0307", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT count(DISTINCT template_id) FROM Documents;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[3, [0, [0, 10, true], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[3, [0, [0, 10, true], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Count", "the", "number", "of", "different", "templates", "used", "for", "documents", "."], "ru": ["\u041f\u043e\u0434\u0441\u0447\u0438\u0442\u0430\u0442\u044c", "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e", "\u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445", "\u0448\u0430\u0431\u043b\u043e\u043d\u043e\u0432", ",", "\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0445", "\u0434\u043b\u044f", "\u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u043e\u0432", "."]}, "query_toks": {"en": ["select", "count", "(", "distinct", "template_id", ")", "from", "documents", ";"], "ru": ["select", "count", "(", "distinct", "template_id", ")", "from", "documents", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "distinct", "template_id", ")", "from", "documents", ";"], "ru": ["select", "count", "(", "distinct", "template_id", ")", "from", "documents", ";"]}, "masked_query": "SELECT count(DISTINCT template_id) FROM Documents;", "question_pauq": {"ru": "\u041f\u043e\u0434\u0441\u0447\u0438\u0442\u0430\u0442\u044c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u0448\u0430\u0431\u043b\u043e\u043d\u043e\u0432, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0445 \u0434\u043b\u044f \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u043e\u0432."}, "question": "Count the number of different templates used for documents.", "kb_id": "cre_Doc_Template_Mgt"}, {"id": "D_0308", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT';"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 10, false], null], [0, 3, false], null]]}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 5, false], null], "\"PPT\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 10, false], null], [0, 3, false], null]]}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 5, false], null], "\"PPT\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["How", "many", "documents", "are", "using", "the", "template", "with", "type", "code", "'PPT", "'", "?"], "ru": ["\u0421\u043a\u043e\u043b\u044c\u043a\u043e", "\u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u043e\u0432", "\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442", "\u0448\u0430\u0431\u043b\u043e\u043d", "\u0441", "\u043a\u043e\u0434\u043e\u043c", "\u0442\u0438\u043f\u0430", "``", "PPT", "''", "?"]}, "query_toks": {"en": ["select", "count", "(", "*", ")", "from", "documents", "as", "t1", "join", "templates", "as", "t2", "on", "t1.template_id", "=", "t2.template_id", "where", "t2.template_type_code", "=", "\"PPT\"", ";"], "ru": ["select", "count", "(", "*", ")", "from", "documents", "as", "t1", "join", "templates", "as", "t2", "on", "t1.template_id", "=", "t2.template_id", "where", "t2.template_type_code", "=", "\"PPT\"", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "*", ")", "from", "documents", "as", "t1", "join", "templates", "as", "t2", "on", "t1.template_id", "=", "t2.template_id", "where", "t2.template_type_code", "=", "value", ";"], "ru": ["select", "count", "(", "*", ")", "from", "documents", "as", "t1", "join", "templates", "as", "t2", "on", "t1.template_id", "=", "t2.template_id", "where", "t2.template_type_code", "=", "value", ";"]}, "masked_query": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT';", "question_pauq": {"ru": "\u0421\u043a\u043e\u043b\u044c\u043a\u043e \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u043e\u0432 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442 \u0448\u0430\u0431\u043b\u043e\u043d \u0441 \u043a\u043e\u0434\u043e\u043c \u0442\u0438\u043f\u0430 \"PPT\"?"}, "question": "How many documents are using the template with type code 'PPT'?", "kb_id": "cre_Doc_Template_Mgt"}, {"id": "D_0309", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT';"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 10, false], null], [0, 3, false], null]]}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 5, false], null], "\"PPT\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 10, false], null], [0, 3, false], null]]}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 5, false], null], "\"PPT\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Count", "the", "number", "of", "documents", "that", "use", "the", "PPT", "template", "type", "."], "ru": ["\u041f\u043e\u0434\u0441\u0447\u0438\u0442\u0430\u0439\u0442\u0435", "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e", "\u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u043e\u0432", ",", "\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0449\u0438\u0445", "\u0442\u0438\u043f", "\u0448\u0430\u0431\u043b\u043e\u043d\u0430", "PPT", "."]}, "query_toks": {"en": ["select", "count", "(", "*", ")", "from", "documents", "as", "t1", "join", "templates", "as", "t2", "on", "t1.template_id", "=", "t2.template_id", "where", "t2.template_type_code", "=", "\"PPT\"", ";"], "ru": ["select", "count", "(", "*", ")", "from", "documents", "as", "t1", "join", "templates", "as", "t2", "on", "t1.template_id", "=", "t2.template_id", "where", "t2.template_type_code", "=", "\"PPT\"", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "*", ")", "from", "documents", "as", "t1", "join", "templates", "as", "t2", "on", "t1.template_id", "=", "t2.template_id", "where", "t2.template_type_code", "=", "value", ";"], "ru": ["select", "count", "(", "*", ")", "from", "documents", "as", "t1", "join", "templates", "as", "t2", "on", "t1.template_id", "=", "t2.template_id", "where", "t2.template_type_code", "=", "value", ";"]}, "masked_query": "SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT';", "question_pauq": {"ru": "\u041f\u043e\u0434\u0441\u0447\u0438\u0442\u0430\u0439\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u043e\u0432, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0449\u0438\u0445 \u0442\u0438\u043f \u0448\u0430\u0431\u043b\u043e\u043d\u0430 PPT."}, "question": "Count the number of documents that use the PPT template type.", "kb_id": "cre_Doc_Template_Mgt"}, {"id": "D_0310", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT template_id ,  count(*) FROM Documents GROUP BY template_id;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 10, false], null]], [3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [[0, 10, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 10, false], null]], [3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [[0, 10, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Show", "all", "template", "ids", "and", "number", "of", "documents", "using", "each", "template", "."], "ru": ["\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c", "\u0432\u0441\u0435", "id", "\u0448\u0430\u0431\u043b\u043e\u043d\u043e\u0432", "\u0438", "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e", "\u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u043e\u0432", ",", "\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0449\u0438\u0445", "\u043a\u0430\u0436\u0434\u044b\u0439", "\u0448\u0430\u0431\u043b\u043e\u043d", "."]}, "query_toks": {"en": ["select", "template_id", ",", "count", "(", "*", ")", "from", "documents", "group", "by", "template_id", ";"], "ru": ["select", "template_id", ",", "count", "(", "*", ")", "from", "documents", "group", "by", "template_id", ";"]}, "query_toks_no_values": {"en": ["select", "template_id", ",", "count", "(", "*", ")", "from", "documents", "group", "by", "template_id", ";"], "ru": ["select", "template_id", ",", "count", "(", "*", ")", "from", "documents", "group", "by", "template_id", ";"]}, "masked_query": "SELECT template_id ,  count(*) FROM Documents GROUP BY template_id;", "question_pauq": {"ru": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0432\u0441\u0435 id \u0448\u0430\u0431\u043b\u043e\u043d\u043e\u0432 \u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u043e\u0432, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0449\u0438\u0445 \u043a\u0430\u0436\u0434\u044b\u0439 \u0448\u0430\u0431\u043b\u043e\u043d."}, "question": "Show all template ids and number of documents using each template.", "kb_id": "cre_Doc_Template_Mgt"}, {"id": "D_0311", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT template_id ,  count(*) FROM Documents GROUP BY template_id;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 10, false], null]], [3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [[0, 10, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 10, false], null]], [3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [[0, 10, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "all", "different", "template", "ids", "used", "for", "documents", ",", "and", "how", "many", "times", "were", "each", "of", "them", "used", "?"], "ru": ["\u041a\u0430\u043a\u0438\u0435", "id", "\u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445", "\u0448\u0430\u0431\u043b\u043e\u043d\u043e\u0432", "\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f", "\u0434\u043b\u044f", "\u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u043e\u0432", "\u0438", "\u0441\u043a\u043e\u043b\u044c\u043a\u043e", "\u0440\u0430\u0437", "\u043a\u0430\u0436\u0434\u044b\u0439", "\u0438\u0437", "\u043d\u0438\u0445", "\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043b\u0441\u044f", "?"]}, "query_toks": {"en": ["select", "template_id", ",", "count", "(", "*", ")", "from", "documents", "group", "by", "template_id", ";"], "ru": ["select", "template_id", ",", "count", "(", "*", ")", "from", "documents", "group", "by", "template_id", ";"]}, "query_toks_no_values": {"en": ["select", "template_id", ",", "count", "(", "*", ")", "from", "documents", "group", "by", "template_id", ";"], "ru": ["select", "template_id", ",", "count", "(", "*", ")", "from", "documents", "group", "by", "template_id", ";"]}, "masked_query": "SELECT template_id ,  count(*) FROM Documents GROUP BY template_id;", "question_pauq": {"ru": "\u041a\u0430\u043a\u0438\u0435 id \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u0448\u0430\u0431\u043b\u043e\u043d\u043e\u0432 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f \u0434\u043b\u044f \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u043e\u0432 \u0438 \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0440\u0430\u0437 \u043a\u0430\u0436\u0434\u044b\u0439 \u0438\u0437 \u043d\u0438\u0445 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043b\u0441\u044f?"}, "question": "What are all different template ids used for documents, and how many times were each of them used?", "kb_id": "cre_Doc_Template_Mgt"}, {"id": "D_0312", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 10, false], null], [0, 3, false], null]]}, "select": [false, [[0, [0, [0, 10, false], null]], [0, [0, [0, 5, false], null]]]], "where": [], "groupBy": [[0, 10, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 10, false], null], [0, 3, false], null]]}, "select": [false, [[0, [0, [0, 10, false], null]], [0, [0, [0, 5, false], null]]]], "where": [], "groupBy": [[0, 10, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "id", "and", "type", "code", "for", "the", "template", "used", "by", "the", "most", "documents", "?"], "ru": ["\u041a\u0430\u043a\u043e\u0439", "id", "\u0438", "\u043a\u043e\u0434", "\u0442\u0438\u043f\u0430", "\u0434\u043b\u044f", "\u0448\u0430\u0431\u043b\u043e\u043d\u0430", "\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f", "\u0432", "\u0431\u043e\u043b\u044c\u0448\u0438\u043d\u0441\u0442\u0432\u0435", "\u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u043e\u0432", "?"]}, "query_toks": {"en": ["select", "t1.template_id", ",", "t2.template_type_code", "from", "documents", "as", "t1", "join", "templates", "as", "t2", "on", "t1.template_id", "=", "t2.template_id", "group", "by", "t1.template_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"], "ru": ["select", "t1.template_id", ",", "t2.template_type_code", "from", "documents", "as", "t1", "join", "templates", "as", "t2", "on", "t1.template_id", "=", "t2.template_id", "group", "by", "t1.template_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"]}, "query_toks_no_values": {"en": ["select", "t1.template_id", ",", "t2.template_type_code", "from", "documents", "as", "t1", "join", "templates", "as", "t2", "on", "t1.template_id", "=", "t2.template_id", "group", "by", "t1.template_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"], "ru": ["select", "t1.template_id", ",", "t2.template_type_code", "from", "documents", "as", "t1", "join", "templates", "as", "t2", "on", "t1.template_id", "=", "t2.template_id", "group", "by", "t1.template_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"]}, "masked_query": "SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1;", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0439 id \u0438 \u043a\u043e\u0434 \u0442\u0438\u043f\u0430 \u0434\u043b\u044f \u0448\u0430\u0431\u043b\u043e\u043d\u0430 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0432 \u0431\u043e\u043b\u044c\u0448\u0438\u043d\u0441\u0442\u0432\u0435 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u043e\u0432?"}, "question": "What is the id and type code for the template used by the most documents?", "kb_id": "cre_Doc_Template_Mgt"}, {"id": "D_0313", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 10, false], null], [0, 3, false], null]]}, "select": [false, [[0, [0, [0, 10, false], null]], [0, [0, [0, 5, false], null]]]], "where": [], "groupBy": [[0, 10, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 10, false], null], [0, 3, false], null]]}, "select": [false, [[0, [0, [0, 10, false], null]], [0, [0, [0, 5, false], null]]]], "where": [], "groupBy": [[0, 10, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Return", "the", "id", "and", "type", "code", "of", "the", "template", "that", "is", "used", "for", "the", "greatest", "number", "of", "documents", "."], "ru": ["\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c", "id", "\u0438", "\u043a\u043e\u0434", "\u0442\u0438\u043f\u0430", "\u0448\u0430\u0431\u043b\u043e\u043d\u0430", ",", "\u043a\u043e\u0442\u043e\u0440\u044b\u0439", "\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f", "\u0434\u043b\u044f", "\u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0435\u0433\u043e", "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430", "\u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u043e\u0432", "."]}, "query_toks": {"en": ["select", "t1.template_id", ",", "t2.template_type_code", "from", "documents", "as", "t1", "join", "templates", "as", "t2", "on", "t1.template_id", "=", "t2.template_id", "group", "by", "t1.template_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"], "ru": ["select", "t1.template_id", ",", "t2.template_type_code", "from", "documents", "as", "t1", "join", "templates", "as", "t2", "on", "t1.template_id", "=", "t2.template_id", "group", "by", "t1.template_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"]}, "query_toks_no_values": {"en": ["select", "t1.template_id", ",", "t2.template_type_code", "from", "documents", "as", "t1", "join", "templates", "as", "t2", "on", "t1.template_id", "=", "t2.template_id", "group", "by", "t1.template_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"], "ru": ["select", "t1.template_id", ",", "t2.template_type_code", "from", "documents", "as", "t1", "join", "templates", "as", "t2", "on", "t1.template_id", "=", "t2.template_id", "group", "by", "t1.template_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"]}, "masked_query": "SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1;", "question_pauq": {"ru": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c id \u0438 \u043a\u043e\u0434 \u0442\u0438\u043f\u0430 \u0448\u0430\u0431\u043b\u043e\u043d\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0434\u043b\u044f \u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0435\u0433\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u043e\u0432."}, "question": "Return the id and type code of the template that is used for the greatest number of documents.", "kb_id": "cre_Doc_Template_Mgt"}, {"id": "D_0314", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 10, false], null]]]], "where": [], "groupBy": [[0, 10, false]], "having": [[false, 3, [0, [3, 0, false], null], 1.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 10, false], null]]]], "where": [], "groupBy": [[0, 10, false]], "having": [[false, 3, [0, [3, 0, false], null], 1.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Show", "ids", "for", "all", "templates", "that", "are", "used", "by", "more", "than", "one", "document", "."], "ru": ["\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c", "id", "\u0434\u043b\u044f", "\u0432\u0441\u0435\u0445", "\u0448\u0430\u0431\u043b\u043e\u043d\u043e\u0432", ",", "\u043a\u043e\u0442\u043e\u0440\u044b\u0435", "\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f", "\u0431\u043e\u043b\u0435\u0435", "\u0447\u0435\u043c", "\u0432", "\u043e\u0434\u043d\u043e\u043c", "\u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0435", "."]}, "query_toks": {"en": ["select", "template_id", "from", "documents", "group", "by", "template_id", "having", "count", "(", "*", ")", ">", "1", ";"], "ru": ["select", "template_id", "from", "documents", "group", "by", "template_id", "having", "count", "(", "*", ")", ">", "1", ";"]}, "query_toks_no_values": {"en": ["select", "template_id", "from", "documents", "group", "by", "template_id", "having", "count", "(", "*", ")", ">", "1", ";"], "ru": ["select", "template_id", "from", "documents", "group", "by", "template_id", "having", "count", "(", "*", ")", ">", "1", ";"]}, "masked_query": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1;", "question_pauq": {"ru": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c id \u0434\u043b\u044f \u0432\u0441\u0435\u0445 \u0448\u0430\u0431\u043b\u043e\u043d\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f \u0431\u043e\u043b\u0435\u0435 \u0447\u0435\u043c \u0432 \u043e\u0434\u043d\u043e\u043c \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0435."}, "question": "Show ids for all templates that are used by more than one document.", "kb_id": "cre_Doc_Template_Mgt"}, {"id": "D_0315", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 10, false], null]]]], "where": [], "groupBy": [[0, 10, false]], "having": [[false, 3, [0, [3, 0, false], null], 1.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 10, false], null]]]], "where": [], "groupBy": [[0, 10, false]], "having": [[false, 3, [0, [3, 0, false], null], 1.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "the", "template", "ids", "of", "any", "templates", "used", "in", "more", "than", "a", "single", "document", "?"], "ru": ["\u041a\u0430\u043a\u043e\u0432\u044b", "id", "\u043b\u044e\u0431\u044b\u0445", "\u0448\u0430\u0431\u043b\u043e\u043d\u043e\u0432", ",", "\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0445", "\u0431\u043e\u043b\u0435\u0435", "\u0447\u0435\u043c", "\u0432", "\u043e\u0434\u043d\u043e\u043c", "\u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0435", "?"]}, "query_toks": {"en": ["select", "template_id", "from", "documents", "group", "by", "template_id", "having", "count", "(", "*", ")", ">", "1", ";"], "ru": ["select", "template_id", "from", "documents", "group", "by", "template_id", "having", "count", "(", "*", ")", ">", "1", ";"]}, "query_toks_no_values": {"en": ["select", "template_id", "from", "documents", "group", "by", "template_id", "having", "count", "(", "*", ")", ">", "1", ";"], "ru": ["select", "template_id", "from", "documents", "group", "by", "template_id", "having", "count", "(", "*", ")", ">", "1", ";"]}, "masked_query": "SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1;", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0432\u044b id \u043b\u044e\u0431\u044b\u0445 \u0448\u0430\u0431\u043b\u043e\u043d\u043e\u0432, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0445 \u0431\u043e\u043b\u0435\u0435 \u0447\u0435\u043c \u0432 \u043e\u0434\u043d\u043e\u043c \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0435?"}, "question": "What are the template ids of any templates used in more than a single document?", "kb_id": "cre_Doc_Template_Mgt"}, {"id": "D_0316", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 3, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 10, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 3, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 10, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}}, "question_toks": {"en": ["Show", "ids", "for", "all", "templates", "not", "used", "by", "any", "document", "."], "ru": ["\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c", "id", "\u0434\u043b\u044f", "\u0432\u0441\u0435\u0445", "\u0448\u0430\u0431\u043b\u043e\u043d\u043e\u0432", ",", "\u043a\u043e\u0442\u043e\u0440\u044b\u0435", "\u043d\u0435", "\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f", "\u043d\u0438", "\u0432", "\u043e\u0434\u043d\u043e\u043c", "\u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0435", "."]}, "query_toks": {"en": ["select", "template_id", "from", "templates", "except", "select", "template_id", "from", "documents", ";"], "ru": ["select", "template_id", "from", "templates", "except", "select", "template_id", "from", "documents", ";"]}, "query_toks_no_values": {"en": ["select", "template_id", "from", "templates", "except", "select", "template_id", "from", "documents", ";"], "ru": ["select", "template_id", "from", "templates", "except", "select", "template_id", "from", "documents", ";"]}, "masked_query": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents;", "question_pauq": {"ru": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c id \u0434\u043b\u044f \u0432\u0441\u0435\u0445 \u0448\u0430\u0431\u043b\u043e\u043d\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f \u043d\u0438 \u0432 \u043e\u0434\u043d\u043e\u043c \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0435."}, "question": "Show ids for all templates not used by any document.", "kb_id": "cre_Doc_Template_Mgt"}, {"id": "D_0317", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 3, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 10, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 3, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 10, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}}, "question_toks": {"en": ["What", "are", "the", "ids", "for", "templates", "that", "are", "not", "used", "in", "any", "documents", "?"], "ru": ["\u041a\u0430\u043a\u0438\u0435", "id", "\u0443", "\u0448\u0430\u0431\u043b\u043e\u043d\u043e\u0432", ",", "\u043a\u043e\u0442\u043e\u0440\u044b\u0435", "\u043d\u0435", "\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f", "\u043d\u0438", "\u0432", "\u043a\u0430\u043a\u0438\u0445", "\u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0445", "?"]}, "query_toks": {"en": ["select", "template_id", "from", "templates", "except", "select", "template_id", "from", "documents", ";"], "ru": ["select", "template_id", "from", "templates", "except", "select", "template_id", "from", "documents", ";"]}, "query_toks_no_values": {"en": ["select", "template_id", "from", "templates", "except", "select", "template_id", "from", "documents", ";"], "ru": ["select", "template_id", "from", "templates", "except", "select", "template_id", "from", "documents", ";"]}, "masked_query": "SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents;", "question_pauq": {"ru": "\u041a\u0430\u043a\u0438\u0435 id \u0443 \u0448\u0430\u0431\u043b\u043e\u043d\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f \u043d\u0438 \u0432 \u043a\u0430\u043a\u0438\u0445 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0445?"}, "question": "What are the ids for templates that are not used in any documents?", "kb_id": "cre_Doc_Template_Mgt"}, {"id": "D_0318", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT count(*) FROM Templates;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["How", "many", "templates", "do", "we", "have", "?"], "ru": ["\u0421\u043a\u043e\u043b\u044c\u043a\u043e", "\u0443", "\u043d\u0430\u0441", "\u0448\u0430\u0431\u043b\u043e\u043d\u043e\u0432", "?"]}, "query_toks": {"en": ["select", "count", "(", "*", ")", "from", "templates", ";"], "ru": ["select", "count", "(", "*", ")", "from", "templates", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "*", ")", "from", "templates", ";"], "ru": ["select", "count", "(", "*", ")", "from", "templates", ";"]}, "masked_query": "SELECT count(*) FROM Templates;", "question_pauq": {"ru": "\u0421\u043a\u043e\u043b\u044c\u043a\u043e \u0443 \u043d\u0430\u0441 \u0448\u0430\u0431\u043b\u043e\u043d\u043e\u0432?"}, "question": "How many templates do we have?", "kb_id": "cre_Doc_Template_Mgt"}, {"id": "D_0319", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT count(*) FROM Templates;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Count", "the", "number", "of", "templates", "."], "ru": ["\u041f\u043e\u0434\u0441\u0447\u0438\u0442\u0430\u0439\u0442\u0435", "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e", "\u0448\u0430\u0431\u043b\u043e\u043d\u043e\u0432", "."]}, "query_toks": {"en": ["select", "count", "(", "*", ")", "from", "templates", ";"], "ru": ["select", "count", "(", "*", ")", "from", "templates", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "*", ")", "from", "templates", ";"], "ru": ["select", "count", "(", "*", ")", "from", "templates", ";"]}, "masked_query": "SELECT count(*) FROM Templates;", "question_pauq": {"ru": "\u041f\u043e\u0434\u0441\u0447\u0438\u0442\u0430\u0439\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0448\u0430\u0431\u043b\u043e\u043d\u043e\u0432."}, "question": "Count the number of templates.", "kb_id": "cre_Doc_Template_Mgt"}, {"id": "D_0320", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT template_id ,  version_number ,  template_type_code FROM Templates;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 3, false], null]], [0, [0, [0, 4, false], null]], [0, [0, [0, 5, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 3, false], null]], [0, [0, [0, 4, false], null]], [0, [0, [0, 5, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Show", "template", "ids", ",", "version", "numbers", ",", "and", "template", "type", "codes", "for", "all", "templates", "."], "ru": ["\u041e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435", "id", "\u0448\u0430\u0431\u043b\u043e\u043d\u043e\u0432", ",", "\u043d\u043e\u043c\u0435\u0440\u043e\u0432", "\u0432\u0435\u0440\u0441\u0438\u0439", "\u0438", "\u043a\u043e\u0434\u043e\u0432", "\u0442\u0438\u043f\u043e\u0432", "\u0448\u0430\u0431\u043b\u043e\u043d\u043e\u0432", "\u0434\u043b\u044f", "\u0432\u0441\u0435\u0445", "\u0448\u0430\u0431\u043b\u043e\u043d\u043e\u0432", "."]}, "query_toks": {"en": ["select", "template_id", ",", "version_number", ",", "template_type_code", "from", "templates", ";"], "ru": ["select", "template_id", ",", "version_number", ",", "template_type_code", "from", "templates", ";"]}, "query_toks_no_values": {"en": ["select", "template_id", ",", "version_number", ",", "template_type_code", "from", "templates", ";"], "ru": ["select", "template_id", ",", "version_number", ",", "template_type_code", "from", "templates", ";"]}, "masked_query": "SELECT template_id ,  version_number ,  template_type_code FROM Templates;", "question_pauq": {"ru": "\u041e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 id \u0448\u0430\u0431\u043b\u043e\u043d\u043e\u0432, \u043d\u043e\u043c\u0435\u0440\u043e\u0432 \u0432\u0435\u0440\u0441\u0438\u0439 \u0438 \u043a\u043e\u0434\u043e\u0432 \u0442\u0438\u043f\u043e\u0432 \u0448\u0430\u0431\u043b\u043e\u043d\u043e\u0432 \u0434\u043b\u044f \u0432\u0441\u0435\u0445 \u0448\u0430\u0431\u043b\u043e\u043d\u043e\u0432."}, "question": "Show template ids, version numbers, and template type codes for all templates.", "kb_id": "cre_Doc_Template_Mgt"}, {"id": "D_0321", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT template_id ,  version_number ,  template_type_code FROM Templates;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 3, false], null]], [0, [0, [0, 4, false], null]], [0, [0, [0, 5, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 3, false], null]], [0, [0, [0, 4, false], null]], [0, [0, [0, 5, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "the", "ids", ",", "version", "numbers", ",", "and", "type", "codes", "for", "each", "template", "?"], "ru": ["\u041a\u0430\u043a\u043e\u0432\u044b", "id", ",", "\u043d\u043e\u043c\u0435\u0440\u0430", "\u0432\u0435\u0440\u0441\u0438\u0439", "\u0438", "\u043a\u043e\u0434\u044b", "\u0442\u0438\u043f\u043e\u0432", "\u0434\u043b\u044f", "\u043a\u0430\u0436\u0434\u043e\u0433\u043e", "\u0448\u0430\u0431\u043b\u043e\u043d\u0430", "?"]}, "query_toks": {"en": ["select", "template_id", ",", "version_number", ",", "template_type_code", "from", "templates", ";"], "ru": ["select", "template_id", ",", "version_number", ",", "template_type_code", "from", "templates", ";"]}, "query_toks_no_values": {"en": ["select", "template_id", ",", "version_number", ",", "template_type_code", "from", "templates", ";"], "ru": ["select", "template_id", ",", "version_number", ",", "template_type_code", "from", "templates", ";"]}, "masked_query": "SELECT template_id ,  version_number ,  template_type_code FROM Templates;", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0432\u044b id, \u043d\u043e\u043c\u0435\u0440\u0430 \u0432\u0435\u0440\u0441\u0438\u0439 \u0438 \u043a\u043e\u0434\u044b \u0442\u0438\u043f\u043e\u0432 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0448\u0430\u0431\u043b\u043e\u043d\u0430?"}, "question": "What are the ids, version numbers, and type codes for each template?", "kb_id": "cre_Doc_Template_Mgt"}, {"id": "D_0322", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT DISTINCT template_type_code FROM Templates;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [true, [[0, [0, [0, 5, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [true, [[0, [0, [0, 5, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Show", "all", "distinct", "template", "type", "codes", "for", "all", "templates", "."], "ru": ["\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c", "\u0432\u0441\u0435", "\u043a\u043e\u0434\u044b", "\u0442\u0438\u043f\u043e\u0432", "\u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0445", "\u0448\u0430\u0431\u043b\u043e\u043d\u043e\u0432", "\u0434\u043b\u044f", "\u0432\u0441\u0435\u0445", "\u0448\u0430\u0431\u043b\u043e\u043d\u043e\u0432", "."]}, "query_toks": {"en": ["select", "distinct", "template_type_code", "from", "templates", ";"], "ru": ["select", "distinct", "template_type_code", "from", "templates", ";"]}, "query_toks_no_values": {"en": ["select", "distinct", "template_type_code", "from", "templates", ";"], "ru": ["select", "distinct", "template_type_code", "from", "templates", ";"]}, "masked_query": "SELECT DISTINCT template_type_code FROM Templates;", "question_pauq": {"ru": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0432\u0441\u0435 \u043a\u043e\u0434\u044b \u0442\u0438\u043f\u043e\u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0445 \u0448\u0430\u0431\u043b\u043e\u043d\u043e\u0432 \u0434\u043b\u044f \u0432\u0441\u0435\u0445 \u0448\u0430\u0431\u043b\u043e\u043d\u043e\u0432."}, "question": "Show all distinct template type codes for all templates.", "kb_id": "cre_Doc_Template_Mgt"}, {"id": "D_0323", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT DISTINCT template_type_code FROM Templates;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [true, [[0, [0, [0, 5, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [true, [[0, [0, [0, 5, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "the", "different", "template", "type", "codes", "?"], "ru": ["\u041a\u0430\u043a\u0438\u0435", "\u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0442", "\u043a\u043e\u0434\u044b", "\u0442\u0438\u043f\u043e\u0432", "\u0448\u0430\u0431\u043b\u043e\u043d\u043e\u0432", "?"]}, "query_toks": {"en": ["select", "distinct", "template_type_code", "from", "templates", ";"], "ru": ["select", "distinct", "template_type_code", "from", "templates", ";"]}, "query_toks_no_values": {"en": ["select", "distinct", "template_type_code", "from", "templates", ";"], "ru": ["select", "distinct", "template_type_code", "from", "templates", ";"]}, "masked_query": "SELECT DISTINCT template_type_code FROM Templates;", "question_pauq": {"ru": "\u041a\u0430\u043a\u0438\u0435 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0442 \u043a\u043e\u0434\u044b \u0442\u0438\u043f\u043e\u0432 \u0448\u0430\u0431\u043b\u043e\u043d\u043e\u0432?"}, "question": "What are the different template type codes?", "kb_id": "cre_Doc_Template_Mgt"}, {"id": "D_0324", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT template_id FROM Templates WHERE template_type_code  =  \"PP\" OR template_type_code  =  \"PPT\";"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 3, false], null]]]], "where": [[false, 2, [0, [0, 5, false], null], "\"PP\"", null], "or", [false, 2, [0, [0, 5, false], null], "\"PPT\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 3, false], null]]]], "where": [[false, 2, [0, [0, 5, false], null], "\"PP\"", null], "or", [false, 2, [0, [0, 5, false], null], "\"PPT\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "the", "ids", "of", "templates", "with", "template", "type", "code", "PP", "or", "PPT", "?"], "ru": ["\u041a\u0430\u043a\u043e\u0432\u044b", "id", "\u0448\u0430\u0431\u043b\u043e\u043d\u043e\u0432", "\u0441", "\u043a\u043e\u0434\u043e\u043c", "\u0442\u0438\u043f\u0430", "\u0448\u0430\u0431\u043b\u043e\u043d\u0430", "PP", "\u0438\u043b\u0438", "PPT", "?"]}, "query_toks": {"en": ["select", "template_id", "from", "templates", "where", "template_type_code", "=", "\"PP\"", "or", "template_type_code", "=", "\"PPT\"", ";"], "ru": ["select", "template_id", "from", "templates", "where", "template_type_code", "=", "\"PP\"", "or", "template_type_code", "=", "\"PPT\"", ";"]}, "query_toks_no_values": {"en": ["select", "template_id", "from", "templates", "where", "template_type_code", "=", "value", "or", "template_type_code", "=", "value", ";"], "ru": ["select", "template_id", "from", "templates", "where", "template_type_code", "=", "value", "or", "template_type_code", "=", "value", ";"]}, "masked_query": "SELECT template_id FROM Templates WHERE template_type_code  =  \"PP\" OR template_type_code  =  \"PPT\";", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0432\u044b id \u0448\u0430\u0431\u043b\u043e\u043d\u043e\u0432 \u0441 \u043a\u043e\u0434\u043e\u043c \u0442\u0438\u043f\u0430 \u0448\u0430\u0431\u043b\u043e\u043d\u0430 PP \u0438\u043b\u0438 PPT?"}, "question": "What are the ids of templates with template type code PP or PPT?", "kb_id": "cre_Doc_Template_Mgt"}, {"id": "D_0325", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT template_id FROM Templates WHERE template_type_code  =  \"PP\" OR template_type_code  =  \"PPT\";"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 3, false], null]]]], "where": [[false, 2, [0, [0, 5, false], null], "\"PP\"", null], "or", [false, 2, [0, [0, 5, false], null], "\"PPT\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 3, false], null]]]], "where": [[false, 2, [0, [0, 5, false], null], "\"PP\"", null], "or", [false, 2, [0, [0, 5, false], null], "\"PPT\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Return", "the", "ids", "of", "templates", "that", "have", "the", "code", "PP", "or", "PPT", "."], "ru": ["id", "\u0448\u0430\u0431\u043b\u043e\u043d\u043e\u0432", "\u0441", "\u043a\u043e\u0434\u043e\u043c", "PP", "\u0438\u043b\u0438", "PPT", "."]}, "query_toks": {"en": ["select", "template_id", "from", "templates", "where", "template_type_code", "=", "\"PP\"", "or", "template_type_code", "=", "\"PPT\"", ";"], "ru": ["select", "template_id", "from", "templates", "where", "template_type_code", "=", "\"PP\"", "or", "template_type_code", "=", "\"PPT\"", ";"]}, "query_toks_no_values": {"en": ["select", "template_id", "from", "templates", "where", "template_type_code", "=", "value", "or", "template_type_code", "=", "value", ";"], "ru": ["select", "template_id", "from", "templates", "where", "template_type_code", "=", "value", "or", "template_type_code", "=", "value", ";"]}, "masked_query": "SELECT template_id FROM Templates WHERE template_type_code  =  \"PP\" OR template_type_code  =  \"PPT\";", "question_pauq": {"ru": "id \u0448\u0430\u0431\u043b\u043e\u043d\u043e\u0432 \u0441 \u043a\u043e\u0434\u043e\u043c PP \u0438\u043b\u0438 PPT."}, "question": "Return the ids of templates that have the code PP or PPT.", "kb_id": "cre_Doc_Template_Mgt"}, {"id": "D_0326", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT count(*) FROM Templates WHERE template_type_code  =  \"CV\";"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 5, false], null], "\"CV\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 5, false], null], "\"CV\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["How", "many", "templates", "have", "template", "type", "code", "CV", "?"], "ru": ["\u0421\u043a\u043e\u043b\u044c\u043a\u043e", "\u0448\u0430\u0431\u043b\u043e\u043d\u043e\u0432", "\u0438\u043c\u0435\u044e\u0442", "\u043a\u043e\u0434", "\u0442\u0438\u043f\u0430", "CV", "?"]}, "query_toks": {"en": ["select", "count", "(", "*", ")", "from", "templates", "where", "template_type_code", "=", "\"CV\"", ";"], "ru": ["select", "count", "(", "*", ")", "from", "templates", "where", "template_type_code", "=", "\"CV\"", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "*", ")", "from", "templates", "where", "template_type_code", "=", "value", ";"], "ru": ["select", "count", "(", "*", ")", "from", "templates", "where", "template_type_code", "=", "value", ";"]}, "masked_query": "SELECT count(*) FROM Templates WHERE template_type_code  =  \"CV\";", "question_pauq": {"ru": "\u0421\u043a\u043e\u043b\u044c\u043a\u043e \u0448\u0430\u0431\u043b\u043e\u043d\u043e\u0432 \u0438\u043c\u0435\u044e\u0442 \u043a\u043e\u0434 \u0442\u0438\u043f\u0430 CV?"}, "question": "How many templates have template type code CV?", "kb_id": "cre_Doc_Template_Mgt"}, {"id": "D_0327", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT count(*) FROM Templates WHERE template_type_code  =  \"CV\";"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 5, false], null], "\"CV\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 5, false], null], "\"CV\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Count", "the", "number", "of", "templates", "of", "the", "type", "CV", "."], "ru": ["\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e", "\u0448\u0430\u0431\u043b\u043e\u043d\u043e\u0432", "\u0442\u0438\u043f\u0430", "CV", "."]}, "query_toks": {"en": ["select", "count", "(", "*", ")", "from", "templates", "where", "template_type_code", "=", "\"CV\"", ";"], "ru": ["select", "count", "(", "*", ")", "from", "templates", "where", "template_type_code", "=", "\"CV\"", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "*", ")", "from", "templates", "where", "template_type_code", "=", "value", ";"], "ru": ["select", "count", "(", "*", ")", "from", "templates", "where", "template_type_code", "=", "value", ";"]}, "masked_query": "SELECT count(*) FROM Templates WHERE template_type_code  =  \"CV\";", "question_pauq": {"ru": "\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0448\u0430\u0431\u043b\u043e\u043d\u043e\u0432 \u0442\u0438\u043f\u0430 CV."}, "question": "Count the number of templates of the type CV.", "kb_id": "cre_Doc_Template_Mgt"}, {"id": "D_0328", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 4, false], null]], [0, [0, [0, 5, false], null]]]], "where": [[false, 3, [0, [0, 4, false], null], 5.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 4, false], null]], [0, [0, [0, 5, false], null]]]], "where": [[false, 3, [0, [0, 4, false], null], 5.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "version", "number", "and", "template", "type", "code", "for", "the", "template", "with", "version", "number", "later", "than", "5", "?"], "ru": ["\u041a\u0430\u043a\u043e\u0439", "\u043d\u043e\u043c\u0435\u0440", "\u0432\u0435\u0440\u0441\u0438\u0438", "\u0438", "\u043a\u043e\u0434", "\u0442\u0438\u043f\u0430", "\u0448\u0430\u0431\u043b\u043e\u043d\u0430", "\u0434\u043b\u044f", "\u0448\u0430\u0431\u043b\u043e\u043d\u0430", "\u0441", "\u043d\u043e\u043c\u0435\u0440\u043e\u043c", "\u0432\u0435\u0440\u0441\u0438\u0438", "\u0441\u0442\u0430\u0440\u0448\u0435", "5", "?"]}, "query_toks": {"en": ["select", "version_number", ",", "template_type_code", "from", "templates", "where", "version_number", ">", "5", ";"], "ru": ["select", "version_number", ",", "template_type_code", "from", "templates", "where", "version_number", ">", "5", ";"]}, "query_toks_no_values": {"en": ["select", "version_number", ",", "template_type_code", "from", "templates", "where", "version_number", ">", "5", ";"], "ru": ["select", "version_number", ",", "template_type_code", "from", "templates", "where", "version_number", ">", "5", ";"]}, "masked_query": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5;", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0439 \u043d\u043e\u043c\u0435\u0440 \u0432\u0435\u0440\u0441\u0438\u0438 \u0438 \u043a\u043e\u0434 \u0442\u0438\u043f\u0430 \u0448\u0430\u0431\u043b\u043e\u043d\u0430 \u0434\u043b\u044f \u0448\u0430\u0431\u043b\u043e\u043d\u0430 \u0441 \u043d\u043e\u043c\u0435\u0440\u043e\u043c \u0432\u0435\u0440\u0441\u0438\u0438 \u0441\u0442\u0430\u0440\u0448\u0435 5?"}, "question": "What is the version number and template type code for the template with version number later than 5?", "kb_id": "cre_Doc_Template_Mgt"}, {"id": "D_0329", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 4, false], null]], [0, [0, [0, 5, false], null]]]], "where": [[false, 3, [0, [0, 4, false], null], 5.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 4, false], null]], [0, [0, [0, 5, false], null]]]], "where": [[false, 3, [0, [0, 4, false], null], 5.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Return", "the", "version", "numbers", "and", "template", "type", "codes", "of", "templates", "with", "a", "version", "number", "greater", "than", "5", "."], "ru": ["\u041f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c", "\u043d\u043e\u043c\u0435\u0440\u0430", "\u0432\u0435\u0440\u0441\u0438\u0439", "\u0438", "\u043a\u043e\u0434\u044b", "\u0442\u0438\u043f\u043e\u0432", "\u0448\u0430\u0431\u043b\u043e\u043d\u043e\u0432", "\u0434\u043b\u044f", "\u0448\u0430\u0431\u043b\u043e\u043d\u043e\u0432", "\u0441", "\u043d\u043e\u043c\u0435\u0440\u043e\u043c", "\u0432\u0435\u0440\u0441\u0438\u0438", "\u0431\u043e\u043b\u044c\u0448\u0435", "5", "."]}, "query_toks": {"en": ["select", "version_number", ",", "template_type_code", "from", "templates", "where", "version_number", ">", "5", ";"], "ru": ["select", "version_number", ",", "template_type_code", "from", "templates", "where", "version_number", ">", "5", ";"]}, "query_toks_no_values": {"en": ["select", "version_number", ",", "template_type_code", "from", "templates", "where", "version_number", ">", "5", ";"], "ru": ["select", "version_number", ",", "template_type_code", "from", "templates", "where", "version_number", ">", "5", ";"]}, "masked_query": "SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5;", "question_pauq": {"ru": "\u041f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c \u043d\u043e\u043c\u0435\u0440\u0430 \u0432\u0435\u0440\u0441\u0438\u0439 \u0438 \u043a\u043e\u0434\u044b \u0442\u0438\u043f\u043e\u0432 \u0448\u0430\u0431\u043b\u043e\u043d\u043e\u0432 \u0434\u043b\u044f \u0448\u0430\u0431\u043b\u043e\u043d\u043e\u0432 \u0441 \u043d\u043e\u043c\u0435\u0440\u043e\u043c \u0432\u0435\u0440\u0441\u0438\u0438 \u0431\u043e\u043b\u044c\u0448\u0435 5."}, "question": "Return the version numbers and template type codes of templates with a version number greater than 5.", "kb_id": "cre_Doc_Template_Mgt"}, {"id": "D_0330", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 5, false], null]], [3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [[0, 5, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 5, false], null]], [3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [[0, 5, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Show", "all", "template", "type", "codes", "and", "number", "of", "templates", "for", "each", "."], "ru": ["\u041f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c", "\u0432\u0441\u0435", "\u043a\u043e\u0434\u044b", "\u0442\u0438\u043f\u043e\u0432", "\u0448\u0430\u0431\u043b\u043e\u043d\u043e\u0432", "\u0438", "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e", "\u0448\u0430\u0431\u043b\u043e\u043d\u043e\u0432", "\u0434\u043b\u044f", "\u043a\u0430\u0436\u0434\u043e\u0433\u043e", "\u0442\u0438\u043f\u0430", "."]}, "query_toks": {"en": ["select", "template_type_code", ",", "count", "(", "*", ")", "from", "templates", "group", "by", "template_type_code", ";"], "ru": ["select", "template_type_code", ",", "count", "(", "*", ")", "from", "templates", "group", "by", "template_type_code", ";"]}, "query_toks_no_values": {"en": ["select", "template_type_code", ",", "count", "(", "*", ")", "from", "templates", "group", "by", "template_type_code", ";"], "ru": ["select", "template_type_code", ",", "count", "(", "*", ")", "from", "templates", "group", "by", "template_type_code", ";"]}, "masked_query": "SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code;", "question_pauq": {"ru": "\u041f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c \u0432\u0441\u0435 \u043a\u043e\u0434\u044b \u0442\u0438\u043f\u043e\u0432 \u0448\u0430\u0431\u043b\u043e\u043d\u043e\u0432 \u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0448\u0430\u0431\u043b\u043e\u043d\u043e\u0432 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0442\u0438\u043f\u0430."}, "question": "Show all template type codes and number of templates for each.", "kb_id": "cre_Doc_Template_Mgt"}, {"id": "D_0331", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 5, false], null]], [3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [[0, 5, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 5, false], null]], [3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [[0, 5, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "the", "different", "template", "type", "codes", ",", "and", "how", "many", "templates", "correspond", "to", "each", "?"], "ru": ["\u041a\u0430\u043a\u043e\u0432\u044b", "\u0440\u0430\u0437\u043d\u044b\u0435", "\u043a\u043e\u0434\u044b", "\u0442\u0438\u043f\u043e\u0432", "\u0448\u0430\u0431\u043b\u043e\u043d\u043e\u0432", "\u0438", "\u0441\u043a\u043e\u043b\u044c\u043a\u043e", "\u0448\u0430\u0431\u043b\u043e\u043d\u043e\u0432", "\u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442", "\u043a\u0430\u0436\u0434\u043e\u043c\u0443", "\u0438\u0437", "\u043d\u0438\u0445", "?"]}, "query_toks": {"en": ["select", "template_type_code", ",", "count", "(", "*", ")", "from", "templates", "group", "by", "template_type_code", ";"], "ru": ["select", "template_type_code", ",", "count", "(", "*", ")", "from", "templates", "group", "by", "template_type_code", ";"]}, "query_toks_no_values": {"en": ["select", "template_type_code", ",", "count", "(", "*", ")", "from", "templates", "group", "by", "template_type_code", ";"], "ru": ["select", "template_type_code", ",", "count", "(", "*", ")", "from", "templates", "group", "by", "template_type_code", ";"]}, "masked_query": "SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code;", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0432\u044b \u0440\u0430\u0437\u043d\u044b\u0435 \u043a\u043e\u0434\u044b \u0442\u0438\u043f\u043e\u0432 \u0448\u0430\u0431\u043b\u043e\u043d\u043e\u0432 \u0438 \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0448\u0430\u0431\u043b\u043e\u043d\u043e\u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u0438\u0437 \u043d\u0438\u0445?"}, "question": "What are the different template type codes, and how many templates correspond to each?", "kb_id": "cre_Doc_Template_Mgt"}, {"id": "D_0332", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 5, false], null]]]], "where": [], "groupBy": [[0, 5, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 5, false], null]]]], "where": [], "groupBy": [[0, 5, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Which", "template", "type", "code", "has", "most", "number", "of", "templates", "?"], "ru": ["\u041a\u043e\u0434", "\u043a\u0430\u043a\u043e\u0433\u043e", "\u0442\u0438\u043f\u0430", "\u0448\u0430\u0431\u043b\u043e\u043d\u0430", "\u0438\u043c\u0435\u0435\u0442", "\u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0435\u0435", "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e", "\u0448\u0430\u0431\u043b\u043e\u043d\u043e\u0432", "?"]}, "query_toks": {"en": ["select", "template_type_code", "from", "templates", "group", "by", "template_type_code", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"], "ru": ["select", "template_type_code", "from", "templates", "group", "by", "template_type_code", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"]}, "query_toks_no_values": {"en": ["select", "template_type_code", "from", "templates", "group", "by", "template_type_code", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"], "ru": ["select", "template_type_code", "from", "templates", "group", "by", "template_type_code", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"]}, "masked_query": "SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1;", "question_pauq": {"ru": "\u041a\u043e\u0434 \u043a\u0430\u043a\u043e\u0433\u043e \u0442\u0438\u043f\u0430 \u0448\u0430\u0431\u043b\u043e\u043d\u0430 \u0438\u043c\u0435\u0435\u0442 \u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0448\u0430\u0431\u043b\u043e\u043d\u043e\u0432?"}, "question": "Which template type code has most number of templates?", "kb_id": "cre_Doc_Template_Mgt"}, {"id": "D_0333", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 5, false], null]]]], "where": [], "groupBy": [[0, 5, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 5, false], null]]]], "where": [], "groupBy": [[0, 5, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Return", "the", "type", "code", "of", "the", "template", "type", "that", "the", "most", "templates", "belong", "to", "."], "ru": ["\u041a\u043e\u0434", "\u0442\u0438\u043f\u0430", "\u0448\u0430\u0431\u043b\u043e\u043d\u0430", ",", "\u043a\u043e\u0442\u043e\u0440\u043e\u043c\u0443", "\u043f\u0440\u0438\u043d\u0430\u0434\u043b\u0435\u0436\u0438\u0442", "\u0431\u043e\u043b\u044c\u0448\u0438\u043d\u0441\u0442\u0432\u043e", "\u0448\u0430\u0431\u043b\u043e\u043d\u043e\u0432", "."]}, "query_toks": {"en": ["select", "template_type_code", "from", "templates", "group", "by", "template_type_code", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"], "ru": ["select", "template_type_code", "from", "templates", "group", "by", "template_type_code", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"]}, "query_toks_no_values": {"en": ["select", "template_type_code", "from", "templates", "group", "by", "template_type_code", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"], "ru": ["select", "template_type_code", "from", "templates", "group", "by", "template_type_code", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"]}, "masked_query": "SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1;", "question_pauq": {"ru": "\u041a\u043e\u0434 \u0442\u0438\u043f\u0430 \u0448\u0430\u0431\u043b\u043e\u043d\u0430, \u043a\u043e\u0442\u043e\u0440\u043e\u043c\u0443 \u043f\u0440\u0438\u043d\u0430\u0434\u043b\u0435\u0436\u0438\u0442 \u0431\u043e\u043b\u044c\u0448\u0438\u043d\u0441\u0442\u0432\u043e \u0448\u0430\u0431\u043b\u043e\u043d\u043e\u0432."}, "question": "Return the type code of the template type that the most templates belong to.", "kb_id": "cre_Doc_Template_Mgt"}, {"id": "D_0334", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 5, false], null]]]], "where": [], "groupBy": [[0, 5, false]], "having": [[false, 4, [0, [3, 0, false], null], 3.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 5, false], null]]]], "where": [], "groupBy": [[0, 5, false]], "having": [[false, 4, [0, [3, 0, false], null], 3.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Show", "all", "template", "type", "codes", "with", "less", "than", "three", "templates", "."], "ru": ["\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c", "\u0432\u0441\u0435", "\u043a\u043e\u0434\u044b", "\u0442\u0438\u043f\u043e\u0432", "\u0448\u0430\u0431\u043b\u043e\u043d\u043e\u0432", "\u0441", "\u043c\u0435\u043d\u0435\u0435", "\u0447\u0435\u043c", "\u0442\u0440\u0435\u043c\u044f", "\u0448\u0430\u0431\u043b\u043e\u043d\u0430\u043c\u0438", "."]}, "query_toks": {"en": ["select", "template_type_code", "from", "templates", "group", "by", "template_type_code", "having", "count", "(", "*", ")", "<", "3", ";"], "ru": ["select", "template_type_code", "from", "templates", "group", "by", "template_type_code", "having", "count", "(", "*", ")", "<", "3", ";"]}, "query_toks_no_values": {"en": ["select", "template_type_code", "from", "templates", "group", "by", "template_type_code", "having", "count", "(", "*", ")", "<", "3", ";"], "ru": ["select", "template_type_code", "from", "templates", "group", "by", "template_type_code", "having", "count", "(", "*", ")", "<", "3", ";"]}, "masked_query": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3;", "question_pauq": {"ru": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0432\u0441\u0435 \u043a\u043e\u0434\u044b \u0442\u0438\u043f\u043e\u0432 \u0448\u0430\u0431\u043b\u043e\u043d\u043e\u0432 \u0441 \u043c\u0435\u043d\u0435\u0435 \u0447\u0435\u043c \u0442\u0440\u0435\u043c\u044f \u0448\u0430\u0431\u043b\u043e\u043d\u0430\u043c\u0438."}, "question": "Show all template type codes with less than three templates.", "kb_id": "cre_Doc_Template_Mgt"}, {"id": "D_0335", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 5, false], null]]]], "where": [], "groupBy": [[0, 5, false]], "having": [[false, 4, [0, [3, 0, false], null], 3.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 5, false], null]]]], "where": [], "groupBy": [[0, 5, false]], "having": [[false, 4, [0, [3, 0, false], null], 3.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "the", "codes", "of", "template", "types", "that", "have", "fewer", "than", "3", "templates", "?"], "ru": ["\u041a\u0430\u043a\u0438\u0435", "\u043a\u043e\u0434\u044b", "\u0442\u0438\u043f\u043e\u0432", "\u0448\u0430\u0431\u043b\u043e\u043d\u043e\u0432", "\u0438\u043c\u0435\u044e\u0442", "\u043c\u0435\u043d\u0435\u0435", "3", "\u0448\u0430\u0431\u043b\u043e\u043d\u043e\u0432", "?"]}, "query_toks": {"en": ["select", "template_type_code", "from", "templates", "group", "by", "template_type_code", "having", "count", "(", "*", ")", "<", "3", ";"], "ru": ["select", "template_type_code", "from", "templates", "group", "by", "template_type_code", "having", "count", "(", "*", ")", "<", "3", ";"]}, "query_toks_no_values": {"en": ["select", "template_type_code", "from", "templates", "group", "by", "template_type_code", "having", "count", "(", "*", ")", "<", "3", ";"], "ru": ["select", "template_type_code", "from", "templates", "group", "by", "template_type_code", "having", "count", "(", "*", ")", "<", "3", ";"]}, "masked_query": "SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3;", "question_pauq": {"ru": "\u041a\u0430\u043a\u0438\u0435 \u043a\u043e\u0434\u044b \u0442\u0438\u043f\u043e\u0432 \u0448\u0430\u0431\u043b\u043e\u043d\u043e\u0432 \u0438\u043c\u0435\u044e\u0442 \u043c\u0435\u043d\u0435\u0435 3 \u0448\u0430\u0431\u043b\u043e\u043d\u043e\u0432?"}, "question": "What are the codes of template types that have fewer than 3 templates?", "kb_id": "cre_Doc_Template_Mgt"}, {"id": "D_0336", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT min(Version_Number) ,  template_type_code FROM Templates;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[2, [0, [0, 4, false], null]], [0, [0, [0, 5, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[2, [0, [0, 4, false], null]], [0, [0, [0, 5, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "the", "smallest", "version", "number", "and", "its", "template", "type", "code", "?"], "ru": ["\u041a\u0430\u043a\u043e\u0439", "\u043d\u0430\u0438\u043c\u0435\u043d\u044c\u0448\u0438\u0439", "\u043d\u043e\u043c\u0435\u0440", "\u0432\u0435\u0440\u0441\u0438\u0438", "\u0438", "\u0435\u0435", "\u043a\u043e\u0434", "\u0442\u0438\u043f\u0430", "\u0448\u0430\u0431\u043b\u043e\u043d\u0430", "?"]}, "query_toks": {"en": ["select", "min", "(", "version_number", ")", ",", "template_type_code", "from", "templates", ";"], "ru": ["select", "min", "(", "version_number", ")", ",", "template_type_code", "from", "templates", ";"]}, "query_toks_no_values": {"en": ["select", "min", "(", "version_number", ")", ",", "template_type_code", "from", "templates", ";"], "ru": ["select", "min", "(", "version_number", ")", ",", "template_type_code", "from", "templates", ";"]}, "masked_query": "SELECT min(Version_Number) ,  template_type_code FROM Templates;", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0439 \u043d\u0430\u0438\u043c\u0435\u043d\u044c\u0448\u0438\u0439 \u043d\u043e\u043c\u0435\u0440 \u0432\u0435\u0440\u0441\u0438\u0438 \u0438 \u0435\u0435 \u043a\u043e\u0434 \u0442\u0438\u043f\u0430 \u0448\u0430\u0431\u043b\u043e\u043d\u0430?"}, "question": "What the smallest version number and its template type code?", "kb_id": "cre_Doc_Template_Mgt"}, {"id": "D_0337", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT min(Version_Number) ,  template_type_code FROM Templates;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[2, [0, [0, 4, false], null]], [0, [0, [0, 5, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[2, [0, [0, 4, false], null]], [0, [0, [0, 5, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Return", "the", "lowest", "version", "number", ",", "along", "with", "its", "corresponding", "template", "type", "code", "."], "ru": ["\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c", "\u043d\u0430\u0438\u043c\u0435\u043d\u044c\u0448\u0438\u0439", "\u043d\u043e\u043c\u0435\u0440", "\u0432\u0435\u0440\u0441\u0438\u0438", "\u0432\u043c\u0435\u0441\u0442\u0435", "\u0441", "\u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u043c", "\u043a\u043e\u0434\u043e\u043c", "\u0442\u0438\u043f\u0430", "\u0448\u0430\u0431\u043b\u043e\u043d\u0430", "."]}, "query_toks": {"en": ["select", "min", "(", "version_number", ")", ",", "template_type_code", "from", "templates", ";"], "ru": ["select", "min", "(", "version_number", ")", ",", "template_type_code", "from", "templates", ";"]}, "query_toks_no_values": {"en": ["select", "min", "(", "version_number", ")", ",", "template_type_code", "from", "templates", ";"], "ru": ["select", "min", "(", "version_number", ")", ",", "template_type_code", "from", "templates", ";"]}, "masked_query": "SELECT min(Version_Number) ,  template_type_code FROM Templates;", "question_pauq": {"ru": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u043d\u0430\u0438\u043c\u0435\u043d\u044c\u0448\u0438\u0439 \u043d\u043e\u043c\u0435\u0440 \u0432\u0435\u0440\u0441\u0438\u0438 \u0432\u043c\u0435\u0441\u0442\u0435 \u0441 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u043c \u043a\u043e\u0434\u043e\u043c \u0442\u0438\u043f\u0430 \u0448\u0430\u0431\u043b\u043e\u043d\u0430."}, "question": "Return the lowest version number, along with its corresponding template type code.", "kb_id": "cre_Doc_Template_Mgt"}, {"id": "D_0338", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"\u0421\u043f\u0438\u0441\u043e\u043a \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432\";"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 3, false], null], [0, 10, false], null]]}, "select": [false, [[0, [0, [0, 5, false], null]]]], "where": [[false, 2, [0, [0, 11, false], null], "\"Data base\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 3, false], null], [0, 10, false], null]]}, "select": [false, [[0, [0, [0, 5, false], null]]]], "where": [[false, 2, [0, [0, 11, false], null], "\"\u0421\u043f\u0438\u0441\u043e\u043a \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "template", "type", "code", "of", "the", "template", "used", "by", "document", "with", "the", "name", "``", "Data", "base", "''", "?"], "ru": ["\u041a\u0430\u043a\u043e\u0439", "\u043a\u043e\u0434", "\u0442\u0438\u043f\u0430", "\u0448\u0430\u0431\u043b\u043e\u043d\u0430", "\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f", "\u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u043e\u043c", "\u0441", "\u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435\u043c", "\u00ab", "\u0421\u043f\u0438\u0441\u043e\u043a", "\u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432", "\u00bb", "?"]}, "query_toks": {"en": ["select", "t1.template_type_code", "from", "templates", "as", "t1", "join", "documents", "as", "t2", "on", "t1.template_id", "=", "t2.template_id", "where", "t2.document_name", "=", "\"Data base\"", ";"], "ru": ["select", "t1.template_type_code", "from", "templates", "as", "t1", "join", "documents", "as", "t2", "on", "t1.template_id", "=", "t2.template_id", "where", "t2.document_name", "=", "\"\u0421\u043f\u0438\u0441\u043e\u043a \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432\"", ";"]}, "query_toks_no_values": {"en": ["select", "t1.template_type_code", "from", "templates", "as", "t1", "join", "documents", "as", "t2", "on", "t1.template_id", "=", "t2.template_id", "where", "t2.document_name", "=", "value", ";"], "ru": ["select", "t1.template_type_code", "from", "templates", "as", "t1", "join", "documents", "as", "t2", "on", "t1.template_id", "=", "t2.template_id", "where", "t2.document_name", "=", "value", ";"]}, "masked_query": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\";", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0439 \u043a\u043e\u0434 \u0442\u0438\u043f\u0430 \u0448\u0430\u0431\u043b\u043e\u043d\u0430 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u043e\u043c \u0441 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435\u043c \u00ab\u0421\u043f\u0438\u0441\u043e\u043a \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432\u00bb?"}, "question": "What is the template type code of the template used by document with the name \"Data base\"?", "kb_id": "cre_Doc_Template_Mgt"}, {"id": "D_0339", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"\u0421\u043f\u0438\u0441\u043e\u043a \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432\";"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 3, false], null], [0, 10, false], null]]}, "select": [false, [[0, [0, [0, 5, false], null]]]], "where": [[false, 2, [0, [0, 11, false], null], "\"Data base\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 3, false], null], [0, 10, false], null]]}, "select": [false, [[0, [0, [0, 5, false], null]]]], "where": [[false, 2, [0, [0, 11, false], null], "\"\u0421\u043f\u0438\u0441\u043e\u043a \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Return", "the", "template", "type", "code", "of", "the", "template", "that", "is", "used", "by", "a", "document", "named", "Data", "base", "."], "ru": ["\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c", "\u043a\u043e\u0434", "\u0442\u0438\u043f\u0430", "\u0448\u0430\u0431\u043b\u043e\u043d\u0430", "\u0443", "\u0448\u0430\u0431\u043b\u043e\u043d\u0430", ",", "\u043a\u043e\u0442\u043e\u0440\u044b\u0439", "\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f", "\u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u043e\u043c", "\u0441", "\u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435\u043c", "\u0421\u043f\u0438\u0441\u043e\u043a", "\u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432", "."]}, "query_toks": {"en": ["select", "t1.template_type_code", "from", "templates", "as", "t1", "join", "documents", "as", "t2", "on", "t1.template_id", "=", "t2.template_id", "where", "t2.document_name", "=", "\"Data base\"", ";"], "ru": ["select", "t1.template_type_code", "from", "templates", "as", "t1", "join", "documents", "as", "t2", "on", "t1.template_id", "=", "t2.template_id", "where", "t2.document_name", "=", "\"\u0421\u043f\u0438\u0441\u043e\u043a \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432\"", ";"]}, "query_toks_no_values": {"en": ["select", "t1.template_type_code", "from", "templates", "as", "t1", "join", "documents", "as", "t2", "on", "t1.template_id", "=", "t2.template_id", "where", "t2.document_name", "=", "value", ";"], "ru": ["select", "t1.template_type_code", "from", "templates", "as", "t1", "join", "documents", "as", "t2", "on", "t1.template_id", "=", "t2.template_id", "where", "t2.document_name", "=", "value", ";"]}, "masked_query": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\";", "question_pauq": {"ru": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u043a\u043e\u0434 \u0442\u0438\u043f\u0430 \u0448\u0430\u0431\u043b\u043e\u043d\u0430 \u0443 \u0448\u0430\u0431\u043b\u043e\u043d\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u043e\u043c \u0441 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435\u043c \u0421\u043f\u0438\u0441\u043e\u043a \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432."}, "question": "Return the template type code of the template that is used by a document named Data base.", "kb_id": "cre_Doc_Template_Mgt"}, {"id": "D_0340", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  \"BK\";"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 3, false], null], [0, 10, false], null]]}, "select": [false, [[0, [0, [0, 11, false], null]]]], "where": [[false, 2, [0, [0, 5, false], null], "\"BK\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 3, false], null], [0, 10, false], null]]}, "select": [false, [[0, [0, [0, 11, false], null]]]], "where": [[false, 2, [0, [0, 5, false], null], "\"BK\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Show", "all", "document", "names", "using", "templates", "with", "template", "type", "code", "BK", "."], "ru": ["\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c", "\u0432\u0441\u0435", "\u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f", "\u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u043e\u0432", "\u0441", "\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c", "\u0448\u0430\u0431\u043b\u043e\u043d\u043e\u0432", "\u0441", "\u043a\u043e\u0434\u043e\u043c", "\u0442\u0438\u043f\u0430", "\u0448\u0430\u0431\u043b\u043e\u043d\u0430", "BK", "."]}, "query_toks": {"en": ["select", "t2.document_name", "from", "templates", "as", "t1", "join", "documents", "as", "t2", "on", "t1.template_id", "=", "t2.template_id", "where", "t1.template_type_code", "=", "\"BK\"", ";"], "ru": ["select", "t2.document_name", "from", "templates", "as", "t1", "join", "documents", "as", "t2", "on", "t1.template_id", "=", "t2.template_id", "where", "t1.template_type_code", "=", "\"BK\"", ";"]}, "query_toks_no_values": {"en": ["select", "t2.document_name", "from", "templates", "as", "t1", "join", "documents", "as", "t2", "on", "t1.template_id", "=", "t2.template_id", "where", "t1.template_type_code", "=", "value", ";"], "ru": ["select", "t2.document_name", "from", "templates", "as", "t1", "join", "documents", "as", "t2", "on", "t1.template_id", "=", "t2.template_id", "where", "t1.template_type_code", "=", "value", ";"]}, "masked_query": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  \"BK\";", "question_pauq": {"ru": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0432\u0441\u0435 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u043e\u0432 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u0448\u0430\u0431\u043b\u043e\u043d\u043e\u0432 \u0441 \u043a\u043e\u0434\u043e\u043c \u0442\u0438\u043f\u0430 \u0448\u0430\u0431\u043b\u043e\u043d\u0430 BK."}, "question": "Show all document names using templates with template type code BK.", "kb_id": "cre_Doc_Template_Mgt"}, {"id": "D_0341", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  \"BK\";"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 3, false], null], [0, 10, false], null]]}, "select": [false, [[0, [0, [0, 11, false], null]]]], "where": [[false, 2, [0, [0, 5, false], null], "\"BK\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 3, false], null], [0, 10, false], null]]}, "select": [false, [[0, [0, [0, 11, false], null]]]], "where": [[false, 2, [0, [0, 5, false], null], "\"BK\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "the", "names", "of", "documents", "that", "use", "templates", "with", "the", "code", "BK", "?"], "ru": ["\u041a\u0430\u043a", "\u043d\u0430\u0437\u044b\u0432\u0430\u044e\u0442\u0441\u044f", "\u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u044b", ",", "\u0432", "\u043a\u043e\u0442\u043e\u0440\u044b\u0445", "\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f", "\u0448\u0430\u0431\u043b\u043e\u043d\u044b", "\u0441", "\u043a\u043e\u0434\u043e\u043c", "BK", "?"]}, "query_toks": {"en": ["select", "t2.document_name", "from", "templates", "as", "t1", "join", "documents", "as", "t2", "on", "t1.template_id", "=", "t2.template_id", "where", "t1.template_type_code", "=", "\"BK\"", ";"], "ru": ["select", "t2.document_name", "from", "templates", "as", "t1", "join", "documents", "as", "t2", "on", "t1.template_id", "=", "t2.template_id", "where", "t1.template_type_code", "=", "\"BK\"", ";"]}, "query_toks_no_values": {"en": ["select", "t2.document_name", "from", "templates", "as", "t1", "join", "documents", "as", "t2", "on", "t1.template_id", "=", "t2.template_id", "where", "t1.template_type_code", "=", "value", ";"], "ru": ["select", "t2.document_name", "from", "templates", "as", "t1", "join", "documents", "as", "t2", "on", "t1.template_id", "=", "t2.template_id", "where", "t1.template_type_code", "=", "value", ";"]}, "masked_query": "SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  \"BK\";", "question_pauq": {"ru": "\u041a\u0430\u043a \u043d\u0430\u0437\u044b\u0432\u0430\u044e\u0442\u0441\u044f \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u044b, \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f \u0448\u0430\u0431\u043b\u043e\u043d\u044b \u0441 \u043a\u043e\u0434\u043e\u043c BK?"}, "question": "What are the names of documents that use templates with the code BK?", "kb_id": "cre_Doc_Template_Mgt"}, {"id": "D_0342", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 3, false], null], [0, 10, false], null]]}, "select": [false, [[0, [0, [0, 5, false], null]], [3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [[0, 5, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 3, false], null], [0, 10, false], null]]}, "select": [false, [[0, [0, [0, 5, false], null]], [3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [[0, 5, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Show", "all", "template", "type", "codes", "and", "the", "number", "of", "documents", "using", "each", "type", "."], "ru": ["\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c", "\u0432\u0441\u0435", "\u043a\u043e\u0434\u044b", "\u0442\u0438\u043f\u043e\u0432", "\u0448\u0430\u0431\u043b\u043e\u043d\u043e\u0432", "\u0438", "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e", "\u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u043e\u0432", ",", "\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0449\u0438\u0445", "\u043a\u0430\u0436\u0434\u044b\u0439", "\u0442\u0438\u043f", "."]}, "query_toks": {"en": ["select", "t1.template_type_code", ",", "count", "(", "*", ")", "from", "templates", "as", "t1", "join", "documents", "as", "t2", "on", "t1.template_id", "=", "t2.template_id", "group", "by", "t1.template_type_code", ";"], "ru": ["select", "t1.template_type_code", ",", "count", "(", "*", ")", "from", "templates", "as", "t1", "join", "documents", "as", "t2", "on", "t1.template_id", "=", "t2.template_id", "group", "by", "t1.template_type_code", ";"]}, "query_toks_no_values": {"en": ["select", "t1.template_type_code", ",", "count", "(", "*", ")", "from", "templates", "as", "t1", "join", "documents", "as", "t2", "on", "t1.template_id", "=", "t2.template_id", "group", "by", "t1.template_type_code", ";"], "ru": ["select", "t1.template_type_code", ",", "count", "(", "*", ")", "from", "templates", "as", "t1", "join", "documents", "as", "t2", "on", "t1.template_id", "=", "t2.template_id", "group", "by", "t1.template_type_code", ";"]}, "masked_query": "SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code;", "question_pauq": {"ru": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0432\u0441\u0435 \u043a\u043e\u0434\u044b \u0442\u0438\u043f\u043e\u0432 \u0448\u0430\u0431\u043b\u043e\u043d\u043e\u0432 \u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u043e\u0432, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0449\u0438\u0445 \u043a\u0430\u0436\u0434\u044b\u0439 \u0442\u0438\u043f."}, "question": "Show all template type codes and the number of documents using each type.", "kb_id": "cre_Doc_Template_Mgt"}, {"id": "D_0343", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 3, false], null], [0, 10, false], null]]}, "select": [false, [[0, [0, [0, 5, false], null]], [3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [[0, 5, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 3, false], null], [0, 10, false], null]]}, "select": [false, [[0, [0, [0, 5, false], null]], [3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [[0, 5, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "the", "different", "template", "type", "codes", ",", "and", "how", "many", "documents", "use", "each", "type", "?"], "ru": ["\u041a\u0430\u043a\u043e\u0432\u044b", "\u0440\u0430\u0437\u043d\u044b\u0435", "\u043a\u043e\u0434\u044b", "\u0442\u0438\u043f\u043e\u0432", "\u0448\u0430\u0431\u043b\u043e\u043d\u043e\u0432", "\u0438", "\u0432", "\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445", "\u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0445", "\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f", "\u043a\u0430\u0436\u0434\u044b\u0439", "\u0442\u0438\u043f", "?"]}, "query_toks": {"en": ["select", "t1.template_type_code", ",", "count", "(", "*", ")", "from", "templates", "as", "t1", "join", "documents", "as", "t2", "on", "t1.template_id", "=", "t2.template_id", "group", "by", "t1.template_type_code", ";"], "ru": ["select", "t1.template_type_code", ",", "count", "(", "*", ")", "from", "templates", "as", "t1", "join", "documents", "as", "t2", "on", "t1.template_id", "=", "t2.template_id", "group", "by", "t1.template_type_code", ";"]}, "query_toks_no_values": {"en": ["select", "t1.template_type_code", ",", "count", "(", "*", ")", "from", "templates", "as", "t1", "join", "documents", "as", "t2", "on", "t1.template_id", "=", "t2.template_id", "group", "by", "t1.template_type_code", ";"], "ru": ["select", "t1.template_type_code", ",", "count", "(", "*", ")", "from", "templates", "as", "t1", "join", "documents", "as", "t2", "on", "t1.template_id", "=", "t2.template_id", "group", "by", "t1.template_type_code", ";"]}, "masked_query": "SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code;", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0432\u044b \u0440\u0430\u0437\u043d\u044b\u0435 \u043a\u043e\u0434\u044b \u0442\u0438\u043f\u043e\u0432 \u0448\u0430\u0431\u043b\u043e\u043d\u043e\u0432 \u0438 \u0432 \u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0445 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u043a\u0430\u0436\u0434\u044b\u0439 \u0442\u0438\u043f?"}, "question": "What are the different template type codes, and how many documents use each type?", "kb_id": "cre_Doc_Template_Mgt"}, {"id": "D_0344", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 3, false], null], [0, 10, false], null]]}, "select": [false, [[0, [0, [0, 5, false], null]]]], "where": [], "groupBy": [[0, 5, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 3, false], null], [0, 10, false], null]]}, "select": [false, [[0, [0, [0, 5, false], null]]]], "where": [], "groupBy": [[0, 5, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Which", "template", "type", "code", "is", "used", "by", "most", "number", "of", "documents", "?"], "ru": ["\u041a\u043e\u0434", "\u043a\u0430\u043a\u043e\u0433\u043e", "\u0442\u0438\u043f\u0430", "\u0448\u0430\u0431\u043b\u043e\u043d\u0430", "\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f", "\u0432", "\u0431\u043e\u043b\u044c\u0448\u0438\u043d\u0441\u0442\u0432\u0435", "\u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u043e\u0432", "?"]}, "query_toks": {"en": ["select", "t1.template_type_code", "from", "templates", "as", "t1", "join", "documents", "as", "t2", "on", "t1.template_id", "=", "t2.template_id", "group", "by", "t1.template_type_code", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"], "ru": ["select", "t1.template_type_code", "from", "templates", "as", "t1", "join", "documents", "as", "t2", "on", "t1.template_id", "=", "t2.template_id", "group", "by", "t1.template_type_code", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"]}, "query_toks_no_values": {"en": ["select", "t1.template_type_code", "from", "templates", "as", "t1", "join", "documents", "as", "t2", "on", "t1.template_id", "=", "t2.template_id", "group", "by", "t1.template_type_code", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"], "ru": ["select", "t1.template_type_code", "from", "templates", "as", "t1", "join", "documents", "as", "t2", "on", "t1.template_id", "=", "t2.template_id", "group", "by", "t1.template_type_code", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"]}, "masked_query": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1;", "question_pauq": {"ru": "\u041a\u043e\u0434 \u043a\u0430\u043a\u043e\u0433\u043e \u0442\u0438\u043f\u0430 \u0448\u0430\u0431\u043b\u043e\u043d\u0430 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0432 \u0431\u043e\u043b\u044c\u0448\u0438\u043d\u0441\u0442\u0432\u0435 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u043e\u0432?"}, "question": "Which template type code is used by most number of documents?", "kb_id": "cre_Doc_Template_Mgt"}, {"id": "D_0345", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 3, false], null], [0, 10, false], null]]}, "select": [false, [[0, [0, [0, 5, false], null]]]], "where": [], "groupBy": [[0, 5, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 3, false], null], [0, 10, false], null]]}, "select": [false, [[0, [0, [0, 5, false], null]]]], "where": [], "groupBy": [[0, 5, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Return", "the", "code", "of", "the", "template", "type", "that", "is", "most", "commonly", "used", "in", "documents", "."], "ru": ["\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c", "\u043a\u043e\u0434", "\u0442\u0438\u043f\u0430", "\u0448\u0430\u0431\u043b\u043e\u043d\u0430", ",", "\u043a\u043e\u0442\u043e\u0440\u044b\u0439", "\u0447\u0430\u0449\u0435", "\u0432\u0441\u0435\u0433\u043e", "\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f", "\u0432", "\u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0445", "."]}, "query_toks": {"en": ["select", "t1.template_type_code", "from", "templates", "as", "t1", "join", "documents", "as", "t2", "on", "t1.template_id", "=", "t2.template_id", "group", "by", "t1.template_type_code", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"], "ru": ["select", "t1.template_type_code", "from", "templates", "as", "t1", "join", "documents", "as", "t2", "on", "t1.template_id", "=", "t2.template_id", "group", "by", "t1.template_type_code", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"]}, "query_toks_no_values": {"en": ["select", "t1.template_type_code", "from", "templates", "as", "t1", "join", "documents", "as", "t2", "on", "t1.template_id", "=", "t2.template_id", "group", "by", "t1.template_type_code", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"], "ru": ["select", "t1.template_type_code", "from", "templates", "as", "t1", "join", "documents", "as", "t2", "on", "t1.template_id", "=", "t2.template_id", "group", "by", "t1.template_type_code", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"]}, "masked_query": "SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1;", "question_pauq": {"ru": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u043a\u043e\u0434 \u0442\u0438\u043f\u0430 \u0448\u0430\u0431\u043b\u043e\u043d\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0447\u0430\u0449\u0435 \u0432\u0441\u0435\u0433\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0432 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0445."}, "question": "Return the code of the template type that is most commonly used in documents.", "kb_id": "cre_Doc_Template_Mgt"}, {"id": "D_0346", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 5, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": {"from": {"table_units": [["table_unit", 1], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 3, false], null], [0, 10, false], null]]}, "select": [false, [[0, [0, [0, 5, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 5, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": {"from": {"table_units": [["table_unit", 1], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 3, false], null], [0, 10, false], null]]}, "select": [false, [[0, [0, [0, 5, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}}, "question_toks": {"en": ["Show", "all", "template", "type", "codes", "that", "are", "not", "used", "by", "any", "document", "."], "ru": ["\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c", "\u0432\u0441\u0435", "\u043a\u043e\u0434\u044b", "\u0442\u0438\u043f\u043e\u0432", "\u0448\u0430\u0431\u043b\u043e\u043d\u043e\u0432", ",", "\u043a\u043e\u0442\u043e\u0440\u044b\u0435", "\u043d\u0435", "\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f", "\u043d\u0438", "\u0432", "\u043e\u0434\u043d\u043e\u043c", "\u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0435", "."]}, "query_toks": {"en": ["select", "template_type_code", "from", "templates", "except", "select", "template_type_code", "from", "templates", "as", "t1", "join", "documents", "as", "t2", "on", "t1.template_id", "=", "t2.template_id", ";"], "ru": ["select", "template_type_code", "from", "templates", "except", "select", "template_type_code", "from", "templates", "as", "t1", "join", "documents", "as", "t2", "on", "t1.template_id", "=", "t2.template_id", ";"]}, "query_toks_no_values": {"en": ["select", "template_type_code", "from", "templates", "except", "select", "template_type_code", "from", "templates", "as", "t1", "join", "documents", "as", "t2", "on", "t1.template_id", "=", "t2.template_id", ";"], "ru": ["select", "template_type_code", "from", "templates", "except", "select", "template_type_code", "from", "templates", "as", "t1", "join", "documents", "as", "t2", "on", "t1.template_id", "=", "t2.template_id", ";"]}, "masked_query": "SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id;", "question_pauq": {"ru": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0432\u0441\u0435 \u043a\u043e\u0434\u044b \u0442\u0438\u043f\u043e\u0432 \u0448\u0430\u0431\u043b\u043e\u043d\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f \u043d\u0438 \u0432 \u043e\u0434\u043d\u043e\u043c \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0435."}, "question": "Show all template type codes that are not used by any document.", "kb_id": "cre_Doc_Template_Mgt"}, {"id": "D_0347", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 5, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": {"from": {"table_units": [["table_unit", 1], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 3, false], null], [0, 10, false], null]]}, "select": [false, [[0, [0, [0, 5, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 5, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": {"from": {"table_units": [["table_unit", 1], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 3, false], null], [0, 10, false], null]]}, "select": [false, [[0, [0, [0, 5, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}}, "question_toks": {"en": ["What", "are", "the", "codes", "of", "template", "types", "that", "are", "not", "used", "for", "any", "document", "?"], "ru": ["\u041a\u0430\u043a\u0438\u0435", "\u043a\u043e\u0434\u044b", "\u0442\u0438\u043f\u043e\u0432", "\u0448\u0430\u0431\u043b\u043e\u043d\u043e\u0432", "\u043d\u0435", "\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f", "\u043d\u0438", "\u0434\u043b\u044f", "\u043e\u0434\u043d\u043e\u0433\u043e", "\u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430", "?"]}, "query_toks": {"en": ["select", "template_type_code", "from", "templates", "except", "select", "template_type_code", "from", "templates", "as", "t1", "join", "documents", "as", "t2", "on", "t1.template_id", "=", "t2.template_id", ";"], "ru": ["select", "template_type_code", "from", "templates", "except", "select", "template_type_code", "from", "templates", "as", "t1", "join", "documents", "as", "t2", "on", "t1.template_id", "=", "t2.template_id", ";"]}, "query_toks_no_values": {"en": ["select", "template_type_code", "from", "templates", "except", "select", "template_type_code", "from", "templates", "as", "t1", "join", "documents", "as", "t2", "on", "t1.template_id", "=", "t2.template_id", ";"], "ru": ["select", "template_type_code", "from", "templates", "except", "select", "template_type_code", "from", "templates", "as", "t1", "join", "documents", "as", "t2", "on", "t1.template_id", "=", "t2.template_id", ";"]}, "masked_query": "SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id;", "question_pauq": {"ru": "\u041a\u0430\u043a\u0438\u0435 \u043a\u043e\u0434\u044b \u0442\u0438\u043f\u043e\u0432 \u0448\u0430\u0431\u043b\u043e\u043d\u043e\u0432 \u043d\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f \u043d\u0438 \u0434\u043b\u044f \u043e\u0434\u043d\u043e\u0433\u043e \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430?"}, "question": "What are the codes of template types that are not used for any document?", "kb_id": "cre_Doc_Template_Mgt"}, {"id": "D_0348", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT template_type_code ,  template_type_description FROM Ref_template_types;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 1, false], null]], [0, [0, [0, 2, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 1, false], null]], [0, [0, [0, 2, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Show", "all", "template", "type", "codes", "and", "descriptions", "."], "ru": ["\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c", "\u0432\u0441\u0435", "\u043a\u043e\u0434\u044b", "\u0438", "\u043e\u043f\u0438\u0441\u0430\u043d\u0438\u044f", "\u0442\u0438\u043f\u043e\u0432", "\u0448\u0430\u0431\u043b\u043e\u043d\u043e\u0432", "."]}, "query_toks": {"en": ["select", "template_type_code", ",", "template_type_description", "from", "ref_template_types", ";"], "ru": ["select", "template_type_code", ",", "template_type_description", "from", "ref_template_types", ";"]}, "query_toks_no_values": {"en": ["select", "template_type_code", ",", "template_type_description", "from", "ref_template_types", ";"], "ru": ["select", "template_type_code", ",", "template_type_description", "from", "ref_template_types", ";"]}, "masked_query": "SELECT template_type_code ,  template_type_description FROM Ref_template_types;", "question_pauq": {"ru": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0432\u0441\u0435 \u043a\u043e\u0434\u044b \u0438 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u0442\u0438\u043f\u043e\u0432 \u0448\u0430\u0431\u043b\u043e\u043d\u043e\u0432."}, "question": "Show all template type codes and descriptions.", "kb_id": "cre_Doc_Template_Mgt"}, {"id": "D_0349", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT template_type_code ,  template_type_description FROM Ref_template_types;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 1, false], null]], [0, [0, [0, 2, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 1, false], null]], [0, [0, [0, 2, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "the", "type", "codes", "and", "descriptions", "for", "all", "template", "types", "?"], "ru": ["\u041a\u0430\u043a\u043e\u0432\u044b", "\u043a\u043e\u0434\u044b", "\u0442\u0438\u043f\u043e\u0432", "\u0438", "\u043e\u043f\u0438\u0441\u0430\u043d\u0438\u044f", "\u0434\u043b\u044f", "\u0432\u0441\u0435\u0445", "\u0442\u0438\u043f\u043e\u0432", "\u0448\u0430\u0431\u043b\u043e\u043d\u043e\u0432", "?"]}, "query_toks": {"en": ["select", "template_type_code", ",", "template_type_description", "from", "ref_template_types", ";"], "ru": ["select", "template_type_code", ",", "template_type_description", "from", "ref_template_types", ";"]}, "query_toks_no_values": {"en": ["select", "template_type_code", ",", "template_type_description", "from", "ref_template_types", ";"], "ru": ["select", "template_type_code", ",", "template_type_description", "from", "ref_template_types", ";"]}, "masked_query": "SELECT template_type_code ,  template_type_description FROM Ref_template_types;", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0432\u044b \u043a\u043e\u0434\u044b \u0442\u0438\u043f\u043e\u0432 \u0438 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u0434\u043b\u044f \u0432\u0441\u0435\u0445 \u0442\u0438\u043f\u043e\u0432 \u0448\u0430\u0431\u043b\u043e\u043d\u043e\u0432?"}, "question": "What are the type codes and descriptions for all template types?", "kb_id": "cre_Doc_Template_Mgt"}, {"id": "D_0350", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  \"AD\";"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [[false, 2, [0, [0, 1, false], null], "\"AD\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [[false, 2, [0, [0, 1, false], null], "\"AD\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "template", "type", "descriptions", "for", "template", "type", "code", "``", "AD", "''", "."], "ru": ["\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u044f", "\u0442\u0438\u043f\u0430", "\u0448\u0430\u0431\u043b\u043e\u043d\u0430", "\u0434\u043b\u044f", "\u043a\u043e\u0434\u0430", "\u0442\u0438\u043f\u0430", "\u0448\u0430\u0431\u043b\u043e\u043d\u0430", "``", "AD", "''", "."]}, "query_toks": {"en": ["select", "template_type_description", "from", "ref_template_types", "where", "template_type_code", "=", "\"AD\"", ";"], "ru": ["select", "template_type_description", "from", "ref_template_types", "where", "template_type_code", "=", "\"AD\"", ";"]}, "query_toks_no_values": {"en": ["select", "template_type_description", "from", "ref_template_types", "where", "template_type_code", "=", "value", ";"], "ru": ["select", "template_type_description", "from", "ref_template_types", "where", "template_type_code", "=", "value", ";"]}, "masked_query": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  \"AD\";", "question_pauq": {"ru": "\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u0442\u0438\u043f\u0430 \u0448\u0430\u0431\u043b\u043e\u043d\u0430 \u0434\u043b\u044f \u043a\u043e\u0434\u0430 \u0442\u0438\u043f\u0430 \u0448\u0430\u0431\u043b\u043e\u043d\u0430 \"AD\"."}, "question": "What is the template type descriptions for template type code \"AD\".", "kb_id": "cre_Doc_Template_Mgt"}, {"id": "D_0351", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  \"AD\";"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [[false, 2, [0, [0, 1, false], null], "\"AD\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [[false, 2, [0, [0, 1, false], null], "\"AD\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Return", "the", "template", "type", "description", "of", "the", "template", "type", "with", "the", "code", "AD", "."], "ru": ["\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c", "\u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435", "\u0442\u0438\u043f\u0430", "\u0448\u0430\u0431\u043b\u043e\u043d\u0430", "\u0434\u043b\u044f", "\u0442\u0438\u043f\u0430", "\u0448\u0430\u0431\u043b\u043e\u043d\u0430", "\u0441", "\u043a\u043e\u0434\u043e\u043c", "AD", "."]}, "query_toks": {"en": ["select", "template_type_description", "from", "ref_template_types", "where", "template_type_code", "=", "\"AD\"", ";"], "ru": ["select", "template_type_description", "from", "ref_template_types", "where", "template_type_code", "=", "\"AD\"", ";"]}, "query_toks_no_values": {"en": ["select", "template_type_description", "from", "ref_template_types", "where", "template_type_code", "=", "value", ";"], "ru": ["select", "template_type_description", "from", "ref_template_types", "where", "template_type_code", "=", "value", ";"]}, "masked_query": "SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  \"AD\";", "question_pauq": {"ru": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0442\u0438\u043f\u0430 \u0448\u0430\u0431\u043b\u043e\u043d\u0430 \u0434\u043b\u044f \u0442\u0438\u043f\u0430 \u0448\u0430\u0431\u043b\u043e\u043d\u0430 \u0441 \u043a\u043e\u0434\u043e\u043c AD."}, "question": "Return the template type description of the template type with the code AD.", "kb_id": "cre_Doc_Template_Mgt"}, {"id": "D_0352", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"\u041a\u0430\u0442\u0430\u043b\u043e\u0433\";"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 1, false], null]]]], "where": [[false, 2, [0, [0, 2, false], null], "\"Book\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 1, false], null]]]], "where": [[false, 2, [0, [0, 2, false], null], "\"\u041a\u0430\u0442\u0430\u043b\u043e\u0433\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "template", "type", "code", "for", "template", "type", "description", "``", "Book", "''", "."], "ru": ["\u041a\u0430\u043a\u043e\u0439", "\u043a\u043e\u0434", "\u0442\u0438\u043f\u0430", "\u0448\u0430\u0431\u043b\u043e\u043d\u0430", "\u0434\u043b\u044f", "\u043e\u043f\u0438\u0441\u0430\u043d\u0438\u044f", "\u0442\u0438\u043f\u0430", "\u0448\u0430\u0431\u043b\u043e\u043d\u0430", "``", "\u041a\u0430\u0442\u0430\u043b\u043e\u0433", "''", "."]}, "query_toks": {"en": ["select", "template_type_code", "from", "ref_template_types", "where", "template_type_description", "=", "\"Book\"", ";"], "ru": ["select", "template_type_code", "from", "ref_template_types", "where", "template_type_description", "=", "\"\u041a\u0430\u0442\u0430\u043b\u043e\u0433\"", ";"]}, "query_toks_no_values": {"en": ["select", "template_type_code", "from", "ref_template_types", "where", "template_type_description", "=", "value", ";"], "ru": ["select", "template_type_code", "from", "ref_template_types", "where", "template_type_description", "=", "value", ";"]}, "masked_query": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\";", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0439 \u043a\u043e\u0434 \u0442\u0438\u043f\u0430 \u0448\u0430\u0431\u043b\u043e\u043d\u0430 \u0434\u043b\u044f \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u0442\u0438\u043f\u0430 \u0448\u0430\u0431\u043b\u043e\u043d\u0430 \"\u041a\u0430\u0442\u0430\u043b\u043e\u0433\"."}, "question": "What is the template type code for template type description \"Book\".", "kb_id": "cre_Doc_Template_Mgt"}, {"id": "D_0353", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"\u041a\u0430\u0442\u0430\u043b\u043e\u0433\";"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 1, false], null]]]], "where": [[false, 2, [0, [0, 2, false], null], "\"Book\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 1, false], null]]]], "where": [[false, 2, [0, [0, 2, false], null], "\"\u041a\u0430\u0442\u0430\u043b\u043e\u0433\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Return", "the", "type", "code", "of", "the", "template", "type", "with", "the", "description", "``", "Book", "''", "."], "ru": ["\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c", "\u043a\u043e\u0434", "\u0442\u0438\u043f\u0430", "\u0448\u0430\u0431\u043b\u043e\u043d\u0430", "\u0442\u0438\u043f\u0430", "\u0441", "\u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435\u043c", "\u00ab", "\u041a\u0430\u0442\u0430\u043b\u043e\u0433", "\u00bb", "."]}, "query_toks": {"en": ["select", "template_type_code", "from", "ref_template_types", "where", "template_type_description", "=", "\"Book\"", ";"], "ru": ["select", "template_type_code", "from", "ref_template_types", "where", "template_type_description", "=", "\"\u041a\u0430\u0442\u0430\u043b\u043e\u0433\"", ";"]}, "query_toks_no_values": {"en": ["select", "template_type_code", "from", "ref_template_types", "where", "template_type_description", "=", "value", ";"], "ru": ["select", "template_type_code", "from", "ref_template_types", "where", "template_type_description", "=", "value", ";"]}, "masked_query": "SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\";", "question_pauq": {"ru": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u043a\u043e\u0434 \u0442\u0438\u043f\u0430 \u0448\u0430\u0431\u043b\u043e\u043d\u0430 \u0442\u0438\u043f\u0430 \u0441 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435\u043c \u00ab\u041a\u0430\u0442\u0430\u043b\u043e\u0433\u00bb."}, "question": "Return the type code of the template type with the description \"Book\".", "kb_id": "cre_Doc_Template_Mgt"}, {"id": "D_0354", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0], ["table_unit", 1], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 5, false], null], "and", [false, 2, [0, [0, 3, false], null], [0, 10, false], null]]}, "select": [true, [[0, [0, [0, 2, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0], ["table_unit", 1], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 5, false], null], "and", [false, 2, [0, [0, 3, false], null], [0, 10, false], null]]}, "select": [true, [[0, [0, [0, 2, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "the", "distinct", "template", "type", "descriptions", "for", "the", "templates", "ever", "used", "by", "any", "document", "?"], "ru": ["\u041a\u0430\u043a\u043e\u0432\u044b", "\u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0435", "\u043e\u043f\u0438\u0441\u0430\u043d\u0438\u044f", "\u0442\u0438\u043f\u043e\u0432", "\u0448\u0430\u0431\u043b\u043e\u043d\u043e\u0432", "\u0434\u043b\u044f", "\u0448\u0430\u0431\u043b\u043e\u043d\u043e\u0432", ",", "\u043a\u043e\u0433\u0434\u0430-\u043b\u0438\u0431\u043e", "\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0432\u0448\u0438\u0445\u0441\u044f", "\u0432", "\u043a\u0430\u043a\u043e\u043c-\u043b\u0438\u0431\u043e", "\u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0435", "?"]}, "query_toks": {"en": ["select", "distinct", "t1.template_type_description", "from", "ref_template_types", "as", "t1", "join", "templates", "as", "t2", "on", "t1.template_type_code", "=", "t2.template_type_code", "join", "documents", "as", "t3", "on", "t2.template_id", "=", "t3.template_id", ";"], "ru": ["select", "distinct", "t1.template_type_description", "from", "ref_template_types", "as", "t1", "join", "templates", "as", "t2", "on", "t1.template_type_code", "=", "t2.template_type_code", "join", "documents", "as", "t3", "on", "t2.template_id", "=", "t3.template_id", ";"]}, "query_toks_no_values": {"en": ["select", "distinct", "t1.template_type_description", "from", "ref_template_types", "as", "t1", "join", "templates", "as", "t2", "on", "t1.template_type_code", "=", "t2.template_type_code", "join", "documents", "as", "t3", "on", "t2.template_id", "=", "t3.template_id", ";"], "ru": ["select", "distinct", "t1.template_type_description", "from", "ref_template_types", "as", "t1", "join", "templates", "as", "t2", "on", "t1.template_type_code", "=", "t2.template_type_code", "join", "documents", "as", "t3", "on", "t2.template_id", "=", "t3.template_id", ";"]}, "masked_query": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID;", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0432\u044b \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0435 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u0442\u0438\u043f\u043e\u0432 \u0448\u0430\u0431\u043b\u043e\u043d\u043e\u0432 \u0434\u043b\u044f \u0448\u0430\u0431\u043b\u043e\u043d\u043e\u0432, \u043a\u043e\u0433\u0434\u0430-\u043b\u0438\u0431\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0432\u0448\u0438\u0445\u0441\u044f \u0432 \u043a\u0430\u043a\u043e\u043c-\u043b\u0438\u0431\u043e \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0435?"}, "question": "What are the distinct template type descriptions for the templates ever used by any document?", "kb_id": "cre_Doc_Template_Mgt"}, {"id": "D_0355", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0], ["table_unit", 1], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 5, false], null], "and", [false, 2, [0, [0, 3, false], null], [0, 10, false], null]]}, "select": [true, [[0, [0, [0, 2, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0], ["table_unit", 1], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 5, false], null], "and", [false, 2, [0, [0, 3, false], null], [0, 10, false], null]]}, "select": [true, [[0, [0, [0, 2, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Return", "the", "different", "descriptions", "for", "templates", "that", "have", "been", "used", "in", "a", "document", "."], "ru": ["\u041f\u043e\u043a\u0430\u0436\u0438", "\u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0435", "\u043e\u043f\u0438\u0441\u0430\u043d\u0438\u044f", "\u0434\u043b\u044f", "\u0448\u0430\u0431\u043b\u043e\u043d\u043e\u0432", ",", "\u043a\u043e\u0442\u043e\u0440\u044b\u0435", "\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043b\u0438\u0441\u044c", "\u0432", "\u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0435", "."]}, "query_toks": {"en": ["select", "distinct", "t1.template_type_description", "from", "ref_template_types", "as", "t1", "join", "templates", "as", "t2", "on", "t1.template_type_code", "=", "t2.template_type_code", "join", "documents", "as", "t3", "on", "t2.template_id", "=", "t3.template_id", ";"], "ru": ["select", "distinct", "t1.template_type_description", "from", "ref_template_types", "as", "t1", "join", "templates", "as", "t2", "on", "t1.template_type_code", "=", "t2.template_type_code", "join", "documents", "as", "t3", "on", "t2.template_id", "=", "t3.template_id", ";"]}, "query_toks_no_values": {"en": ["select", "distinct", "t1.template_type_description", "from", "ref_template_types", "as", "t1", "join", "templates", "as", "t2", "on", "t1.template_type_code", "=", "t2.template_type_code", "join", "documents", "as", "t3", "on", "t2.template_id", "=", "t3.template_id", ";"], "ru": ["select", "distinct", "t1.template_type_description", "from", "ref_template_types", "as", "t1", "join", "templates", "as", "t2", "on", "t1.template_type_code", "=", "t2.template_type_code", "join", "documents", "as", "t3", "on", "t2.template_id", "=", "t3.template_id", ";"]}, "masked_query": "SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID;", "question_pauq": {"ru": "\u041f\u043e\u043a\u0430\u0436\u0438 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0435 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u0434\u043b\u044f \u0448\u0430\u0431\u043b\u043e\u043d\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043b\u0438\u0441\u044c \u0432 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0435."}, "question": "Return the different descriptions for templates that have been used in a document.", "kb_id": "cre_Doc_Template_Mgt"}, {"id": "D_0356", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"\u0411\u0443\u043a\u043b\u0435\u0442\";"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 5, false], null]]}, "select": [false, [[0, [0, [0, 3, false], null]]]], "where": [[false, 2, [0, [0, 2, false], null], "\"Presentation\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 5, false], null]]}, "select": [false, [[0, [0, [0, 3, false], null]]]], "where": [[false, 2, [0, [0, 2, false], null], "\"\u0411\u0443\u043a\u043b\u0435\u0442\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "the", "template", "ids", "with", "template", "type", "description", "``", "Presentation", "''", "."], "ru": ["\u041a\u0430\u043a\u043e\u0432\u044b", "id", "\u0448\u0430\u0431\u043b\u043e\u043d\u0430", "\u0441", "\u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435\u043c", "\u0442\u0438\u043f\u0430", "\u0448\u0430\u0431\u043b\u043e\u043d\u0430", "``", "\u0411\u0443\u043a\u043b\u0435\u0442", "''", "."]}, "query_toks": {"en": ["select", "t2.template_id", "from", "ref_template_types", "as", "t1", "join", "templates", "as", "t2", "on", "t1.template_type_code", "=", "t2.template_type_code", "where", "t1.template_type_description", "=", "\"Presentation\"", ";"], "ru": ["select", "t2.template_id", "from", "ref_template_types", "as", "t1", "join", "templates", "as", "t2", "on", "t1.template_type_code", "=", "t2.template_type_code", "where", "t1.template_type_description", "=", "\"\u0411\u0443\u043a\u043b\u0435\u0442\"", ";"]}, "query_toks_no_values": {"en": ["select", "t2.template_id", "from", "ref_template_types", "as", "t1", "join", "templates", "as", "t2", "on", "t1.template_type_code", "=", "t2.template_type_code", "where", "t1.template_type_description", "=", "value", ";"], "ru": ["select", "t2.template_id", "from", "ref_template_types", "as", "t1", "join", "templates", "as", "t2", "on", "t1.template_type_code", "=", "t2.template_type_code", "where", "t1.template_type_description", "=", "value", ";"]}, "masked_query": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\";", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0432\u044b id \u0448\u0430\u0431\u043b\u043e\u043d\u0430 \u0441 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435\u043c \u0442\u0438\u043f\u0430 \u0448\u0430\u0431\u043b\u043e\u043d\u0430 \"\u0411\u0443\u043a\u043b\u0435\u0442\"."}, "question": "What are the template ids with template type description \"Presentation\".", "kb_id": "cre_Doc_Template_Mgt"}, {"id": "D_0357", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"\u0411\u0443\u043a\u043b\u0435\u0442\";"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 5, false], null]]}, "select": [false, [[0, [0, [0, 3, false], null]]]], "where": [[false, 2, [0, [0, 2, false], null], "\"Presentation\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 5, false], null]]}, "select": [false, [[0, [0, [0, 3, false], null]]]], "where": [[false, 2, [0, [0, 2, false], null], "\"\u0411\u0443\u043a\u043b\u0435\u0442\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Return", "the", "ids", "corresponding", "to", "templates", "with", "the", "description", "'Presentation", "'", "."], "ru": ["\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c", "id", ",", "\u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0435", "\u0448\u0430\u0431\u043b\u043e\u043d\u0430\u043c", "\u0441", "\u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435\u043c", "\u00ab", "\u0411\u0443\u043a\u043b\u0435\u0442", "\u00bb", "."]}, "query_toks": {"en": ["select", "t2.template_id", "from", "ref_template_types", "as", "t1", "join", "templates", "as", "t2", "on", "t1.template_type_code", "=", "t2.template_type_code", "where", "t1.template_type_description", "=", "\"Presentation\"", ";"], "ru": ["select", "t2.template_id", "from", "ref_template_types", "as", "t1", "join", "templates", "as", "t2", "on", "t1.template_type_code", "=", "t2.template_type_code", "where", "t1.template_type_description", "=", "\"\u0411\u0443\u043a\u043b\u0435\u0442\"", ";"]}, "query_toks_no_values": {"en": ["select", "t2.template_id", "from", "ref_template_types", "as", "t1", "join", "templates", "as", "t2", "on", "t1.template_type_code", "=", "t2.template_type_code", "where", "t1.template_type_description", "=", "value", ";"], "ru": ["select", "t2.template_id", "from", "ref_template_types", "as", "t1", "join", "templates", "as", "t2", "on", "t1.template_type_code", "=", "t2.template_type_code", "where", "t1.template_type_description", "=", "value", ";"]}, "masked_query": "SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\";", "question_pauq": {"ru": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c id, \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0435 \u0448\u0430\u0431\u043b\u043e\u043d\u0430\u043c \u0441 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435\u043c \u00ab\u0411\u0443\u043a\u043b\u0435\u0442\u00bb."}, "question": "Return the ids corresponding to templates with the description 'Presentation'.", "kb_id": "cre_Doc_Template_Mgt"}, {"id": "D_0358", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT count(*) FROM Paragraphs;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 3]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 3]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["How", "many", "paragraphs", "in", "total", "?"], "ru": ["\u0421\u043a\u043e\u043b\u044c\u043a\u043e", "\u0432\u0441\u0435\u0433\u043e", "\u0430\u0431\u0437\u0430\u0446\u0435\u0432", "?"]}, "query_toks": {"en": ["select", "count", "(", "*", ")", "from", "paragraphs", ";"], "ru": ["select", "count", "(", "*", ")", "from", "paragraphs", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "*", ")", "from", "paragraphs", ";"], "ru": ["select", "count", "(", "*", ")", "from", "paragraphs", ";"]}, "masked_query": "SELECT count(*) FROM Paragraphs;", "question_pauq": {"ru": "\u0421\u043a\u043e\u043b\u044c\u043a\u043e \u0432\u0441\u0435\u0433\u043e \u0430\u0431\u0437\u0430\u0446\u0435\u0432?"}, "question": "How many paragraphs in total?", "kb_id": "cre_Doc_Template_Mgt"}, {"id": "D_0359", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT count(*) FROM Paragraphs;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 3]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 3]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Count", "the", "number", "of", "paragraphs", "."], "ru": ["\u041f\u043e\u0434\u0441\u0447\u0438\u0442\u0430\u0439\u0442\u0435", "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e", "\u0430\u0431\u0437\u0430\u0446\u0435\u0432", "."]}, "query_toks": {"en": ["select", "count", "(", "*", ")", "from", "paragraphs", ";"], "ru": ["select", "count", "(", "*", ")", "from", "paragraphs", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "*", ")", "from", "paragraphs", ";"], "ru": ["select", "count", "(", "*", ")", "from", "paragraphs", ";"]}, "masked_query": "SELECT count(*) FROM Paragraphs;", "question_pauq": {"ru": "\u041f\u043e\u0434\u0441\u0447\u0438\u0442\u0430\u0439\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0430\u0431\u0437\u0430\u0446\u0435\u0432."}, "question": "Count the number of paragraphs.", "kb_id": "cre_Doc_Template_Mgt"}, {"id": "D_0360", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  '\u0417\u0438\u043c\u043d\u0435\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435';"}, "sql": {"en": {"from": {"table_units": [["table_unit", 3], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 15, false], null], [0, 9, false], null]]}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 11, false], null], "\"Summer Show\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 3], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 15, false], null], [0, 9, false], null]]}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 11, false], null], "\"\u0417\u0438\u043c\u043d\u0435\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["How", "many", "paragraphs", "for", "the", "document", "with", "name", "'Summer", "Show", "'", "?"], "ru": ["\u0421\u043a\u043e\u043b\u044c\u043a\u043e", "\u0430\u0431\u0437\u0430\u0446\u0435\u0432", "\u0432", "\u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0435", "\u0441", "\u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435\u043c", "\u00ab", "\u0417\u0438\u043c\u043d\u0435\u0435", "\u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435", "\u00bb", "?"]}, "query_toks": {"en": ["select", "count", "(", "*", ")", "from", "paragraphs", "as", "t1", "join", "documents", "as", "t2", "on", "t1.document_id", "=", "t2.document_id", "where", "t2.document_name", "=", "\"Summer Show\"", ";"], "ru": ["select", "count", "(", "*", ")", "from", "paragraphs", "as", "t1", "join", "documents", "as", "t2", "on", "t1.document_id", "=", "t2.document_id", "where", "t2.document_name", "=", "\"\u0417\u0438\u043c\u043d\u0435\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435\"", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "*", ")", "from", "paragraphs", "as", "t1", "join", "documents", "as", "t2", "on", "t1.document_id", "=", "t2.document_id", "where", "t2.document_name", "=", "value", ";"], "ru": ["select", "count", "(", "*", ")", "from", "paragraphs", "as", "t1", "join", "documents", "as", "t2", "on", "t1.document_id", "=", "t2.document_id", "where", "t2.document_name", "=", "value", ";"]}, "masked_query": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show';", "question_pauq": {"ru": "\u0421\u043a\u043e\u043b\u044c\u043a\u043e \u0430\u0431\u0437\u0430\u0446\u0435\u0432 \u0432 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0435 \u0441 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435\u043c \u00ab\u0417\u0438\u043c\u043d\u0435\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435\u00bb?"}, "question": "How many paragraphs for the document with name 'Summer Show'?", "kb_id": "cre_Doc_Template_Mgt"}, {"id": "D_0361", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  '\u0417\u0438\u043c\u043d\u0435\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435';"}, "sql": {"en": {"from": {"table_units": [["table_unit", 3], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 15, false], null], [0, 9, false], null]]}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 11, false], null], "\"Summer Show\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 3], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 15, false], null], [0, 9, false], null]]}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 11, false], null], "\"\u0417\u0438\u043c\u043d\u0435\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Count", "the", "number", "of", "paragraphs", "in", "the", "document", "named", "'Summer", "Show", "'", "."], "ru": ["\u041f\u043e\u0434\u0441\u0447\u0438\u0442\u0430\u0439\u0442\u0435", "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e", "\u0430\u0431\u0437\u0430\u0446\u0435\u0432", "\u0432", "\u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0435", "\u043f\u043e\u0434", "\u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435\u043c", "\u00ab", "\u0417\u0438\u043c\u043d\u0435\u0435", "\u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435", "\u00bb", "."]}, "query_toks": {"en": ["select", "count", "(", "*", ")", "from", "paragraphs", "as", "t1", "join", "documents", "as", "t2", "on", "t1.document_id", "=", "t2.document_id", "where", "t2.document_name", "=", "\"Summer Show\"", ";"], "ru": ["select", "count", "(", "*", ")", "from", "paragraphs", "as", "t1", "join", "documents", "as", "t2", "on", "t1.document_id", "=", "t2.document_id", "where", "t2.document_name", "=", "\"\u0417\u0438\u043c\u043d\u0435\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435\"", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "*", ")", "from", "paragraphs", "as", "t1", "join", "documents", "as", "t2", "on", "t1.document_id", "=", "t2.document_id", "where", "t2.document_name", "=", "value", ";"], "ru": ["select", "count", "(", "*", ")", "from", "paragraphs", "as", "t1", "join", "documents", "as", "t2", "on", "t1.document_id", "=", "t2.document_id", "where", "t2.document_name", "=", "value", ";"]}, "masked_query": "SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show';", "question_pauq": {"ru": "\u041f\u043e\u0434\u0441\u0447\u0438\u0442\u0430\u0439\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0430\u0431\u0437\u0430\u0446\u0435\u0432 \u0432 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0435 \u043f\u043e\u0434 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435\u043c \u00ab\u0417\u0438\u043c\u043d\u0435\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435\u00bb."}, "question": "Count the number of paragraphs in the document named 'Summer Show'.", "kb_id": "cre_Doc_Template_Mgt"}, {"id": "D_0362", "source": "spider-dev", "type": "dev", "query": {"ru": "select other_details from paragraphs where paragraph_text like '\u0420\u043e\u0441\u0441\u0438\u044f';"}, "sql": {"en": {"from": {"table_units": [["table_unit", 3]], "conds": []}, "select": [false, [[0, [0, [0, 17, false], null]]]], "where": [[false, 9, [0, [0, 16, false], null], "\"korea\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 3]], "conds": []}, "select": [false, [[0, [0, [0, 17, false], null]]]], "where": [[false, 9, [0, [0, 16, false], null], "\"\u0420\u043e\u0441\u0441\u0438\u044f\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Show", "paragraph", "details", "for", "paragraph", "with", "text", "'Korea", "'", "."], "ru": ["\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c", "\u0434\u0435\u0442\u0430\u043b\u0438", "\u0430\u0431\u0437\u0430\u0446\u0430", "\u0434\u043b\u044f", "\u0430\u0431\u0437\u0430\u0446\u0430", "\u0441", "\u0442\u0435\u043a\u0441\u0442\u043e\u043c", "``", "\u0420\u043e\u0441\u0441\u0438\u044f", "''", "."]}, "query_toks": {"en": ["select", "other_details", "from", "paragraphs", "where", "paragraph_text", "like", "\"korea\"", ";"], "ru": ["select", "other_details", "from", "paragraphs", "where", "paragraph_text", "like", "\"\u0420\u043e\u0441\u0441\u0438\u044f\"", ";"]}, "query_toks_no_values": {"en": ["select", "other_details", "from", "paragraphs", "where", "paragraph_text", "like", "value", ";"], "ru": ["select", "other_details", "from", "paragraphs", "where", "paragraph_text", "like", "value", ";"]}, "masked_query": "select other_details from paragraphs where paragraph_text like 'korea';", "question_pauq": {"ru": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0434\u0435\u0442\u0430\u043b\u0438 \u0430\u0431\u0437\u0430\u0446\u0430 \u0434\u043b\u044f \u0430\u0431\u0437\u0430\u0446\u0430 \u0441 \u0442\u0435\u043a\u0441\u0442\u043e\u043c \"\u0420\u043e\u0441\u0441\u0438\u044f\"."}, "question": "Show paragraph details for paragraph with text 'Korea ' .", "kb_id": "cre_Doc_Template_Mgt"}, {"id": "D_0363", "source": "spider-dev", "type": "dev", "query": {"ru": "select other_details from paragraphs where paragraph_text like '\u0420\u043e\u0441\u0441\u0438\u044f';"}, "sql": {"en": {"from": {"table_units": [["table_unit", 3]], "conds": []}, "select": [false, [[0, [0, [0, 17, false], null]]]], "where": [[false, 9, [0, [0, 16, false], null], "\"korea\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 3]], "conds": []}, "select": [false, [[0, [0, [0, 17, false], null]]]], "where": [[false, 9, [0, [0, 16, false], null], "\"\u0420\u043e\u0441\u0441\u0438\u044f\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "the", "details", "for", "the", "paragraph", "that", "includes", "the", "text", "'Korea", "'", "?"], "ru": ["\u041a\u0430\u043a\u043e\u0432\u044b", "\u043f\u043e\u0434\u0440\u043e\u0431\u043d\u043e\u0441\u0442\u0438", "\u0430\u0431\u0437\u0430\u0446\u0430", ",", "\u0432\u043a\u043b\u044e\u0447\u0430\u044e\u0449\u0435\u0433\u043e", "\u0442\u0435\u043a\u0441\u0442", "\u00ab", "\u0420\u043e\u0441\u0441\u0438\u044f", "\u00bb", "?"]}, "query_toks": {"en": ["select", "other_details", "from", "paragraphs", "where", "paragraph_text", "like", "\"korea\"", ";"], "ru": ["select", "other_details", "from", "paragraphs", "where", "paragraph_text", "like", "\"\u0420\u043e\u0441\u0441\u0438\u044f\"", ";"]}, "query_toks_no_values": {"en": ["select", "other_details", "from", "paragraphs", "where", "paragraph_text", "like", "value", ";"], "ru": ["select", "other_details", "from", "paragraphs", "where", "paragraph_text", "like", "value", ";"]}, "masked_query": "select other_details from paragraphs where paragraph_text like 'korea';", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0432\u044b \u043f\u043e\u0434\u0440\u043e\u0431\u043d\u043e\u0441\u0442\u0438 \u0430\u0431\u0437\u0430\u0446\u0430, \u0432\u043a\u043b\u044e\u0447\u0430\u044e\u0449\u0435\u0433\u043e \u0442\u0435\u043a\u0441\u0442 \u00ab\u0420\u043e\u0441\u0441\u0438\u044f\u00bb?"}, "question": "What are the details for the paragraph that includes the text 'Korea ' ?", "kb_id": "cre_Doc_Template_Mgt"}, {"id": "D_0364", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  '\u0414\u043e\u0441\u0442\u043e\u043f\u0440\u0438\u043c\u0435\u0447\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u041b\u043e\u043d\u0434\u043e\u043d\u0430';"}, "sql": {"en": {"from": {"table_units": [["table_unit", 3], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 15, false], null], [0, 9, false], null]]}, "select": [false, [[0, [0, [0, 14, false], null]], [0, [0, [0, 16, false], null]]]], "where": [[false, 2, [0, [0, 11, false], null], "\"Welcome to NY\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 3], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 15, false], null], [0, 9, false], null]]}, "select": [false, [[0, [0, [0, 14, false], null]], [0, [0, [0, 16, false], null]]]], "where": [[false, 2, [0, [0, 11, false], null], "\"\u0414\u043e\u0441\u0442\u043e\u043f\u0440\u0438\u043c\u0435\u0447\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u041b\u043e\u043d\u0434\u043e\u043d\u0430\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Show", "all", "paragraph", "ids", "and", "texts", "for", "the", "document", "with", "name", "'Welcome", "to", "NY", "'", "."], "ru": ["\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c", "\u0432\u0441\u0435", "id", "\u0430\u0431\u0437\u0430\u0446\u0435\u0432", "\u0438", "\u0442\u0435\u043a\u0441\u0442\u044b", "\u0434\u043b\u044f", "\u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430", "\u0441", "\u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435\u043c", "\u00ab", "\u0414\u043e\u0441\u0442\u043e\u043f\u0440\u0438\u043c\u0435\u0447\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438", "\u041b\u043e\u043d\u0434\u043e\u043d\u0430", "\u00bb", "."]}, "query_toks": {"en": ["select", "t1.paragraph_id", ",", "t1.paragraph_text", "from", "paragraphs", "as", "t1", "join", "documents", "as", "t2", "on", "t1.document_id", "=", "t2.document_id", "where", "t2.document_name", "=", "\"Welcome to NY\"", ";"], "ru": ["select", "t1.paragraph_id", ",", "t1.paragraph_text", "from", "paragraphs", "as", "t1", "join", "documents", "as", "t2", "on", "t1.document_id", "=", "t2.document_id", "where", "t2.document_name", "=", "\"\u0414\u043e\u0441\u0442\u043e\u043f\u0440\u0438\u043c\u0435\u0447\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u041b\u043e\u043d\u0434\u043e\u043d\u0430\"", ";"]}, "query_toks_no_values": {"en": ["select", "t1.paragraph_id", ",", "t1.paragraph_text", "from", "paragraphs", "as", "t1", "join", "documents", "as", "t2", "on", "t1.document_id", "=", "t2.document_id", "where", "t2.document_name", "=", "value", ";"], "ru": ["select", "t1.paragraph_id", ",", "t1.paragraph_text", "from", "paragraphs", "as", "t1", "join", "documents", "as", "t2", "on", "t1.document_id", "=", "t2.document_id", "where", "t2.document_name", "=", "value", ";"]}, "masked_query": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY';", "question_pauq": {"ru": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0432\u0441\u0435 id \u0430\u0431\u0437\u0430\u0446\u0435\u0432 \u0438 \u0442\u0435\u043a\u0441\u0442\u044b \u0434\u043b\u044f \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430 \u0441 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435\u043c \u00ab\u0414\u043e\u0441\u0442\u043e\u043f\u0440\u0438\u043c\u0435\u0447\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u041b\u043e\u043d\u0434\u043e\u043d\u0430\u00bb."}, "question": "Show all paragraph ids and texts for the document with name 'Welcome to NY'.", "kb_id": "cre_Doc_Template_Mgt"}, {"id": "D_0365", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  '\u0414\u043e\u0441\u0442\u043e\u043f\u0440\u0438\u043c\u0435\u0447\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u041b\u043e\u043d\u0434\u043e\u043d\u0430';"}, "sql": {"en": {"from": {"table_units": [["table_unit", 3], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 15, false], null], [0, 9, false], null]]}, "select": [false, [[0, [0, [0, 14, false], null]], [0, [0, [0, 16, false], null]]]], "where": [[false, 2, [0, [0, 11, false], null], "\"Welcome to NY\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 3], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 15, false], null], [0, 9, false], null]]}, "select": [false, [[0, [0, [0, 14, false], null]], [0, [0, [0, 16, false], null]]]], "where": [[false, 2, [0, [0, 11, false], null], "\"\u0414\u043e\u0441\u0442\u043e\u043f\u0440\u0438\u043c\u0435\u0447\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u041b\u043e\u043d\u0434\u043e\u043d\u0430\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "the", "ids", "and", "texts", "of", "paragraphs", "in", "the", "document", "titled", "'Welcome", "to", "NY", "'", "?"], "ru": ["\u041a\u0430\u043a\u043e\u0432\u044b", "id", "\u0438", "\u0442\u0435\u043a\u0441\u0442", "\u0430\u0431\u0437\u0430\u0446\u0435\u0432", "\u0432", "\u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0435", "\u00ab", "\u0414\u043e\u0441\u0442\u043e\u043f\u0440\u0438\u043c\u0435\u0447\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438", "\u041b\u043e\u043d\u0434\u043e\u043d\u0430", "\u00bb", "?"]}, "query_toks": {"en": ["select", "t1.paragraph_id", ",", "t1.paragraph_text", "from", "paragraphs", "as", "t1", "join", "documents", "as", "t2", "on", "t1.document_id", "=", "t2.document_id", "where", "t2.document_name", "=", "\"Welcome to NY\"", ";"], "ru": ["select", "t1.paragraph_id", ",", "t1.paragraph_text", "from", "paragraphs", "as", "t1", "join", "documents", "as", "t2", "on", "t1.document_id", "=", "t2.document_id", "where", "t2.document_name", "=", "\"\u0414\u043e\u0441\u0442\u043e\u043f\u0440\u0438\u043c\u0435\u0447\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u041b\u043e\u043d\u0434\u043e\u043d\u0430\"", ";"]}, "query_toks_no_values": {"en": ["select", "t1.paragraph_id", ",", "t1.paragraph_text", "from", "paragraphs", "as", "t1", "join", "documents", "as", "t2", "on", "t1.document_id", "=", "t2.document_id", "where", "t2.document_name", "=", "value", ";"], "ru": ["select", "t1.paragraph_id", ",", "t1.paragraph_text", "from", "paragraphs", "as", "t1", "join", "documents", "as", "t2", "on", "t1.document_id", "=", "t2.document_id", "where", "t2.document_name", "=", "value", ";"]}, "masked_query": "SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY';", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0432\u044b id \u0438 \u0442\u0435\u043a\u0441\u0442 \u0430\u0431\u0437\u0430\u0446\u0435\u0432 \u0432 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0435 \u00ab\u0414\u043e\u0441\u0442\u043e\u043f\u0440\u0438\u043c\u0435\u0447\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u041b\u043e\u043d\u0434\u043e\u043d\u0430\u00bb?"}, "question": "What are the ids and texts of paragraphs in the document titled 'Welcome to NY'?", "kb_id": "cre_Doc_Template_Mgt"}, {"id": "D_0366", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"\u0421\u043e\u0432\u0435\u0442\u044b \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439\";"}, "sql": {"en": {"from": {"table_units": [["table_unit", 3], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 15, false], null], [0, 9, false], null]]}, "select": [false, [[0, [0, [0, 16, false], null]]]], "where": [[false, 2, [0, [0, 11, false], null], "\"Customer reviews\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 3], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 15, false], null], [0, 9, false], null]]}, "select": [false, [[0, [0, [0, 16, false], null]]]], "where": [[false, 2, [0, [0, 11, false], null], "\"\u0421\u043e\u0432\u0435\u0442\u044b \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Show", "all", "paragraph", "texts", "for", "the", "document", "``", "Customer", "reviews", "''", "."], "ru": ["\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c", "\u0432\u0441\u0435", "\u0442\u0435\u043a\u0441\u0442\u044b", "\u043f\u0430\u0440\u0430\u0433\u0440\u0430\u0444\u043e\u0432", "\u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430", "\u00ab", "\u0421\u043e\u0432\u0435\u0442\u044b", "\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439", "\u00bb", "."]}, "query_toks": {"en": ["select", "t1.paragraph_text", "from", "paragraphs", "as", "t1", "join", "documents", "as", "t2", "on", "t1.document_id", "=", "t2.document_id", "where", "t2.document_name", "=", "\"Customer reviews\"", ";"], "ru": ["select", "t1.paragraph_text", "from", "paragraphs", "as", "t1", "join", "documents", "as", "t2", "on", "t1.document_id", "=", "t2.document_id", "where", "t2.document_name", "=", "\"\u0421\u043e\u0432\u0435\u0442\u044b \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439\"", ";"]}, "query_toks_no_values": {"en": ["select", "t1.paragraph_text", "from", "paragraphs", "as", "t1", "join", "documents", "as", "t2", "on", "t1.document_id", "=", "t2.document_id", "where", "t2.document_name", "=", "value", ";"], "ru": ["select", "t1.paragraph_text", "from", "paragraphs", "as", "t1", "join", "documents", "as", "t2", "on", "t1.document_id", "=", "t2.document_id", "where", "t2.document_name", "=", "value", ";"]}, "masked_query": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\";", "question_pauq": {"ru": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0432\u0441\u0435 \u0442\u0435\u043a\u0441\u0442\u044b \u043f\u0430\u0440\u0430\u0433\u0440\u0430\u0444\u043e\u0432 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430 \u00ab\u0421\u043e\u0432\u0435\u0442\u044b \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439\u00bb."}, "question": "Show all paragraph texts for the document \"Customer reviews\".", "kb_id": "cre_Doc_Template_Mgt"}, {"id": "D_0367", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"\u0421\u043e\u0432\u0435\u0442\u044b \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439\";"}, "sql": {"en": {"from": {"table_units": [["table_unit", 3], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 15, false], null], [0, 9, false], null]]}, "select": [false, [[0, [0, [0, 16, false], null]]]], "where": [[false, 2, [0, [0, 11, false], null], "\"Customer reviews\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 3], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 15, false], null], [0, 9, false], null]]}, "select": [false, [[0, [0, [0, 16, false], null]]]], "where": [[false, 2, [0, [0, 11, false], null], "\"\u0421\u043e\u0432\u0435\u0442\u044b \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "the", "paragraph", "texts", "for", "the", "document", "with", "the", "name", "'Customer", "reviews", "'", "?"], "ru": ["\u041a\u0430\u043a\u043e\u0432\u044b", "\u0442\u0435\u043a\u0441\u0442\u044b", "\u043f\u0430\u0440\u0430\u0433\u0440\u0430\u0444\u043e\u0432", "\u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430", "\u0441", "\u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435\u043c", "\u00ab", "\u0421\u043e\u0432\u0435\u0442\u044b", "\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439", "\u00bb", "?"]}, "query_toks": {"en": ["select", "t1.paragraph_text", "from", "paragraphs", "as", "t1", "join", "documents", "as", "t2", "on", "t1.document_id", "=", "t2.document_id", "where", "t2.document_name", "=", "\"Customer reviews\"", ";"], "ru": ["select", "t1.paragraph_text", "from", "paragraphs", "as", "t1", "join", "documents", "as", "t2", "on", "t1.document_id", "=", "t2.document_id", "where", "t2.document_name", "=", "\"\u0421\u043e\u0432\u0435\u0442\u044b \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439\"", ";"]}, "query_toks_no_values": {"en": ["select", "t1.paragraph_text", "from", "paragraphs", "as", "t1", "join", "documents", "as", "t2", "on", "t1.document_id", "=", "t2.document_id", "where", "t2.document_name", "=", "value", ";"], "ru": ["select", "t1.paragraph_text", "from", "paragraphs", "as", "t1", "join", "documents", "as", "t2", "on", "t1.document_id", "=", "t2.document_id", "where", "t2.document_name", "=", "value", ";"]}, "masked_query": "SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\";", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0432\u044b \u0442\u0435\u043a\u0441\u0442\u044b \u043f\u0430\u0440\u0430\u0433\u0440\u0430\u0444\u043e\u0432 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430 \u0441 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435\u043c \u00ab\u0421\u043e\u0432\u0435\u0442\u044b \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439\u00bb?"}, "question": "What are the paragraph texts for the document with the name 'Customer reviews'?", "kb_id": "cre_Doc_Template_Mgt"}, {"id": "D_0368", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 3]], "conds": []}, "select": [false, [[0, [0, [0, 15, false], null]], [3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [[0, 15, false]], "having": [], "orderBy": ["asc", [[0, [0, 15, false], null]]], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 3]], "conds": []}, "select": [false, [[0, [0, [0, 15, false], null]], [3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [[0, 15, false]], "having": [], "orderBy": ["asc", [[0, [0, 15, false], null]]], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Show", "all", "document", "ids", "and", "the", "number", "of", "paragraphs", "in", "each", "document", ".", "Order", "by", "document", "id", "."], "ru": ["\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c", "\u0432\u0441\u0435", "id", "\u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u043e\u0432", "\u0438", "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e", "\u0430\u0431\u0437\u0430\u0446\u0435\u0432", "\u0432", "\u043a\u0430\u0436\u0434\u043e\u043c", "\u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0435", ".", "\u0421\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c", "\u043f\u043e", "id", "\u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430", "."]}, "query_toks": {"en": ["select", "document_id", ",", "count", "(", "*", ")", "from", "paragraphs", "group", "by", "document_id", "order", "by", "document_id", ";"], "ru": ["select", "document_id", ",", "count", "(", "*", ")", "from", "paragraphs", "group", "by", "document_id", "order", "by", "document_id", ";"]}, "query_toks_no_values": {"en": ["select", "document_id", ",", "count", "(", "*", ")", "from", "paragraphs", "group", "by", "document_id", "order", "by", "document_id", ";"], "ru": ["select", "document_id", ",", "count", "(", "*", ")", "from", "paragraphs", "group", "by", "document_id", "order", "by", "document_id", ";"]}, "masked_query": "SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id;", "question_pauq": {"ru": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0432\u0441\u0435 id \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u043e\u0432 \u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0430\u0431\u0437\u0430\u0446\u0435\u0432 \u0432 \u043a\u0430\u0436\u0434\u043e\u043c \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0435. \u0421\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043f\u043e id \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430."}, "question": "Show all document ids and the number of paragraphs in each document. Order by document id.", "kb_id": "cre_Doc_Template_Mgt"}, {"id": "D_0369", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 3]], "conds": []}, "select": [false, [[0, [0, [0, 15, false], null]], [3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [[0, 15, false]], "having": [], "orderBy": ["asc", [[0, [0, 15, false], null]]], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 3]], "conds": []}, "select": [false, [[0, [0, [0, 15, false], null]], [3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [[0, 15, false]], "having": [], "orderBy": ["asc", [[0, [0, 15, false], null]]], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Return", "the", "different", "document", "ids", "along", "with", "the", "number", "of", "paragraphs", "corresponding", "to", "each", ",", "ordered", "by", "id", "."], "ru": ["\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c", "\u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0435", "id", "\u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u043e\u0432", "\u0432\u043c\u0435\u0441\u0442\u0435", "\u0441", "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c", "\u0430\u0431\u0437\u0430\u0446\u0435\u0432", ",", "\u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445", "\u043a\u0430\u0436\u0434\u043e\u043c\u0443", ",", "\u0432", "\u043f\u043e\u0440\u044f\u0434\u043a\u0435", "id", "."]}, "query_toks": {"en": ["select", "document_id", ",", "count", "(", "*", ")", "from", "paragraphs", "group", "by", "document_id", "order", "by", "document_id", ";"], "ru": ["select", "document_id", ",", "count", "(", "*", ")", "from", "paragraphs", "group", "by", "document_id", "order", "by", "document_id", ";"]}, "query_toks_no_values": {"en": ["select", "document_id", ",", "count", "(", "*", ")", "from", "paragraphs", "group", "by", "document_id", "order", "by", "document_id", ";"], "ru": ["select", "document_id", ",", "count", "(", "*", ")", "from", "paragraphs", "group", "by", "document_id", "order", "by", "document_id", ";"]}, "masked_query": "SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id;", "question_pauq": {"ru": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0435 id \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u043e\u0432 \u0432\u043c\u0435\u0441\u0442\u0435 \u0441 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c \u0430\u0431\u0437\u0430\u0446\u0435\u0432, \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445 \u043a\u0430\u0436\u0434\u043e\u043c\u0443, \u0432 \u043f\u043e\u0440\u044f\u0434\u043a\u0435 id."}, "question": "Return the different document ids along with the number of paragraphs corresponding to each, ordered by id.", "kb_id": "cre_Doc_Template_Mgt"}, {"id": "D_0370", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T1.document_id ,  T2.document_name ,  count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 3], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 15, false], null], [0, 9, false], null]]}, "select": [false, [[0, [0, [0, 15, false], null]], [0, [0, [0, 11, false], null]], [3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [[0, 15, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 3], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 15, false], null], [0, 9, false], null]]}, "select": [false, [[0, [0, [0, 15, false], null]], [0, [0, [0, 11, false], null]], [3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [[0, 15, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Show", "all", "document", "ids", ",", "names", "and", "the", "number", "of", "paragraphs", "in", "each", "document", "."], "ru": ["\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c", "\u0432\u0441\u0435", "id", "\u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u043e\u0432", ",", "\u0438\u043c\u0435\u043d\u0430", "\u0438", "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e", "\u0430\u0431\u0437\u0430\u0446\u0435\u0432", "\u0432", "\u043a\u0430\u0436\u0434\u043e\u043c", "\u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0435", "."]}, "query_toks": {"en": ["select", "t1.document_id", ",", "t2.document_name", ",", "count", "(", "*", ")", "from", "paragraphs", "as", "t1", "join", "documents", "as", "t2", "on", "t1.document_id", "=", "t2.document_id", "group", "by", "t1.document_id", ";"], "ru": ["select", "t1.document_id", ",", "t2.document_name", ",", "count", "(", "*", ")", "from", "paragraphs", "as", "t1", "join", "documents", "as", "t2", "on", "t1.document_id", "=", "t2.document_id", "group", "by", "t1.document_id", ";"]}, "query_toks_no_values": {"en": ["select", "t1.document_id", ",", "t2.document_name", ",", "count", "(", "*", ")", "from", "paragraphs", "as", "t1", "join", "documents", "as", "t2", "on", "t1.document_id", "=", "t2.document_id", "group", "by", "t1.document_id", ";"], "ru": ["select", "t1.document_id", ",", "t2.document_name", ",", "count", "(", "*", ")", "from", "paragraphs", "as", "t1", "join", "documents", "as", "t2", "on", "t1.document_id", "=", "t2.document_id", "group", "by", "t1.document_id", ";"]}, "masked_query": "SELECT T1.document_id ,  T2.document_name ,  count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id;", "question_pauq": {"ru": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0432\u0441\u0435 id \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u043e\u0432, \u0438\u043c\u0435\u043d\u0430 \u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0430\u0431\u0437\u0430\u0446\u0435\u0432 \u0432 \u043a\u0430\u0436\u0434\u043e\u043c \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0435."}, "question": "Show all document ids, names and the number of paragraphs in each document.", "kb_id": "cre_Doc_Template_Mgt"}, {"id": "D_0371", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T1.document_id ,  T2.document_name ,  count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 3], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 15, false], null], [0, 9, false], null]]}, "select": [false, [[0, [0, [0, 15, false], null]], [0, [0, [0, 11, false], null]], [3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [[0, 15, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 3], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 15, false], null], [0, 9, false], null]]}, "select": [false, [[0, [0, [0, 15, false], null]], [0, [0, [0, 11, false], null]], [3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [[0, 15, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "the", "ids", "and", "names", "of", "each", "document", ",", "as", "well", "as", "the", "number", "of", "paragraphs", "in", "each", "?"], "ru": ["\u041a\u0430\u043a\u043e\u0432\u044b", "id", "\u0438", "\u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f", "\u043a\u0430\u0436\u0434\u043e\u0433\u043e", "\u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430", ",", "\u0430", "\u0442\u0430\u043a\u0436\u0435", "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e", "\u0430\u0431\u0437\u0430\u0446\u0435\u0432", "\u0432", "\u043a\u0430\u0436\u0434\u043e\u043c", "?"]}, "query_toks": {"en": ["select", "t1.document_id", ",", "t2.document_name", ",", "count", "(", "*", ")", "from", "paragraphs", "as", "t1", "join", "documents", "as", "t2", "on", "t1.document_id", "=", "t2.document_id", "group", "by", "t1.document_id", ";"], "ru": ["select", "t1.document_id", ",", "t2.document_name", ",", "count", "(", "*", ")", "from", "paragraphs", "as", "t1", "join", "documents", "as", "t2", "on", "t1.document_id", "=", "t2.document_id", "group", "by", "t1.document_id", ";"]}, "query_toks_no_values": {"en": ["select", "t1.document_id", ",", "t2.document_name", ",", "count", "(", "*", ")", "from", "paragraphs", "as", "t1", "join", "documents", "as", "t2", "on", "t1.document_id", "=", "t2.document_id", "group", "by", "t1.document_id", ";"], "ru": ["select", "t1.document_id", ",", "t2.document_name", ",", "count", "(", "*", ")", "from", "paragraphs", "as", "t1", "join", "documents", "as", "t2", "on", "t1.document_id", "=", "t2.document_id", "group", "by", "t1.document_id", ";"]}, "masked_query": "SELECT T1.document_id ,  T2.document_name ,  count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id;", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0432\u044b id \u0438 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430, \u0430 \u0442\u0430\u043a\u0436\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0430\u0431\u0437\u0430\u0446\u0435\u0432 \u0432 \u043a\u0430\u0436\u0434\u043e\u043c?"}, "question": "What are the ids and names of each document, as well as the number of paragraphs in each?", "kb_id": "cre_Doc_Template_Mgt"}, {"id": "D_0372", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 3]], "conds": []}, "select": [false, [[0, [0, [0, 15, false], null]]]], "where": [], "groupBy": [[0, 15, false]], "having": [[false, 5, [0, [3, 0, false], null], 2.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 3]], "conds": []}, "select": [false, [[0, [0, [0, 15, false], null]]]], "where": [], "groupBy": [[0, 15, false]], "having": [[false, 5, [0, [3, 0, false], null], 2.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["List", "all", "document", "ids", "with", "at", "least", "two", "paragraphs", "."], "ru": ["\u041f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0438\u0442\u0435", "\u0432\u0441\u0435", "id", "\u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u043e\u0432", "\u043a\u0430\u043a", "\u043c\u0438\u043d\u0438\u043c\u0443\u043c", "\u0441", "\u0434\u0432\u0443\u043c\u044f", "\u0430\u0431\u0437\u0430\u0446\u0430\u043c\u0438", "."]}, "query_toks": {"en": ["select", "document_id", "from", "paragraphs", "group", "by", "document_id", "having", "count", "(", "*", ")", ">=", "2", ";"], "ru": ["select", "document_id", "from", "paragraphs", "group", "by", "document_id", "having", "count", "(", "*", ")", ">=", "2", ";"]}, "query_toks_no_values": {"en": ["select", "document_id", "from", "paragraphs", "group", "by", "document_id", "having", "count", "(", "*", ")", ">=", "2", ";"], "ru": ["select", "document_id", "from", "paragraphs", "group", "by", "document_id", "having", "count", "(", "*", ")", ">=", "2", ";"]}, "masked_query": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2;", "question_pauq": {"ru": "\u041f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0438\u0442\u0435 \u0432\u0441\u0435 id \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u043e\u0432 \u043a\u0430\u043a \u043c\u0438\u043d\u0438\u043c\u0443\u043c \u0441 \u0434\u0432\u0443\u043c\u044f \u0430\u0431\u0437\u0430\u0446\u0430\u043c\u0438."}, "question": "List all document ids with at least two paragraphs.", "kb_id": "cre_Doc_Template_Mgt"}, {"id": "D_0373", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 3]], "conds": []}, "select": [false, [[0, [0, [0, 15, false], null]]]], "where": [], "groupBy": [[0, 15, false]], "having": [[false, 5, [0, [3, 0, false], null], 2.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 3]], "conds": []}, "select": [false, [[0, [0, [0, 15, false], null]]]], "where": [], "groupBy": [[0, 15, false]], "having": [[false, 5, [0, [3, 0, false], null], 2.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "the", "ids", "of", "documents", "that", "have", "2", "or", "more", "paragraphs", "?"], "ru": ["\u041a\u0430\u043a\u043e\u0432\u044b", "id", "\u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u043e\u0432", ",", "\u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0445", "2", "\u0438\u043b\u0438", "\u0431\u043e\u043b\u0435\u0435", "\u0430\u0431\u0437\u0430\u0446\u0430", "?"]}, "query_toks": {"en": ["select", "document_id", "from", "paragraphs", "group", "by", "document_id", "having", "count", "(", "*", ")", ">=", "2", ";"], "ru": ["select", "document_id", "from", "paragraphs", "group", "by", "document_id", "having", "count", "(", "*", ")", ">=", "2", ";"]}, "query_toks_no_values": {"en": ["select", "document_id", "from", "paragraphs", "group", "by", "document_id", "having", "count", "(", "*", ")", ">=", "2", ";"], "ru": ["select", "document_id", "from", "paragraphs", "group", "by", "document_id", "having", "count", "(", "*", ")", ">=", "2", ";"]}, "masked_query": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2;", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0432\u044b id \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u043e\u0432, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0445 2 \u0438\u043b\u0438 \u0431\u043e\u043b\u0435\u0435 \u0430\u0431\u0437\u0430\u0446\u0430?"}, "question": "What are the ids of documents that have 2 or more paragraphs?", "kb_id": "cre_Doc_Template_Mgt"}, {"id": "D_0374", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 3], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 15, false], null], [0, 9, false], null]]}, "select": [false, [[0, [0, [0, 15, false], null]], [0, [0, [0, 11, false], null]]]], "where": [], "groupBy": [[0, 15, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 3], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 15, false], null], [0, 9, false], null]]}, "select": [false, [[0, [0, [0, 15, false], null]], [0, [0, [0, 11, false], null]]]], "where": [], "groupBy": [[0, 15, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "document", "id", "and", "name", "with", "greatest", "number", "of", "paragraphs", "?"], "ru": ["\u041a\u0430\u043a\u043e\u0432", "id", "\u0438", "\u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435", "\u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430", "\u0441", "\u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0438\u043c", "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c", "\u0430\u0431\u0437\u0430\u0446\u0435\u0432", "?"]}, "query_toks": {"en": ["select", "t1.document_id", ",", "t2.document_name", "from", "paragraphs", "as", "t1", "join", "documents", "as", "t2", "on", "t1.document_id", "=", "t2.document_id", "group", "by", "t1.document_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"], "ru": ["select", "t1.document_id", ",", "t2.document_name", "from", "paragraphs", "as", "t1", "join", "documents", "as", "t2", "on", "t1.document_id", "=", "t2.document_id", "group", "by", "t1.document_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"]}, "query_toks_no_values": {"en": ["select", "t1.document_id", ",", "t2.document_name", "from", "paragraphs", "as", "t1", "join", "documents", "as", "t2", "on", "t1.document_id", "=", "t2.document_id", "group", "by", "t1.document_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"], "ru": ["select", "t1.document_id", ",", "t2.document_name", "from", "paragraphs", "as", "t1", "join", "documents", "as", "t2", "on", "t1.document_id", "=", "t2.document_id", "group", "by", "t1.document_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"]}, "masked_query": "SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1;", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0432 id \u0438 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430 \u0441 \u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0438\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c \u0430\u0431\u0437\u0430\u0446\u0435\u0432?"}, "question": "What is the document id and name with greatest number of paragraphs?", "kb_id": "cre_Doc_Template_Mgt"}, {"id": "D_0375", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 3], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 15, false], null], [0, 9, false], null]]}, "select": [false, [[0, [0, [0, 15, false], null]], [0, [0, [0, 11, false], null]]]], "where": [], "groupBy": [[0, 15, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 3], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 15, false], null], [0, 9, false], null]]}, "select": [false, [[0, [0, [0, 15, false], null]], [0, [0, [0, 11, false], null]]]], "where": [], "groupBy": [[0, 15, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Return", "the", "id", "and", "name", "of", "the", "document", "with", "the", "most", "paragraphs", "."], "ru": ["\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c", "id", "\u0438", "\u0438\u043c\u044f", "\u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430", "\u0441", "\u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0438\u043c", "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c", "\u0430\u0431\u0437\u0430\u0446\u0435\u0432", "."]}, "query_toks": {"en": ["select", "t1.document_id", ",", "t2.document_name", "from", "paragraphs", "as", "t1", "join", "documents", "as", "t2", "on", "t1.document_id", "=", "t2.document_id", "group", "by", "t1.document_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"], "ru": ["select", "t1.document_id", ",", "t2.document_name", "from", "paragraphs", "as", "t1", "join", "documents", "as", "t2", "on", "t1.document_id", "=", "t2.document_id", "group", "by", "t1.document_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"]}, "query_toks_no_values": {"en": ["select", "t1.document_id", ",", "t2.document_name", "from", "paragraphs", "as", "t1", "join", "documents", "as", "t2", "on", "t1.document_id", "=", "t2.document_id", "group", "by", "t1.document_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"], "ru": ["select", "t1.document_id", ",", "t2.document_name", "from", "paragraphs", "as", "t1", "join", "documents", "as", "t2", "on", "t1.document_id", "=", "t2.document_id", "group", "by", "t1.document_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"]}, "masked_query": "SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1;", "question_pauq": {"ru": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c id \u0438 \u0438\u043c\u044f \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430 \u0441 \u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0438\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c \u0430\u0431\u0437\u0430\u0446\u0435\u0432."}, "question": "Return the id and name of the document with the most paragraphs.", "kb_id": "cre_Doc_Template_Mgt"}, {"id": "D_0376", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 3]], "conds": []}, "select": [false, [[0, [0, [0, 15, false], null]]]], "where": [], "groupBy": [[0, 15, false]], "having": [], "orderBy": ["asc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 3]], "conds": []}, "select": [false, [[0, [0, [0, 15, false], null]]]], "where": [], "groupBy": [[0, 15, false]], "having": [], "orderBy": ["asc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "document", "id", "with", "least", "number", "of", "paragraphs", "?"], "ru": ["\u041a\u0430\u043a\u043e\u0439", "id", "\u0443", "\u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430", "\u0441", "\u043d\u0430\u0438\u043c\u0435\u043d\u044c\u0448\u0438\u043c", "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c", "\u0430\u0431\u0437\u0430\u0446\u0435\u0432", "?"]}, "query_toks": {"en": ["select", "document_id", "from", "paragraphs", "group", "by", "document_id", "order", "by", "count", "(", "*", ")", "asc", "limit", "1", ";"], "ru": ["select", "document_id", "from", "paragraphs", "group", "by", "document_id", "order", "by", "count", "(", "*", ")", "asc", "limit", "1", ";"]}, "query_toks_no_values": {"en": ["select", "document_id", "from", "paragraphs", "group", "by", "document_id", "order", "by", "count", "(", "*", ")", "asc", "limit", "1", ";"], "ru": ["select", "document_id", "from", "paragraphs", "group", "by", "document_id", "order", "by", "count", "(", "*", ")", "asc", "limit", "1", ";"]}, "masked_query": "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1;", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0439 id \u0443 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430 \u0441 \u043d\u0430\u0438\u043c\u0435\u043d\u044c\u0448\u0438\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c \u0430\u0431\u0437\u0430\u0446\u0435\u0432?"}, "question": "What is the document id with least number of paragraphs?", "kb_id": "cre_Doc_Template_Mgt"}, {"id": "D_0377", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 3]], "conds": []}, "select": [false, [[0, [0, [0, 15, false], null]]]], "where": [], "groupBy": [[0, 15, false]], "having": [], "orderBy": ["asc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 3]], "conds": []}, "select": [false, [[0, [0, [0, 15, false], null]]]], "where": [], "groupBy": [[0, 15, false]], "having": [], "orderBy": ["asc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Return", "the", "id", "of", "the", "document", "with", "the", "fewest", "paragraphs", "."], "ru": ["\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c", "id", "\u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430", "\u0441", "\u043d\u0430\u0438\u043c\u0435\u043d\u044c\u0448\u0438\u043c", "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c", "\u0430\u0431\u0437\u0430\u0446\u0435\u0432", "."]}, "query_toks": {"en": ["select", "document_id", "from", "paragraphs", "group", "by", "document_id", "order", "by", "count", "(", "*", ")", "asc", "limit", "1", ";"], "ru": ["select", "document_id", "from", "paragraphs", "group", "by", "document_id", "order", "by", "count", "(", "*", ")", "asc", "limit", "1", ";"]}, "query_toks_no_values": {"en": ["select", "document_id", "from", "paragraphs", "group", "by", "document_id", "order", "by", "count", "(", "*", ")", "asc", "limit", "1", ";"], "ru": ["select", "document_id", "from", "paragraphs", "group", "by", "document_id", "order", "by", "count", "(", "*", ")", "asc", "limit", "1", ";"]}, "masked_query": "SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1;", "question_pauq": {"ru": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c id \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430 \u0441 \u043d\u0430\u0438\u043c\u0435\u043d\u044c\u0448\u0438\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c \u0430\u0431\u0437\u0430\u0446\u0435\u0432."}, "question": "Return the id of the document with the fewest paragraphs.", "kb_id": "cre_Doc_Template_Mgt"}, {"id": "D_0378", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 3]], "conds": []}, "select": [false, [[0, [0, [0, 15, false], null]]]], "where": [], "groupBy": [[0, 15, false]], "having": [[false, 1, [0, [3, 0, false], null], 1.0, 2.0]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 3]], "conds": []}, "select": [false, [[0, [0, [0, 15, false], null]]]], "where": [], "groupBy": [[0, 15, false]], "having": [[false, 1, [0, [3, 0, false], null], 1.0, 2.0]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "document", "id", "with", "1", "to", "2", "paragraphs", "?"], "ru": ["\u041a\u0430\u043a\u043e\u0439", "id", "\u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430", "\u0441\u043e\u0441\u0442\u043e\u0438\u0442", "\u0438\u0437", "1-2", "\u0430\u0431\u0437\u0430\u0446\u0435\u0432", "?"]}, "query_toks": {"en": ["select", "document_id", "from", "paragraphs", "group", "by", "document_id", "having", "count", "(", "*", ")", "between", "1", "and", "2", ";"], "ru": ["select", "document_id", "from", "paragraphs", "group", "by", "document_id", "having", "count", "(", "*", ")", "between", "1", "and", "2", ";"]}, "query_toks_no_values": {"en": ["select", "document_id", "from", "paragraphs", "group", "by", "document_id", "having", "count", "(", "*", ")", "between", "1", "and", "2", ";"], "ru": ["select", "document_id", "from", "paragraphs", "group", "by", "document_id", "having", "count", "(", "*", ")", "between", "1", "and", "2", ";"]}, "masked_query": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2;", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0439 id \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430 \u0441\u043e\u0441\u0442\u043e\u0438\u0442 \u0438\u0437 1-2 \u0430\u0431\u0437\u0430\u0446\u0435\u0432?"}, "question": "What is the document id with 1 to 2 paragraphs?", "kb_id": "cre_Doc_Template_Mgt"}, {"id": "D_0379", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 3]], "conds": []}, "select": [false, [[0, [0, [0, 15, false], null]]]], "where": [], "groupBy": [[0, 15, false]], "having": [[false, 1, [0, [3, 0, false], null], 1.0, 2.0]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 3]], "conds": []}, "select": [false, [[0, [0, [0, 15, false], null]]]], "where": [], "groupBy": [[0, 15, false]], "having": [[false, 1, [0, [3, 0, false], null], 1.0, 2.0]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Give", "the", "ids", "of", "documents", "that", "have", "between", "one", "and", "two", "paragraphs", "."], "ru": ["\u0423\u043a\u0430\u0436\u0438\u0442\u0435", "id", "\u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u043e\u0432", ",", "\u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0445", "\u043e\u0442", "\u043e\u0434\u043d\u043e\u0433\u043e", "\u0434\u043e", "\u0434\u0432\u0443\u0445", "\u0430\u0431\u0437\u0430\u0446\u0435\u0432", "."]}, "query_toks": {"en": ["select", "document_id", "from", "paragraphs", "group", "by", "document_id", "having", "count", "(", "*", ")", "between", "1", "and", "2", ";"], "ru": ["select", "document_id", "from", "paragraphs", "group", "by", "document_id", "having", "count", "(", "*", ")", "between", "1", "and", "2", ";"]}, "query_toks_no_values": {"en": ["select", "document_id", "from", "paragraphs", "group", "by", "document_id", "having", "count", "(", "*", ")", "between", "1", "and", "2", ";"], "ru": ["select", "document_id", "from", "paragraphs", "group", "by", "document_id", "having", "count", "(", "*", ")", "between", "1", "and", "2", ";"]}, "masked_query": "SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2;", "question_pauq": {"ru": "\u0423\u043a\u0430\u0436\u0438\u0442\u0435 id \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u043e\u0432, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0445 \u043e\u0442 \u043e\u0434\u043d\u043e\u0433\u043e \u0434\u043e \u0434\u0432\u0443\u0445 \u0430\u0431\u0437\u0430\u0446\u0435\u0432."}, "question": "Give the ids of documents that have between one and two paragraphs.", "kb_id": "cre_Doc_Template_Mgt"}, {"id": "D_0380", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT document_id FROM Paragraphs WHERE paragraph_text  =  '\u0418\u0441\u043f\u0430\u043d\u0438\u044f' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  '\u0424\u0440\u0430\u043d\u0446\u0438\u044f';"}, "sql": {"en": {"from": {"table_units": [["table_unit", 3]], "conds": []}, "select": [false, [[0, [0, [0, 15, false], null]]]], "where": [[false, 2, [0, [0, 16, false], null], "\"Brazil\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": {"from": {"table_units": [["table_unit", 3]], "conds": []}, "select": [false, [[0, [0, [0, 15, false], null]]]], "where": [[false, 2, [0, [0, 16, false], null], "\"Ireland\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 3]], "conds": []}, "select": [false, [[0, [0, [0, 15, false], null]]]], "where": [[false, 2, [0, [0, 16, false], null], "\"\u0418\u0441\u043f\u0430\u043d\u0438\u044f\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": {"from": {"table_units": [["table_unit", 3]], "conds": []}, "select": [false, [[0, [0, [0, 15, false], null]]]], "where": [[false, 2, [0, [0, 16, false], null], "\"\u0424\u0440\u0430\u043d\u0446\u0438\u044f\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "union": null, "except": null}}, "question_toks": {"en": ["Show", "the", "document", "id", "with", "paragraph", "text", "'Brazil", "'", "and", "'Ireland", "'", "."], "ru": ["\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c", "id", "\u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430", "\u0441", "\u0442\u0435\u043a\u0441\u0442\u043e\u043c", "\u0430\u0431\u0437\u0430\u0446\u0430", "\u00ab", "\u0418\u0441\u043f\u0430\u043d\u0438\u044f", "\u00bb", "\u0438", "\u00ab", "\u0424\u0440\u0430\u043d\u0446\u0438\u044f", "\u00bb", "."]}, "query_toks": {"en": ["select", "document_id", "from", "paragraphs", "where", "paragraph_text", "=", "\"Brazil\"", "intersect", "select", "document_id", "from", "paragraphs", "where", "paragraph_text", "=", "\"Ireland\"", ";"], "ru": ["select", "document_id", "from", "paragraphs", "where", "paragraph_text", "=", "\"\u0418\u0441\u043f\u0430\u043d\u0438\u044f\"", "intersect", "select", "document_id", "from", "paragraphs", "where", "paragraph_text", "=", "\"\u0424\u0440\u0430\u043d\u0446\u0438\u044f\"", ";"]}, "query_toks_no_values": {"en": ["select", "document_id", "from", "paragraphs", "where", "paragraph_text", "=", "value", "intersect", "select", "document_id", "from", "paragraphs", "where", "paragraph_text", "=", "value", ";"], "ru": ["select", "document_id", "from", "paragraphs", "where", "paragraph_text", "=", "value", "intersect", "select", "document_id", "from", "paragraphs", "where", "paragraph_text", "=", "value", ";"]}, "masked_query": "SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland';", "question_pauq": {"ru": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c id \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430 \u0441 \u0442\u0435\u043a\u0441\u0442\u043e\u043c \u0430\u0431\u0437\u0430\u0446\u0430 \u00ab\u0418\u0441\u043f\u0430\u043d\u0438\u044f\u00bb \u0438 \u00ab\u0424\u0440\u0430\u043d\u0446\u0438\u044f\u00bb."}, "question": "Show the document id with paragraph text 'Brazil' and 'Ireland'.", "kb_id": "cre_Doc_Template_Mgt"}, {"id": "D_0381", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT document_id FROM Paragraphs WHERE paragraph_text  =  '\u0418\u0441\u043f\u0430\u043d\u0438\u044f' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  '\u0424\u0440\u0430\u043d\u0446\u0438\u044f';"}, "sql": {"en": {"from": {"table_units": [["table_unit", 3]], "conds": []}, "select": [false, [[0, [0, [0, 15, false], null]]]], "where": [[false, 2, [0, [0, 16, false], null], "\"Brazil\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": {"from": {"table_units": [["table_unit", 3]], "conds": []}, "select": [false, [[0, [0, [0, 15, false], null]]]], "where": [[false, 2, [0, [0, 16, false], null], "\"Ireland\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 3]], "conds": []}, "select": [false, [[0, [0, [0, 15, false], null]]]], "where": [[false, 2, [0, [0, 16, false], null], "\"\u0418\u0441\u043f\u0430\u043d\u0438\u044f\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": {"from": {"table_units": [["table_unit", 3]], "conds": []}, "select": [false, [[0, [0, [0, 15, false], null]]]], "where": [[false, 2, [0, [0, 16, false], null], "\"\u0424\u0440\u0430\u043d\u0446\u0438\u044f\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "the", "ids", "of", "documents", "that", "contain", "the", "paragraph", "text", "'Brazil", "'", "and", "'Ireland", "'", "?"], "ru": ["\u041a\u0430\u043a\u0438\u0435", "id", "\u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u043e\u0432", "\u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442", "\u0442\u0435\u043a\u0441\u0442", "\u0430\u0431\u0437\u0430\u0446\u0430", "\u00ab", "\u0418\u0441\u043f\u0430\u043d\u0438\u044f", "\u00bb", "\u0438", "\u00ab", "\u0424\u0440\u0430\u043d\u0446\u0438\u044f", "\u00bb", "?"]}, "query_toks": {"en": ["select", "document_id", "from", "paragraphs", "where", "paragraph_text", "=", "\"Brazil\"", "intersect", "select", "document_id", "from", "paragraphs", "where", "paragraph_text", "=", "\"Ireland\"", ";"], "ru": ["select", "document_id", "from", "paragraphs", "where", "paragraph_text", "=", "\"\u0418\u0441\u043f\u0430\u043d\u0438\u044f\"", "intersect", "select", "document_id", "from", "paragraphs", "where", "paragraph_text", "=", "\"\u0424\u0440\u0430\u043d\u0446\u0438\u044f\"", ";"]}, "query_toks_no_values": {"en": ["select", "document_id", "from", "paragraphs", "where", "paragraph_text", "=", "value", "intersect", "select", "document_id", "from", "paragraphs", "where", "paragraph_text", "=", "value", ";"], "ru": ["select", "document_id", "from", "paragraphs", "where", "paragraph_text", "=", "value", "intersect", "select", "document_id", "from", "paragraphs", "where", "paragraph_text", "=", "value", ";"]}, "masked_query": "SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland';", "question_pauq": {"ru": "\u041a\u0430\u043a\u0438\u0435 id \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u043e\u0432 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442 \u0442\u0435\u043a\u0441\u0442 \u0430\u0431\u0437\u0430\u0446\u0430 \u00ab\u0418\u0441\u043f\u0430\u043d\u0438\u044f\u00bb \u0438 \u00ab\u0424\u0440\u0430\u043d\u0446\u0438\u044f\u00bb?"}, "question": "What are the ids of documents that contain the paragraph text 'Brazil' and 'Ireland'?", "kb_id": "cre_Doc_Template_Mgt"}, {"id": "D_0382", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT count(*) FROM teacher;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["How", "many", "teachers", "are", "there", "?"], "ru": ["\u0421\u043a\u043e\u043b\u044c\u043a\u043e", "\u0432\u0441\u0435\u0433\u043e", "\u0443\u0447\u0438\u0442\u0435\u043b\u0435\u0439", "?"]}, "query_toks": {"en": ["select", "count", "(", "*", ")", "from", "teacher", ";"], "ru": ["select", "count", "(", "*", ")", "from", "teacher", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "*", ")", "from", "teacher", ";"], "ru": ["select", "count", "(", "*", ")", "from", "teacher", ";"]}, "masked_query": "SELECT count(*) FROM teacher;", "question_pauq": {"ru": "\u0421\u043a\u043e\u043b\u044c\u043a\u043e \u0432\u0441\u0435\u0433\u043e \u0443\u0447\u0438\u0442\u0435\u043b\u0435\u0439?"}, "question": "How many teachers are there?", "kb_id": "course_teach"}, {"id": "D_0383", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT count(*) FROM teacher;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "total", "count", "of", "teachers", "?"], "ru": ["\u041a\u0430\u043a\u043e\u0432\u043e", "\u043e\u0431\u0449\u0435\u0435", "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e", "\u0443\u0447\u0438\u0442\u0435\u043b\u0435\u0439", "?"]}, "query_toks": {"en": ["select", "count", "(", "*", ")", "from", "teacher", ";"], "ru": ["select", "count", "(", "*", ")", "from", "teacher", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "*", ")", "from", "teacher", ";"], "ru": ["select", "count", "(", "*", ")", "from", "teacher", ";"]}, "masked_query": "SELECT count(*) FROM teacher;", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0432\u043e \u043e\u0431\u0449\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0443\u0447\u0438\u0442\u0435\u043b\u0435\u0439?"}, "question": "What is the total count of teachers?", "kb_id": "course_teach"}, {"id": "D_0384", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT Name FROM teacher ORDER BY Age ASC;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 5, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["asc", [[0, [0, 6, false], null]]], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 5, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["asc", [[0, [0, 6, false], null]]], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["List", "the", "names", "of", "teachers", "in", "ascending", "order", "of", "age", "."], "ru": ["\u041f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0438\u0442\u0435", "\u0438\u043c\u0435\u043d\u0430", "\u0443\u0447\u0438\u0442\u0435\u043b\u0435\u0439", "\u0432", "\u043f\u043e\u0440\u044f\u0434\u043a\u0435", "\u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430\u043d\u0438\u044f", "\u0438\u0445", "\u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430", "."]}, "query_toks": {"en": ["select", "name", "from", "teacher", "order", "by", "age", "asc", ";"], "ru": ["select", "name", "from", "teacher", "order", "by", "age", "asc", ";"]}, "query_toks_no_values": {"en": ["select", "name", "from", "teacher", "order", "by", "age", "asc", ";"], "ru": ["select", "name", "from", "teacher", "order", "by", "age", "asc", ";"]}, "masked_query": "SELECT Name FROM teacher ORDER BY Age ASC;", "question_pauq": {"ru": "\u041f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0438\u0442\u0435 \u0438\u043c\u0435\u043d\u0430 \u0443\u0447\u0438\u0442\u0435\u043b\u0435\u0439 \u0432 \u043f\u043e\u0440\u044f\u0434\u043a\u0435 \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430\u043d\u0438\u044f \u0438\u0445 \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430."}, "question": "List the names of teachers in ascending order of age.", "kb_id": "course_teach"}, {"id": "D_0385", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT Name FROM teacher ORDER BY Age ASC;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 5, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["asc", [[0, [0, 6, false], null]]], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 5, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["asc", [[0, [0, 6, false], null]]], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "the", "names", "of", "the", "teachers", "ordered", "by", "ascending", "age", "?"], "ru": ["\u041a\u0430\u043a", "\u0437\u043e\u0432\u0443\u0442", "\u0443\u0447\u0438\u0442\u0435\u043b\u0435\u0439", "\u043f\u043e", "\u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0443", "?"]}, "query_toks": {"en": ["select", "name", "from", "teacher", "order", "by", "age", "asc", ";"], "ru": ["select", "name", "from", "teacher", "order", "by", "age", "asc", ";"]}, "query_toks_no_values": {"en": ["select", "name", "from", "teacher", "order", "by", "age", "asc", ";"], "ru": ["select", "name", "from", "teacher", "order", "by", "age", "asc", ";"]}, "masked_query": "SELECT Name FROM teacher ORDER BY Age ASC;", "question_pauq": {"ru": "\u041a\u0430\u043a \u0437\u043e\u0432\u0443\u0442 \u0443\u0447\u0438\u0442\u0435\u043b\u0435\u0439 \u043f\u043e \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0443?"}, "question": "What are the names of the teachers ordered by ascending age?", "kb_id": "course_teach"}, {"id": "D_0386", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT Age ,  Hometown FROM teacher;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 6, false], null]], [0, [0, [0, 7, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 6, false], null]], [0, [0, [0, 7, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "the", "age", "and", "hometown", "of", "teachers", "?"], "ru": ["\u041a\u0430\u043a\u043e\u0433\u043e", "\u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430", "\u0438", "\u0438\u0437", "\u043a\u0430\u043a\u043e\u0433\u043e", "\u0433\u043e\u0440\u043e\u0434\u0430", "\u0443\u0447\u0438\u0442\u0435\u043b\u044f", "?"]}, "query_toks": {"en": ["select", "age", ",", "hometown", "from", "teacher", ";"], "ru": ["select", "age", ",", "hometown", "from", "teacher", ";"]}, "query_toks_no_values": {"en": ["select", "age", ",", "hometown", "from", "teacher", ";"], "ru": ["select", "age", ",", "hometown", "from", "teacher", ";"]}, "masked_query": "SELECT Age ,  Hometown FROM teacher;", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0433\u043e \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430 \u0438 \u0438\u0437 \u043a\u0430\u043a\u043e\u0433\u043e \u0433\u043e\u0440\u043e\u0434\u0430 \u0443\u0447\u0438\u0442\u0435\u043b\u044f?"}, "question": "What are the age and hometown of teachers?", "kb_id": "course_teach"}, {"id": "D_0387", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT Age ,  Hometown FROM teacher;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 6, false], null]], [0, [0, [0, 7, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 6, false], null]], [0, [0, [0, 7, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "age", "and", "hometown", "of", "every", "teacher", "?"], "ru": ["\u041a\u0430\u043a\u043e\u0433\u043e", "\u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430", "\u0438", "\u0438\u0437", "\u043a\u0430\u043a\u043e\u0433\u043e", "\u0433\u043e\u0440\u043e\u0434\u0430", "\u043a\u0430\u0436\u0434\u044b\u0439", "\u0443\u0447\u0438\u0442\u0435\u043b\u044c", "?"]}, "query_toks": {"en": ["select", "age", ",", "hometown", "from", "teacher", ";"], "ru": ["select", "age", ",", "hometown", "from", "teacher", ";"]}, "query_toks_no_values": {"en": ["select", "age", ",", "hometown", "from", "teacher", ";"], "ru": ["select", "age", ",", "hometown", "from", "teacher", ";"]}, "masked_query": "SELECT Age ,  Hometown FROM teacher;", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0433\u043e \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430 \u0438 \u0438\u0437 \u043a\u0430\u043a\u043e\u0433\u043e \u0433\u043e\u0440\u043e\u0434\u0430 \u043a\u0430\u0436\u0434\u044b\u0439 \u0443\u0447\u0438\u0442\u0435\u043b\u044c?"}, "question": "What is the age and hometown of every teacher?", "kb_id": "course_teach"}, {"id": "D_0388", "source": "spider-dev", "type": "dev", "query": {"ru": "select name from teacher where hometown != \"\u0410\u0431\u0430\u043a\u0430\u043d\";"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 5, false], null]]]], "where": [[false, 7, [0, [0, 7, false], null], "\"little lever urban district\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 5, false], null]]]], "where": [[false, 7, [0, [0, 7, false], null], "\"\u0410\u0431\u0430\u043a\u0430\u043d\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["List", "the", "name", "of", "teachers", "whose", "hometown", "is", "not", "``", "Little", "Lever", "Urban", "District", "``", "."], "ru": ["\u041f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0438\u0442\u0435", "\u0438\u043c\u0435\u043d\u0430", "\u0443\u0447\u0438\u0442\u0435\u043b\u0435\u0439", ",", "\u0447\u0435\u0439", "\u0440\u043e\u0434\u043d\u043e\u0439", "\u0433\u043e\u0440\u043e\u0434", "\u043d\u0435", "\u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f", "\u201c", "\u0410\u0431\u0430\u043a\u0430\u043d", "\u201d", "."]}, "query_toks": {"en": ["select", "name", "from", "teacher", "where", "hometown", "!=", "\"little lever urban district\"", ";"], "ru": ["select", "name", "from", "teacher", "where", "hometown", "!=", "\"\u0410\u0431\u0430\u043a\u0430\u043d\"", ";"]}, "query_toks_no_values": {"en": ["select", "name", "from", "teacher", "where", "hometown", "!=", "value", ";"], "ru": ["select", "name", "from", "teacher", "where", "hometown", "!=", "value", ";"]}, "masked_query": "select name from teacher where hometown != \"little lever urban district\";", "question_pauq": {"ru": "\u041f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0438\u0442\u0435 \u0438\u043c\u0435\u043d\u0430 \u0443\u0447\u0438\u0442\u0435\u043b\u0435\u0439, \u0447\u0435\u0439 \u0440\u043e\u0434\u043d\u043e\u0439 \u0433\u043e\u0440\u043e\u0434 \u043d\u0435 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u201c\u0410\u0431\u0430\u043a\u0430\u043d\u201d."}, "question": "List the name of teachers whose hometown is not `` Little Lever Urban District '' .", "kb_id": "course_teach"}, {"id": "D_0389", "source": "spider-dev", "type": "dev", "query": {"ru": "select name from teacher where hometown != \"\u0410\u0431\u0430\u043a\u0430\u043d\";"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 5, false], null]]]], "where": [[false, 7, [0, [0, 7, false], null], "\"little lever urban district\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 5, false], null]]]], "where": [[false, 7, [0, [0, 7, false], null], "\"\u0410\u0431\u0430\u043a\u0430\u043d\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "the", "names", "of", "the", "teachers", "whose", "hometown", "is", "not", "``", "Little", "Lever", "Urban", "District", "``", "?"], "ru": ["\u041a\u0430\u043a", "\u0437\u043e\u0432\u0443\u0442", "\u0443\u0447\u0438\u0442\u0435\u043b\u0435\u0439", ",", "\u0447\u0435\u0439", "\u0440\u043e\u0434\u043d\u043e\u0439", "\u0433\u043e\u0440\u043e\u0434", "\u043d\u0435", "\u0410\u0431\u0430\u043a\u0430\u043d"]}, "query_toks": {"en": ["select", "name", "from", "teacher", "where", "hometown", "!=", "\"little lever urban district\"", ";"], "ru": ["select", "name", "from", "teacher", "where", "hometown", "!=", "\"\u0410\u0431\u0430\u043a\u0430\u043d\"", ";"]}, "query_toks_no_values": {"en": ["select", "name", "from", "teacher", "where", "hometown", "!=", "value", ";"], "ru": ["select", "name", "from", "teacher", "where", "hometown", "!=", "value", ";"]}, "masked_query": "select name from teacher where hometown != \"little lever urban district\";", "question_pauq": {"ru": "\u041a\u0430\u043a \u0437\u043e\u0432\u0443\u0442 \u0443\u0447\u0438\u0442\u0435\u043b\u0435\u0439, \u0447\u0435\u0439 \u0440\u043e\u0434\u043d\u043e\u0439 \u0433\u043e\u0440\u043e\u0434 \u043d\u0435 \u0410\u0431\u0430\u043a\u0430\u043d"}, "question": "What are the names of the teachers whose hometown is not `` Little Lever Urban District '' ?", "kb_id": "course_teach"}, {"id": "D_0390", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 5, false], null]]]], "where": [[false, 2, [0, [0, 6, false], null], 32.0, null], "or", [false, 2, [0, [0, 6, false], null], 33.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 5, false], null]]]], "where": [[false, 2, [0, [0, 6, false], null], 32.0, null], "or", [false, 2, [0, [0, 6, false], null], 33.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Show", "the", "name", "of", "teachers", "aged", "either", "32", "or", "33", "?"], "ru": ["\u0423\u043a\u0430\u0436\u0438\u0442\u0435", "\u0438\u043c\u0435\u043d\u0430", "\u0443\u0447\u0438\u0442\u0435\u043b\u0435\u0439", "\u0432", "\u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0435", "32", "\u0438\u043b\u0438", "33", "\u043b\u0435\u0442", "?"]}, "query_toks": {"en": ["select", "name", "from", "teacher", "where", "age", "=", "32", "or", "age", "=", "33", ";"], "ru": ["select", "name", "from", "teacher", "where", "age", "=", "32", "or", "age", "=", "33", ";"]}, "query_toks_no_values": {"en": ["select", "name", "from", "teacher", "where", "age", "=", "32", "or", "age", "=", "33", ";"], "ru": ["select", "name", "from", "teacher", "where", "age", "=", "32", "or", "age", "=", "33", ";"]}, "masked_query": "SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33;", "question_pauq": {"ru": "\u0423\u043a\u0430\u0436\u0438\u0442\u0435 \u0438\u043c\u0435\u043d\u0430 \u0443\u0447\u0438\u0442\u0435\u043b\u0435\u0439 \u0432 \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0435 32 \u0438\u043b\u0438 33 \u043b\u0435\u0442?"}, "question": "Show the name of teachers aged either 32 or 33?", "kb_id": "course_teach"}, {"id": "D_0391", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 5, false], null]]]], "where": [[false, 2, [0, [0, 6, false], null], 32.0, null], "or", [false, 2, [0, [0, 6, false], null], 33.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 5, false], null]]]], "where": [[false, 2, [0, [0, 6, false], null], 32.0, null], "or", [false, 2, [0, [0, 6, false], null], 33.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "the", "names", "of", "the", "teachers", "who", "are", "aged", "either", "32", "or", "33", "?"], "ru": ["\u041a\u0430\u043a", "\u0437\u043e\u0432\u0443\u0442", "\u0443\u0447\u0438\u0442\u0435\u043b\u0435\u0439", "\u0432", "\u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0435", "32", "\u0438\u043b\u0438", "33", "\u043b\u0435\u0442", "?"]}, "query_toks": {"en": ["select", "name", "from", "teacher", "where", "age", "=", "32", "or", "age", "=", "33", ";"], "ru": ["select", "name", "from", "teacher", "where", "age", "=", "32", "or", "age", "=", "33", ";"]}, "query_toks_no_values": {"en": ["select", "name", "from", "teacher", "where", "age", "=", "32", "or", "age", "=", "33", ";"], "ru": ["select", "name", "from", "teacher", "where", "age", "=", "32", "or", "age", "=", "33", ";"]}, "masked_query": "SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33;", "question_pauq": {"ru": "\u041a\u0430\u043a \u0437\u043e\u0432\u0443\u0442 \u0443\u0447\u0438\u0442\u0435\u043b\u0435\u0439 \u0432 \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0435 32 \u0438\u043b\u0438 33 \u043b\u0435\u0442?"}, "question": "What are the names of the teachers who are aged either 32 or 33?", "kb_id": "course_teach"}, {"id": "D_0392", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 7, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["asc", [[0, [0, 6, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 7, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["asc", [[0, [0, 6, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "hometown", "of", "the", "youngest", "teacher", "?"], "ru": ["\u0418\u0437", "\u043a\u0430\u043a\u043e\u0433\u043e", "\u0433\u043e\u0440\u043e\u0434\u0430", "\u0441\u0430\u043c\u044b\u0439", "\u043c\u043e\u043b\u043e\u0434\u043e\u0439", "\u0443\u0447\u0438\u0442\u0435\u043b\u044c", "?"]}, "query_toks": {"en": ["select", "hometown", "from", "teacher", "order", "by", "age", "asc", "limit", "1", ";"], "ru": ["select", "hometown", "from", "teacher", "order", "by", "age", "asc", "limit", "1", ";"]}, "query_toks_no_values": {"en": ["select", "hometown", "from", "teacher", "order", "by", "age", "asc", "limit", "1", ";"], "ru": ["select", "hometown", "from", "teacher", "order", "by", "age", "asc", "limit", "1", ";"]}, "masked_query": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1;", "question_pauq": {"ru": "\u0418\u0437 \u043a\u0430\u043a\u043e\u0433\u043e \u0433\u043e\u0440\u043e\u0434\u0430 \u0441\u0430\u043c\u044b\u0439 \u043c\u043e\u043b\u043e\u0434\u043e\u0439 \u0443\u0447\u0438\u0442\u0435\u043b\u044c?"}, "question": "What is the hometown of the youngest teacher?", "kb_id": "course_teach"}, {"id": "D_0393", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 7, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["asc", [[0, [0, 6, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 7, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["asc", [[0, [0, 6, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Where", "is", "the", "youngest", "teacher", "from", "?"], "ru": ["\u041e\u0442\u043a\u0443\u0434\u0430", "\u0441\u0430\u043c\u044b\u0439", "\u043c\u043e\u043b\u043e\u0434\u043e\u0439", "\u0443\u0447\u0438\u0442\u0435\u043b\u044c", "?"]}, "query_toks": {"en": ["select", "hometown", "from", "teacher", "order", "by", "age", "asc", "limit", "1", ";"], "ru": ["select", "hometown", "from", "teacher", "order", "by", "age", "asc", "limit", "1", ";"]}, "query_toks_no_values": {"en": ["select", "hometown", "from", "teacher", "order", "by", "age", "asc", "limit", "1", ";"], "ru": ["select", "hometown", "from", "teacher", "order", "by", "age", "asc", "limit", "1", ";"]}, "masked_query": "SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1;", "question_pauq": {"ru": "\u041e\u0442\u043a\u0443\u0434\u0430 \u0441\u0430\u043c\u044b\u0439 \u043c\u043e\u043b\u043e\u0434\u043e\u0439 \u0443\u0447\u0438\u0442\u0435\u043b\u044c?"}, "question": "Where is the youngest teacher from?", "kb_id": "course_teach"}, {"id": "D_0394", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 7, false], null]], [3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [[0, 7, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 7, false], null]], [3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [[0, 7, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Show", "different", "hometown", "of", "teachers", "and", "the", "number", "of", "teachers", "from", "each", "hometown", "."], "ru": ["\u041f\u043e\u043a\u0430\u0436\u0438\u0442\u0435", "\u0440\u0430\u0437\u043d\u044b\u0435", "\u0440\u043e\u0434\u043d\u044b\u0435", "\u0433\u043e\u0440\u043e\u0434\u0430", "\u0443\u0447\u0438\u0442\u0435\u043b\u0435\u0439", "\u0438", "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e", "\u0443\u0447\u0438\u0442\u0435\u043b\u0435\u0439", "\u0438\u0437", "\u043a\u0430\u0436\u0434\u043e\u0433\u043e", "\u0433\u043e\u0440\u043e\u0434\u0430", "."]}, "query_toks": {"en": ["select", "hometown", ",", "count", "(", "*", ")", "from", "teacher", "group", "by", "hometown", ";"], "ru": ["select", "hometown", ",", "count", "(", "*", ")", "from", "teacher", "group", "by", "hometown", ";"]}, "query_toks_no_values": {"en": ["select", "hometown", ",", "count", "(", "*", ")", "from", "teacher", "group", "by", "hometown", ";"], "ru": ["select", "hometown", ",", "count", "(", "*", ")", "from", "teacher", "group", "by", "hometown", ";"]}, "masked_query": "SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown;", "question_pauq": {"ru": "\u041f\u043e\u043a\u0430\u0436\u0438\u0442\u0435 \u0440\u0430\u0437\u043d\u044b\u0435 \u0440\u043e\u0434\u043d\u044b\u0435 \u0433\u043e\u0440\u043e\u0434\u0430 \u0443\u0447\u0438\u0442\u0435\u043b\u0435\u0439 \u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0443\u0447\u0438\u0442\u0435\u043b\u0435\u0439 \u0438\u0437 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0433\u043e\u0440\u043e\u0434\u0430."}, "question": "Show different hometown of teachers and the number of teachers from each hometown.", "kb_id": "course_teach"}, {"id": "D_0395", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 7, false], null]], [3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [[0, 7, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 7, false], null]], [3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [[0, 7, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["For", "each", "hometown", ",", "how", "many", "teachers", "are", "there", "?"], "ru": ["\u0421\u043a\u043e\u043b\u044c\u043a\u043e", "\u0443\u0447\u0438\u0442\u0435\u043b\u0435\u0439", "\u0438\u0437", "\u043a\u0430\u0436\u0434\u043e\u0433\u043e", "\u0433\u043e\u0440\u043e\u0434\u0430", "?"]}, "query_toks": {"en": ["select", "hometown", ",", "count", "(", "*", ")", "from", "teacher", "group", "by", "hometown", ";"], "ru": ["select", "hometown", ",", "count", "(", "*", ")", "from", "teacher", "group", "by", "hometown", ";"]}, "query_toks_no_values": {"en": ["select", "hometown", ",", "count", "(", "*", ")", "from", "teacher", "group", "by", "hometown", ";"], "ru": ["select", "hometown", ",", "count", "(", "*", ")", "from", "teacher", "group", "by", "hometown", ";"]}, "masked_query": "SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown;", "question_pauq": {"ru": "\u0421\u043a\u043e\u043b\u044c\u043a\u043e \u0443\u0447\u0438\u0442\u0435\u043b\u0435\u0439 \u0438\u0437 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0433\u043e\u0440\u043e\u0434\u0430?"}, "question": "For each hometown, how many teachers are there?", "kb_id": "course_teach"}, {"id": "D_0396", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 7, false], null]]]], "where": [], "groupBy": [[0, 7, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 7, false], null]]]], "where": [], "groupBy": [[0, 7, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["List", "the", "most", "common", "hometown", "of", "teachers", "."], "ru": ["\u041f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0438\u0442\u0435", "\u043d\u0430\u0438\u0431\u043e\u043b\u0435\u0435", "\u0447\u0430\u0441\u0442\u043e", "\u0432\u0441\u0442\u0440\u0435\u0447\u0430\u044e\u0449\u0438\u0439\u0441\u044f", "\u0440\u043e\u0434\u043d\u043e\u0439", "\u0433\u043e\u0440\u043e\u0434", "\u0443\u0447\u0438\u0442\u0435\u043b\u0435\u0439", "."]}, "query_toks": {"en": ["select", "hometown", "from", "teacher", "group", "by", "hometown", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"], "ru": ["select", "hometown", "from", "teacher", "group", "by", "hometown", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"]}, "query_toks_no_values": {"en": ["select", "hometown", "from", "teacher", "group", "by", "hometown", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"], "ru": ["select", "hometown", "from", "teacher", "group", "by", "hometown", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"]}, "masked_query": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1;", "question_pauq": {"ru": "\u041f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0438\u0442\u0435 \u043d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u0447\u0430\u0441\u0442\u043e \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u044e\u0449\u0438\u0439\u0441\u044f \u0440\u043e\u0434\u043d\u043e\u0439 \u0433\u043e\u0440\u043e\u0434 \u0443\u0447\u0438\u0442\u0435\u043b\u0435\u0439."}, "question": "List the most common hometown of teachers.", "kb_id": "course_teach"}, {"id": "D_0397", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 7, false], null]]]], "where": [], "groupBy": [[0, 7, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 7, false], null]]]], "where": [], "groupBy": [[0, 7, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "most", "commmon", "hometowns", "for", "teachers", "?"], "ru": ["\u041a\u0430\u043a\u0438\u0435", "\u0433\u043e\u0440\u043e\u0434\u0430", "\u043d\u0430\u0438\u0431\u043e\u043b\u0435\u0435", "\u0440\u0430\u0441\u043f\u0440\u043e\u0441\u0442\u0440\u0430\u043d\u0435\u043d\u044b", "\u0441\u0440\u0435\u0434\u0438", "\u0443\u0447\u0438\u0442\u0435\u043b\u0435\u0439", "?"]}, "query_toks": {"en": ["select", "hometown", "from", "teacher", "group", "by", "hometown", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"], "ru": ["select", "hometown", "from", "teacher", "group", "by", "hometown", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"]}, "query_toks_no_values": {"en": ["select", "hometown", "from", "teacher", "group", "by", "hometown", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"], "ru": ["select", "hometown", "from", "teacher", "group", "by", "hometown", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"]}, "masked_query": "SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1;", "question_pauq": {"ru": "\u041a\u0430\u043a\u0438\u0435 \u0433\u043e\u0440\u043e\u0434\u0430 \u043d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u0440\u0430\u0441\u043f\u0440\u043e\u0441\u0442\u0440\u0430\u043d\u0435\u043d\u044b \u0441\u0440\u0435\u0434\u0438 \u0443\u0447\u0438\u0442\u0435\u043b\u0435\u0439?"}, "question": "What is the most commmon hometowns for teachers?", "kb_id": "course_teach"}, {"id": "D_0398", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 7, false], null]]]], "where": [], "groupBy": [[0, 7, false]], "having": [[false, 5, [0, [3, 0, false], null], 2.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 7, false], null]]]], "where": [], "groupBy": [[0, 7, false]], "having": [[false, 5, [0, [3, 0, false], null], 2.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Show", "the", "hometowns", "shared", "by", "at", "least", "two", "teachers", "."], "ru": ["\u0413\u043e\u0440\u043e\u0434\u0430", ",", "\u043e\u0442\u043a\u0443\u0434\u0430", "\u0440\u043e\u0434\u043e\u043c", "\u043a\u0430\u043a", "\u043c\u0438\u043d\u0438\u043c\u0443\u043c", "\u0434\u0432\u0430", "\u0443\u0447\u0438\u0442\u0435\u043b\u044f", "."]}, "query_toks": {"en": ["select", "hometown", "from", "teacher", "group", "by", "hometown", "having", "count", "(", "*", ")", ">=", "2", ";"], "ru": ["select", "hometown", "from", "teacher", "group", "by", "hometown", "having", "count", "(", "*", ")", ">=", "2", ";"]}, "query_toks_no_values": {"en": ["select", "hometown", "from", "teacher", "group", "by", "hometown", "having", "count", "(", "*", ")", ">=", "2", ";"], "ru": ["select", "hometown", "from", "teacher", "group", "by", "hometown", "having", "count", "(", "*", ")", ">=", "2", ";"]}, "masked_query": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2;", "question_pauq": {"ru": "\u0413\u043e\u0440\u043e\u0434\u0430, \u043e\u0442\u043a\u0443\u0434\u0430 \u0440\u043e\u0434\u043e\u043c \u043a\u0430\u043a \u043c\u0438\u043d\u0438\u043c\u0443\u043c \u0434\u0432\u0430 \u0443\u0447\u0438\u0442\u0435\u043b\u044f."}, "question": "Show the hometowns shared by at least two teachers.", "kb_id": "course_teach"}, {"id": "D_0399", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 7, false], null]]]], "where": [], "groupBy": [[0, 7, false]], "having": [[false, 5, [0, [3, 0, false], null], 2.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 7, false], null]]]], "where": [], "groupBy": [[0, 7, false]], "having": [[false, 5, [0, [3, 0, false], null], 2.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "the", "towns", "from", "which", "at", "least", "two", "teachers", "come", "from", "?"], "ru": ["\u0418\u0437", "\u043a\u0430\u043a\u0438\u0445", "\u0433\u043e\u0440\u043e\u0434\u043e\u0432", "\u043f\u0440\u0438\u0435\u0445\u0430\u043b\u0438", "\u043a\u0430\u043a", "\u043c\u0438\u043d\u0438\u043c\u0443\u043c", "\u0434\u0432\u0430", "\u0443\u0447\u0438\u0442\u0435\u043b\u044f", "?"]}, "query_toks": {"en": ["select", "hometown", "from", "teacher", "group", "by", "hometown", "having", "count", "(", "*", ")", ">=", "2", ";"], "ru": ["select", "hometown", "from", "teacher", "group", "by", "hometown", "having", "count", "(", "*", ")", ">=", "2", ";"]}, "query_toks_no_values": {"en": ["select", "hometown", "from", "teacher", "group", "by", "hometown", "having", "count", "(", "*", ")", ">=", "2", ";"], "ru": ["select", "hometown", "from", "teacher", "group", "by", "hometown", "having", "count", "(", "*", ")", ">=", "2", ";"]}, "masked_query": "SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2;", "question_pauq": {"ru": "\u0418\u0437 \u043a\u0430\u043a\u0438\u0445 \u0433\u043e\u0440\u043e\u0434\u043e\u0432 \u043f\u0440\u0438\u0435\u0445\u0430\u043b\u0438 \u043a\u0430\u043a \u043c\u0438\u043d\u0438\u043c\u0443\u043c \u0434\u0432\u0430 \u0443\u0447\u0438\u0442\u0435\u043b\u044f?"}, "question": "What are the towns from which at least two teachers come from?", "kb_id": "course_teach"}, {"id": "D_0400", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2], ["table_unit", 0], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 1, false], null], "and", [false, 2, [0, [0, 9, false], null], [0, 4, false], null]]}, "select": [false, [[0, [0, [0, 5, false], null]], [0, [0, [0, 3, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2], ["table_unit", 0], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 1, false], null], "and", [false, 2, [0, [0, 9, false], null], [0, 4, false], null]]}, "select": [false, [[0, [0, [0, 5, false], null]], [0, [0, [0, 3, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Show", "names", "of", "teachers", "and", "the", "courses", "they", "are", "arranged", "to", "teach", "."], "ru": ["\u041f\u043e\u043a\u0430\u0436\u0438\u0442\u0435", "\u0438\u043c\u0435\u043d\u0430", "\u0443\u0447\u0438\u0442\u0435\u043b\u0435\u0439", "\u0438", "\u043a\u0443\u0440\u0441\u044b", ",", "\u043a\u043e\u0442\u043e\u0440\u044b\u0435", "\u043e\u043d\u0438", "\u0434\u043e\u043b\u0436\u043d\u044b", "\u043f\u0440\u0435\u043f\u043e\u0434\u0430\u0432\u0430\u0442\u044c", "."]}, "query_toks": {"en": ["select", "t3.name", ",", "t2.course", "from", "course_arrange", "as", "t1", "join", "course", "as", "t2", "on", "t1.course_id", "=", "t2.course_id", "join", "teacher", "as", "t3", "on", "t1.teacher_id", "=", "t3.teacher_id", ";"], "ru": ["select", "t3.name", ",", "t2.course", "from", "course_arrange", "as", "t1", "join", "course", "as", "t2", "on", "t1.course_id", "=", "t2.course_id", "join", "teacher", "as", "t3", "on", "t1.teacher_id", "=", "t3.teacher_id", ";"]}, "query_toks_no_values": {"en": ["select", "t3.name", ",", "t2.course", "from", "course_arrange", "as", "t1", "join", "course", "as", "t2", "on", "t1.course_id", "=", "t2.course_id", "join", "teacher", "as", "t3", "on", "t1.teacher_id", "=", "t3.teacher_id", ";"], "ru": ["select", "t3.name", ",", "t2.course", "from", "course_arrange", "as", "t1", "join", "course", "as", "t2", "on", "t1.course_id", "=", "t2.course_id", "join", "teacher", "as", "t3", "on", "t1.teacher_id", "=", "t3.teacher_id", ";"]}, "masked_query": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID;", "question_pauq": {"ru": "\u041f\u043e\u043a\u0430\u0436\u0438\u0442\u0435 \u0438\u043c\u0435\u043d\u0430 \u0443\u0447\u0438\u0442\u0435\u043b\u0435\u0439 \u0438 \u043a\u0443\u0440\u0441\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043e\u043d\u0438 \u0434\u043e\u043b\u0436\u043d\u044b \u043f\u0440\u0435\u043f\u043e\u0434\u0430\u0432\u0430\u0442\u044c."}, "question": "Show names of teachers and the courses they are arranged to teach.", "kb_id": "course_teach"}, {"id": "D_0401", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2], ["table_unit", 0], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 1, false], null], "and", [false, 2, [0, [0, 9, false], null], [0, 4, false], null]]}, "select": [false, [[0, [0, [0, 5, false], null]], [0, [0, [0, 3, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2], ["table_unit", 0], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 1, false], null], "and", [false, 2, [0, [0, 9, false], null], [0, 4, false], null]]}, "select": [false, [[0, [0, [0, 5, false], null]], [0, [0, [0, 3, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "name", "of", "each", "teacher", "and", "what", "course", "they", "teach", "?"], "ru": ["\u041a\u0430\u043a", "\u0437\u043e\u0432\u0443\u0442", "\u043a\u0430\u0436\u0434\u043e\u0433\u043e", "\u0443\u0447\u0438\u0442\u0435\u043b\u044f", "\u0438", "\u043a\u0430\u043a\u043e\u0439", "\u043a\u0443\u0440\u0441", "\u043e\u043d\u0438", "\u043f\u0440\u0435\u043f\u043e\u0434\u0430\u044e\u0442", "?"]}, "query_toks": {"en": ["select", "t3.name", ",", "t2.course", "from", "course_arrange", "as", "t1", "join", "course", "as", "t2", "on", "t1.course_id", "=", "t2.course_id", "join", "teacher", "as", "t3", "on", "t1.teacher_id", "=", "t3.teacher_id", ";"], "ru": ["select", "t3.name", ",", "t2.course", "from", "course_arrange", "as", "t1", "join", "course", "as", "t2", "on", "t1.course_id", "=", "t2.course_id", "join", "teacher", "as", "t3", "on", "t1.teacher_id", "=", "t3.teacher_id", ";"]}, "query_toks_no_values": {"en": ["select", "t3.name", ",", "t2.course", "from", "course_arrange", "as", "t1", "join", "course", "as", "t2", "on", "t1.course_id", "=", "t2.course_id", "join", "teacher", "as", "t3", "on", "t1.teacher_id", "=", "t3.teacher_id", ";"], "ru": ["select", "t3.name", ",", "t2.course", "from", "course_arrange", "as", "t1", "join", "course", "as", "t2", "on", "t1.course_id", "=", "t2.course_id", "join", "teacher", "as", "t3", "on", "t1.teacher_id", "=", "t3.teacher_id", ";"]}, "masked_query": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID;", "question_pauq": {"ru": "\u041a\u0430\u043a \u0437\u043e\u0432\u0443\u0442 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0443\u0447\u0438\u0442\u0435\u043b\u044f \u0438 \u043a\u0430\u043a\u043e\u0439 \u043a\u0443\u0440\u0441 \u043e\u043d\u0438 \u043f\u0440\u0435\u043f\u043e\u0434\u0430\u044e\u0442?"}, "question": "What is the name of each teacher and what course they teach?", "kb_id": "course_teach"}, {"id": "D_0402", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2], ["table_unit", 0], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 1, false], null], "and", [false, 2, [0, [0, 9, false], null], [0, 4, false], null]]}, "select": [false, [[0, [0, [0, 5, false], null]], [0, [0, [0, 3, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["asc", [[0, [0, 5, false], null]]], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2], ["table_unit", 0], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 1, false], null], "and", [false, 2, [0, [0, 9, false], null], [0, 4, false], null]]}, "select": [false, [[0, [0, [0, 5, false], null]], [0, [0, [0, 3, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["asc", [[0, [0, 5, false], null]]], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Show", "names", "of", "teachers", "and", "the", "courses", "they", "are", "arranged", "to", "teach", "in", "ascending", "alphabetical", "order", "of", "the", "teacher", "'s", "name", "."], "ru": ["\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c", "\u0438\u043c\u0435\u043d\u0430", "\u0443\u0447\u0438\u0442\u0435\u043b\u0435\u0439", "\u0438", "\u043a\u0443\u0440\u0441\u044b", ",", "\u043a\u043e\u0442\u043e\u0440\u044b\u0435", "\u043e\u043d\u0438", "\u043f\u0440\u0435\u043f\u043e\u0434\u0430\u044e\u0442", ",", "\u0432", "\u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430\u044e\u0449\u0435\u043c", "\u0430\u043b\u0444\u0430\u0432\u0438\u0442\u043d\u043e\u043c", "\u043f\u043e\u0440\u044f\u0434\u043a\u0435", "\u0438\u043c\u0435\u043d\u0438", "\u0443\u0447\u0438\u0442\u0435\u043b\u044f", "."]}, "query_toks": {"en": ["select", "t3.name", ",", "t2.course", "from", "course_arrange", "as", "t1", "join", "course", "as", "t2", "on", "t1.course_id", "=", "t2.course_id", "join", "teacher", "as", "t3", "on", "t1.teacher_id", "=", "t3.teacher_id", "order", "by", "t3.name", ";"], "ru": ["select", "t3.name", ",", "t2.course", "from", "course_arrange", "as", "t1", "join", "course", "as", "t2", "on", "t1.course_id", "=", "t2.course_id", "join", "teacher", "as", "t3", "on", "t1.teacher_id", "=", "t3.teacher_id", "order", "by", "t3.name", ";"]}, "query_toks_no_values": {"en": ["select", "t3.name", ",", "t2.course", "from", "course_arrange", "as", "t1", "join", "course", "as", "t2", "on", "t1.course_id", "=", "t2.course_id", "join", "teacher", "as", "t3", "on", "t1.teacher_id", "=", "t3.teacher_id", "order", "by", "t3.name", ";"], "ru": ["select", "t3.name", ",", "t2.course", "from", "course_arrange", "as", "t1", "join", "course", "as", "t2", "on", "t1.course_id", "=", "t2.course_id", "join", "teacher", "as", "t3", "on", "t1.teacher_id", "=", "t3.teacher_id", "order", "by", "t3.name", ";"]}, "masked_query": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name;", "question_pauq": {"ru": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0438\u043c\u0435\u043d\u0430 \u0443\u0447\u0438\u0442\u0435\u043b\u0435\u0439 \u0438 \u043a\u0443\u0440\u0441\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043e\u043d\u0438 \u043f\u0440\u0435\u043f\u043e\u0434\u0430\u044e\u0442, \u0432 \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430\u044e\u0449\u0435\u043c \u0430\u043b\u0444\u0430\u0432\u0438\u0442\u043d\u043e\u043c \u043f\u043e\u0440\u044f\u0434\u043a\u0435 \u0438\u043c\u0435\u043d\u0438 \u0443\u0447\u0438\u0442\u0435\u043b\u044f."}, "question": "Show names of teachers and the courses they are arranged to teach in ascending alphabetical order of the teacher's name.", "kb_id": "course_teach"}, {"id": "D_0403", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2], ["table_unit", 0], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 1, false], null], "and", [false, 2, [0, [0, 9, false], null], [0, 4, false], null]]}, "select": [false, [[0, [0, [0, 5, false], null]], [0, [0, [0, 3, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["asc", [[0, [0, 5, false], null]]], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2], ["table_unit", 0], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 1, false], null], "and", [false, 2, [0, [0, 9, false], null], [0, 4, false], null]]}, "select": [false, [[0, [0, [0, 5, false], null]], [0, [0, [0, 3, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["asc", [[0, [0, 5, false], null]]], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "the", "names", "of", "the", "teachers", "and", "the", "courses", "they", "teach", "in", "ascending", "alphabetical", "order", "by", "the", "name", "of", "the", "teacher", "?"], "ru": ["\u041a\u0430\u043a", "\u0437\u043e\u0432\u0443\u0442", "\u0443\u0447\u0438\u0442\u0435\u043b\u0435\u0439", "\u0438", "\u043a\u0430\u043a\u0438\u0435", "\u043a\u0443\u0440\u0441\u044b", "\u043e\u043d\u0438", "\u043f\u0440\u0435\u043f\u043e\u0434\u0430\u044e\u0442", "\u0432", "\u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430\u044e\u0449\u0435\u043c", "\u0430\u043b\u0444\u0430\u0432\u0438\u0442\u043d\u043e\u043c", "\u043f\u043e\u0440\u044f\u0434\u043a\u0435", "\u043f\u043e", "\u0438\u043c\u0435\u043d\u0438", "\u0443\u0447\u0438\u0442\u0435\u043b\u044f", "?"]}, "query_toks": {"en": ["select", "t3.name", ",", "t2.course", "from", "course_arrange", "as", "t1", "join", "course", "as", "t2", "on", "t1.course_id", "=", "t2.course_id", "join", "teacher", "as", "t3", "on", "t1.teacher_id", "=", "t3.teacher_id", "order", "by", "t3.name", ";"], "ru": ["select", "t3.name", ",", "t2.course", "from", "course_arrange", "as", "t1", "join", "course", "as", "t2", "on", "t1.course_id", "=", "t2.course_id", "join", "teacher", "as", "t3", "on", "t1.teacher_id", "=", "t3.teacher_id", "order", "by", "t3.name", ";"]}, "query_toks_no_values": {"en": ["select", "t3.name", ",", "t2.course", "from", "course_arrange", "as", "t1", "join", "course", "as", "t2", "on", "t1.course_id", "=", "t2.course_id", "join", "teacher", "as", "t3", "on", "t1.teacher_id", "=", "t3.teacher_id", "order", "by", "t3.name", ";"], "ru": ["select", "t3.name", ",", "t2.course", "from", "course_arrange", "as", "t1", "join", "course", "as", "t2", "on", "t1.course_id", "=", "t2.course_id", "join", "teacher", "as", "t3", "on", "t1.teacher_id", "=", "t3.teacher_id", "order", "by", "t3.name", ";"]}, "masked_query": "SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name;", "question_pauq": {"ru": "\u041a\u0430\u043a \u0437\u043e\u0432\u0443\u0442 \u0443\u0447\u0438\u0442\u0435\u043b\u0435\u0439 \u0438 \u043a\u0430\u043a\u0438\u0435 \u043a\u0443\u0440\u0441\u044b \u043e\u043d\u0438 \u043f\u0440\u0435\u043f\u043e\u0434\u0430\u044e\u0442 \u0432 \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430\u044e\u0449\u0435\u043c \u0430\u043b\u0444\u0430\u0432\u0438\u0442\u043d\u043e\u043c \u043f\u043e\u0440\u044f\u0434\u043a\u0435 \u043f\u043e \u0438\u043c\u0435\u043d\u0438 \u0443\u0447\u0438\u0442\u0435\u043b\u044f?"}, "question": "What are the names of the teachers and the courses they teach in ascending alphabetical order by the name of the teacher?", "kb_id": "course_teach"}, {"id": "D_0404", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"\u042d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0430\";"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2], ["table_unit", 0], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 1, false], null], "and", [false, 2, [0, [0, 9, false], null], [0, 4, false], null]]}, "select": [false, [[0, [0, [0, 5, false], null]]]], "where": [[false, 2, [0, [0, 3, false], null], "\"Math\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2], ["table_unit", 0], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 1, false], null], "and", [false, 2, [0, [0, 9, false], null], [0, 4, false], null]]}, "select": [false, [[0, [0, [0, 5, false], null]]]], "where": [[false, 2, [0, [0, 3, false], null], "\"\u042d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0430\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Show", "the", "name", "of", "the", "teacher", "for", "the", "math", "course", "."], "ru": ["\u0418\u043c\u044f", "\u0443\u0447\u0438\u0442\u0435\u043b\u044f", "\u043a\u0443\u0440\u0441\u0430", "\u044d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0438", "."]}, "query_toks": {"en": ["select", "t3.name", "from", "course_arrange", "as", "t1", "join", "course", "as", "t2", "on", "t1.course_id", "=", "t2.course_id", "join", "teacher", "as", "t3", "on", "t1.teacher_id", "=", "t3.teacher_id", "where", "t2.course", "=", "\"Math\"", ";"], "ru": ["select", "t3.name", "from", "course_arrange", "as", "t1", "join", "course", "as", "t2", "on", "t1.course_id", "=", "t2.course_id", "join", "teacher", "as", "t3", "on", "t1.teacher_id", "=", "t3.teacher_id", "where", "t2.course", "=", "\"\u042d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0430\"", ";"]}, "query_toks_no_values": {"en": ["select", "t3.name", "from", "course_arrange", "as", "t1", "join", "course", "as", "t2", "on", "t1.course_id", "=", "t2.course_id", "join", "teacher", "as", "t3", "on", "t1.teacher_id", "=", "t3.teacher_id", "where", "t2.course", "=", "value", ";"], "ru": ["select", "t3.name", "from", "course_arrange", "as", "t1", "join", "course", "as", "t2", "on", "t1.course_id", "=", "t2.course_id", "join", "teacher", "as", "t3", "on", "t1.teacher_id", "=", "t3.teacher_id", "where", "t2.course", "=", "value", ";"]}, "masked_query": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\";", "question_pauq": {"ru": "\u0418\u043c\u044f \u0443\u0447\u0438\u0442\u0435\u043b\u044f \u043a\u0443\u0440\u0441\u0430 \u044d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0438."}, "question": "Show the name of the teacher for the math course.", "kb_id": "course_teach"}, {"id": "D_0405", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"\u042d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0430\";"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2], ["table_unit", 0], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 1, false], null], "and", [false, 2, [0, [0, 9, false], null], [0, 4, false], null]]}, "select": [false, [[0, [0, [0, 5, false], null]]]], "where": [[false, 2, [0, [0, 3, false], null], "\"Math\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2], ["table_unit", 0], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 1, false], null], "and", [false, 2, [0, [0, 9, false], null], [0, 4, false], null]]}, "select": [false, [[0, [0, [0, 5, false], null]]]], "where": [[false, 2, [0, [0, 3, false], null], "\"\u042d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0430\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "the", "names", "of", "the", "people", "who", "teach", "math", "courses", "?"], "ru": ["\u041a\u0430\u043a", "\u0437\u043e\u0432\u0443\u0442", "\u043b\u044e\u0434\u0435\u0439", ",", "\u043a\u043e\u0442\u043e\u0440\u044b\u0435", "\u043f\u0440\u0435\u043f\u043e\u0434\u0430\u044e\u0442", "\u044d\u043a\u043e\u043d\u043e\u043c\u0438\u0447\u0435\u0441\u043a\u0438\u0435", "\u043a\u0443\u0440\u0441\u044b", "?"]}, "query_toks": {"en": ["select", "t3.name", "from", "course_arrange", "as", "t1", "join", "course", "as", "t2", "on", "t1.course_id", "=", "t2.course_id", "join", "teacher", "as", "t3", "on", "t1.teacher_id", "=", "t3.teacher_id", "where", "t2.course", "=", "\"Math\"", ";"], "ru": ["select", "t3.name", "from", "course_arrange", "as", "t1", "join", "course", "as", "t2", "on", "t1.course_id", "=", "t2.course_id", "join", "teacher", "as", "t3", "on", "t1.teacher_id", "=", "t3.teacher_id", "where", "t2.course", "=", "\"\u042d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0430\"", ";"]}, "query_toks_no_values": {"en": ["select", "t3.name", "from", "course_arrange", "as", "t1", "join", "course", "as", "t2", "on", "t1.course_id", "=", "t2.course_id", "join", "teacher", "as", "t3", "on", "t1.teacher_id", "=", "t3.teacher_id", "where", "t2.course", "=", "value", ";"], "ru": ["select", "t3.name", "from", "course_arrange", "as", "t1", "join", "course", "as", "t2", "on", "t1.course_id", "=", "t2.course_id", "join", "teacher", "as", "t3", "on", "t1.teacher_id", "=", "t3.teacher_id", "where", "t2.course", "=", "value", ";"]}, "masked_query": "SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\";", "question_pauq": {"ru": "\u041a\u0430\u043a \u0437\u043e\u0432\u0443\u0442 \u043b\u044e\u0434\u0435\u0439, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u0440\u0435\u043f\u043e\u0434\u0430\u044e\u0442 \u044d\u043a\u043e\u043d\u043e\u043c\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043a\u0443\u0440\u0441\u044b?"}, "question": "What are the names of the people who teach math courses?", "kb_id": "course_teach"}, {"id": "D_0406", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 9, false], null], [0, 4, false], null]]}, "select": [false, [[0, [0, [0, 5, false], null]], [3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [[0, 5, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 9, false], null], [0, 4, false], null]]}, "select": [false, [[0, [0, [0, 5, false], null]], [3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [[0, 5, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Show", "names", "of", "teachers", "and", "the", "number", "of", "courses", "they", "teach", "."], "ru": ["\u041f\u043e\u043a\u0430\u0436\u0438\u0442\u0435", "\u0438\u043c\u0435\u043d\u0430", "\u0443\u0447\u0438\u0442\u0435\u043b\u0435\u0439", "\u0438", "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e", "\u043a\u0443\u0440\u0441\u043e\u0432", ",", "\u043a\u043e\u0442\u043e\u0440\u044b\u0435", "\u043e\u043d\u0438", "\u043f\u0440\u0435\u043f\u043e\u0434\u0430\u044e\u0442", "."]}, "query_toks": {"en": ["select", "t2.name", ",", "count", "(", "*", ")", "from", "course_arrange", "as", "t1", "join", "teacher", "as", "t2", "on", "t1.teacher_id", "=", "t2.teacher_id", "group", "by", "t2.name", ";"], "ru": ["select", "t2.name", ",", "count", "(", "*", ")", "from", "course_arrange", "as", "t1", "join", "teacher", "as", "t2", "on", "t1.teacher_id", "=", "t2.teacher_id", "group", "by", "t2.name", ";"]}, "query_toks_no_values": {"en": ["select", "t2.name", ",", "count", "(", "*", ")", "from", "course_arrange", "as", "t1", "join", "teacher", "as", "t2", "on", "t1.teacher_id", "=", "t2.teacher_id", "group", "by", "t2.name", ";"], "ru": ["select", "t2.name", ",", "count", "(", "*", ")", "from", "course_arrange", "as", "t1", "join", "teacher", "as", "t2", "on", "t1.teacher_id", "=", "t2.teacher_id", "group", "by", "t2.name", ";"]}, "masked_query": "SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name;", "question_pauq": {"ru": "\u041f\u043e\u043a\u0430\u0436\u0438\u0442\u0435 \u0438\u043c\u0435\u043d\u0430 \u0443\u0447\u0438\u0442\u0435\u043b\u0435\u0439 \u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u0443\u0440\u0441\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043e\u043d\u0438 \u043f\u0440\u0435\u043f\u043e\u0434\u0430\u044e\u0442."}, "question": "Show names of teachers and the number of courses they teach.", "kb_id": "course_teach"}, {"id": "D_0407", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 9, false], null], [0, 4, false], null]]}, "select": [false, [[0, [0, [0, 5, false], null]], [3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [[0, 5, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 9, false], null], [0, 4, false], null]]}, "select": [false, [[0, [0, [0, 5, false], null]], [3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [[0, 5, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "the", "names", "of", "the", "teachers", "and", "how", "many", "courses", "do", "they", "teach", "?"], "ru": ["\u041a\u0430\u043a", "\u0437\u043e\u0432\u0443\u0442", "\u0443\u0447\u0438\u0442\u0435\u043b\u0435\u0439", "\u0438", "\u0441\u043a\u043e\u043b\u044c\u043a\u043e", "\u043a\u0443\u0440\u0441\u043e\u0432", "\u043e\u043d\u0438", "\u043f\u0440\u0435\u043f\u043e\u0434\u0430\u044e\u0442", "?"]}, "query_toks": {"en": ["select", "t2.name", ",", "count", "(", "*", ")", "from", "course_arrange", "as", "t1", "join", "teacher", "as", "t2", "on", "t1.teacher_id", "=", "t2.teacher_id", "group", "by", "t2.name", ";"], "ru": ["select", "t2.name", ",", "count", "(", "*", ")", "from", "course_arrange", "as", "t1", "join", "teacher", "as", "t2", "on", "t1.teacher_id", "=", "t2.teacher_id", "group", "by", "t2.name", ";"]}, "query_toks_no_values": {"en": ["select", "t2.name", ",", "count", "(", "*", ")", "from", "course_arrange", "as", "t1", "join", "teacher", "as", "t2", "on", "t1.teacher_id", "=", "t2.teacher_id", "group", "by", "t2.name", ";"], "ru": ["select", "t2.name", ",", "count", "(", "*", ")", "from", "course_arrange", "as", "t1", "join", "teacher", "as", "t2", "on", "t1.teacher_id", "=", "t2.teacher_id", "group", "by", "t2.name", ";"]}, "masked_query": "SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name;", "question_pauq": {"ru": "\u041a\u0430\u043a \u0437\u043e\u0432\u0443\u0442 \u0443\u0447\u0438\u0442\u0435\u043b\u0435\u0439 \u0438 \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043a\u0443\u0440\u0441\u043e\u0432 \u043e\u043d\u0438 \u043f\u0440\u0435\u043f\u043e\u0434\u0430\u044e\u0442?"}, "question": "What are the names of the teachers and how many courses do they teach?", "kb_id": "course_teach"}, {"id": "D_0408", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 9, false], null], [0, 4, false], null]]}, "select": [false, [[0, [0, [0, 5, false], null]]]], "where": [], "groupBy": [[0, 5, false]], "having": [[false, 5, [0, [3, 0, false], null], 2.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 9, false], null], [0, 4, false], null]]}, "select": [false, [[0, [0, [0, 5, false], null]]]], "where": [], "groupBy": [[0, 5, false]], "having": [[false, 5, [0, [3, 0, false], null], 2.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Show", "names", "of", "teachers", "that", "teach", "at", "least", "two", "courses", "."], "ru": ["\u041f\u043e\u043a\u0430\u0436\u0438\u0442\u0435", "\u0438\u043c\u0435\u043d\u0430", "\u0443\u0447\u0438\u0442\u0435\u043b\u0435\u0439", ",", "\u043a\u043e\u0442\u043e\u0440\u044b\u0435", "\u043f\u0440\u0435\u043f\u043e\u0434\u0430\u044e\u0442", "\u043a\u0430\u043a", "\u043c\u0438\u043d\u0438\u043c\u0443\u043c", "\u0434\u0432\u0430", "\u043a\u0443\u0440\u0441\u0430", "."]}, "query_toks": {"en": ["select", "t2.name", "from", "course_arrange", "as", "t1", "join", "teacher", "as", "t2", "on", "t1.teacher_id", "=", "t2.teacher_id", "group", "by", "t2.name", "having", "count", "(", "*", ")", ">=", "2", ";"], "ru": ["select", "t2.name", "from", "course_arrange", "as", "t1", "join", "teacher", "as", "t2", "on", "t1.teacher_id", "=", "t2.teacher_id", "group", "by", "t2.name", "having", "count", "(", "*", ")", ">=", "2", ";"]}, "query_toks_no_values": {"en": ["select", "t2.name", "from", "course_arrange", "as", "t1", "join", "teacher", "as", "t2", "on", "t1.teacher_id", "=", "t2.teacher_id", "group", "by", "t2.name", "having", "count", "(", "*", ")", ">=", "2", ";"], "ru": ["select", "t2.name", "from", "course_arrange", "as", "t1", "join", "teacher", "as", "t2", "on", "t1.teacher_id", "=", "t2.teacher_id", "group", "by", "t2.name", "having", "count", "(", "*", ")", ">=", "2", ";"]}, "masked_query": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2;", "question_pauq": {"ru": "\u041f\u043e\u043a\u0430\u0436\u0438\u0442\u0435 \u0438\u043c\u0435\u043d\u0430 \u0443\u0447\u0438\u0442\u0435\u043b\u0435\u0439, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u0440\u0435\u043f\u043e\u0434\u0430\u044e\u0442 \u043a\u0430\u043a \u043c\u0438\u043d\u0438\u043c\u0443\u043c \u0434\u0432\u0430 \u043a\u0443\u0440\u0441\u0430."}, "question": "Show names of teachers that teach at least two courses.", "kb_id": "course_teach"}, {"id": "D_0409", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 9, false], null], [0, 4, false], null]]}, "select": [false, [[0, [0, [0, 5, false], null]]]], "where": [], "groupBy": [[0, 5, false]], "having": [[false, 5, [0, [3, 0, false], null], 2.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 9, false], null], [0, 4, false], null]]}, "select": [false, [[0, [0, [0, 5, false], null]]]], "where": [], "groupBy": [[0, 5, false]], "having": [[false, 5, [0, [3, 0, false], null], 2.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "the", "names", "of", "the", "teachers", "who", "teach", "at", "least", "two", "courses", "?"], "ru": ["\u041a\u0430\u043a", "\u0437\u043e\u0432\u0443\u0442", "\u0443\u0447\u0438\u0442\u0435\u043b\u0435\u0439", ",", "\u043a\u043e\u0442\u043e\u0440\u044b\u0435", "\u0432\u0435\u0434\u0443\u0442", "\u043a\u0430\u043a", "\u043c\u0438\u043d\u0438\u043c\u0443\u043c", "\u0434\u0432\u0430", "\u043a\u0443\u0440\u0441\u0430", "?"]}, "query_toks": {"en": ["select", "t2.name", "from", "course_arrange", "as", "t1", "join", "teacher", "as", "t2", "on", "t1.teacher_id", "=", "t2.teacher_id", "group", "by", "t2.name", "having", "count", "(", "*", ")", ">=", "2", ";"], "ru": ["select", "t2.name", "from", "course_arrange", "as", "t1", "join", "teacher", "as", "t2", "on", "t1.teacher_id", "=", "t2.teacher_id", "group", "by", "t2.name", "having", "count", "(", "*", ")", ">=", "2", ";"]}, "query_toks_no_values": {"en": ["select", "t2.name", "from", "course_arrange", "as", "t1", "join", "teacher", "as", "t2", "on", "t1.teacher_id", "=", "t2.teacher_id", "group", "by", "t2.name", "having", "count", "(", "*", ")", ">=", "2", ";"], "ru": ["select", "t2.name", "from", "course_arrange", "as", "t1", "join", "teacher", "as", "t2", "on", "t1.teacher_id", "=", "t2.teacher_id", "group", "by", "t2.name", "having", "count", "(", "*", ")", ">=", "2", ";"]}, "masked_query": "SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2;", "question_pauq": {"ru": "\u041a\u0430\u043a \u0437\u043e\u0432\u0443\u0442 \u0443\u0447\u0438\u0442\u0435\u043b\u0435\u0439, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0432\u0435\u0434\u0443\u0442 \u043a\u0430\u043a \u043c\u0438\u043d\u0438\u043c\u0443\u043c \u0434\u0432\u0430 \u043a\u0443\u0440\u0441\u0430?"}, "question": "What are the names of the teachers who teach at least two courses?", "kb_id": "course_teach"}, {"id": "D_0410", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange);"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 5, false], null]]]], "where": [[true, 8, [0, [0, 4, false], null], {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 5, false], null]]]], "where": [[true, 8, [0, [0, 4, false], null], {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["List", "the", "names", "of", "teachers", "who", "have", "not", "been", "arranged", "to", "teach", "courses", "."], "ru": ["\u041f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0438", "\u0438\u043c\u0435\u043d\u0430", "\u0443\u0447\u0438\u0442\u0435\u043b\u0435\u0439", ",", "\u043d\u0435", "\u043d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044b\u0445", "\u0434\u043b\u044f", "\u043f\u0440\u0435\u043f\u043e\u0434\u0430\u0432\u0430\u043d\u0438\u044f", "\u043a\u0443\u0440\u0441\u043e\u0432", "."]}, "query_toks": {"en": ["select", "name", "from", "teacher", "where", "teacher_id", "not", "in", "(", "select", "teacher_id", "from", "course_arrange", ")", ";"], "ru": ["select", "name", "from", "teacher", "where", "teacher_id", "not", "in", "(", "select", "teacher_id", "from", "course_arrange", ")", ";"]}, "query_toks_no_values": {"en": ["select", "name", "from", "teacher", "where", "teacher_id", "not", "in", "(", "select", "teacher_id", "from", "course_arrange", ")", ";"], "ru": ["select", "name", "from", "teacher", "where", "teacher_id", "not", "in", "(", "select", "teacher_id", "from", "course_arrange", ")", ";"]}, "masked_query": "SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange);", "question_pauq": {"ru": "\u041f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0438 \u0438\u043c\u0435\u043d\u0430 \u0443\u0447\u0438\u0442\u0435\u043b\u0435\u0439, \u043d\u0435 \u043d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u043d\u044b\u0445 \u0434\u043b\u044f \u043f\u0440\u0435\u043f\u043e\u0434\u0430\u0432\u0430\u043d\u0438\u044f \u043a\u0443\u0440\u0441\u043e\u0432."}, "question": "List the names of teachers who have not been arranged to teach courses.", "kb_id": "course_teach"}, {"id": "D_0411", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange);"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 5, false], null]]]], "where": [[true, 8, [0, [0, 4, false], null], {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 5, false], null]]]], "where": [[true, 8, [0, [0, 4, false], null], {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "the", "names", "of", "the", "teachers", "whose", "courses", "have", "not", "been", "arranged", "?"], "ru": ["\u041a\u0430\u043a", "\u0437\u043e\u0432\u0443\u0442", "\u0443\u0447\u0438\u0442\u0435\u043b\u0435\u0439", ",", "\u043a\u043e\u0442\u043e\u0440\u044b\u0435", "\u043d\u0435", "\u0432\u0435\u0434\u0443\u0442", "\u043a\u0443\u0440\u0441\u044b", "?"]}, "query_toks": {"en": ["select", "name", "from", "teacher", "where", "teacher_id", "not", "in", "(", "select", "teacher_id", "from", "course_arrange", ")", ";"], "ru": ["select", "name", "from", "teacher", "where", "teacher_id", "not", "in", "(", "select", "teacher_id", "from", "course_arrange", ")", ";"]}, "query_toks_no_values": {"en": ["select", "name", "from", "teacher", "where", "teacher_id", "not", "in", "(", "select", "teacher_id", "from", "course_arrange", ")", ";"], "ru": ["select", "name", "from", "teacher", "where", "teacher_id", "not", "in", "(", "select", "teacher_id", "from", "course_arrange", ")", ";"]}, "masked_query": "SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange);", "question_pauq": {"ru": "\u041a\u0430\u043a \u0437\u043e\u0432\u0443\u0442 \u0443\u0447\u0438\u0442\u0435\u043b\u0435\u0439, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0435 \u0432\u0435\u0434\u0443\u0442 \u043a\u0443\u0440\u0441\u044b?"}, "question": "What are the names of the teachers whose courses have not been arranged?", "kb_id": "course_teach"}, {"id": "D_0412", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT count(*) FROM visitor WHERE age  <  30;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 4, [0, [0, 8, false], null], 30.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 4, [0, [0, 8, false], null], 30.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["How", "many", "visitors", "below", "age", "30", "are", "there", "?"], "ru": ["\u0421\u043a\u043e\u043b\u044c\u043a\u043e", "\u0437\u0434\u0435\u0441\u044c", "\u043f\u043e\u0441\u0435\u0442\u0438\u0442\u0435\u043b\u0435\u0439", "\u043c\u043b\u0430\u0434\u0448\u0435", "30", "\u043b\u0435\u0442", "?"]}, "query_toks": {"en": ["select", "count", "(", "*", ")", "from", "visitor", "where", "age", "<", "30", ";"], "ru": ["select", "count", "(", "*", ")", "from", "visitor", "where", "age", "<", "30", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "*", ")", "from", "visitor", "where", "age", "<", "30", ";"], "ru": ["select", "count", "(", "*", ")", "from", "visitor", "where", "age", "<", "30", ";"]}, "masked_query": "SELECT count(*) FROM visitor WHERE age  <  30;", "question_pauq": {"ru": "\u0421\u043a\u043e\u043b\u044c\u043a\u043e \u0437\u0434\u0435\u0441\u044c \u043f\u043e\u0441\u0435\u0442\u0438\u0442\u0435\u043b\u0435\u0439 \u043c\u043b\u0430\u0434\u0448\u0435 30 \u043b\u0435\u0442?"}, "question": "How many visitors below age 30 are there?", "kb_id": "museum_visit"}, {"id": "D_0413", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT name FROM visitor WHERE Level_of_membership  >  4 ORDER BY Level_of_membership DESC;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 6, false], null]]]], "where": [[false, 3, [0, [0, 7, false], null], 4.0, null]], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 7, false], null]]], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 6, false], null]]]], "where": [[false, 3, [0, [0, 7, false], null], 4.0, null]], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 7, false], null]]], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Find", "the", "names", "of", "the", "visitors", "whose", "membership", "level", "is", "higher", "than", "4", ",", "and", "order", "the", "results", "by", "the", "level", "from", "high", "to", "low", "."], "ru": ["\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c", "\u0438\u043c\u0435\u043d\u0430", "\u043f\u043e\u0441\u0435\u0442\u0438\u0442\u0435\u043b\u0435\u0439", ",", "\u0447\u0435\u0439", "\u0443\u0440\u043e\u0432\u0435\u043d\u044c", "\u0447\u043b\u0435\u043d\u0441\u0442\u0432\u0430", "\u0432\u044b\u0448\u0435", "4", ",", "\u0438", "\u043e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c", "\u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b", "\u043f\u043e", "\u0443\u0440\u043e\u0432\u043d\u044e", "\u043e\u0442", "\u0432\u044b\u0441\u043e\u043a\u043e\u0433\u043e", "\u043a", "\u043d\u0438\u0437\u043a\u043e\u043c\u0443", "."]}, "query_toks": {"en": ["select", "name", "from", "visitor", "where", "level_of_membership", ">", "4", "order", "by", "level_of_membership", "desc", ";"], "ru": ["select", "name", "from", "visitor", "where", "level_of_membership", ">", "4", "order", "by", "level_of_membership", "desc", ";"]}, "query_toks_no_values": {"en": ["select", "name", "from", "visitor", "where", "level_of_membership", ">", "4", "order", "by", "level_of_membership", "desc", ";"], "ru": ["select", "name", "from", "visitor", "where", "level_of_membership", ">", "4", "order", "by", "level_of_membership", "desc", ";"]}, "masked_query": "SELECT name FROM visitor WHERE Level_of_membership  >  4 ORDER BY Level_of_membership DESC;", "question_pauq": {"ru": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0438\u043c\u0435\u043d\u0430 \u043f\u043e\u0441\u0435\u0442\u0438\u0442\u0435\u043b\u0435\u0439, \u0447\u0435\u0439 \u0443\u0440\u043e\u0432\u0435\u043d\u044c \u0447\u043b\u0435\u043d\u0441\u0442\u0432\u0430 \u0432\u044b\u0448\u0435 4, \u0438 \u043e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u043f\u043e \u0443\u0440\u043e\u0432\u043d\u044e \u043e\u0442 \u0432\u044b\u0441\u043e\u043a\u043e\u0433\u043e \u043a \u043d\u0438\u0437\u043a\u043e\u043c\u0443."}, "question": "Find the names of the visitors whose membership level is higher than 4, and order the results by the level from high to low.", "kb_id": "museum_visit"}, {"id": "D_0414", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT avg(age) FROM visitor WHERE Level_of_membership  <=  4;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[5, [0, [0, 8, false], null]]]], "where": [[false, 6, [0, [0, 7, false], null], 4.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[5, [0, [0, 8, false], null]]]], "where": [[false, 6, [0, [0, 7, false], null], 4.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "average", "age", "of", "the", "visitors", "whose", "membership", "level", "is", "not", "higher", "than", "4", "?"], "ru": ["\u041a\u0430\u043a\u043e\u0432", "\u0441\u0440\u0435\u0434\u043d\u0438\u0439", "\u0432\u043e\u0437\u0440\u0430\u0441\u0442", "\u043f\u043e\u0441\u0435\u0442\u0438\u0442\u0435\u043b\u0435\u0439", ",", "\u0443\u0440\u043e\u0432\u0435\u043d\u044c", "\u0447\u043b\u0435\u043d\u0441\u0442\u0432\u0430", "\u043a\u043e\u0442\u043e\u0440\u044b\u0445", "\u043d\u0435", "\u0432\u044b\u0448\u0435", "4", "?"]}, "query_toks": {"en": ["select", "avg", "(", "age", ")", "from", "visitor", "where", "level_of_membership", "<=", "4", ";"], "ru": ["select", "avg", "(", "age", ")", "from", "visitor", "where", "level_of_membership", "<=", "4", ";"]}, "query_toks_no_values": {"en": ["select", "avg", "(", "age", ")", "from", "visitor", "where", "level_of_membership", "<=", "4", ";"], "ru": ["select", "avg", "(", "age", ")", "from", "visitor", "where", "level_of_membership", "<=", "4", ";"]}, "masked_query": "SELECT avg(age) FROM visitor WHERE Level_of_membership  <=  4;", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0432 \u0441\u0440\u0435\u0434\u043d\u0438\u0439 \u0432\u043e\u0437\u0440\u0430\u0441\u0442 \u043f\u043e\u0441\u0435\u0442\u0438\u0442\u0435\u043b\u0435\u0439, \u0443\u0440\u043e\u0432\u0435\u043d\u044c \u0447\u043b\u0435\u043d\u0441\u0442\u0432\u0430 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043d\u0435 \u0432\u044b\u0448\u0435 4?"}, "question": "What is the average age of the visitors whose membership level is not higher than 4?", "kb_id": "museum_visit"}, {"id": "D_0415", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT name ,  Level_of_membership FROM visitor WHERE Level_of_membership  >  4 ORDER BY age DESC;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 6, false], null]], [0, [0, [0, 7, false], null]]]], "where": [[false, 3, [0, [0, 7, false], null], 4.0, null]], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 8, false], null]]], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 6, false], null]], [0, [0, [0, 7, false], null]]]], "where": [[false, 3, [0, [0, 7, false], null], 4.0, null]], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 8, false], null]]], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Find", "the", "name", "and", "membership", "level", "of", "the", "visitors", "whose", "membership", "level", "is", "higher", "than", "4", ",", "and", "sort", "by", "their", "age", "from", "old", "to", "young", "."], "ru": ["\u041d\u0430\u0439\u0434\u0438", "\u0438\u043c\u0435\u043d\u0430", "\u0438", "\u0443\u0440\u043e\u0432\u0435\u043d\u044c", "\u0447\u043b\u0435\u043d\u0441\u0442\u0432\u0430", "\u043f\u043e\u0441\u0435\u0442\u0438\u0442\u0435\u043b\u0435\u0439", ",", "\u0447\u0435\u0439", "\u0443\u0440\u043e\u0432\u0435\u043d\u044c", "\u0447\u043b\u0435\u043d\u0441\u0442\u0432\u0430", "\u0432\u044b\u0448\u0435", "4", ",", "\u0438", "\u043e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u0443\u0439", "\u0438\u0445", "\u043f\u043e", "\u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0443", "\u043e\u0442", "\u0441\u0442\u0430\u0440\u044b\u0445", "\u043a", "\u043c\u043e\u043b\u043e\u0434\u044b\u043c", "."]}, "query_toks": {"en": ["select", "name", ",", "level_of_membership", "from", "visitor", "where", "level_of_membership", ">", "4", "order", "by", "age", "desc", ";"], "ru": ["select", "name", ",", "level_of_membership", "from", "visitor", "where", "level_of_membership", ">", "4", "order", "by", "age", "desc", ";"]}, "query_toks_no_values": {"en": ["select", "name", ",", "level_of_membership", "from", "visitor", "where", "level_of_membership", ">", "4", "order", "by", "age", "desc", ";"], "ru": ["select", "name", ",", "level_of_membership", "from", "visitor", "where", "level_of_membership", ">", "4", "order", "by", "age", "desc", ";"]}, "masked_query": "SELECT name ,  Level_of_membership FROM visitor WHERE Level_of_membership  >  4 ORDER BY age DESC;", "question_pauq": {"ru": "\u041d\u0430\u0439\u0434\u0438 \u0438\u043c\u0435\u043d\u0430 \u0438 \u0443\u0440\u043e\u0432\u0435\u043d\u044c \u0447\u043b\u0435\u043d\u0441\u0442\u0432\u0430 \u043f\u043e\u0441\u0435\u0442\u0438\u0442\u0435\u043b\u0435\u0439, \u0447\u0435\u0439 \u0443\u0440\u043e\u0432\u0435\u043d\u044c \u0447\u043b\u0435\u043d\u0441\u0442\u0432\u0430 \u0432\u044b\u0448\u0435 4, \u0438 \u043e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u0443\u0439 \u0438\u0445 \u043f\u043e \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0443 \u043e\u0442 \u0441\u0442\u0430\u0440\u044b\u0445 \u043a \u043c\u043e\u043b\u043e\u0434\u044b\u043c."}, "question": "Find the name and membership level of the visitors whose membership level is higher than 4, and sort by their age from old to young.", "kb_id": "museum_visit"}, {"id": "D_0416", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT museum_id ,  name FROM museum ORDER BY num_of_staff DESC LIMIT 1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 1, false], null]], [0, [0, [0, 2, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 3, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 1, false], null]], [0, [0, [0, 2, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 3, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Find", "the", "id", "and", "name", "of", "the", "museum", "that", "has", "the", "most", "staff", "members", "?"], "ru": ["id", "\u0438", "\u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435", "\u043c\u0443\u0437\u0435\u044f", ",", "\u0432", "\u043a\u043e\u0442\u043e\u0440\u043e\u043c", "\u0431\u043e\u043b\u044c\u0448\u0435", "\u0432\u0441\u0435\u0433\u043e", "\u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a\u043e\u0432"]}, "query_toks": {"en": ["select", "museum_id", ",", "name", "from", "museum", "order", "by", "num_of_staff", "desc", "limit", "1", ";"], "ru": ["select", "museum_id", ",", "name", "from", "museum", "order", "by", "num_of_staff", "desc", "limit", "1", ";"]}, "query_toks_no_values": {"en": ["select", "museum_id", ",", "name", "from", "museum", "order", "by", "num_of_staff", "desc", "limit", "1", ";"], "ru": ["select", "museum_id", ",", "name", "from", "museum", "order", "by", "num_of_staff", "desc", "limit", "1", ";"]}, "masked_query": "SELECT museum_id ,  name FROM museum ORDER BY num_of_staff DESC LIMIT 1;", "question_pauq": {"ru": "id \u0438 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043c\u0443\u0437\u0435\u044f, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u0431\u043e\u043b\u044c\u0448\u0435 \u0432\u0441\u0435\u0433\u043e \u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a\u043e\u0432"}, "question": "Find the id and name of the museum that has the most staff members?", "kb_id": "museum_visit"}, {"id": "D_0417", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT avg(num_of_staff) FROM museum WHERE open_year  <  2009;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[5, [0, [0, 3, false], null]]]], "where": [[false, 4, [0, [0, 4, false], null], 2009.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[5, [0, [0, 3, false], null]]]], "where": [[false, 4, [0, [0, 4, false], null], 2009.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Find", "the", "average", "number", "of", "staff", "working", "for", "the", "museums", "that", "were", "open", "before", "2009", "."], "ru": ["\u041d\u0430\u0439\u0434\u0438\u0442\u0435", "\u0441\u0440\u0435\u0434\u043d\u0435\u0435", "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e", "\u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a\u043e\u0432", ",", "\u0440\u0430\u0431\u043e\u0442\u0430\u044e\u0449\u0438\u0445", "\u0432", "\u043c\u0443\u0437\u0435\u044f\u0445", ",", "\u043a\u043e\u0442\u043e\u0440\u044b\u0435", "\u0431\u044b\u043b\u0438", "\u043e\u0442\u043a\u0440\u044b\u0442\u044b", "\u0434\u043e", "2009", "\u0433\u043e\u0434\u0430", "."]}, "query_toks": {"en": ["select", "avg", "(", "num_of_staff", ")", "from", "museum", "where", "open_year", "<", "2009", ";"], "ru": ["select", "avg", "(", "num_of_staff", ")", "from", "museum", "where", "open_year", "<", "2009", ";"]}, "query_toks_no_values": {"en": ["select", "avg", "(", "num_of_staff", ")", "from", "museum", "where", "open_year", "<", "2009", ";"], "ru": ["select", "avg", "(", "num_of_staff", ")", "from", "museum", "where", "open_year", "<", "2009", ";"]}, "masked_query": "SELECT avg(num_of_staff) FROM museum WHERE open_year  <  2009;", "question_pauq": {"ru": "\u041d\u0430\u0439\u0434\u0438\u0442\u0435 \u0441\u0440\u0435\u0434\u043d\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a\u043e\u0432, \u0440\u0430\u0431\u043e\u0442\u0430\u044e\u0449\u0438\u0445 \u0432 \u043c\u0443\u0437\u0435\u044f\u0445, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0431\u044b\u043b\u0438 \u043e\u0442\u043a\u0440\u044b\u0442\u044b \u0434\u043e 2009 \u0433\u043e\u0434\u0430."}, "question": "Find the average number of staff working for the museums that were open before 2009.", "kb_id": "museum_visit"}, {"id": "D_0418", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT Num_of_Staff ,  Open_Year FROM museum WHERE name  =  '\u041f\u0443\u0448\u043a\u0438\u043d\u0441\u043a\u0438\u0439';"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 3, false], null]], [0, [0, [0, 4, false], null]]]], "where": [[false, 2, [0, [0, 2, false], null], "\"Plaza Museum\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 3, false], null]], [0, [0, [0, 4, false], null]]]], "where": [[false, 2, [0, [0, 2, false], null], "\"\u041f\u0443\u0448\u043a\u0438\u043d\u0441\u043a\u0438\u0439\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "the", "opening", "year", "and", "staff", "number", "of", "the", "museum", "named", "Plaza", "Museum", "?"], "ru": ["\u041a\u0430\u043a\u043e\u0432\u044b", "\u0433\u043e\u0434", "\u043e\u0442\u043a\u0440\u044b\u0442\u0438\u044f", "\u0438", "\u0448\u0442\u0430\u0442\u043d\u0430\u044f", "\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u043e\u0441\u0442\u044c", "\u043c\u0443\u0437\u0435\u044f", "\u041f\u0443\u0448\u043a\u0438\u043d\u0441\u043a\u0438\u0439", "?"]}, "query_toks": {"en": ["select", "num_of_staff", ",", "open_year", "from", "museum", "where", "name", "=", "\"Plaza Museum\"", ";"], "ru": ["select", "num_of_staff", ",", "open_year", "from", "museum", "where", "name", "=", "\"\u041f\u0443\u0448\u043a\u0438\u043d\u0441\u043a\u0438\u0439\"", ";"]}, "query_toks_no_values": {"en": ["select", "num_of_staff", ",", "open_year", "from", "museum", "where", "name", "=", "value", ";"], "ru": ["select", "num_of_staff", ",", "open_year", "from", "museum", "where", "name", "=", "value", ";"]}, "masked_query": "SELECT Num_of_Staff ,  Open_Year FROM museum WHERE name  =  'Plaza Museum';", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0432\u044b \u0433\u043e\u0434 \u043e\u0442\u043a\u0440\u044b\u0442\u0438\u044f \u0438 \u0448\u0442\u0430\u0442\u043d\u0430\u044f \u0447\u0438\u0441\u043b\u0435\u043d\u043d\u043e\u0441\u0442\u044c \u043c\u0443\u0437\u0435\u044f \u041f\u0443\u0448\u043a\u0438\u043d\u0441\u043a\u0438\u0439?"}, "question": "What are the opening year and staff number of the museum named Plaza Museum?", "kb_id": "museum_visit"}, {"id": "D_0419", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT name FROM museum WHERE num_of_staff  >  (SELECT min(num_of_staff) FROM museum WHERE open_year  >  2010);"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [[false, 3, [0, [0, 3, false], null], {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[2, [0, [0, 3, false], null]]]], "where": [[false, 3, [0, [0, 4, false], null], 2010.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [[false, 3, [0, [0, 3, false], null], {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[2, [0, [0, 3, false], null]]]], "where": [[false, 3, [0, [0, 4, false], null], 2010.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["find", "the", "names", "of", "museums", "which", "have", "more", "staff", "than", "the", "minimum", "staff", "number", "of", "all", "museums", "opened", "after", "2010", "."], "ru": ["\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u044f", "\u043c\u0443\u0437\u0435\u0435\u0432", ",", "\u0432", "\u043a\u043e\u0442\u043e\u0440\u044b\u0445", "\u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442", "\u0431\u043e\u043b\u044c\u0448\u0435", "\u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a\u043e\u0432", ",", "\u0447\u0435\u043c", "\u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u0430\u044f", "\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u043e\u0441\u0442\u044c", "\u043f\u0435\u0440\u0441\u043e\u043d\u0430\u043b\u0430", "\u0432\u0441\u0435\u0445", "\u043c\u0443\u0437\u0435\u0435\u0432", ",", "\u043e\u0442\u043a\u0440\u044b\u0442\u044b\u0445", "\u043f\u043e\u0441\u043b\u0435", "2010", "\u0433\u043e\u0434\u0430", "."]}, "query_toks": {"en": ["select", "name", "from", "museum", "where", "num_of_staff", ">", "(", "select", "min", "(", "num_of_staff", ")", "from", "museum", "where", "open_year", ">", "2010", ")", ";"], "ru": ["select", "name", "from", "museum", "where", "num_of_staff", ">", "(", "select", "min", "(", "num_of_staff", ")", "from", "museum", "where", "open_year", ">", "2010", ")", ";"]}, "query_toks_no_values": {"en": ["select", "name", "from", "museum", "where", "num_of_staff", ">", "(", "select", "min", "(", "num_of_staff", ")", "from", "museum", "where", "open_year", ">", "2010", ")", ";"], "ru": ["select", "name", "from", "museum", "where", "num_of_staff", ">", "(", "select", "min", "(", "num_of_staff", ")", "from", "museum", "where", "open_year", ">", "2010", ")", ";"]}, "masked_query": "SELECT name FROM museum WHERE num_of_staff  >  (SELECT min(num_of_staff) FROM museum WHERE open_year  >  2010);", "question_pauq": {"ru": "\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u044f \u043c\u0443\u0437\u0435\u0435\u0432, \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u0431\u043e\u043b\u044c\u0448\u0435 \u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a\u043e\u0432, \u0447\u0435\u043c \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u0430\u044f \u0447\u0438\u0441\u043b\u0435\u043d\u043d\u043e\u0441\u0442\u044c \u043f\u0435\u0440\u0441\u043e\u043d\u0430\u043b\u0430 \u0432\u0441\u0435\u0445 \u043c\u0443\u0437\u0435\u0435\u0432, \u043e\u0442\u043a\u0440\u044b\u0442\u044b\u0445 \u043f\u043e\u0441\u043b\u0435 2010 \u0433\u043e\u0434\u0430."}, "question": "find the names of museums which have more staff than the minimum staff number of all museums opened after 2010.", "kb_id": "museum_visit"}, {"id": "D_0420", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT t1.id ,  t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t1.id HAVING count(*)  >  1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 5, false], null], [0, 10, false], null]]}, "select": [false, [[0, [0, [0, 5, false], null]], [0, [0, [0, 6, false], null]], [0, [0, [0, 8, false], null]]]], "where": [], "groupBy": [[0, 5, false]], "having": [[false, 3, [0, [3, 0, false], null], 1.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 5, false], null], [0, 10, false], null]]}, "select": [false, [[0, [0, [0, 5, false], null]], [0, [0, [0, 6, false], null]], [0, [0, [0, 8, false], null]]]], "where": [], "groupBy": [[0, 5, false]], "having": [[false, 3, [0, [3, 0, false], null], 1.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["find", "the", "id", ",", "name", "and", "age", "for", "visitors", "who", "visited", "some", "museums", "more", "than", "once", "."], "ru": ["\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c", "id", ",", "\u0438\u043c\u044f", "\u0438", "\u0432\u043e\u0437\u0440\u0430\u0441\u0442", "\u043f\u043e\u0441\u0435\u0442\u0438\u0442\u0435\u043b\u0435\u0439", ",", "\u043a\u043e\u0442\u043e\u0440\u044b\u0435", "\u043f\u043e\u0441\u0435\u0449\u0430\u043b\u0438", "\u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0435", "\u043c\u0443\u0437\u0435\u0438", "\u0431\u043e\u043b\u0435\u0435", "\u043e\u0434\u043d\u043e\u0433\u043e", "\u0440\u0430\u0437\u0430", "."]}, "query_toks": {"en": ["select", "t1.id", ",", "t1.name", ",", "t1.age", "from", "visitor", "as", "t1", "join", "visit", "as", "t2", "on", "t1.id", "=", "t2.visitor_id", "group", "by", "t1.id", "having", "count", "(", "*", ")", ">", "1", ";"], "ru": ["select", "t1.id", ",", "t1.name", ",", "t1.age", "from", "visitor", "as", "t1", "join", "visit", "as", "t2", "on", "t1.id", "=", "t2.visitor_id", "group", "by", "t1.id", "having", "count", "(", "*", ")", ">", "1", ";"]}, "query_toks_no_values": {"en": ["select", "t1.id", ",", "t1.name", ",", "t1.age", "from", "visitor", "as", "t1", "join", "visit", "as", "t2", "on", "t1.id", "=", "t2.visitor_id", "group", "by", "t1.id", "having", "count", "(", "*", ")", ">", "1", ";"], "ru": ["select", "t1.id", ",", "t1.name", ",", "t1.age", "from", "visitor", "as", "t1", "join", "visit", "as", "t2", "on", "t1.id", "=", "t2.visitor_id", "group", "by", "t1.id", "having", "count", "(", "*", ")", ">", "1", ";"]}, "masked_query": "SELECT t1.id ,  t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t1.id HAVING count(*)  >  1;", "question_pauq": {"ru": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c id, \u0438\u043c\u044f \u0438 \u0432\u043e\u0437\u0440\u0430\u0441\u0442 \u043f\u043e\u0441\u0435\u0442\u0438\u0442\u0435\u043b\u0435\u0439, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u043e\u0441\u0435\u0449\u0430\u043b\u0438 \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u0443\u0437\u0435\u0438 \u0431\u043e\u043b\u0435\u0435 \u043e\u0434\u043d\u043e\u0433\u043e \u0440\u0430\u0437\u0430."}, "question": "find the id, name and age for visitors who visited some museums more than once.", "kb_id": "museum_visit"}, {"id": "D_0421", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT t2.visitor_id ,  t1.name ,  t1.Level_of_membership FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t2.visitor_id ORDER BY sum(t2.Total_spent) DESC LIMIT 1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 5, false], null], [0, 10, false], null]]}, "select": [false, [[0, [0, [0, 10, false], null]], [0, [0, [0, 6, false], null]], [0, [0, [0, 7, false], null]]]], "where": [], "groupBy": [[0, 10, false]], "having": [], "orderBy": ["desc", [[0, [4, 12, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 5, false], null], [0, 10, false], null]]}, "select": [false, [[0, [0, [0, 10, false], null]], [0, [0, [0, 6, false], null]], [0, [0, [0, 7, false], null]]]], "where": [], "groupBy": [[0, 10, false]], "having": [], "orderBy": ["desc", [[0, [4, 12, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "the", "id", ",", "name", "and", "membership", "level", "of", "visitors", "who", "have", "spent", "the", "largest", "amount", "of", "money", "in", "total", "in", "all", "museum", "tickets", "?"], "ru": ["\u041a\u0430\u043a\u043e\u0439", "id", ",", "\u0438\u043c\u044f", "\u0438", "\u0443\u0440\u043e\u0432\u0435\u043d\u044c", "\u0447\u043b\u0435\u043d\u0441\u0442\u0432\u0430", "\u0443", "\u043f\u043e\u0441\u0435\u0442\u0438\u0442\u0435\u043b\u0435\u0439", ",", "\u043a\u043e\u0442\u043e\u0440\u044b\u0435", "\u043f\u043e\u0442\u0440\u0430\u0442\u0438\u043b\u0438", "\u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0443\u044e", "\u0441\u0443\u043c\u043c\u0443", "\u0434\u0435\u043d\u0435\u0433", "\u043d\u0430", "\u0432\u0441\u0435", "\u0431\u0438\u043b\u0435\u0442\u044b", "\u0432", "\u043c\u0443\u0437\u0435\u0439", "?"]}, "query_toks": {"en": ["select", "t2.visitor_id", ",", "t1.name", ",", "t1.level_of_membership", "from", "visitor", "as", "t1", "join", "visit", "as", "t2", "on", "t1.id", "=", "t2.visitor_id", "group", "by", "t2.visitor_id", "order", "by", "sum", "(", "t2.total_spent", ")", "desc", "limit", "1", ";"], "ru": ["select", "t2.visitor_id", ",", "t1.name", ",", "t1.level_of_membership", "from", "visitor", "as", "t1", "join", "visit", "as", "t2", "on", "t1.id", "=", "t2.visitor_id", "group", "by", "t2.visitor_id", "order", "by", "sum", "(", "t2.total_spent", ")", "desc", "limit", "1", ";"]}, "query_toks_no_values": {"en": ["select", "t2.visitor_id", ",", "t1.name", ",", "t1.level_of_membership", "from", "visitor", "as", "t1", "join", "visit", "as", "t2", "on", "t1.id", "=", "t2.visitor_id", "group", "by", "t2.visitor_id", "order", "by", "sum", "(", "t2.total_spent", ")", "desc", "limit", "1", ";"], "ru": ["select", "t2.visitor_id", ",", "t1.name", ",", "t1.level_of_membership", "from", "visitor", "as", "t1", "join", "visit", "as", "t2", "on", "t1.id", "=", "t2.visitor_id", "group", "by", "t2.visitor_id", "order", "by", "sum", "(", "t2.total_spent", ")", "desc", "limit", "1", ";"]}, "masked_query": "SELECT t2.visitor_id ,  t1.name ,  t1.Level_of_membership FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t2.visitor_id ORDER BY sum(t2.Total_spent) DESC LIMIT 1;", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0439 id, \u0438\u043c\u044f \u0438 \u0443\u0440\u043e\u0432\u0435\u043d\u044c \u0447\u043b\u0435\u043d\u0441\u0442\u0432\u0430 \u0443 \u043f\u043e\u0441\u0435\u0442\u0438\u0442\u0435\u043b\u0435\u0439, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u043e\u0442\u0440\u0430\u0442\u0438\u043b\u0438 \u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0443\u044e \u0441\u0443\u043c\u043c\u0443 \u0434\u0435\u043d\u0435\u0433 \u043d\u0430 \u0432\u0441\u0435 \u0431\u0438\u043b\u0435\u0442\u044b \u0432 \u043c\u0443\u0437\u0435\u0439?"}, "question": "What are the id, name and membership level of visitors who have spent the largest amount of money in total in all museum tickets?", "kb_id": "museum_visit"}, {"id": "D_0422", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT t2.Museum_ID ,  t1.name FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID GROUP BY t2.Museum_ID ORDER BY count(*) DESC LIMIT 1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 9, false], null]]}, "select": [false, [[0, [0, [0, 9, false], null]], [0, [0, [0, 2, false], null]]]], "where": [], "groupBy": [[0, 9, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 9, false], null]]}, "select": [false, [[0, [0, [0, 9, false], null]], [0, [0, [0, 2, false], null]]]], "where": [], "groupBy": [[0, 9, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "the", "id", "and", "name", "of", "the", "museum", "visited", "most", "times", "?"], "ru": ["\u041a\u0430\u043a\u043e\u0439", "id", "\u0438", "\u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435", "\u0443", "\u043c\u0443\u0437\u0435\u044f", "\u043a\u043e\u0442\u043e\u0440\u044b\u0439", "\u043f\u043e\u0441\u0435\u0449\u0430\u044e\u0442", "\u0447\u0430\u0449\u0435", "\u0432\u0441\u0435\u0433\u043e", "?"]}, "query_toks": {"en": ["select", "t2.museum_id", ",", "t1.name", "from", "museum", "as", "t1", "join", "visit", "as", "t2", "on", "t1.museum_id", "=", "t2.museum_id", "group", "by", "t2.museum_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"], "ru": ["select", "t2.museum_id", ",", "t1.name", "from", "museum", "as", "t1", "join", "visit", "as", "t2", "on", "t1.museum_id", "=", "t2.museum_id", "group", "by", "t2.museum_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"]}, "query_toks_no_values": {"en": ["select", "t2.museum_id", ",", "t1.name", "from", "museum", "as", "t1", "join", "visit", "as", "t2", "on", "t1.museum_id", "=", "t2.museum_id", "group", "by", "t2.museum_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"], "ru": ["select", "t2.museum_id", ",", "t1.name", "from", "museum", "as", "t1", "join", "visit", "as", "t2", "on", "t1.museum_id", "=", "t2.museum_id", "group", "by", "t2.museum_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"]}, "masked_query": "SELECT t2.Museum_ID ,  t1.name FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID GROUP BY t2.Museum_ID ORDER BY count(*) DESC LIMIT 1;", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0439 id \u0438 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u0443 \u043c\u0443\u0437\u0435\u044f \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u043e\u0441\u0435\u0449\u0430\u044e\u0442 \u0447\u0430\u0449\u0435 \u0432\u0441\u0435\u0433\u043e?"}, "question": "What are the id and name of the museum visited most times?", "kb_id": "museum_visit"}, {"id": "D_0423", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT name FROM museum WHERE Museum_ID NOT IN (SELECT museum_id FROM visit);"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [[true, 8, [0, [0, 1, false], null], {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [[true, 8, [0, [0, 1, false], null], {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "name", "of", "the", "museum", "that", "had", "no", "visitor", "yet", "?"], "ru": ["\u041a\u0430\u043a", "\u043d\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f", "\u043c\u0443\u0437\u0435\u0439", ",", "\u0432", "\u043a\u043e\u0442\u043e\u0440\u043e\u043c", "\u0435\u0449\u0435", "\u043d\u0435", "\u0431\u044b\u043b\u043e", "\u043d\u0438", "\u043e\u0434\u043d\u043e\u0433\u043e", "\u043f\u043e\u0441\u0435\u0442\u0438\u0442\u0435\u043b\u044f", "?"]}, "query_toks": {"en": ["select", "name", "from", "museum", "where", "museum_id", "not", "in", "(", "select", "museum_id", "from", "visit", ")", ";"], "ru": ["select", "name", "from", "museum", "where", "museum_id", "not", "in", "(", "select", "museum_id", "from", "visit", ")", ";"]}, "query_toks_no_values": {"en": ["select", "name", "from", "museum", "where", "museum_id", "not", "in", "(", "select", "museum_id", "from", "visit", ")", ";"], "ru": ["select", "name", "from", "museum", "where", "museum_id", "not", "in", "(", "select", "museum_id", "from", "visit", ")", ";"]}, "masked_query": "SELECT name FROM museum WHERE Museum_ID NOT IN (SELECT museum_id FROM visit);", "question_pauq": {"ru": "\u041a\u0430\u043a \u043d\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u043c\u0443\u0437\u0435\u0439, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u0435\u0449\u0435 \u043d\u0435 \u0431\u044b\u043b\u043e \u043d\u0438 \u043e\u0434\u043d\u043e\u0433\u043e \u043f\u043e\u0441\u0435\u0442\u0438\u0442\u0435\u043b\u044f?"}, "question": "What is the name of the museum that had no visitor yet?", "kb_id": "museum_visit"}, {"id": "D_0424", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id ORDER BY t2.num_of_ticket DESC LIMIT 1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 5, false], null], [0, 10, false], null]]}, "select": [false, [[0, [0, [0, 6, false], null]], [0, [0, [0, 8, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 11, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 5, false], null], [0, 10, false], null]]}, "select": [false, [[0, [0, [0, 6, false], null]], [0, [0, [0, 8, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 11, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Find", "the", "name", "and", "age", "of", "the", "visitor", "who", "bought", "the", "most", "tickets", "at", "once", "."], "ru": ["\u0418\u043c\u044f", "\u0438", "\u0432\u043e\u0437\u0440\u0430\u0441\u0442", "\u043f\u043e\u0441\u0435\u0442\u0438\u0442\u0435\u043b\u044f", ",", "\u043a\u043e\u0442\u043e\u0440\u044b\u0439", "\u043a\u0443\u043f\u0438\u043b", "\u0431\u043e\u043b\u044c\u0448\u0435", "\u0432\u0441\u0435\u0433\u043e", "\u0431\u0438\u043b\u0435\u0442\u043e\u0432", "\u0437\u0430", "\u0440\u0430\u0437", "."]}, "query_toks": {"en": ["select", "t1.name", ",", "t1.age", "from", "visitor", "as", "t1", "join", "visit", "as", "t2", "on", "t1.id", "=", "t2.visitor_id", "order", "by", "t2.num_of_ticket", "desc", "limit", "1", ";"], "ru": ["select", "t1.name", ",", "t1.age", "from", "visitor", "as", "t1", "join", "visit", "as", "t2", "on", "t1.id", "=", "t2.visitor_id", "order", "by", "t2.num_of_ticket", "desc", "limit", "1", ";"]}, "query_toks_no_values": {"en": ["select", "t1.name", ",", "t1.age", "from", "visitor", "as", "t1", "join", "visit", "as", "t2", "on", "t1.id", "=", "t2.visitor_id", "order", "by", "t2.num_of_ticket", "desc", "limit", "1", ";"], "ru": ["select", "t1.name", ",", "t1.age", "from", "visitor", "as", "t1", "join", "visit", "as", "t2", "on", "t1.id", "=", "t2.visitor_id", "order", "by", "t2.num_of_ticket", "desc", "limit", "1", ";"]}, "masked_query": "SELECT t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id ORDER BY t2.num_of_ticket DESC LIMIT 1;", "question_pauq": {"ru": "\u0418\u043c\u044f \u0438 \u0432\u043e\u0437\u0440\u0430\u0441\u0442 \u043f\u043e\u0441\u0435\u0442\u0438\u0442\u0435\u043b\u044f, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043a\u0443\u043f\u0438\u043b \u0431\u043e\u043b\u044c\u0448\u0435 \u0432\u0441\u0435\u0433\u043e \u0431\u0438\u043b\u0435\u0442\u043e\u0432 \u0437\u0430 \u0440\u0430\u0437."}, "question": "Find the name and age of the visitor who bought the most tickets at once.", "kb_id": "museum_visit"}, {"id": "D_0425", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT avg(num_of_ticket) ,  max(num_of_ticket) FROM visit;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[5, [0, [0, 11, false], null]], [1, [0, [0, 11, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[5, [0, [0, 11, false], null]], [1, [0, [0, 11, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "the", "average", "and", "maximum", "number", "of", "tickets", "bought", "in", "all", "visits", "?"], "ru": ["\u041a\u0430\u043a\u043e\u0432\u043e", "\u0441\u0440\u0435\u0434\u043d\u0435\u0435", "\u0438", "\u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435", "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e", "\u0431\u0438\u043b\u0435\u0442\u043e\u0432", ",", "\u043a\u0443\u043f\u043b\u0435\u043d\u043d\u044b\u0445", "\u0437\u0430", "\u0432\u0441\u0435", "\u043f\u043e\u0441\u0435\u0449\u0435\u043d\u0438\u044f", "?"]}, "query_toks": {"en": ["select", "avg", "(", "num_of_ticket", ")", ",", "max", "(", "num_of_ticket", ")", "from", "visit", ";"], "ru": ["select", "avg", "(", "num_of_ticket", ")", ",", "max", "(", "num_of_ticket", ")", "from", "visit", ";"]}, "query_toks_no_values": {"en": ["select", "avg", "(", "num_of_ticket", ")", ",", "max", "(", "num_of_ticket", ")", "from", "visit", ";"], "ru": ["select", "avg", "(", "num_of_ticket", ")", ",", "max", "(", "num_of_ticket", ")", "from", "visit", ";"]}, "masked_query": "SELECT avg(num_of_ticket) ,  max(num_of_ticket) FROM visit;", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0432\u043e \u0441\u0440\u0435\u0434\u043d\u0435\u0435 \u0438 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0431\u0438\u043b\u0435\u0442\u043e\u0432, \u043a\u0443\u043f\u043b\u0435\u043d\u043d\u044b\u0445 \u0437\u0430 \u0432\u0441\u0435 \u043f\u043e\u0441\u0435\u0449\u0435\u043d\u0438\u044f?"}, "question": "What are the average and maximum number of tickets bought in all visits?", "kb_id": "museum_visit"}, {"id": "D_0426", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT sum(t2.Total_spent) FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id WHERE t1.Level_of_membership  =  1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 5, false], null], [0, 10, false], null]]}, "select": [false, [[4, [0, [0, 12, false], null]]]], "where": [[false, 2, [0, [0, 7, false], null], 1.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 5, false], null], [0, 10, false], null]]}, "select": [false, [[4, [0, [0, 12, false], null]]]], "where": [[false, 2, [0, [0, 7, false], null], 1.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "total", "ticket", "expense", "of", "the", "visitors", "whose", "membership", "level", "is", "1", "?"], "ru": ["\u041a\u0430\u043a\u043e\u0432\u044b", "\u043e\u0431\u0449\u0438\u0435", "\u0440\u0430\u0441\u0445\u043e\u0434\u044b", "\u043d\u0430", "\u0431\u0438\u043b\u0435\u0442\u044b", "\u0443", "\u043f\u043e\u0441\u0435\u0442\u0438\u0442\u0435\u043b\u0435\u0439", ",", "\u0447\u0435\u0439", "\u0443\u0440\u043e\u0432\u0435\u043d\u044c", "\u0447\u043b\u0435\u043d\u0441\u0442\u0432\u0430", "\u0440\u0430\u0432\u0435\u043d", "1", "?"]}, "query_toks": {"en": ["select", "sum", "(", "t2.total_spent", ")", "from", "visitor", "as", "t1", "join", "visit", "as", "t2", "on", "t1.id", "=", "t2.visitor_id", "where", "t1.level_of_membership", "=", "1", ";"], "ru": ["select", "sum", "(", "t2.total_spent", ")", "from", "visitor", "as", "t1", "join", "visit", "as", "t2", "on", "t1.id", "=", "t2.visitor_id", "where", "t1.level_of_membership", "=", "1", ";"]}, "query_toks_no_values": {"en": ["select", "sum", "(", "t2.total_spent", ")", "from", "visitor", "as", "t1", "join", "visit", "as", "t2", "on", "t1.id", "=", "t2.visitor_id", "where", "t1.level_of_membership", "=", "1", ";"], "ru": ["select", "sum", "(", "t2.total_spent", ")", "from", "visitor", "as", "t1", "join", "visit", "as", "t2", "on", "t1.id", "=", "t2.visitor_id", "where", "t1.level_of_membership", "=", "1", ";"]}, "masked_query": "SELECT sum(t2.Total_spent) FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id WHERE t1.Level_of_membership  =  1;", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0432\u044b \u043e\u0431\u0449\u0438\u0435 \u0440\u0430\u0441\u0445\u043e\u0434\u044b \u043d\u0430 \u0431\u0438\u043b\u0435\u0442\u044b \u0443 \u043f\u043e\u0441\u0435\u0442\u0438\u0442\u0435\u043b\u0435\u0439, \u0447\u0435\u0439 \u0443\u0440\u043e\u0432\u0435\u043d\u044c \u0447\u043b\u0435\u043d\u0441\u0442\u0432\u0430 \u0440\u0430\u0432\u0435\u043d 1?"}, "question": "What is the total ticket expense of the visitors whose membership level is 1?", "kb_id": "museum_visit"}, {"id": "D_0427", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  <  2009 INTERSECT SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  >  2011;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1], ["table_unit", 2], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 5, false], null], [0, 10, false], null], "and", [false, 2, [0, [0, 1, false], null], [0, 9, false], null]]}, "select": [false, [[0, [0, [0, 6, false], null]]]], "where": [[false, 4, [0, [0, 4, false], null], 2009.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": {"from": {"table_units": [["table_unit", 1], ["table_unit", 2], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 5, false], null], [0, 10, false], null], "and", [false, 2, [0, [0, 1, false], null], [0, 9, false], null]]}, "select": [false, [[0, [0, [0, 6, false], null]]]], "where": [[false, 3, [0, [0, 4, false], null], 2011.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1], ["table_unit", 2], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 5, false], null], [0, 10, false], null], "and", [false, 2, [0, [0, 1, false], null], [0, 9, false], null]]}, "select": [false, [[0, [0, [0, 6, false], null]]]], "where": [[false, 4, [0, [0, 4, false], null], 2009.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": {"from": {"table_units": [["table_unit", 1], ["table_unit", 2], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 5, false], null], [0, 10, false], null], "and", [false, 2, [0, [0, 1, false], null], [0, 9, false], null]]}, "select": [false, [[0, [0, [0, 6, false], null]]]], "where": [[false, 3, [0, [0, 4, false], null], 2011.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "name", "of", "the", "visitor", "who", "visited", "both", "a", "museum", "opened", "before", "2009", "and", "a", "museum", "opened", "after", "2011", "?"], "ru": ["\u041a\u0430\u043a", "\u0437\u043e\u0432\u0443\u0442", "\u043f\u043e\u0441\u0435\u0442\u0438\u0442\u0435\u043b\u044f", ",", "\u043a\u043e\u0442\u043e\u0440\u044b\u0439", "\u043f\u043e\u0441\u0435\u0442\u0438\u043b", "\u0438", "\u043c\u0443\u0437\u0435\u0439", ",", "\u043e\u0442\u043a\u0440\u044b\u0442\u044b\u0439", "\u0434\u043e", "2009", "\u0433\u043e\u0434\u0430", ",", "\u0438", "\u043c\u0443\u0437\u0435\u0439", ",", "\u043e\u0442\u043a\u0440\u044b\u0442\u044b\u0439", "\u043f\u043e\u0441\u043b\u0435", "2011", "\u0433\u043e\u0434\u0430", "?"]}, "query_toks": {"en": ["select", "t1.name", "from", "visitor", "as", "t1", "join", "visit", "as", "t2", "on", "t1.id", "=", "t2.visitor_id", "join", "museum", "as", "t3", "on", "t3.museum_id", "=", "t2.museum_id", "where", "t3.open_year", "<", "2009", "intersect", "select", "t1.name", "from", "visitor", "as", "t1", "join", "visit", "as", "t2", "on", "t1.id", "=", "t2.visitor_id", "join", "museum", "as", "t3", "on", "t3.museum_id", "=", "t2.museum_id", "where", "t3.open_year", ">", "2011", ";"], "ru": ["select", "t1.name", "from", "visitor", "as", "t1", "join", "visit", "as", "t2", "on", "t1.id", "=", "t2.visitor_id", "join", "museum", "as", "t3", "on", "t3.museum_id", "=", "t2.museum_id", "where", "t3.open_year", "<", "2009", "intersect", "select", "t1.name", "from", "visitor", "as", "t1", "join", "visit", "as", "t2", "on", "t1.id", "=", "t2.visitor_id", "join", "museum", "as", "t3", "on", "t3.museum_id", "=", "t2.museum_id", "where", "t3.open_year", ">", "2011", ";"]}, "query_toks_no_values": {"en": ["select", "t1.name", "from", "visitor", "as", "t1", "join", "visit", "as", "t2", "on", "t1.id", "=", "t2.visitor_id", "join", "museum", "as", "t3", "on", "t3.museum_id", "=", "t2.museum_id", "where", "t3.open_year", "<", "2009", "intersect", "select", "t1.name", "from", "visitor", "as", "t1", "join", "visit", "as", "t2", "on", "t1.id", "=", "t2.visitor_id", "join", "museum", "as", "t3", "on", "t3.museum_id", "=", "t2.museum_id", "where", "t3.open_year", ">", "2011", ";"], "ru": ["select", "t1.name", "from", "visitor", "as", "t1", "join", "visit", "as", "t2", "on", "t1.id", "=", "t2.visitor_id", "join", "museum", "as", "t3", "on", "t3.museum_id", "=", "t2.museum_id", "where", "t3.open_year", "<", "2009", "intersect", "select", "t1.name", "from", "visitor", "as", "t1", "join", "visit", "as", "t2", "on", "t1.id", "=", "t2.visitor_id", "join", "museum", "as", "t3", "on", "t3.museum_id", "=", "t2.museum_id", "where", "t3.open_year", ">", "2011", ";"]}, "masked_query": "SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  <  2009 INTERSECT SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  >  2011;", "question_pauq": {"ru": "\u041a\u0430\u043a \u0437\u043e\u0432\u0443\u0442 \u043f\u043e\u0441\u0435\u0442\u0438\u0442\u0435\u043b\u044f, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u043e\u0441\u0435\u0442\u0438\u043b \u0438 \u043c\u0443\u0437\u0435\u0439, \u043e\u0442\u043a\u0440\u044b\u0442\u044b\u0439 \u0434\u043e 2009 \u0433\u043e\u0434\u0430, \u0438 \u043c\u0443\u0437\u0435\u0439, \u043e\u0442\u043a\u0440\u044b\u0442\u044b\u0439 \u043f\u043e\u0441\u043b\u0435 2011 \u0433\u043e\u0434\u0430?"}, "question": "What is the name of the visitor who visited both a museum opened before 2009 and a museum opened after 2011?", "kb_id": "museum_visit"}, {"id": "D_0428", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT count(*) FROM visitor WHERE id NOT IN (SELECT t2.visitor_id FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID WHERE t1.open_year  >  2010);"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[true, 8, [0, [0, 5, false], null], {"from": {"table_units": [["table_unit", 0], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 9, false], null]]}, "select": [false, [[0, [0, [0, 10, false], null]]]], "where": [[false, 3, [0, [0, 4, false], null], 2010.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[true, 8, [0, [0, 5, false], null], {"from": {"table_units": [["table_unit", 0], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 9, false], null]]}, "select": [false, [[0, [0, [0, 10, false], null]]]], "where": [[false, 3, [0, [0, 4, false], null], 2010.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Find", "the", "number", "of", "visitors", "who", "did", "not", "visit", "any", "museum", "opened", "after", "2010", "."], "ru": ["\u041d\u0430\u0439\u0434\u0438\u0442\u0435", "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e", "\u043f\u043e\u0441\u0435\u0442\u0438\u0442\u0435\u043b\u0435\u0439", ",", "\u043a\u043e\u0442\u043e\u0440\u044b\u0435", "\u043d\u0435", "\u043f\u043e\u0441\u0435\u0449\u0430\u043b\u0438", "\u043d\u0438", "\u043e\u0434\u0438\u043d", "\u043c\u0443\u0437\u0435\u0439", ",", "\u043e\u0442\u043a\u0440\u044b\u0442\u044b\u0439", "\u043f\u043e\u0441\u043b\u0435", "2010", "\u0433\u043e\u0434\u0430", "."]}, "query_toks": {"en": ["select", "count", "(", "*", ")", "from", "visitor", "where", "id", "not", "in", "(", "select", "t2.visitor_id", "from", "museum", "as", "t1", "join", "visit", "as", "t2", "on", "t1.museum_id", "=", "t2.museum_id", "where", "t1.open_year", ">", "2010", ")", ";"], "ru": ["select", "count", "(", "*", ")", "from", "visitor", "where", "id", "not", "in", "(", "select", "t2.visitor_id", "from", "museum", "as", "t1", "join", "visit", "as", "t2", "on", "t1.museum_id", "=", "t2.museum_id", "where", "t1.open_year", ">", "2010", ")", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "*", ")", "from", "visitor", "where", "id", "not", "in", "(", "select", "t2.visitor_id", "from", "museum", "as", "t1", "join", "visit", "as", "t2", "on", "t1.museum_id", "=", "t2.museum_id", "where", "t1.open_year", ">", "2010", ")", ";"], "ru": ["select", "count", "(", "*", ")", "from", "visitor", "where", "id", "not", "in", "(", "select", "t2.visitor_id", "from", "museum", "as", "t1", "join", "visit", "as", "t2", "on", "t1.museum_id", "=", "t2.museum_id", "where", "t1.open_year", ">", "2010", ")", ";"]}, "masked_query": "SELECT count(*) FROM visitor WHERE id NOT IN (SELECT t2.visitor_id FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID WHERE t1.open_year  >  2010);", "question_pauq": {"ru": "\u041d\u0430\u0439\u0434\u0438\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u0441\u0435\u0442\u0438\u0442\u0435\u043b\u0435\u0439, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0435 \u043f\u043e\u0441\u0435\u0449\u0430\u043b\u0438 \u043d\u0438 \u043e\u0434\u0438\u043d \u043c\u0443\u0437\u0435\u0439, \u043e\u0442\u043a\u0440\u044b\u0442\u044b\u0439 \u043f\u043e\u0441\u043b\u0435 2010 \u0433\u043e\u0434\u0430."}, "question": "Find the number of visitors who did not visit any museum opened after 2010.", "kb_id": "museum_visit"}, {"id": "D_0429", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT count(*) FROM museum WHERE open_year  >  2013 OR open_year  <  2008;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 3, [0, [0, 4, false], null], 2013.0, null], "or", [false, 4, [0, [0, 4, false], null], 2008.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 3, [0, [0, 4, false], null], 2013.0, null], "or", [false, 4, [0, [0, 4, false], null], 2008.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["How", "many", "museums", "were", "opened", "after", "2013", "or", "before", "2008", "?"], "ru": ["\u0421\u043a\u043e\u043b\u044c\u043a\u043e", "\u043c\u0443\u0437\u0435\u0435\u0432", "\u0431\u044b\u043b\u043e", "\u043e\u0442\u043a\u0440\u044b\u0442\u043e", "\u043f\u043e\u0441\u043b\u0435", "2013", "\u0433\u043e\u0434\u0430", "\u0438\u043b\u0438", "\u0434\u043e", "2008", "\u0433\u043e\u0434\u0430", "?"]}, "query_toks": {"en": ["select", "count", "(", "*", ")", "from", "museum", "where", "open_year", ">", "2013", "or", "open_year", "<", "2008", ";"], "ru": ["select", "count", "(", "*", ")", "from", "museum", "where", "open_year", ">", "2013", "or", "open_year", "<", "2008", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "*", ")", "from", "museum", "where", "open_year", ">", "2013", "or", "open_year", "<", "2008", ";"], "ru": ["select", "count", "(", "*", ")", "from", "museum", "where", "open_year", ">", "2013", "or", "open_year", "<", "2008", ";"]}, "masked_query": "SELECT count(*) FROM museum WHERE open_year  >  2013 OR open_year  <  2008;", "question_pauq": {"ru": "\u0421\u043a\u043e\u043b\u044c\u043a\u043e \u043c\u0443\u0437\u0435\u0435\u0432 \u0431\u044b\u043b\u043e \u043e\u0442\u043a\u0440\u044b\u0442\u043e \u043f\u043e\u0441\u043b\u0435 2013 \u0433\u043e\u0434\u0430 \u0438\u043b\u0438 \u0434\u043e 2008 \u0433\u043e\u0434\u0430?"}, "question": "How many museums were opened after 2013 or before 2008?", "kb_id": "museum_visit"}, {"id": "D_0430", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT count(*) FROM players;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Find", "the", "total", "number", "of", "players", "."], "ru": ["\u041d\u0430\u0439\u0434\u0438\u0442\u0435", "\u043e\u0431\u0449\u0435\u0435", "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e", "\u0438\u0433\u0440\u043e\u043a\u043e\u0432", "."]}, "query_toks": {"en": ["select", "count", "(", "*", ")", "from", "players", ";"], "ru": ["select", "count", "(", "*", ")", "from", "players", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "*", ")", "from", "players", ";"], "ru": ["select", "count", "(", "*", ")", "from", "players", ";"]}, "masked_query": "SELECT count(*) FROM players;", "question_pauq": {"ru": "\u041d\u0430\u0439\u0434\u0438\u0442\u0435 \u043e\u0431\u0449\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0438\u0433\u0440\u043e\u043a\u043e\u0432."}, "question": "Find the total number of players.", "kb_id": "wta_1"}, {"id": "D_0431", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT count(*) FROM players;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["How", "many", "players", "are", "there", "?"], "ru": ["\u0421\u043a\u043e\u043b\u044c\u043a\u043e", "\u0432\u0441\u0435\u0433\u043e", "\u0442\u0430\u043c", "\u0438\u0433\u0440\u043e\u043a\u043e\u0432", "?"]}, "query_toks": {"en": ["select", "count", "(", "*", ")", "from", "players", ";"], "ru": ["select", "count", "(", "*", ")", "from", "players", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "*", ")", "from", "players", ";"], "ru": ["select", "count", "(", "*", ")", "from", "players", ";"]}, "masked_query": "SELECT count(*) FROM players;", "question_pauq": {"ru": "\u0421\u043a\u043e\u043b\u044c\u043a\u043e \u0432\u0441\u0435\u0433\u043e \u0442\u0430\u043c \u0438\u0433\u0440\u043e\u043a\u043e\u0432?"}, "question": "How many players are there?", "kb_id": "wta_1"}, {"id": "D_0432", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT count(*) FROM matches;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Find", "the", "total", "number", "of", "matches", "."], "ru": ["\u041d\u0430\u0439\u0434\u0438\u0442\u0435", "\u043e\u0431\u0449\u0435\u0435", "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e", "\u043c\u0430\u0442\u0447\u0435\u0439", "."]}, "query_toks": {"en": ["select", "count", "(", "*", ")", "from", "matches", ";"], "ru": ["select", "count", "(", "*", ")", "from", "matches", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "*", ")", "from", "matches", ";"], "ru": ["select", "count", "(", "*", ")", "from", "matches", ";"]}, "masked_query": "SELECT count(*) FROM matches;", "question_pauq": {"ru": "\u041d\u0430\u0439\u0434\u0438\u0442\u0435 \u043e\u0431\u0449\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0430\u0442\u0447\u0435\u0439."}, "question": "Find the total number of matches.", "kb_id": "wta_1"}, {"id": "D_0433", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT count(*) FROM matches;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Count", "the", "number", "of", "matches", "."], "ru": ["\u041f\u043e\u0434\u0441\u0447\u0438\u0442\u0430\u0439\u0442\u0435", "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e", "\u043c\u0430\u0442\u0447\u0435\u0439", "."]}, "query_toks": {"en": ["select", "count", "(", "*", ")", "from", "matches", ";"], "ru": ["select", "count", "(", "*", ")", "from", "matches", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "*", ")", "from", "matches", ";"], "ru": ["select", "count", "(", "*", ")", "from", "matches", ";"]}, "masked_query": "SELECT count(*) FROM matches;", "question_pauq": {"ru": "\u041f\u043e\u0434\u0441\u0447\u0438\u0442\u0430\u0439\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0430\u0442\u0447\u0435\u0439."}, "question": "Count the number of matches.", "kb_id": "wta_1"}, {"id": "D_0434", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT first_name ,  birth_date FROM players WHERE country_code  =  '\u0410\u0424\u041a';"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 2, false], null]], [0, [0, [0, 5, false], null]]]], "where": [[false, 2, [0, [0, 6, false], null], "\"USA\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 2, false], null]], [0, [0, [0, 5, false], null]]]], "where": [[false, 2, [0, [0, 6, false], null], "\"\u0410\u0424\u041a\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["List", "the", "first", "name", "and", "birth", "date", "of", "all", "players", "from", "the", "country", "with", "code", "USA", "."], "ru": ["\u0423\u043a\u0430\u0436\u0438\u0442\u0435", "\u0438\u043c\u044f", "\u0438", "\u0434\u0430\u0442\u0443", "\u0440\u043e\u0436\u0434\u0435\u043d\u0438\u044f", "\u0432\u0441\u0435\u0445", "\u0438\u0433\u0440\u043e\u043a\u043e\u0432", "\u0438\u0437", "\u0441\u0442\u0440\u0430\u043d\u044b", "\u0441", "\u043a\u043e\u0434\u043e\u043c", "\u0410\u0424\u041a", "."]}, "query_toks": {"en": ["select", "first_name", ",", "birth_date", "from", "players", "where", "country_code", "=", "\"USA\"", ";"], "ru": ["select", "first_name", ",", "birth_date", "from", "players", "where", "country_code", "=", "\"\u0410\u0424\u041a\"", ";"]}, "query_toks_no_values": {"en": ["select", "first_name", ",", "birth_date", "from", "players", "where", "country_code", "=", "value", ";"], "ru": ["select", "first_name", ",", "birth_date", "from", "players", "where", "country_code", "=", "value", ";"]}, "masked_query": "SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA';", "question_pauq": {"ru": "\u0423\u043a\u0430\u0436\u0438\u0442\u0435 \u0438\u043c\u044f \u0438 \u0434\u0430\u0442\u0443 \u0440\u043e\u0436\u0434\u0435\u043d\u0438\u044f \u0432\u0441\u0435\u0445 \u0438\u0433\u0440\u043e\u043a\u043e\u0432 \u0438\u0437 \u0441\u0442\u0440\u0430\u043d\u044b \u0441 \u043a\u043e\u0434\u043e\u043c \u0410\u0424\u041a."}, "question": "List the first name and birth date of all players from the country with code USA.", "kb_id": "wta_1"}, {"id": "D_0435", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT first_name ,  birth_date FROM players WHERE country_code  =  '\u0410\u0424\u041a';"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 2, false], null]], [0, [0, [0, 5, false], null]]]], "where": [[false, 2, [0, [0, 6, false], null], "\"USA\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 2, false], null]], [0, [0, [0, 5, false], null]]]], "where": [[false, 2, [0, [0, 6, false], null], "\"\u0410\u0424\u041a\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "the", "first", "names", "and", "birth", "dates", "of", "players", "from", "the", "USA", "?"], "ru": ["\u041a\u0430\u043a\u0438\u0435", "\u0438\u043c\u0435\u043d\u0430", "\u0438", "\u0434\u0430\u0442\u044b", "\u0440\u043e\u0436\u0434\u0435\u043d\u0438\u044f", "\u0443", "\u0438\u0433\u0440\u043e\u043a\u043e\u0432", "\u0438\u0437", "\u0410\u0424\u041a", "?"]}, "query_toks": {"en": ["select", "first_name", ",", "birth_date", "from", "players", "where", "country_code", "=", "\"USA\"", ";"], "ru": ["select", "first_name", ",", "birth_date", "from", "players", "where", "country_code", "=", "\"\u0410\u0424\u041a\"", ";"]}, "query_toks_no_values": {"en": ["select", "first_name", ",", "birth_date", "from", "players", "where", "country_code", "=", "value", ";"], "ru": ["select", "first_name", ",", "birth_date", "from", "players", "where", "country_code", "=", "value", ";"]}, "masked_query": "SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA';", "question_pauq": {"ru": "\u041a\u0430\u043a\u0438\u0435 \u0438\u043c\u0435\u043d\u0430 \u0438 \u0434\u0430\u0442\u044b \u0440\u043e\u0436\u0434\u0435\u043d\u0438\u044f \u0443 \u0438\u0433\u0440\u043e\u043a\u043e\u0432 \u0438\u0437 \u0410\u0424\u041a?"}, "question": "What are the first names and birth dates of players from the USA?", "kb_id": "wta_1"}, {"id": "D_0436", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[5, [0, [0, 9, false], null]], [5, [0, [0, 28, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[5, [0, [0, 9, false], null]], [5, [0, [0, 28, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Find", "the", "average", "age", "of", "losers", "and", "winners", "of", "all", "matches", "."], "ru": ["\u041d\u0430\u0439\u0434\u0438\u0442\u0435", "\u0441\u0440\u0435\u0434\u043d\u0438\u0439", "\u0432\u043e\u0437\u0440\u0430\u0441\u0442", "\u043f\u0440\u043e\u0438\u0433\u0440\u0430\u0432\u0448\u0438\u0445", "\u0438", "\u043f\u043e\u0431\u0435\u0434\u0438\u0442\u0435\u043b\u0435\u0439", "\u0432\u0441\u0435\u0445", "\u043c\u0430\u0442\u0447\u0435\u0439", "."]}, "query_toks": {"en": ["select", "avg", "(", "loser_age", ")", ",", "avg", "(", "winner_age", ")", "from", "matches", ";"], "ru": ["select", "avg", "(", "loser_age", ")", ",", "avg", "(", "winner_age", ")", "from", "matches", ";"]}, "query_toks_no_values": {"en": ["select", "avg", "(", "loser_age", ")", ",", "avg", "(", "winner_age", ")", "from", "matches", ";"], "ru": ["select", "avg", "(", "loser_age", ")", ",", "avg", "(", "winner_age", ")", "from", "matches", ";"]}, "masked_query": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches;", "question_pauq": {"ru": "\u041d\u0430\u0439\u0434\u0438\u0442\u0435 \u0441\u0440\u0435\u0434\u043d\u0438\u0439 \u0432\u043e\u0437\u0440\u0430\u0441\u0442 \u043f\u0440\u043e\u0438\u0433\u0440\u0430\u0432\u0448\u0438\u0445 \u0438 \u043f\u043e\u0431\u0435\u0434\u0438\u0442\u0435\u043b\u0435\u0439 \u0432\u0441\u0435\u0445 \u043c\u0430\u0442\u0447\u0435\u0439."}, "question": "Find the average age of losers and winners of all matches.", "kb_id": "wta_1"}, {"id": "D_0437", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[5, [0, [0, 9, false], null]], [5, [0, [0, 28, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[5, [0, [0, 9, false], null]], [5, [0, [0, 28, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "the", "average", "ages", "of", "losers", "and", "winners", "across", "matches", "?"], "ru": ["\u041a\u0430\u043a\u043e\u0432", "\u0441\u0440\u0435\u0434\u043d\u0438\u0439", "\u0432\u043e\u0437\u0440\u0430\u0441\u0442", "\u043f\u0440\u043e\u0438\u0433\u0440\u0430\u0432\u0448\u0438\u0445", "\u0438", "\u043f\u043e\u0431\u0435\u0434\u0438\u0442\u0435\u043b\u0435\u0439", "\u0432", "\u043c\u0430\u0442\u0447\u0430\u0445", "?"]}, "query_toks": {"en": ["select", "avg", "(", "loser_age", ")", ",", "avg", "(", "winner_age", ")", "from", "matches", ";"], "ru": ["select", "avg", "(", "loser_age", ")", ",", "avg", "(", "winner_age", ")", "from", "matches", ";"]}, "query_toks_no_values": {"en": ["select", "avg", "(", "loser_age", ")", ",", "avg", "(", "winner_age", ")", "from", "matches", ";"], "ru": ["select", "avg", "(", "loser_age", ")", ",", "avg", "(", "winner_age", ")", "from", "matches", ";"]}, "masked_query": "SELECT avg(loser_age) ,  avg(winner_age) FROM matches;", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0432 \u0441\u0440\u0435\u0434\u043d\u0438\u0439 \u0432\u043e\u0437\u0440\u0430\u0441\u0442 \u043f\u0440\u043e\u0438\u0433\u0440\u0430\u0432\u0448\u0438\u0445 \u0438 \u043f\u043e\u0431\u0435\u0434\u0438\u0442\u0435\u043b\u0435\u0439 \u0432 \u043c\u0430\u0442\u0447\u0430\u0445?"}, "question": "What are the average ages of losers and winners across matches?", "kb_id": "wta_1"}, {"id": "D_0438", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT avg(winner_rank) FROM matches;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[5, [0, [0, 35, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[5, [0, [0, 35, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Find", "the", "average", "rank", "of", "winners", "in", "all", "matches", "."], "ru": ["\u041d\u0430\u0439\u0434\u0438\u0442\u0435", "\u0441\u0440\u0435\u0434\u043d\u0438\u0439", "\u0440\u0435\u0439\u0442\u0438\u043d\u0433", "\u043f\u043e\u0431\u0435\u0434\u0438\u0442\u0435\u043b\u0435\u0439", "\u0432\u043e", "\u0432\u0441\u0435\u0445", "\u043c\u0430\u0442\u0447\u0430\u0445", "."]}, "query_toks": {"en": ["select", "avg", "(", "winner_rank", ")", "from", "matches", ";"], "ru": ["select", "avg", "(", "winner_rank", ")", "from", "matches", ";"]}, "query_toks_no_values": {"en": ["select", "avg", "(", "winner_rank", ")", "from", "matches", ";"], "ru": ["select", "avg", "(", "winner_rank", ")", "from", "matches", ";"]}, "masked_query": "SELECT avg(winner_rank) FROM matches;", "question_pauq": {"ru": "\u041d\u0430\u0439\u0434\u0438\u0442\u0435 \u0441\u0440\u0435\u0434\u043d\u0438\u0439 \u0440\u0435\u0439\u0442\u0438\u043d\u0433 \u043f\u043e\u0431\u0435\u0434\u0438\u0442\u0435\u043b\u0435\u0439 \u0432\u043e \u0432\u0441\u0435\u0445 \u043c\u0430\u0442\u0447\u0430\u0445."}, "question": "Find the average rank of winners in all matches.", "kb_id": "wta_1"}, {"id": "D_0439", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT avg(winner_rank) FROM matches;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[5, [0, [0, 35, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[5, [0, [0, 35, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "average", "rank", "for", "winners", "in", "all", "matches", "?"], "ru": ["\u041a\u0430\u043a\u043e\u0432", "\u0441\u0440\u0435\u0434\u043d\u0438\u0439", "\u0440\u0435\u0439\u0442\u0438\u043d\u0433", "\u043f\u043e\u0431\u0435\u0434\u0438\u0442\u0435\u043b\u0435\u0439", "\u0432\u043e", "\u0432\u0441\u0435\u0445", "\u043c\u0430\u0442\u0447\u0430\u0445", "?"]}, "query_toks": {"en": ["select", "avg", "(", "winner_rank", ")", "from", "matches", ";"], "ru": ["select", "avg", "(", "winner_rank", ")", "from", "matches", ";"]}, "query_toks_no_values": {"en": ["select", "avg", "(", "winner_rank", ")", "from", "matches", ";"], "ru": ["select", "avg", "(", "winner_rank", ")", "from", "matches", ";"]}, "masked_query": "SELECT avg(winner_rank) FROM matches;", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0432 \u0441\u0440\u0435\u0434\u043d\u0438\u0439 \u0440\u0435\u0439\u0442\u0438\u043d\u0433 \u043f\u043e\u0431\u0435\u0434\u0438\u0442\u0435\u043b\u0435\u0439 \u0432\u043e \u0432\u0441\u0435\u0445 \u043c\u0430\u0442\u0447\u0430\u0445?"}, "question": "What is the average rank for winners in all matches?", "kb_id": "wta_1"}, {"id": "D_0440", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT min(loser_rank) FROM matches;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[2, [0, [0, 16, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[2, [0, [0, 16, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Find", "the", "highest", "rank", "of", "losers", "in", "all", "matches", "."], "ru": ["\u0421\u0430\u043c\u044b\u0439", "\u0432\u044b\u0441\u043e\u043a\u0438\u0439", "\u0440\u0435\u0439\u0442\u0438\u043d\u0433", "\u043f\u0440\u043e\u0438\u0433\u0440\u0430\u0432\u0448\u0438\u0445", "\u0432\u043e", "\u0432\u0441\u0435\u0445", "\u043c\u0430\u0442\u0447\u0430\u0445", "."]}, "query_toks": {"en": ["select", "min", "(", "loser_rank", ")", "from", "matches", ";"], "ru": ["select", "min", "(", "loser_rank", ")", "from", "matches", ";"]}, "query_toks_no_values": {"en": ["select", "min", "(", "loser_rank", ")", "from", "matches", ";"], "ru": ["select", "min", "(", "loser_rank", ")", "from", "matches", ";"]}, "masked_query": "SELECT min(loser_rank) FROM matches;", "question_pauq": {"ru": "\u0421\u0430\u043c\u044b\u0439 \u0432\u044b\u0441\u043e\u043a\u0438\u0439 \u0440\u0435\u0439\u0442\u0438\u043d\u0433 \u043f\u0440\u043e\u0438\u0433\u0440\u0430\u0432\u0448\u0438\u0445 \u0432\u043e \u0432\u0441\u0435\u0445 \u043c\u0430\u0442\u0447\u0430\u0445."}, "question": "Find the highest rank of losers in all matches.", "kb_id": "wta_1"}, {"id": "D_0441", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT min(loser_rank) FROM matches;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[2, [0, [0, 16, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[2, [0, [0, 16, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "best", "rank", "of", "losers", "across", "all", "matches", "?"], "ru": ["\u041a\u0430\u043a\u043e\u0439", "\u0441\u0430\u043c\u044b\u0439", "\u043b\u0443\u0447\u0448\u0438\u0439", "\u0440\u0435\u0439\u0442\u0438\u043d\u0433", "\u043f\u0440\u043e\u0438\u0433\u0440\u0430\u0432\u0448\u0438\u0445", "\u0432\u043e", "\u0432\u0441\u0435\u0445", "\u043c\u0430\u0442\u0447\u0430\u0445", "?"]}, "query_toks": {"en": ["select", "min", "(", "loser_rank", ")", "from", "matches", ";"], "ru": ["select", "min", "(", "loser_rank", ")", "from", "matches", ";"]}, "query_toks_no_values": {"en": ["select", "min", "(", "loser_rank", ")", "from", "matches", ";"], "ru": ["select", "min", "(", "loser_rank", ")", "from", "matches", ";"]}, "masked_query": "SELECT min(loser_rank) FROM matches;", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0439 \u0441\u0430\u043c\u044b\u0439 \u043b\u0443\u0447\u0448\u0438\u0439 \u0440\u0435\u0439\u0442\u0438\u043d\u0433 \u043f\u0440\u043e\u0438\u0433\u0440\u0430\u0432\u0448\u0438\u0445 \u0432\u043e \u0432\u0441\u0435\u0445 \u043c\u0430\u0442\u0447\u0430\u0445?"}, "question": "What is the best rank of losers across all matches?", "kb_id": "wta_1"}, {"id": "D_0442", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT count(DISTINCT country_code) FROM players;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[3, [0, [0, 6, true], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[3, [0, [0, 6, true], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["find", "the", "number", "of", "distinct", "country", "codes", "of", "all", "players", "."], "ru": ["\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e", "\u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445", "\u043a\u043e\u0434\u043e\u0432", "\u0441\u0442\u0440\u0430\u043d", "\u0432\u0441\u0435\u0445", "\u0438\u0433\u0440\u043e\u043a\u043e\u0432", "."]}, "query_toks": {"en": ["select", "count", "(", "distinct", "country_code", ")", "from", "players", ";"], "ru": ["select", "count", "(", "distinct", "country_code", ")", "from", "players", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "distinct", "country_code", ")", "from", "players", ";"], "ru": ["select", "count", "(", "distinct", "country_code", ")", "from", "players", ";"]}, "masked_query": "SELECT count(DISTINCT country_code) FROM players;", "question_pauq": {"ru": "\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u043a\u043e\u0434\u043e\u0432 \u0441\u0442\u0440\u0430\u043d \u0432\u0441\u0435\u0445 \u0438\u0433\u0440\u043e\u043a\u043e\u0432."}, "question": "find the number of distinct country codes of all players.", "kb_id": "wta_1"}, {"id": "D_0443", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT count(DISTINCT country_code) FROM players;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[3, [0, [0, 6, true], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[3, [0, [0, 6, true], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["How", "many", "distinct", "countries", "do", "players", "come", "from", "?"], "ru": ["\u0418\u0437", "\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445", "\u0440\u0430\u0437\u043d\u044b\u0445", "\u0441\u0442\u0440\u0430\u043d", "\u0432\u0441\u0435", "\u0438\u0433\u0440\u043e\u043a\u0438", "?"]}, "query_toks": {"en": ["select", "count", "(", "distinct", "country_code", ")", "from", "players", ";"], "ru": ["select", "count", "(", "distinct", "country_code", ")", "from", "players", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "distinct", "country_code", ")", "from", "players", ";"], "ru": ["select", "count", "(", "distinct", "country_code", ")", "from", "players", ";"]}, "masked_query": "SELECT count(DISTINCT country_code) FROM players;", "question_pauq": {"ru": "\u0418\u0437 \u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0440\u0430\u0437\u043d\u044b\u0445 \u0441\u0442\u0440\u0430\u043d \u0432\u0441\u0435 \u0438\u0433\u0440\u043e\u043a\u0438?"}, "question": "How many distinct countries do players come from?", "kb_id": "wta_1"}, {"id": "D_0444", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT count(DISTINCT loser_name) FROM matches;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[3, [0, [0, 15, true], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[3, [0, [0, 15, true], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Find", "the", "number", "of", "distinct", "name", "of", "losers", "."], "ru": ["\u041d\u0430\u0439\u0434\u0438\u0442\u0435", "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e", "\u043e\u0442\u043b\u0438\u0447\u043d\u044b\u0445", "\u0438\u043c\u0435\u043d", "\u043f\u0440\u043e\u0438\u0433\u0440\u0430\u0432\u0448\u0438\u0445", "."]}, "query_toks": {"en": ["select", "count", "(", "distinct", "loser_name", ")", "from", "matches", ";"], "ru": ["select", "count", "(", "distinct", "loser_name", ")", "from", "matches", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "distinct", "loser_name", ")", "from", "matches", ";"], "ru": ["select", "count", "(", "distinct", "loser_name", ")", "from", "matches", ";"]}, "masked_query": "SELECT count(DISTINCT loser_name) FROM matches;", "question_pauq": {"ru": "\u041d\u0430\u0439\u0434\u0438\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0442\u043b\u0438\u0447\u043d\u044b\u0445 \u0438\u043c\u0435\u043d \u043f\u0440\u043e\u0438\u0433\u0440\u0430\u0432\u0448\u0438\u0445."}, "question": "Find the number of distinct name of losers.", "kb_id": "wta_1"}, {"id": "D_0445", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT count(DISTINCT loser_name) FROM matches;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[3, [0, [0, 15, true], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[3, [0, [0, 15, true], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["How", "many", "different", "loser", "names", "are", "there", "?"], "ru": ["\u0421\u043a\u043e\u043b\u044c\u043a\u043e", "\u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442", "\u0440\u0430\u0437\u043d\u044b\u0445", "\u0438\u043c\u0435\u043d", "\u043f\u0440\u043e\u0438\u0433\u0440\u0430\u0432\u0448\u0438\u0445", "?"]}, "query_toks": {"en": ["select", "count", "(", "distinct", "loser_name", ")", "from", "matches", ";"], "ru": ["select", "count", "(", "distinct", "loser_name", ")", "from", "matches", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "distinct", "loser_name", ")", "from", "matches", ";"], "ru": ["select", "count", "(", "distinct", "loser_name", ")", "from", "matches", ";"]}, "masked_query": "SELECT count(DISTINCT loser_name) FROM matches;", "question_pauq": {"ru": "\u0421\u043a\u043e\u043b\u044c\u043a\u043e \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442 \u0440\u0430\u0437\u043d\u044b\u0445 \u0438\u043c\u0435\u043d \u043f\u0440\u043e\u0438\u0433\u0440\u0430\u0432\u0448\u0438\u0445?"}, "question": "How many different loser names are there?", "kb_id": "wta_1"}, {"id": "D_0446", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 27, false], null]]]], "where": [], "groupBy": [[0, 27, false]], "having": [[false, 3, [0, [3, 0, false], null], 10.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 27, false], null]]]], "where": [], "groupBy": [[0, 27, false]], "having": [[false, 3, [0, [3, 0, false], null], 10.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Find", "the", "name", "of", "tourney", "that", "has", "more", "than", "10", "matches", "."], "ru": ["\u041d\u0430\u0439\u0434\u0438", "\u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435", "\u0442\u0443\u0440\u043d\u0438\u0440\u0430", ",", "\u0432", "\u043a\u043e\u0442\u043e\u0440\u043e\u043c", "\u0431\u043e\u043b\u044c\u0448\u0435", "10", "\u043c\u0430\u0442\u0447\u0435\u0439", "."]}, "query_toks": {"en": ["select", "tourney_name", "from", "matches", "group", "by", "tourney_name", "having", "count", "(", "*", ")", ">", "10", ";"], "ru": ["select", "tourney_name", "from", "matches", "group", "by", "tourney_name", "having", "count", "(", "*", ")", ">", "10", ";"]}, "query_toks_no_values": {"en": ["select", "tourney_name", "from", "matches", "group", "by", "tourney_name", "having", "count", "(", "*", ")", ">", "10", ";"], "ru": ["select", "tourney_name", "from", "matches", "group", "by", "tourney_name", "having", "count", "(", "*", ")", ">", "10", ";"]}, "masked_query": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10;", "question_pauq": {"ru": "\u041d\u0430\u0439\u0434\u0438 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u0442\u0443\u0440\u043d\u0438\u0440\u0430, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u0431\u043e\u043b\u044c\u0448\u0435 10 \u043c\u0430\u0442\u0447\u0435\u0439."}, "question": "Find the name of tourney that has more than 10 matches.", "kb_id": "wta_1"}, {"id": "D_0447", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 27, false], null]]]], "where": [], "groupBy": [[0, 27, false]], "having": [[false, 3, [0, [3, 0, false], null], 10.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 27, false], null]]]], "where": [], "groupBy": [[0, 27, false]], "having": [[false, 3, [0, [3, 0, false], null], 10.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "the", "names", "of", "tournaments", "that", "have", "more", "than", "10", "matches", "?"], "ru": ["\u041a\u0430\u043a", "\u043d\u0430\u0437\u044b\u0432\u0430\u044e\u0442\u0441\u044f", "\u0442\u0443\u0440\u043d\u0438\u0440\u044b", ",", "\u0432", "\u043a\u043e\u0442\u043e\u0440\u044b\u0445", "\u0431\u043e\u043b\u044c\u0448\u0435", "10", "\u043c\u0430\u0442\u0447\u0435\u0439", "?"]}, "query_toks": {"en": ["select", "tourney_name", "from", "matches", "group", "by", "tourney_name", "having", "count", "(", "*", ")", ">", "10", ";"], "ru": ["select", "tourney_name", "from", "matches", "group", "by", "tourney_name", "having", "count", "(", "*", ")", ">", "10", ";"]}, "query_toks_no_values": {"en": ["select", "tourney_name", "from", "matches", "group", "by", "tourney_name", "having", "count", "(", "*", ")", ">", "10", ";"], "ru": ["select", "tourney_name", "from", "matches", "group", "by", "tourney_name", "having", "count", "(", "*", ")", ">", "10", ";"]}, "masked_query": "SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10;", "question_pauq": {"ru": "\u041a\u0430\u043a \u043d\u0430\u0437\u044b\u0432\u0430\u044e\u0442\u0441\u044f \u0442\u0443\u0440\u043d\u0438\u0440\u044b, \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0431\u043e\u043b\u044c\u0448\u0435 10 \u043c\u0430\u0442\u0447\u0435\u0439?"}, "question": "What are the names of tournaments that have more than 10 matches?", "kb_id": "wta_1"}, {"id": "D_0448", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 34, false], null]]]], "where": [[false, 2, [0, [0, 38, false], null], 2013.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 34, false], null]]]], "where": [[false, 2, [0, [0, 38, false], null], 2016.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 34, false], null]]]], "where": [[false, 2, [0, [0, 38, false], null], 2013.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 34, false], null]]]], "where": [[false, 2, [0, [0, 38, false], null], 2016.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "union": null, "except": null}}, "question_toks": {"en": ["List", "the", "names", "of", "all", "winners", "who", "played", "in", "both", "2013", "and", "2016", "."], "ru": ["\u041f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0438\u0442\u0435", "\u0438\u043c\u0435\u043d\u0430", "\u0432\u0441\u0435\u0445", "\u043f\u043e\u0431\u0435\u0434\u0438\u0442\u0435\u043b\u0435\u0439", ",", "\u0438\u0433\u0440\u0430\u0432\u0448\u0438\u0445", "\u0432", "2013", "\u0438", "2016", "\u0433\u043e\u0434\u0430\u0445", "."]}, "query_toks": {"en": ["select", "winner_name", "from", "matches", "where", "year", "=", "2013", "intersect", "select", "winner_name", "from", "matches", "where", "year", "=", "2016", ";"], "ru": ["select", "winner_name", "from", "matches", "where", "year", "=", "2013", "intersect", "select", "winner_name", "from", "matches", "where", "year", "=", "2016", ";"]}, "query_toks_no_values": {"en": ["select", "winner_name", "from", "matches", "where", "year", "=", "2013", "intersect", "select", "winner_name", "from", "matches", "where", "year", "=", "2016", ";"], "ru": ["select", "winner_name", "from", "matches", "where", "year", "=", "2013", "intersect", "select", "winner_name", "from", "matches", "where", "year", "=", "2016", ";"]}, "masked_query": "SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016;", "question_pauq": {"ru": "\u041f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0438\u0442\u0435 \u0438\u043c\u0435\u043d\u0430 \u0432\u0441\u0435\u0445 \u043f\u043e\u0431\u0435\u0434\u0438\u0442\u0435\u043b\u0435\u0439, \u0438\u0433\u0440\u0430\u0432\u0448\u0438\u0445 \u0432 2013 \u0438 2016 \u0433\u043e\u0434\u0430\u0445."}, "question": "List the names of all winners who played in both 2013 and 2016.", "kb_id": "wta_1"}, {"id": "D_0449", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 34, false], null]]]], "where": [[false, 2, [0, [0, 38, false], null], 2013.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 34, false], null]]]], "where": [[false, 2, [0, [0, 38, false], null], 2016.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 34, false], null]]]], "where": [[false, 2, [0, [0, 38, false], null], 2013.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 34, false], null]]]], "where": [[false, 2, [0, [0, 38, false], null], 2016.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "the", "names", "of", "players", "who", "won", "in", "both", "2013", "and", "2016", "?"], "ru": ["\u041a\u0430\u043a", "\u0437\u043e\u0432\u0443\u0442", "\u0438\u0433\u0440\u043e\u043a\u043e\u0432", ",", "\u043f\u043e\u0431\u0435\u0434\u0438\u0432\u0448\u0438\u0445", "\u0432", "2013", "\u0438", "2016", "\u0433\u043e\u0434\u0430\u0445", "?"]}, "query_toks": {"en": ["select", "winner_name", "from", "matches", "where", "year", "=", "2013", "intersect", "select", "winner_name", "from", "matches", "where", "year", "=", "2016", ";"], "ru": ["select", "winner_name", "from", "matches", "where", "year", "=", "2013", "intersect", "select", "winner_name", "from", "matches", "where", "year", "=", "2016", ";"]}, "query_toks_no_values": {"en": ["select", "winner_name", "from", "matches", "where", "year", "=", "2013", "intersect", "select", "winner_name", "from", "matches", "where", "year", "=", "2016", ";"], "ru": ["select", "winner_name", "from", "matches", "where", "year", "=", "2013", "intersect", "select", "winner_name", "from", "matches", "where", "year", "=", "2016", ";"]}, "masked_query": "SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016;", "question_pauq": {"ru": "\u041a\u0430\u043a \u0437\u043e\u0432\u0443\u0442 \u0438\u0433\u0440\u043e\u043a\u043e\u0432, \u043f\u043e\u0431\u0435\u0434\u0438\u0432\u0448\u0438\u0445 \u0432 2013 \u0438 2016 \u0433\u043e\u0434\u0430\u0445?"}, "question": "What are the names of players who won in both 2013 and 2016?", "kb_id": "wta_1"}, {"id": "D_0450", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 38, false], null], 2013.0, null], "or", [false, 2, [0, [0, 38, false], null], 2016.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 38, false], null], 2013.0, null], "or", [false, 2, [0, [0, 38, false], null], 2016.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["List", "the", "number", "of", "all", "matches", "who", "played", "in", "years", "of", "2013", "or", "2016", "."], "ru": ["\u0423\u043a\u0430\u0436\u0438\u0442\u0435", "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e", "\u0432\u0441\u0435\u0445", "\u043c\u0430\u0442\u0447\u0435\u0439", ",", "\u0441\u044b\u0433\u0440\u0430\u043d\u043d\u044b\u0445", "\u0432", "2013", "\u0438\u043b\u0438", "2016", "\u0433\u043e\u0434\u0430\u0445", "."]}, "query_toks": {"en": ["select", "count", "(", "*", ")", "from", "matches", "where", "year", "=", "2013", "or", "year", "=", "2016", ";"], "ru": ["select", "count", "(", "*", ")", "from", "matches", "where", "year", "=", "2013", "or", "year", "=", "2016", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "*", ")", "from", "matches", "where", "year", "=", "2013", "or", "year", "=", "2016", ";"], "ru": ["select", "count", "(", "*", ")", "from", "matches", "where", "year", "=", "2013", "or", "year", "=", "2016", ";"]}, "masked_query": "SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016;", "question_pauq": {"ru": "\u0423\u043a\u0430\u0436\u0438\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u0441\u0435\u0445 \u043c\u0430\u0442\u0447\u0435\u0439, \u0441\u044b\u0433\u0440\u0430\u043d\u043d\u044b\u0445 \u0432 2013 \u0438\u043b\u0438 2016 \u0433\u043e\u0434\u0430\u0445."}, "question": "List the number of all matches who played in years of 2013 or 2016.", "kb_id": "wta_1"}, {"id": "D_0451", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 38, false], null], 2013.0, null], "or", [false, 2, [0, [0, 38, false], null], 2016.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 38, false], null], 2013.0, null], "or", [false, 2, [0, [0, 38, false], null], 2016.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["How", "many", "matches", "were", "played", "in", "2013", "or", "2016", "?"], "ru": ["\u0421\u043a\u043e\u043b\u044c\u043a\u043e", "\u043c\u0430\u0442\u0447\u0435\u0439", "\u0431\u044b\u043b\u043e", "\u0441\u044b\u0433\u0440\u0430\u043d\u043e", "\u0432", "2013", "\u0438\u043b\u0438", "2016", "?"]}, "query_toks": {"en": ["select", "count", "(", "*", ")", "from", "matches", "where", "year", "=", "2013", "or", "year", "=", "2016", ";"], "ru": ["select", "count", "(", "*", ")", "from", "matches", "where", "year", "=", "2013", "or", "year", "=", "2016", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "*", ")", "from", "matches", "where", "year", "=", "2013", "or", "year", "=", "2016", ";"], "ru": ["select", "count", "(", "*", ")", "from", "matches", "where", "year", "=", "2013", "or", "year", "=", "2016", ";"]}, "masked_query": "SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016;", "question_pauq": {"ru": "\u0421\u043a\u043e\u043b\u044c\u043a\u043e \u043c\u0430\u0442\u0447\u0435\u0439 \u0431\u044b\u043b\u043e \u0441\u044b\u0433\u0440\u0430\u043d\u043e \u0432 2013 \u0438\u043b\u0438 2016?"}, "question": "How many matches were played in 2013 or 2016?", "kb_id": "wta_1"}, {"id": "D_0452", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  '\u0427\u0435\u043c\u043f\u0438\u043e\u043d\u0430\u0442 \u043f\u043e \u0444\u0440\u0438\u0441\u0431\u0438' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  '\u0420\u043e\u0441\u0441\u0438\u044f \u041f\u0435\u0440\u0432\u0430\u044f';"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 32, false], null]]}, "select": [false, [[0, [0, [0, 6, false], null]], [0, [0, [0, 2, false], null]]]], "where": [[false, 2, [0, [0, 27, false], null], "\"WTA Championships\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": {"from": {"table_units": [["table_unit", 0], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 32, false], null]]}, "select": [false, [[0, [0, [0, 6, false], null]], [0, [0, [0, 2, false], null]]]], "where": [[false, 2, [0, [0, 27, false], null], "\"Australian Open\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 32, false], null]]}, "select": [false, [[0, [0, [0, 6, false], null]], [0, [0, [0, 2, false], null]]]], "where": [[false, 2, [0, [0, 27, false], null], "\"\u0427\u0435\u043c\u043f\u0438\u043e\u043d\u0430\u0442 \u043f\u043e \u0444\u0440\u0438\u0441\u0431\u0438\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": {"from": {"table_units": [["table_unit", 0], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 32, false], null]]}, "select": [false, [[0, [0, [0, 6, false], null]], [0, [0, [0, 2, false], null]]]], "where": [[false, 2, [0, [0, 27, false], null], "\"\u0420\u043e\u0441\u0441\u0438\u044f \u041f\u0435\u0440\u0432\u0430\u044f\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "the", "country", "code", "and", "first", "name", "of", "the", "players", "who", "won", "in", "both", "tourney", "WTA", "Championships", "and", "Australian", "Open", "?"], "ru": ["\u041a\u0430\u043a\u043e\u0432\u044b", "\u043a\u043e\u0434\u044b", "\u0441\u0442\u0440\u0430\u043d\u044b", "\u0438", "\u0438\u043c\u0435\u043d\u0430", "\u0438\u0433\u0440\u043e\u043a\u043e\u0432", ",", "\u043f\u043e\u0431\u0435\u0434\u0438\u0432\u0448\u0438\u0445", "\u0432", "\u0442\u0443\u0440\u043d\u0438\u0440\u0430\u0445", "\u0447\u0435\u043c\u043f\u0438\u043e\u043d\u0430\u0442\u0430", "\u043f\u043e", "\u0444\u0440\u0438\u0441\u0431\u0438", "\u0438", "\u0420\u043e\u0441\u0441\u0438\u044f", "\u041f\u0435\u0440\u0432\u0430\u044f", "?"]}, "query_toks": {"en": ["select", "t1.country_code", ",", "t1.first_name", "from", "players", "as", "t1", "join", "matches", "as", "t2", "on", "t1.player_id", "=", "t2.winner_id", "where", "t2.tourney_name", "=", "\"WTA Championships\"", "intersect", "select", "t1.country_code", ",", "t1.first_name", "from", "players", "as", "t1", "join", "matches", "as", "t2", "on", "t1.player_id", "=", "t2.winner_id", "where", "t2.tourney_name", "=", "\"Australian Open\"", ";"], "ru": ["select", "t1.country_code", ",", "t1.first_name", "from", "players", "as", "t1", "join", "matches", "as", "t2", "on", "t1.player_id", "=", "t2.winner_id", "where", "t2.tourney_name", "=", "\"\u0427\u0435\u043c\u043f\u0438\u043e\u043d\u0430\u0442 \u043f\u043e \u0444\u0440\u0438\u0441\u0431\u0438\"", "intersect", "select", "t1.country_code", ",", "t1.first_name", "from", "players", "as", "t1", "join", "matches", "as", "t2", "on", "t1.player_id", "=", "t2.winner_id", "where", "t2.tourney_name", "=", "\"\u0420\u043e\u0441\u0441\u0438\u044f \u041f\u0435\u0440\u0432\u0430\u044f\"", ";"]}, "query_toks_no_values": {"en": ["select", "t1.country_code", ",", "t1.first_name", "from", "players", "as", "t1", "join", "matches", "as", "t2", "on", "t1.player_id", "=", "t2.winner_id", "where", "t2.tourney_name", "=", "value", "intersect", "select", "t1.country_code", ",", "t1.first_name", "from", "players", "as", "t1", "join", "matches", "as", "t2", "on", "t1.player_id", "=", "t2.winner_id", "where", "t2.tourney_name", "=", "value", ";"], "ru": ["select", "t1.country_code", ",", "t1.first_name", "from", "players", "as", "t1", "join", "matches", "as", "t2", "on", "t1.player_id", "=", "t2.winner_id", "where", "t2.tourney_name", "=", "value", "intersect", "select", "t1.country_code", ",", "t1.first_name", "from", "players", "as", "t1", "join", "matches", "as", "t2", "on", "t1.player_id", "=", "t2.winner_id", "where", "t2.tourney_name", "=", "value", ";"]}, "masked_query": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open';", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0432\u044b \u043a\u043e\u0434\u044b \u0441\u0442\u0440\u0430\u043d\u044b \u0438 \u0438\u043c\u0435\u043d\u0430 \u0438\u0433\u0440\u043e\u043a\u043e\u0432, \u043f\u043e\u0431\u0435\u0434\u0438\u0432\u0448\u0438\u0445 \u0432 \u0442\u0443\u0440\u043d\u0438\u0440\u0430\u0445 \u0447\u0435\u043c\u043f\u0438\u043e\u043d\u0430\u0442\u0430 \u043f\u043e \u0444\u0440\u0438\u0441\u0431\u0438 \u0438 \u0420\u043e\u0441\u0441\u0438\u044f \u041f\u0435\u0440\u0432\u0430\u044f?"}, "question": "What are the country code and first name of the players who won in both tourney WTA Championships and Australian Open?", "kb_id": "wta_1"}, {"id": "D_0453", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  '\u0427\u0435\u043c\u043f\u0438\u043e\u043d\u0430\u0442 \u043f\u043e \u0444\u0440\u0438\u0441\u0431\u0438' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  '\u0420\u043e\u0441\u0441\u0438\u044f \u041f\u0435\u0440\u0432\u0430\u044f';"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 32, false], null]]}, "select": [false, [[0, [0, [0, 6, false], null]], [0, [0, [0, 2, false], null]]]], "where": [[false, 2, [0, [0, 27, false], null], "\"WTA Championships\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": {"from": {"table_units": [["table_unit", 0], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 32, false], null]]}, "select": [false, [[0, [0, [0, 6, false], null]], [0, [0, [0, 2, false], null]]]], "where": [[false, 2, [0, [0, 27, false], null], "\"Australian Open\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 32, false], null]]}, "select": [false, [[0, [0, [0, 6, false], null]], [0, [0, [0, 2, false], null]]]], "where": [[false, 2, [0, [0, 27, false], null], "\"\u0427\u0435\u043c\u043f\u0438\u043e\u043d\u0430\u0442 \u043f\u043e \u0444\u0440\u0438\u0441\u0431\u0438\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": {"from": {"table_units": [["table_unit", 0], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 32, false], null]]}, "select": [false, [[0, [0, [0, 6, false], null]], [0, [0, [0, 2, false], null]]]], "where": [[false, 2, [0, [0, 27, false], null], "\"\u0420\u043e\u0441\u0441\u0438\u044f \u041f\u0435\u0440\u0432\u0430\u044f\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "the", "first", "names", "and", "country", "codes", "for", "players", "who", "won", "both", "the", "WTA", "Championships", "and", "the", "Australian", "Open", "?"], "ru": ["\u041a\u0430\u043a\u0438\u0435", "\u0438\u043c\u0435\u043d\u0430", "\u0438", "\u043a\u043e\u0434\u044b", "\u0441\u0442\u0440\u0430\u043d", "\u0443", "\u0438\u0433\u0440\u043e\u043a\u043e\u0432", ",", "\u0432\u044b\u0438\u0433\u0440\u0430\u0432\u0448\u0438\u0445", "\u0432", "\u0447\u0435\u043c\u043f\u0438\u043e\u043d\u0430\u0442\u0435", "\u043f\u043e", "\u0444\u0440\u0438\u0441\u0431\u0438", "\u0438", "\u0432", "\u0420\u043e\u0441\u0441\u0438\u044f", "\u041f\u0435\u0440\u0432\u0430\u044f", "?"]}, "query_toks": {"en": ["select", "t1.country_code", ",", "t1.first_name", "from", "players", "as", "t1", "join", "matches", "as", "t2", "on", "t1.player_id", "=", "t2.winner_id", "where", "t2.tourney_name", "=", "\"WTA Championships\"", "intersect", "select", "t1.country_code", ",", "t1.first_name", "from", "players", "as", "t1", "join", "matches", "as", "t2", "on", "t1.player_id", "=", "t2.winner_id", "where", "t2.tourney_name", "=", "\"Australian Open\"", ";"], "ru": ["select", "t1.country_code", ",", "t1.first_name", "from", "players", "as", "t1", "join", "matches", "as", "t2", "on", "t1.player_id", "=", "t2.winner_id", "where", "t2.tourney_name", "=", "\"\u0427\u0435\u043c\u043f\u0438\u043e\u043d\u0430\u0442 \u043f\u043e \u0444\u0440\u0438\u0441\u0431\u0438\"", "intersect", "select", "t1.country_code", ",", "t1.first_name", "from", "players", "as", "t1", "join", "matches", "as", "t2", "on", "t1.player_id", "=", "t2.winner_id", "where", "t2.tourney_name", "=", "\"\u0420\u043e\u0441\u0441\u0438\u044f \u041f\u0435\u0440\u0432\u0430\u044f\"", ";"]}, "query_toks_no_values": {"en": ["select", "t1.country_code", ",", "t1.first_name", "from", "players", "as", "t1", "join", "matches", "as", "t2", "on", "t1.player_id", "=", "t2.winner_id", "where", "t2.tourney_name", "=", "value", "intersect", "select", "t1.country_code", ",", "t1.first_name", "from", "players", "as", "t1", "join", "matches", "as", "t2", "on", "t1.player_id", "=", "t2.winner_id", "where", "t2.tourney_name", "=", "value", ";"], "ru": ["select", "t1.country_code", ",", "t1.first_name", "from", "players", "as", "t1", "join", "matches", "as", "t2", "on", "t1.player_id", "=", "t2.winner_id", "where", "t2.tourney_name", "=", "value", "intersect", "select", "t1.country_code", ",", "t1.first_name", "from", "players", "as", "t1", "join", "matches", "as", "t2", "on", "t1.player_id", "=", "t2.winner_id", "where", "t2.tourney_name", "=", "value", ";"]}, "masked_query": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open';", "question_pauq": {"ru": "\u041a\u0430\u043a\u0438\u0435 \u0438\u043c\u0435\u043d\u0430 \u0438 \u043a\u043e\u0434\u044b \u0441\u0442\u0440\u0430\u043d \u0443 \u0438\u0433\u0440\u043e\u043a\u043e\u0432, \u0432\u044b\u0438\u0433\u0440\u0430\u0432\u0448\u0438\u0445 \u0432 \u0447\u0435\u043c\u043f\u0438\u043e\u043d\u0430\u0442\u0435 \u043f\u043e \u0444\u0440\u0438\u0441\u0431\u0438 \u0438 \u0432 \u0420\u043e\u0441\u0441\u0438\u044f \u041f\u0435\u0440\u0432\u0430\u044f?"}, "question": "What are the first names and country codes for players who won both the WTA Championships and the Australian Open?", "kb_id": "wta_1"}, {"id": "D_0454", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 2, false], null]], [0, [0, [0, 6, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["asc", [[0, [0, 5, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 2, false], null]], [0, [0, [0, 6, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["asc", [[0, [0, 5, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Find", "the", "first", "name", "and", "country", "code", "of", "the", "oldest", "player", "."], "ru": ["\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c", "\u0438\u043c\u044f", "\u0438", "\u043a\u043e\u0434", "\u0441\u0442\u0440\u0430\u043d\u044b", "\u0441\u0430\u043c\u043e\u0433\u043e", "\u0441\u0442\u0430\u0440\u043e\u0433\u043e", "\u0438\u0433\u0440\u043e\u043a\u0430", "."]}, "query_toks": {"en": ["select", "first_name", ",", "country_code", "from", "players", "order", "by", "birth_date", "limit", "1", ";"], "ru": ["select", "first_name", ",", "country_code", "from", "players", "order", "by", "birth_date", "limit", "1", ";"]}, "query_toks_no_values": {"en": ["select", "first_name", ",", "country_code", "from", "players", "order", "by", "birth_date", "limit", "1", ";"], "ru": ["select", "first_name", ",", "country_code", "from", "players", "order", "by", "birth_date", "limit", "1", ";"]}, "masked_query": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1;", "question_pauq": {"ru": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0438\u043c\u044f \u0438 \u043a\u043e\u0434 \u0441\u0442\u0440\u0430\u043d\u044b \u0441\u0430\u043c\u043e\u0433\u043e \u0441\u0442\u0430\u0440\u043e\u0433\u043e \u0438\u0433\u0440\u043e\u043a\u0430."}, "question": "Find the first name and country code of the oldest player.", "kb_id": "wta_1"}, {"id": "D_0455", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 2, false], null]], [0, [0, [0, 6, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["asc", [[0, [0, 5, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 2, false], null]], [0, [0, [0, 6, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["asc", [[0, [0, 5, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "first", "name", "and", "country", "code", "of", "the", "oldest", "player", "?"], "ru": ["\u041a\u0430\u043a\u043e\u0435", "\u0438\u043c\u044f", "\u0438", "\u043a\u043e\u0434", "\u0441\u0442\u0440\u0430\u043d\u044b", "\u0443", "\u0441\u0430\u043c\u043e\u0433\u043e", "\u0441\u0442\u0430\u0440\u043e\u0433\u043e", "\u0438\u0433\u0440\u043e\u043a\u0430", "?"]}, "query_toks": {"en": ["select", "first_name", ",", "country_code", "from", "players", "order", "by", "birth_date", "limit", "1", ";"], "ru": ["select", "first_name", ",", "country_code", "from", "players", "order", "by", "birth_date", "limit", "1", ";"]}, "query_toks_no_values": {"en": ["select", "first_name", ",", "country_code", "from", "players", "order", "by", "birth_date", "limit", "1", ";"], "ru": ["select", "first_name", ",", "country_code", "from", "players", "order", "by", "birth_date", "limit", "1", ";"]}, "masked_query": "SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1;", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0435 \u0438\u043c\u044f \u0438 \u043a\u043e\u0434 \u0441\u0442\u0440\u0430\u043d\u044b \u0443 \u0441\u0430\u043c\u043e\u0433\u043e \u0441\u0442\u0430\u0440\u043e\u0433\u043e \u0438\u0433\u0440\u043e\u043a\u0430?"}, "question": "What is the first name and country code of the oldest player?", "kb_id": "wta_1"}, {"id": "D_0456", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT first_name ,  last_name FROM players ORDER BY birth_date;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 2, false], null]], [0, [0, [0, 3, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["asc", [[0, [0, 5, false], null]]], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 2, false], null]], [0, [0, [0, 3, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["asc", [[0, [0, 5, false], null]]], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["List", "the", "first", "and", "last", "name", "of", "all", "players", "in", "the", "order", "of", "birth", "date", "."], "ru": ["\u041e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0442\u044c", "\u0438\u043c\u0435\u043d\u0430", "\u0438", "\u0444\u0430\u043c\u0438\u043b\u0438\u0438", "\u0432\u0441\u0435\u0445", "\u0438\u0433\u0440\u043e\u043a\u043e\u0432", "\u0432", "\u043f\u043e\u0440\u044f\u0434\u043a\u0435", "\u0434\u0430\u0442\u044b", "\u0440\u043e\u0436\u0434\u0435\u043d\u0438\u044f", "."]}, "query_toks": {"en": ["select", "first_name", ",", "last_name", "from", "players", "order", "by", "birth_date", ";"], "ru": ["select", "first_name", ",", "last_name", "from", "players", "order", "by", "birth_date", ";"]}, "query_toks_no_values": {"en": ["select", "first_name", ",", "last_name", "from", "players", "order", "by", "birth_date", ";"], "ru": ["select", "first_name", ",", "last_name", "from", "players", "order", "by", "birth_date", ";"]}, "masked_query": "SELECT first_name ,  last_name FROM players ORDER BY birth_date;", "question_pauq": {"ru": "\u041e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0442\u044c \u0438\u043c\u0435\u043d\u0430 \u0438 \u0444\u0430\u043c\u0438\u043b\u0438\u0438 \u0432\u0441\u0435\u0445 \u0438\u0433\u0440\u043e\u043a\u043e\u0432 \u0432 \u043f\u043e\u0440\u044f\u0434\u043a\u0435 \u0434\u0430\u0442\u044b \u0440\u043e\u0436\u0434\u0435\u043d\u0438\u044f."}, "question": "List the first and last name of all players in the order of birth date.", "kb_id": "wta_1"}, {"id": "D_0457", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT first_name ,  last_name FROM players ORDER BY birth_date;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 2, false], null]], [0, [0, [0, 3, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["asc", [[0, [0, 5, false], null]]], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 2, false], null]], [0, [0, [0, 3, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["asc", [[0, [0, 5, false], null]]], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "the", "full", "names", "of", "all", "players", ",", "sorted", "by", "birth", "date", "?"], "ru": ["\u041a\u0430\u043a\u043e\u0432\u044b", "\u043f\u043e\u043b\u043d\u044b\u0435", "\u0438\u043c\u0435\u043d\u0430", "\u0432\u0441\u0435\u0445", "\u0438\u0433\u0440\u043e\u043a\u043e\u0432", ",", "\u043e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435", "\u043f\u043e", "\u0434\u0430\u0442\u0435", "\u0440\u043e\u0436\u0434\u0435\u043d\u0438\u044f", "?"]}, "query_toks": {"en": ["select", "first_name", ",", "last_name", "from", "players", "order", "by", "birth_date", ";"], "ru": ["select", "first_name", ",", "last_name", "from", "players", "order", "by", "birth_date", ";"]}, "query_toks_no_values": {"en": ["select", "first_name", ",", "last_name", "from", "players", "order", "by", "birth_date", ";"], "ru": ["select", "first_name", ",", "last_name", "from", "players", "order", "by", "birth_date", ";"]}, "masked_query": "SELECT first_name ,  last_name FROM players ORDER BY birth_date;", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0432\u044b \u043f\u043e\u043b\u043d\u044b\u0435 \u0438\u043c\u0435\u043d\u0430 \u0432\u0441\u0435\u0445 \u0438\u0433\u0440\u043e\u043a\u043e\u0432, \u043e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u043f\u043e \u0434\u0430\u0442\u0435 \u0440\u043e\u0436\u0434\u0435\u043d\u0438\u044f?"}, "question": "What are the full names of all players, sorted by birth date?", "kb_id": "wta_1"}, {"id": "D_0458", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT first_name ,  last_name FROM players WHERE hand  =  '\u041b' ORDER BY birth_date;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 2, false], null]], [0, [0, [0, 3, false], null]]]], "where": [[false, 2, [0, [0, 4, false], null], "\"L\"", null]], "groupBy": [], "having": [], "orderBy": ["asc", [[0, [0, 5, false], null]]], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 2, false], null]], [0, [0, [0, 3, false], null]]]], "where": [[false, 2, [0, [0, 4, false], null], "\"\u041b\"", null]], "groupBy": [], "having": [], "orderBy": ["asc", [[0, [0, 5, false], null]]], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["List", "the", "first", "and", "last", "name", "of", "all", "players", "who", "are", "left", "/", "L", "hand", "in", "the", "order", "of", "birth", "date", "."], "ru": ["\u041e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0442\u044c", "\u0438\u043c\u044f", "\u0438", "\u0444\u0430\u043c\u0438\u043b\u0438\u044e", "\u0432\u0441\u0435\u0445", "\u0438\u0433\u0440\u043e\u043a\u043e\u0432-\u043b\u0435\u0432\u0448\u0435\u0439", "\u0432", "\u043f\u043e\u0440\u044f\u0434\u043a\u0435", "\u0434\u0430\u0442\u044b", "\u0440\u043e\u0436\u0434\u0435\u043d\u0438\u044f", "."]}, "query_toks": {"en": ["select", "first_name", ",", "last_name", "from", "players", "where", "hand", "=", "\"L\"", "order", "by", "birth_date", ";"], "ru": ["select", "first_name", ",", "last_name", "from", "players", "where", "hand", "=", "\"\u041b\"", "order", "by", "birth_date", ";"]}, "query_toks_no_values": {"en": ["select", "first_name", ",", "last_name", "from", "players", "where", "hand", "=", "value", "order", "by", "birth_date", ";"], "ru": ["select", "first_name", ",", "last_name", "from", "players", "where", "hand", "=", "value", "order", "by", "birth_date", ";"]}, "masked_query": "SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date;", "question_pauq": {"ru": "\u041e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0442\u044c \u0438\u043c\u044f \u0438 \u0444\u0430\u043c\u0438\u043b\u0438\u044e \u0432\u0441\u0435\u0445 \u0438\u0433\u0440\u043e\u043a\u043e\u0432-\u043b\u0435\u0432\u0448\u0435\u0439 \u0432 \u043f\u043e\u0440\u044f\u0434\u043a\u0435 \u0434\u0430\u0442\u044b \u0440\u043e\u0436\u0434\u0435\u043d\u0438\u044f."}, "question": "List the first and last name of all players who are left / L hand in the order of birth date.", "kb_id": "wta_1"}, {"id": "D_0459", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT first_name ,  last_name FROM players WHERE hand  =  '\u041b' ORDER BY birth_date;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 2, false], null]], [0, [0, [0, 3, false], null]]]], "where": [[false, 2, [0, [0, 4, false], null], "\"L\"", null]], "groupBy": [], "having": [], "orderBy": ["asc", [[0, [0, 5, false], null]]], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 2, false], null]], [0, [0, [0, 3, false], null]]]], "where": [[false, 2, [0, [0, 4, false], null], "\"\u041b\"", null]], "groupBy": [], "having": [], "orderBy": ["asc", [[0, [0, 5, false], null]]], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "the", "full", "names", "of", "all", "left", "handed", "players", ",", "in", "order", "of", "birth", "date", "?"], "ru": ["\u041a\u0430\u043a\u043e\u0432\u044b", "\u043f\u043e\u043b\u043d\u044b\u0435", "\u0438\u043c\u0435\u043d\u0430", "\u0432\u0441\u0435\u0445", "\u0438\u0433\u0440\u043e\u043a\u043e\u0432-\u043b\u0435\u0432\u0448\u0435\u0439", "\u0432", "\u043f\u043e\u0440\u044f\u0434\u043a\u0435", "\u0434\u0430\u0442\u044b", "\u0440\u043e\u0436\u0434\u0435\u043d\u0438\u044f", "?"]}, "query_toks": {"en": ["select", "first_name", ",", "last_name", "from", "players", "where", "hand", "=", "\"L\"", "order", "by", "birth_date", ";"], "ru": ["select", "first_name", ",", "last_name", "from", "players", "where", "hand", "=", "\"\u041b\"", "order", "by", "birth_date", ";"]}, "query_toks_no_values": {"en": ["select", "first_name", ",", "last_name", "from", "players", "where", "hand", "=", "value", "order", "by", "birth_date", ";"], "ru": ["select", "first_name", ",", "last_name", "from", "players", "where", "hand", "=", "value", "order", "by", "birth_date", ";"]}, "masked_query": "SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date;", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0432\u044b \u043f\u043e\u043b\u043d\u044b\u0435 \u0438\u043c\u0435\u043d\u0430 \u0432\u0441\u0435\u0445 \u0438\u0433\u0440\u043e\u043a\u043e\u0432-\u043b\u0435\u0432\u0448\u0435\u0439 \u0432 \u043f\u043e\u0440\u044f\u0434\u043a\u0435 \u0434\u0430\u0442\u044b \u0440\u043e\u0436\u0434\u0435\u043d\u0438\u044f?"}, "question": "What are the full names of all left handed players, in order of birth date?", "kb_id": "wta_1"}, {"id": "D_0460", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 41, false], null]]}, "select": [false, [[0, [0, [0, 6, false], null]], [0, [0, [0, 2, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 43, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 41, false], null]]}, "select": [false, [[0, [0, [0, 6, false], null]], [0, [0, [0, 2, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 43, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Find", "the", "first", "name", "and", "country", "code", "of", "the", "player", "who", "did", "the", "most", "number", "of", "tours", "."], "ru": ["\u041d\u0430\u0439\u0434\u0438\u0442\u0435", "\u0438\u043c\u044f", "\u0438", "\u043a\u043e\u0434", "\u0441\u0442\u0440\u0430\u043d\u044b", "\u0438\u0433\u0440\u043e\u043a\u0430", ",", "\u0441\u043e\u0432\u0435\u0440\u0448\u0438\u0432\u0448\u0435\u0433\u043e", "\u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0435\u0435", "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e", "\u0442\u0443\u0440\u043e\u0432", "."]}, "query_toks": {"en": ["select", "t1.country_code", ",", "t1.first_name", "from", "players", "as", "t1", "join", "rankings", "as", "t2", "on", "t1.player_id", "=", "t2.player_id", "order", "by", "t2.tours", "desc", "limit", "1", ";"], "ru": ["select", "t1.country_code", ",", "t1.first_name", "from", "players", "as", "t1", "join", "rankings", "as", "t2", "on", "t1.player_id", "=", "t2.player_id", "order", "by", "t2.tours", "desc", "limit", "1", ";"]}, "query_toks_no_values": {"en": ["select", "t1.country_code", ",", "t1.first_name", "from", "players", "as", "t1", "join", "rankings", "as", "t2", "on", "t1.player_id", "=", "t2.player_id", "order", "by", "t2.tours", "desc", "limit", "1", ";"], "ru": ["select", "t1.country_code", ",", "t1.first_name", "from", "players", "as", "t1", "join", "rankings", "as", "t2", "on", "t1.player_id", "=", "t2.player_id", "order", "by", "t2.tours", "desc", "limit", "1", ";"]}, "masked_query": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1;", "question_pauq": {"ru": "\u041d\u0430\u0439\u0434\u0438\u0442\u0435 \u0438\u043c\u044f \u0438 \u043a\u043e\u0434 \u0441\u0442\u0440\u0430\u043d\u044b \u0438\u0433\u0440\u043e\u043a\u0430, \u0441\u043e\u0432\u0435\u0440\u0448\u0438\u0432\u0448\u0435\u0433\u043e \u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0442\u0443\u0440\u043e\u0432."}, "question": "Find the first name and country code of the player who did the most number of tours.", "kb_id": "wta_1"}, {"id": "D_0461", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 41, false], null]]}, "select": [false, [[0, [0, [0, 6, false], null]], [0, [0, [0, 2, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 43, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 41, false], null]]}, "select": [false, [[0, [0, [0, 6, false], null]], [0, [0, [0, 2, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 43, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "first", "name", "and", "country", "code", "of", "the", "player", "with", "the", "most", "tours", "?"], "ru": ["\u041a\u0430\u043a\u043e\u0435", "\u0438\u043c\u044f", "\u0438", "\u043a\u043e\u0434", "\u0441\u0442\u0440\u0430\u043d\u044b", "\u0443", "\u0438\u0433\u0440\u043e\u043a\u0430", "\u0441", "\u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0438\u043c", "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c", "\u0442\u0443\u0440\u043e\u0432", "?"]}, "query_toks": {"en": ["select", "t1.country_code", ",", "t1.first_name", "from", "players", "as", "t1", "join", "rankings", "as", "t2", "on", "t1.player_id", "=", "t2.player_id", "order", "by", "t2.tours", "desc", "limit", "1", ";"], "ru": ["select", "t1.country_code", ",", "t1.first_name", "from", "players", "as", "t1", "join", "rankings", "as", "t2", "on", "t1.player_id", "=", "t2.player_id", "order", "by", "t2.tours", "desc", "limit", "1", ";"]}, "query_toks_no_values": {"en": ["select", "t1.country_code", ",", "t1.first_name", "from", "players", "as", "t1", "join", "rankings", "as", "t2", "on", "t1.player_id", "=", "t2.player_id", "order", "by", "t2.tours", "desc", "limit", "1", ";"], "ru": ["select", "t1.country_code", ",", "t1.first_name", "from", "players", "as", "t1", "join", "rankings", "as", "t2", "on", "t1.player_id", "=", "t2.player_id", "order", "by", "t2.tours", "desc", "limit", "1", ";"]}, "masked_query": "SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1;", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0435 \u0438\u043c\u044f \u0438 \u043a\u043e\u0434 \u0441\u0442\u0440\u0430\u043d\u044b \u0443 \u0438\u0433\u0440\u043e\u043a\u0430 \u0441 \u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0438\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c \u0442\u0443\u0440\u043e\u0432?"}, "question": "What is the first name and country code of the player with the most tours?", "kb_id": "wta_1"}, {"id": "D_0462", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 38, false], null]]]], "where": [], "groupBy": [[0, 38, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 38, false], null]]]], "where": [], "groupBy": [[0, 38, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Find", "the", "year", "that", "has", "the", "most", "number", "of", "matches", "."], "ru": ["\u041d\u0430\u0439\u0434\u0438\u0442\u0435", "\u0433\u043e\u0434", ",", "\u0432", "\u043a\u043e\u0442\u043e\u0440\u043e\u043c", "\u0431\u043e\u043b\u044c\u0448\u0435", "\u0432\u0441\u0435\u0433\u043e", "\u043c\u0430\u0442\u0447\u0435\u0439", "."]}, "query_toks": {"en": ["select", "year", "from", "matches", "group", "by", "year", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"], "ru": ["select", "year", "from", "matches", "group", "by", "year", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"]}, "query_toks_no_values": {"en": ["select", "year", "from", "matches", "group", "by", "year", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"], "ru": ["select", "year", "from", "matches", "group", "by", "year", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"]}, "masked_query": "SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1;", "question_pauq": {"ru": "\u041d\u0430\u0439\u0434\u0438\u0442\u0435 \u0433\u043e\u0434, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u0431\u043e\u043b\u044c\u0448\u0435 \u0432\u0441\u0435\u0433\u043e \u043c\u0430\u0442\u0447\u0435\u0439."}, "question": "Find the year that has the most number of matches.", "kb_id": "wta_1"}, {"id": "D_0463", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 38, false], null]]]], "where": [], "groupBy": [[0, 38, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 38, false], null]]]], "where": [], "groupBy": [[0, 38, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Which", "year", "had", "the", "most", "matches", "?"], "ru": ["\u0412", "\u043a\u0430\u043a\u043e\u043c", "\u0433\u043e\u0434\u0443", "\u0431\u044b\u043b\u043e", "\u0431\u043e\u043b\u044c\u0448\u0435", "\u0432\u0441\u0435\u0433\u043e", "\u043c\u0430\u0442\u0447\u0435\u0439", "?"]}, "query_toks": {"en": ["select", "year", "from", "matches", "group", "by", "year", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"], "ru": ["select", "year", "from", "matches", "group", "by", "year", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"]}, "query_toks_no_values": {"en": ["select", "year", "from", "matches", "group", "by", "year", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"], "ru": ["select", "year", "from", "matches", "group", "by", "year", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"]}, "masked_query": "SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1;", "question_pauq": {"ru": "\u0412 \u043a\u0430\u043a\u043e\u043c \u0433\u043e\u0434\u0443 \u0431\u044b\u043b\u043e \u0431\u043e\u043b\u044c\u0448\u0435 \u0432\u0441\u0435\u0433\u043e \u043c\u0430\u0442\u0447\u0435\u0439?"}, "question": "Which year had the most matches?", "kb_id": "wta_1"}, {"id": "D_0464", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 34, false], null]], [0, [0, [0, 36, false], null]]]], "where": [], "groupBy": [[0, 34, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 34, false], null]], [0, [0, [0, 36, false], null]]]], "where": [], "groupBy": [[0, 34, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Find", "the", "name", "and", "rank", "points", "of", "the", "winner", "who", "won", "the", "most", "times", "."], "ru": ["\u041e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0442\u044c", "\u0438\u043c\u044f", "\u0438", "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e", "\u043e\u0447\u043a\u043e\u0432", "\u043f\u043e\u0431\u0435\u0434\u0438\u0442\u0435\u043b\u044f", ",", "\u043a\u043e\u0442\u043e\u0440\u044b\u0439", "\u0432\u044b\u0438\u0433\u0440\u044b\u0432\u0430\u043b", "\u0431\u043e\u043b\u044c\u0448\u0435", "\u0432\u0441\u0435\u0433\u043e", "\u0440\u0430\u0437", "."]}, "query_toks": {"en": ["select", "winner_name", ",", "winner_rank_points", "from", "matches", "group", "by", "winner_name", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"], "ru": ["select", "winner_name", ",", "winner_rank_points", "from", "matches", "group", "by", "winner_name", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"]}, "query_toks_no_values": {"en": ["select", "winner_name", ",", "winner_rank_points", "from", "matches", "group", "by", "winner_name", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"], "ru": ["select", "winner_name", ",", "winner_rank_points", "from", "matches", "group", "by", "winner_name", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"]}, "masked_query": "SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1;", "question_pauq": {"ru": "\u041e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0442\u044c \u0438\u043c\u044f \u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0447\u043a\u043e\u0432 \u043f\u043e\u0431\u0435\u0434\u0438\u0442\u0435\u043b\u044f, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0432\u044b\u0438\u0433\u0440\u044b\u0432\u0430\u043b \u0431\u043e\u043b\u044c\u0448\u0435 \u0432\u0441\u0435\u0433\u043e \u0440\u0430\u0437."}, "question": "Find the name and rank points of the winner who won the most times.", "kb_id": "wta_1"}, {"id": "D_0465", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 34, false], null]], [0, [0, [0, 36, false], null]]]], "where": [], "groupBy": [[0, 34, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 34, false], null]], [0, [0, [0, 36, false], null]]]], "where": [], "groupBy": [[0, 34, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "name", "of", "the", "winner", "who", "has", "won", "the", "most", "matches", ",", "and", "how", "many", "rank", "points", "does", "this", "player", "have", "?"], "ru": ["\u041a\u0430\u043a", "\u0437\u043e\u0432\u0443\u0442", "\u043f\u043e\u0431\u0435\u0434\u0438\u0442\u0435\u043b\u044f", ",", "\u0432\u044b\u0438\u0433\u0440\u0430\u0432\u0448\u0435\u0433\u043e", "\u0431\u043e\u043b\u044c\u0448\u0435", "\u0432\u0441\u0435\u0433\u043e", "\u043c\u0430\u0442\u0447\u0435\u0439", ",", "\u0438", "\u0441\u043a\u043e\u043b\u044c\u043a\u043e", "\u0440\u0430\u043d\u0433\u043e\u0432\u044b\u0445", "\u043e\u0447\u043a\u043e\u0432", "\u0443", "\u044d\u0442\u043e\u0433\u043e", "\u0438\u0433\u0440\u043e\u043a\u0430", "?"]}, "query_toks": {"en": ["select", "winner_name", ",", "winner_rank_points", "from", "matches", "group", "by", "winner_name", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"], "ru": ["select", "winner_name", ",", "winner_rank_points", "from", "matches", "group", "by", "winner_name", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"]}, "query_toks_no_values": {"en": ["select", "winner_name", ",", "winner_rank_points", "from", "matches", "group", "by", "winner_name", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"], "ru": ["select", "winner_name", ",", "winner_rank_points", "from", "matches", "group", "by", "winner_name", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"]}, "masked_query": "SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1;", "question_pauq": {"ru": "\u041a\u0430\u043a \u0437\u043e\u0432\u0443\u0442 \u043f\u043e\u0431\u0435\u0434\u0438\u0442\u0435\u043b\u044f, \u0432\u044b\u0438\u0433\u0440\u0430\u0432\u0448\u0435\u0433\u043e \u0431\u043e\u043b\u044c\u0448\u0435 \u0432\u0441\u0435\u0433\u043e \u043c\u0430\u0442\u0447\u0435\u0439, \u0438 \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0440\u0430\u043d\u0433\u043e\u0432\u044b\u0445 \u043e\u0447\u043a\u043e\u0432 \u0443 \u044d\u0442\u043e\u0433\u043e \u0438\u0433\u0440\u043e\u043a\u0430?"}, "question": "What is the name of the winner who has won the most matches, and how many rank points does this player have?", "kb_id": "wta_1"}, {"id": "D_0466", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT winner_name FROM matches WHERE tourney_name  =  '\u0427\u0435\u043c\u043f\u0438\u043e\u043d\u0430\u0442 \u043f\u043e \u0444\u0440\u0438\u0441\u0431\u0438' ORDER BY winner_rank_points DESC LIMIT 1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 34, false], null]]]], "where": [[false, 2, [0, [0, 27, false], null], "\"Australian Open\"", null]], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 36, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 34, false], null]]]], "where": [[false, 2, [0, [0, 27, false], null], "\"\u0427\u0435\u043c\u043f\u0438\u043e\u043d\u0430\u0442 \u043f\u043e \u0444\u0440\u0438\u0441\u0431\u0438\"", null]], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 36, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Find", "the", "name", "of", "the", "winner", "who", "has", "the", "highest", "rank", "points", "and", "participated", "in", "the", "Australian", "Open", "tourney", "."], "ru": ["\u0418\u043c\u044f", "\u043f\u043e\u0431\u0435\u0434\u0438\u0442\u0435\u043b\u044f", ",", "\u043d\u0430\u0431\u0440\u0430\u0432\u0448\u0435\u0433\u043e", "\u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0435\u0435", "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e", "\u043e\u0447\u043a\u043e\u0432", "\u0432", "\u0440\u0435\u0439\u0442\u0438\u043d\u0433\u0435", "\u0438", "\u0443\u0447\u0430\u0441\u0442\u0432\u043e\u0432\u0430\u0432\u0448\u0435\u0433\u043e", "\u0432", "\u0447\u0435\u043c\u043f\u0438\u043e\u043d\u0430\u0442\u0435", "\u043f\u043e", "\u0444\u0440\u0438\u0441\u0431\u0438", "."]}, "query_toks": {"en": ["select", "winner_name", "from", "matches", "where", "tourney_name", "=", "\"Australian Open\"", "order", "by", "winner_rank_points", "desc", "limit", "1", ";"], "ru": ["select", "winner_name", "from", "matches", "where", "tourney_name", "=", "\"\u0427\u0435\u043c\u043f\u0438\u043e\u043d\u0430\u0442 \u043f\u043e \u0444\u0440\u0438\u0441\u0431\u0438\"", "order", "by", "winner_rank_points", "desc", "limit", "1", ";"]}, "query_toks_no_values": {"en": ["select", "winner_name", "from", "matches", "where", "tourney_name", "=", "value", "order", "by", "winner_rank_points", "desc", "limit", "1", ";"], "ru": ["select", "winner_name", "from", "matches", "where", "tourney_name", "=", "value", "order", "by", "winner_rank_points", "desc", "limit", "1", ";"]}, "masked_query": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1;", "question_pauq": {"ru": "\u0418\u043c\u044f \u043f\u043e\u0431\u0435\u0434\u0438\u0442\u0435\u043b\u044f, \u043d\u0430\u0431\u0440\u0430\u0432\u0448\u0435\u0433\u043e \u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0447\u043a\u043e\u0432 \u0432 \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u0435 \u0438 \u0443\u0447\u0430\u0441\u0442\u0432\u043e\u0432\u0430\u0432\u0448\u0435\u0433\u043e \u0432 \u0447\u0435\u043c\u043f\u0438\u043e\u043d\u0430\u0442\u0435 \u043f\u043e \u0444\u0440\u0438\u0441\u0431\u0438."}, "question": "Find the name of the winner who has the highest rank points and participated in the Australian Open tourney.", "kb_id": "wta_1"}, {"id": "D_0467", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT winner_name FROM matches WHERE tourney_name  =  '\u0427\u0435\u043c\u043f\u0438\u043e\u043d\u0430\u0442 \u043f\u043e \u0444\u0440\u0438\u0441\u0431\u0438' ORDER BY winner_rank_points DESC LIMIT 1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 34, false], null]]]], "where": [[false, 2, [0, [0, 27, false], null], "\"Australian Open\"", null]], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 36, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 34, false], null]]]], "where": [[false, 2, [0, [0, 27, false], null], "\"\u0427\u0435\u043c\u043f\u0438\u043e\u043d\u0430\u0442 \u043f\u043e \u0444\u0440\u0438\u0441\u0431\u0438\"", null]], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 36, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "name", "of", "the", "winner", "with", "the", "most", "rank", "points", "who", "participated", "in", "the", "Australian", "Open", "tournament", "?"], "ru": ["\u041a\u0430\u043a", "\u0437\u043e\u0432\u0443\u0442", "\u043f\u043e\u0431\u0435\u0434\u0438\u0442\u0435\u043b\u044f", ",", "\u043d\u0430\u0431\u0440\u0430\u0432\u0448\u0435\u0433\u043e", "\u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0435\u0435", "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e", "\u0440\u0435\u0439\u0442\u0438\u043d\u0433\u043e\u0432\u044b\u0445", "\u043e\u0447\u043a\u043e\u0432", ",", "\u043f\u0440\u0438\u043d\u044f\u0432\u0448\u0435\u0433\u043e", "\u0443\u0447\u0430\u0441\u0442\u0438\u0435", "\u0432", "\u0447\u0435\u043c\u043f\u0438\u043e\u043d\u0430\u0442\u0435", "\u043f\u043e", "\u0444\u0440\u0438\u0441\u0431\u0438", "?"]}, "query_toks": {"en": ["select", "winner_name", "from", "matches", "where", "tourney_name", "=", "\"Australian Open\"", "order", "by", "winner_rank_points", "desc", "limit", "1", ";"], "ru": ["select", "winner_name", "from", "matches", "where", "tourney_name", "=", "\"\u0427\u0435\u043c\u043f\u0438\u043e\u043d\u0430\u0442 \u043f\u043e \u0444\u0440\u0438\u0441\u0431\u0438\"", "order", "by", "winner_rank_points", "desc", "limit", "1", ";"]}, "query_toks_no_values": {"en": ["select", "winner_name", "from", "matches", "where", "tourney_name", "=", "value", "order", "by", "winner_rank_points", "desc", "limit", "1", ";"], "ru": ["select", "winner_name", "from", "matches", "where", "tourney_name", "=", "value", "order", "by", "winner_rank_points", "desc", "limit", "1", ";"]}, "masked_query": "SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1;", "question_pauq": {"ru": "\u041a\u0430\u043a \u0437\u043e\u0432\u0443\u0442 \u043f\u043e\u0431\u0435\u0434\u0438\u0442\u0435\u043b\u044f, \u043d\u0430\u0431\u0440\u0430\u0432\u0448\u0435\u0433\u043e \u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u043e\u0432\u044b\u0445 \u043e\u0447\u043a\u043e\u0432, \u043f\u0440\u0438\u043d\u044f\u0432\u0448\u0435\u0433\u043e \u0443\u0447\u0430\u0441\u0442\u0438\u0435 \u0432 \u0447\u0435\u043c\u043f\u0438\u043e\u043d\u0430\u0442\u0435 \u043f\u043e \u0444\u0440\u0438\u0441\u0431\u0438?"}, "question": "What is the name of the winner with the most rank points who participated in the Australian Open tournament?", "kb_id": "wta_1"}, {"id": "D_0468", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 34, false], null]], [0, [0, [0, 15, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 20, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 34, false], null]], [0, [0, [0, 15, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 20, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["find", "the", "names", "of", "loser", "and", "winner", "who", "played", "in", "the", "match", "with", "greatest", "number", "of", "minutes", "."], "ru": ["\u043d\u0430\u0439\u0442\u0438", "\u0438\u043c\u0435\u043d\u0430", "\u043f\u0440\u043e\u0438\u0433\u0440\u0430\u0432\u0448\u0435\u0433\u043e", "\u0438", "\u043f\u043e\u0431\u0435\u0434\u0438\u0442\u0435\u043b\u044f", ",", "\u0441\u044b\u0433\u0440\u0430\u0432\u0448\u0435\u0433\u043e", "\u0432", "\u043c\u0430\u0442\u0447\u0435", "\u0441", "\u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0438\u043c", "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c", "\u043c\u0438\u043d\u0443\u0442", "."]}, "query_toks": {"en": ["select", "winner_name", ",", "loser_name", "from", "matches", "order", "by", "minutes", "desc", "limit", "1", ";"], "ru": ["select", "winner_name", ",", "loser_name", "from", "matches", "order", "by", "minutes", "desc", "limit", "1", ";"]}, "query_toks_no_values": {"en": ["select", "winner_name", ",", "loser_name", "from", "matches", "order", "by", "minutes", "desc", "limit", "1", ";"], "ru": ["select", "winner_name", ",", "loser_name", "from", "matches", "order", "by", "minutes", "desc", "limit", "1", ";"]}, "masked_query": "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1;", "question_pauq": {"ru": "\u043d\u0430\u0439\u0442\u0438 \u0438\u043c\u0435\u043d\u0430 \u043f\u0440\u043e\u0438\u0433\u0440\u0430\u0432\u0448\u0435\u0433\u043e \u0438 \u043f\u043e\u0431\u0435\u0434\u0438\u0442\u0435\u043b\u044f, \u0441\u044b\u0433\u0440\u0430\u0432\u0448\u0435\u0433\u043e \u0432 \u043c\u0430\u0442\u0447\u0435 \u0441 \u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0438\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c \u043c\u0438\u043d\u0443\u0442."}, "question": "find the names of loser and winner who played in the match with greatest number of minutes.", "kb_id": "wta_1"}, {"id": "D_0469", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 34, false], null]], [0, [0, [0, 15, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 20, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 34, false], null]], [0, [0, [0, 15, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 20, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "the", "names", "of", "the", "winner", "and", "loser", "who", "played", "in", "the", "longest", "match", "?"], "ru": ["\u041a\u0430\u043a", "\u0437\u043e\u0432\u0443\u0442", "\u043f\u043e\u0431\u0435\u0434\u0438\u0442\u0435\u043b\u044f", "\u0438", "\u043f\u0440\u043e\u0438\u0433\u0440\u0430\u0432\u0448\u0435\u0433\u043e", ",", "\u0441\u044b\u0433\u0440\u0430\u0432\u0448\u0435\u0433\u043e", "\u0432", "\u0441\u0430\u043c\u043e\u043c", "\u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u043c", "\u043c\u0430\u0442\u0447\u0435", "?"]}, "query_toks": {"en": ["select", "winner_name", ",", "loser_name", "from", "matches", "order", "by", "minutes", "desc", "limit", "1", ";"], "ru": ["select", "winner_name", ",", "loser_name", "from", "matches", "order", "by", "minutes", "desc", "limit", "1", ";"]}, "query_toks_no_values": {"en": ["select", "winner_name", ",", "loser_name", "from", "matches", "order", "by", "minutes", "desc", "limit", "1", ";"], "ru": ["select", "winner_name", ",", "loser_name", "from", "matches", "order", "by", "minutes", "desc", "limit", "1", ";"]}, "masked_query": "SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1;", "question_pauq": {"ru": "\u041a\u0430\u043a \u0437\u043e\u0432\u0443\u0442 \u043f\u043e\u0431\u0435\u0434\u0438\u0442\u0435\u043b\u044f \u0438 \u043f\u0440\u043e\u0438\u0433\u0440\u0430\u0432\u0448\u0435\u0433\u043e, \u0441\u044b\u0433\u0440\u0430\u0432\u0448\u0435\u0433\u043e \u0432 \u0441\u0430\u043c\u043e\u043c \u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u043c \u043c\u0430\u0442\u0447\u0435?"}, "question": "What are the names of the winner and loser who played in the longest match?", "kb_id": "wta_1"}, {"id": "D_0470", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 41, false], null]]}, "select": [false, [[5, [0, [0, 40, false], null]], [0, [0, [0, 2, false], null]]]], "where": [], "groupBy": [[0, 2, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 41, false], null]]}, "select": [false, [[5, [0, [0, 40, false], null]], [0, [0, [0, 2, false], null]]]], "where": [], "groupBy": [[0, 2, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Find", "the", "average", "ranking", "for", "each", "player", "and", "their", "first", "name", "."], "ru": ["\u041d\u0430\u0439\u0434\u0438\u0442\u0435", "\u0441\u0440\u0435\u0434\u043d\u0438\u0439", "\u0440\u0435\u0439\u0442\u0438\u043d\u0433", "\u043a\u0430\u0436\u0434\u043e\u0433\u043e", "\u0438\u0433\u0440\u043e\u043a\u0430", "\u0438", "\u0435\u0433\u043e", "\u0438\u043c\u044f", "."]}, "query_toks": {"en": ["select", "avg", "(", "ranking", ")", ",", "t1.first_name", "from", "players", "as", "t1", "join", "rankings", "as", "t2", "on", "t1.player_id", "=", "t2.player_id", "group", "by", "t1.first_name", ";"], "ru": ["select", "avg", "(", "ranking", ")", ",", "t1.first_name", "from", "players", "as", "t1", "join", "rankings", "as", "t2", "on", "t1.player_id", "=", "t2.player_id", "group", "by", "t1.first_name", ";"]}, "query_toks_no_values": {"en": ["select", "avg", "(", "ranking", ")", ",", "t1.first_name", "from", "players", "as", "t1", "join", "rankings", "as", "t2", "on", "t1.player_id", "=", "t2.player_id", "group", "by", "t1.first_name", ";"], "ru": ["select", "avg", "(", "ranking", ")", ",", "t1.first_name", "from", "players", "as", "t1", "join", "rankings", "as", "t2", "on", "t1.player_id", "=", "t2.player_id", "group", "by", "t1.first_name", ";"]}, "masked_query": "SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name;", "question_pauq": {"ru": "\u041d\u0430\u0439\u0434\u0438\u0442\u0435 \u0441\u0440\u0435\u0434\u043d\u0438\u0439 \u0440\u0435\u0439\u0442\u0438\u043d\u0433 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0438\u0433\u0440\u043e\u043a\u0430 \u0438 \u0435\u0433\u043e \u0438\u043c\u044f."}, "question": "Find the average ranking for each player and their first name.", "kb_id": "wta_1"}, {"id": "D_0471", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 41, false], null]]}, "select": [false, [[5, [0, [0, 40, false], null]], [0, [0, [0, 2, false], null]]]], "where": [], "groupBy": [[0, 2, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 41, false], null]]}, "select": [false, [[5, [0, [0, 40, false], null]], [0, [0, [0, 2, false], null]]]], "where": [], "groupBy": [[0, 2, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "the", "first", "names", "of", "all", "players", ",", "and", "their", "average", "rankings", "?"], "ru": ["\u041a\u0430\u043a\u043e\u0432\u044b", "\u0438\u043c\u0435\u043d\u0430", "\u0432\u0441\u0435\u0445", "\u0438\u0433\u0440\u043e\u043a\u043e\u0432", "\u0438", "\u0438\u0445", "\u0441\u0440\u0435\u0434\u043d\u0438\u0439", "\u0440\u0435\u0439\u0442\u0438\u043d\u0433", "?"]}, "query_toks": {"en": ["select", "avg", "(", "ranking", ")", ",", "t1.first_name", "from", "players", "as", "t1", "join", "rankings", "as", "t2", "on", "t1.player_id", "=", "t2.player_id", "group", "by", "t1.first_name", ";"], "ru": ["select", "avg", "(", "ranking", ")", ",", "t1.first_name", "from", "players", "as", "t1", "join", "rankings", "as", "t2", "on", "t1.player_id", "=", "t2.player_id", "group", "by", "t1.first_name", ";"]}, "query_toks_no_values": {"en": ["select", "avg", "(", "ranking", ")", ",", "t1.first_name", "from", "players", "as", "t1", "join", "rankings", "as", "t2", "on", "t1.player_id", "=", "t2.player_id", "group", "by", "t1.first_name", ";"], "ru": ["select", "avg", "(", "ranking", ")", ",", "t1.first_name", "from", "players", "as", "t1", "join", "rankings", "as", "t2", "on", "t1.player_id", "=", "t2.player_id", "group", "by", "t1.first_name", ";"]}, "masked_query": "SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name;", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0432\u044b \u0438\u043c\u0435\u043d\u0430 \u0432\u0441\u0435\u0445 \u0438\u0433\u0440\u043e\u043a\u043e\u0432 \u0438 \u0438\u0445 \u0441\u0440\u0435\u0434\u043d\u0438\u0439 \u0440\u0435\u0439\u0442\u0438\u043d\u0433?"}, "question": "What are the first names of all players, and their average rankings?", "kb_id": "wta_1"}, {"id": "D_0472", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 41, false], null]]}, "select": [false, [[4, [0, [0, 42, false], null]], [0, [0, [0, 2, false], null]]]], "where": [], "groupBy": [[0, 2, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 41, false], null]]}, "select": [false, [[4, [0, [0, 42, false], null]], [0, [0, [0, 2, false], null]]]], "where": [], "groupBy": [[0, 2, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Find", "the", "total", "ranking", "points", "for", "each", "player", "and", "their", "first", "name", "."], "ru": ["\u041e\u0431\u0449\u0435\u0435", "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e", "\u0440\u0435\u0439\u0442\u0438\u043d\u0433\u043e\u0432\u044b\u0445", "\u043e\u0447\u043a\u043e\u0432", "\u0434\u043b\u044f", "\u043a\u0430\u0436\u0434\u043e\u0433\u043e", "\u0438\u0433\u0440\u043e\u043a\u0430", "\u0438", "\u0435\u0433\u043e", "\u0438\u043c\u044f", "."]}, "query_toks": {"en": ["select", "sum", "(", "ranking_points", ")", ",", "t1.first_name", "from", "players", "as", "t1", "join", "rankings", "as", "t2", "on", "t1.player_id", "=", "t2.player_id", "group", "by", "t1.first_name", ";"], "ru": ["select", "sum", "(", "ranking_points", ")", ",", "t1.first_name", "from", "players", "as", "t1", "join", "rankings", "as", "t2", "on", "t1.player_id", "=", "t2.player_id", "group", "by", "t1.first_name", ";"]}, "query_toks_no_values": {"en": ["select", "sum", "(", "ranking_points", ")", ",", "t1.first_name", "from", "players", "as", "t1", "join", "rankings", "as", "t2", "on", "t1.player_id", "=", "t2.player_id", "group", "by", "t1.first_name", ";"], "ru": ["select", "sum", "(", "ranking_points", ")", ",", "t1.first_name", "from", "players", "as", "t1", "join", "rankings", "as", "t2", "on", "t1.player_id", "=", "t2.player_id", "group", "by", "t1.first_name", ";"]}, "masked_query": "SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name;", "question_pauq": {"ru": "\u041e\u0431\u0449\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u043e\u0432\u044b\u0445 \u043e\u0447\u043a\u043e\u0432 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0438\u0433\u0440\u043e\u043a\u0430 \u0438 \u0435\u0433\u043e \u0438\u043c\u044f."}, "question": "Find the total ranking points for each player and their first name.", "kb_id": "wta_1"}, {"id": "D_0473", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 41, false], null]]}, "select": [false, [[4, [0, [0, 42, false], null]], [0, [0, [0, 2, false], null]]]], "where": [], "groupBy": [[0, 2, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 41, false], null]]}, "select": [false, [[4, [0, [0, 42, false], null]], [0, [0, [0, 2, false], null]]]], "where": [], "groupBy": [[0, 2, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "the", "first", "names", "of", "all", "players", ",", "and", "their", "total", "ranking", "points", "?"], "ru": ["\u041a\u0430\u043a", "\u0437\u043e\u0432\u0443\u0442", "\u0432\u0441\u0435\u0445", "\u0438\u0433\u0440\u043e\u043a\u043e\u0432", "\u0438", "\u0438\u0445", "\u043e\u0431\u0449\u0435\u0435", "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e", "\u043e\u0447\u043a\u043e\u0432", "\u0432", "\u0440\u0435\u0439\u0442\u0438\u043d\u0433\u0435", "?"]}, "query_toks": {"en": ["select", "sum", "(", "ranking_points", ")", ",", "t1.first_name", "from", "players", "as", "t1", "join", "rankings", "as", "t2", "on", "t1.player_id", "=", "t2.player_id", "group", "by", "t1.first_name", ";"], "ru": ["select", "sum", "(", "ranking_points", ")", ",", "t1.first_name", "from", "players", "as", "t1", "join", "rankings", "as", "t2", "on", "t1.player_id", "=", "t2.player_id", "group", "by", "t1.first_name", ";"]}, "query_toks_no_values": {"en": ["select", "sum", "(", "ranking_points", ")", ",", "t1.first_name", "from", "players", "as", "t1", "join", "rankings", "as", "t2", "on", "t1.player_id", "=", "t2.player_id", "group", "by", "t1.first_name", ";"], "ru": ["select", "sum", "(", "ranking_points", ")", ",", "t1.first_name", "from", "players", "as", "t1", "join", "rankings", "as", "t2", "on", "t1.player_id", "=", "t2.player_id", "group", "by", "t1.first_name", ";"]}, "masked_query": "SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name;", "question_pauq": {"ru": "\u041a\u0430\u043a \u0437\u043e\u0432\u0443\u0442 \u0432\u0441\u0435\u0445 \u0438\u0433\u0440\u043e\u043a\u043e\u0432 \u0438 \u0438\u0445 \u043e\u0431\u0449\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0447\u043a\u043e\u0432 \u0432 \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u0435?"}, "question": "What are the first names of all players, and their total ranking points?", "kb_id": "wta_1"}, {"id": "D_0474", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT count(*) ,  country_code FROM players GROUP BY country_code;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]], [0, [0, [0, 6, false], null]]]], "where": [], "groupBy": [[0, 6, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]], [0, [0, [0, 6, false], null]]]], "where": [], "groupBy": [[0, 6, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["find", "the", "number", "of", "players", "for", "each", "country", "."], "ru": ["\u041e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0442\u044c", "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e", "\u0438\u0433\u0440\u043e\u043a\u043e\u0432", "\u0434\u043b\u044f", "\u043a\u0430\u0436\u0434\u043e\u0439", "\u0441\u0442\u0440\u0430\u043d\u044b", "."]}, "query_toks": {"en": ["select", "count", "(", "*", ")", ",", "country_code", "from", "players", "group", "by", "country_code", ";"], "ru": ["select", "count", "(", "*", ")", ",", "country_code", "from", "players", "group", "by", "country_code", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "*", ")", ",", "country_code", "from", "players", "group", "by", "country_code", ";"], "ru": ["select", "count", "(", "*", ")", ",", "country_code", "from", "players", "group", "by", "country_code", ";"]}, "masked_query": "SELECT count(*) ,  country_code FROM players GROUP BY country_code;", "question_pauq": {"ru": "\u041e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0442\u044c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0438\u0433\u0440\u043e\u043a\u043e\u0432 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u0441\u0442\u0440\u0430\u043d\u044b."}, "question": "find the number of players for each country.", "kb_id": "wta_1"}, {"id": "D_0475", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT count(*) ,  country_code FROM players GROUP BY country_code;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]], [0, [0, [0, 6, false], null]]]], "where": [], "groupBy": [[0, 6, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]], [0, [0, [0, 6, false], null]]]], "where": [], "groupBy": [[0, 6, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["How", "many", "players", "are", "from", "each", "country", "?"], "ru": ["\u0421\u043a\u043e\u043b\u044c\u043a\u043e", "\u0438\u0433\u0440\u043e\u043a\u043e\u0432", "\u043e\u0442", "\u043a\u0430\u0436\u0434\u043e\u0439", "\u0441\u0442\u0440\u0430\u043d\u044b", "?"]}, "query_toks": {"en": ["select", "count", "(", "*", ")", ",", "country_code", "from", "players", "group", "by", "country_code", ";"], "ru": ["select", "count", "(", "*", ")", ",", "country_code", "from", "players", "group", "by", "country_code", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "*", ")", ",", "country_code", "from", "players", "group", "by", "country_code", ";"], "ru": ["select", "count", "(", "*", ")", ",", "country_code", "from", "players", "group", "by", "country_code", ";"]}, "masked_query": "SELECT count(*) ,  country_code FROM players GROUP BY country_code;", "question_pauq": {"ru": "\u0421\u043a\u043e\u043b\u044c\u043a\u043e \u0438\u0433\u0440\u043e\u043a\u043e\u0432 \u043e\u0442 \u043a\u0430\u0436\u0434\u043e\u0439 \u0441\u0442\u0440\u0430\u043d\u044b?"}, "question": "How many players are from each country?", "kb_id": "wta_1"}, {"id": "D_0476", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 6, false], null]]]], "where": [], "groupBy": [[0, 6, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 6, false], null]]]], "where": [], "groupBy": [[0, 6, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["find", "the", "code", "of", "the", "country", "where", "has", "the", "greatest", "number", "of", "players", "."], "ru": ["\u041a\u043e\u0434", "\u0441\u0442\u0440\u0430\u043d\u044b", ",", "\u0432", "\u043a\u043e\u0442\u043e\u0440\u043e\u0439", "\u0431\u043e\u043b\u044c\u0448\u0435", "\u0432\u0441\u0435\u0433\u043e", "\u0438\u0433\u0440\u043e\u043a\u043e\u0432", "."]}, "query_toks": {"en": ["select", "country_code", "from", "players", "group", "by", "country_code", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"], "ru": ["select", "country_code", "from", "players", "group", "by", "country_code", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"]}, "query_toks_no_values": {"en": ["select", "country_code", "from", "players", "group", "by", "country_code", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"], "ru": ["select", "country_code", "from", "players", "group", "by", "country_code", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"]}, "masked_query": "SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1;", "question_pauq": {"ru": "\u041a\u043e\u0434 \u0441\u0442\u0440\u0430\u043d\u044b, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u0431\u043e\u043b\u044c\u0448\u0435 \u0432\u0441\u0435\u0433\u043e \u0438\u0433\u0440\u043e\u043a\u043e\u0432."}, "question": "find the code of the country where has the greatest number of players.", "kb_id": "wta_1"}, {"id": "D_0477", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 6, false], null]]]], "where": [], "groupBy": [[0, 6, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 6, false], null]]]], "where": [], "groupBy": [[0, 6, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "code", "of", "the", "country", "with", "the", "most", "players", "?"], "ru": ["\u041a\u0430\u043a\u043e\u0432", "\u043a\u043e\u0434", "\u0441\u0442\u0440\u0430\u043d\u044b", "\u0441", "\u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0438\u043c", "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c", "\u0438\u0433\u0440\u043e\u043a\u043e\u0432", "?"]}, "query_toks": {"en": ["select", "country_code", "from", "players", "group", "by", "country_code", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"], "ru": ["select", "country_code", "from", "players", "group", "by", "country_code", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"]}, "query_toks_no_values": {"en": ["select", "country_code", "from", "players", "group", "by", "country_code", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"], "ru": ["select", "country_code", "from", "players", "group", "by", "country_code", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"]}, "masked_query": "SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1;", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0432 \u043a\u043e\u0434 \u0441\u0442\u0440\u0430\u043d\u044b \u0441 \u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0438\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c \u0438\u0433\u0440\u043e\u043a\u043e\u0432?"}, "question": "What is the code of the country with the most players?", "kb_id": "wta_1"}, {"id": "D_0478", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 6, false], null]]]], "where": [], "groupBy": [[0, 6, false]], "having": [[false, 3, [0, [3, 0, false], null], 50.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 6, false], null]]]], "where": [], "groupBy": [[0, 6, false]], "having": [[false, 3, [0, [3, 0, false], null], 50.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Find", "the", "codes", "of", "countries", "that", "have", "more", "than", "50", "players", "."], "ru": ["\u041d\u0430\u0439\u0442\u0438", "\u043a\u043e\u0434\u044b", "\u0441\u0442\u0440\u0430\u043d", ",", "\u0432", "\u043a\u043e\u0442\u043e\u0440\u044b\u0445", "\u0431\u043e\u043b\u044c\u0448\u0435", "50", "\u0438\u0433\u0440\u043e\u043a\u043e\u0432", "."]}, "query_toks": {"en": ["select", "country_code", "from", "players", "group", "by", "country_code", "having", "count", "(", "*", ")", ">", "50", ";"], "ru": ["select", "country_code", "from", "players", "group", "by", "country_code", "having", "count", "(", "*", ")", ">", "50", ";"]}, "query_toks_no_values": {"en": ["select", "country_code", "from", "players", "group", "by", "country_code", "having", "count", "(", "*", ")", ">", "50", ";"], "ru": ["select", "country_code", "from", "players", "group", "by", "country_code", "having", "count", "(", "*", ")", ">", "50", ";"]}, "masked_query": "SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50;", "question_pauq": {"ru": "\u041d\u0430\u0439\u0442\u0438 \u043a\u043e\u0434\u044b \u0441\u0442\u0440\u0430\u043d, \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0431\u043e\u043b\u044c\u0448\u0435 50 \u0438\u0433\u0440\u043e\u043a\u043e\u0432."}, "question": "Find the codes of countries that have more than 50 players.", "kb_id": "wta_1"}, {"id": "D_0479", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 6, false], null]]]], "where": [], "groupBy": [[0, 6, false]], "having": [[false, 3, [0, [3, 0, false], null], 50.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 6, false], null]]]], "where": [], "groupBy": [[0, 6, false]], "having": [[false, 3, [0, [3, 0, false], null], 50.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "the", "codes", "of", "countries", "with", "more", "than", "50", "players", "?"], "ru": ["\u041a\u0430\u043a\u0438\u0435", "\u043a\u043e\u0434\u044b", "\u0441\u0442\u0440\u0430\u043d", "\u0441", "\u0431\u043e\u043b\u0435\u0435", "\u0447\u0435\u043c", "50", "\u0438\u0433\u0440\u043e\u043a\u0430\u043c\u0438", "?"]}, "query_toks": {"en": ["select", "country_code", "from", "players", "group", "by", "country_code", "having", "count", "(", "*", ")", ">", "50", ";"], "ru": ["select", "country_code", "from", "players", "group", "by", "country_code", "having", "count", "(", "*", ")", ">", "50", ";"]}, "query_toks_no_values": {"en": ["select", "country_code", "from", "players", "group", "by", "country_code", "having", "count", "(", "*", ")", ">", "50", ";"], "ru": ["select", "country_code", "from", "players", "group", "by", "country_code", "having", "count", "(", "*", ")", ">", "50", ";"]}, "masked_query": "SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50;", "question_pauq": {"ru": "\u041a\u0430\u043a\u0438\u0435 \u043a\u043e\u0434\u044b \u0441\u0442\u0440\u0430\u043d \u0441 \u0431\u043e\u043b\u0435\u0435 \u0447\u0435\u043c 50 \u0438\u0433\u0440\u043e\u043a\u0430\u043c\u0438?"}, "question": "What are the codes of countries with more than 50 players?", "kb_id": "wta_1"}, {"id": "D_0480", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[4, [0, [0, 43, false], null]], [0, [0, [0, 39, false], null]]]], "where": [], "groupBy": [[0, 39, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[4, [0, [0, 43, false], null]], [0, [0, [0, 39, false], null]]]], "where": [], "groupBy": [[0, 39, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Find", "the", "total", "number", "of", "tours", "for", "each", "ranking", "date", "."], "ru": ["\u041d\u0430\u0439\u0434\u0438", "\u043e\u0431\u0449\u0435\u0435", "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e", "\u0442\u0443\u0440\u043e\u0432", "\u0434\u043b\u044f", "\u043a\u0430\u0436\u0434\u043e\u0439", "\u0440\u0435\u0439\u0442\u0438\u043d\u0433\u043e\u0432\u043e\u0439", "\u0434\u0430\u0442\u044b", "."]}, "query_toks": {"en": ["select", "sum", "(", "tours", ")", ",", "ranking_date", "from", "rankings", "group", "by", "ranking_date", ";"], "ru": ["select", "sum", "(", "tours", ")", ",", "ranking_date", "from", "rankings", "group", "by", "ranking_date", ";"]}, "query_toks_no_values": {"en": ["select", "sum", "(", "tours", ")", ",", "ranking_date", "from", "rankings", "group", "by", "ranking_date", ";"], "ru": ["select", "sum", "(", "tours", ")", ",", "ranking_date", "from", "rankings", "group", "by", "ranking_date", ";"]}, "masked_query": "SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date;", "question_pauq": {"ru": "\u041d\u0430\u0439\u0434\u0438 \u043e\u0431\u0449\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0442\u0443\u0440\u043e\u0432 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u043e\u0432\u043e\u0439 \u0434\u0430\u0442\u044b."}, "question": "Find the total number of tours for each ranking date.", "kb_id": "wta_1"}, {"id": "D_0481", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[4, [0, [0, 43, false], null]], [0, [0, [0, 39, false], null]]]], "where": [], "groupBy": [[0, 39, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[4, [0, [0, 43, false], null]], [0, [0, [0, 39, false], null]]]], "where": [], "groupBy": [[0, 39, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["How", "many", "total", "tours", "were", "there", "for", "each", "ranking", "date", "?"], "ru": ["\u0421\u043a\u043e\u043b\u044c\u043a\u043e", "\u0432\u0441\u0435\u0433\u043e", "\u0442\u0443\u0440\u043e\u0432", "\u0431\u044b\u043b\u043e", "\u043f\u0440\u043e\u0432\u0435\u0434\u0435\u043d\u043e", "\u043d\u0430", "\u043a\u0430\u0436\u0434\u0443\u044e", "\u0434\u0430\u0442\u0443", "\u0440\u0435\u0439\u0442\u0438\u043d\u0433\u0430", "?"]}, "query_toks": {"en": ["select", "sum", "(", "tours", ")", ",", "ranking_date", "from", "rankings", "group", "by", "ranking_date", ";"], "ru": ["select", "sum", "(", "tours", ")", ",", "ranking_date", "from", "rankings", "group", "by", "ranking_date", ";"]}, "query_toks_no_values": {"en": ["select", "sum", "(", "tours", ")", ",", "ranking_date", "from", "rankings", "group", "by", "ranking_date", ";"], "ru": ["select", "sum", "(", "tours", ")", ",", "ranking_date", "from", "rankings", "group", "by", "ranking_date", ";"]}, "masked_query": "SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date;", "question_pauq": {"ru": "\u0421\u043a\u043e\u043b\u044c\u043a\u043e \u0432\u0441\u0435\u0433\u043e \u0442\u0443\u0440\u043e\u0432 \u0431\u044b\u043b\u043e \u043f\u0440\u043e\u0432\u0435\u0434\u0435\u043d\u043e \u043d\u0430 \u043a\u0430\u0436\u0434\u0443\u044e \u0434\u0430\u0442\u0443 \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u0430?"}, "question": "How many total tours were there for each ranking date?", "kb_id": "wta_1"}, {"id": "D_0482", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]], [0, [0, [0, 38, false], null]]]], "where": [], "groupBy": [[0, 38, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]], [0, [0, [0, 38, false], null]]]], "where": [], "groupBy": [[0, 38, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Find", "the", "number", "of", "matches", "happened", "in", "each", "year", "."], "ru": ["\u041d\u0430\u0439\u0434\u0438\u0442\u0435", "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e", "\u043c\u0430\u0442\u0447\u0435\u0439", "\u0437\u0430", "\u043a\u0430\u0436\u0434\u044b\u0439", "\u0433\u043e\u0434", "."]}, "query_toks": {"en": ["select", "count", "(", "*", ")", ",", "year", "from", "matches", "group", "by", "year", ";"], "ru": ["select", "count", "(", "*", ")", ",", "year", "from", "matches", "group", "by", "year", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "*", ")", ",", "year", "from", "matches", "group", "by", "year", ";"], "ru": ["select", "count", "(", "*", ")", ",", "year", "from", "matches", "group", "by", "year", ";"]}, "masked_query": "SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR;", "question_pauq": {"ru": "\u041d\u0430\u0439\u0434\u0438\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0430\u0442\u0447\u0435\u0439 \u0437\u0430 \u043a\u0430\u0436\u0434\u044b\u0439 \u0433\u043e\u0434."}, "question": "Find the number of matches happened in each year.", "kb_id": "wta_1"}, {"id": "D_0483", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]], [0, [0, [0, 38, false], null]]]], "where": [], "groupBy": [[0, 38, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]], [0, [0, [0, 38, false], null]]]], "where": [], "groupBy": [[0, 38, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["How", "many", "matches", "were", "played", "in", "each", "year", "?"], "ru": ["\u0421\u043a\u043e\u043b\u044c\u043a\u043e", "\u043c\u0430\u0442\u0447\u0435\u0439", "\u0438\u0433\u0440\u0430\u043b\u043e\u0441\u044c", "\u0432", "\u0433\u043e\u0434", "?"]}, "query_toks": {"en": ["select", "count", "(", "*", ")", ",", "year", "from", "matches", "group", "by", "year", ";"], "ru": ["select", "count", "(", "*", ")", ",", "year", "from", "matches", "group", "by", "year", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "*", ")", ",", "year", "from", "matches", "group", "by", "year", ";"], "ru": ["select", "count", "(", "*", ")", ",", "year", "from", "matches", "group", "by", "year", ";"]}, "masked_query": "SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR;", "question_pauq": {"ru": "\u0421\u043a\u043e\u043b\u044c\u043a\u043e \u043c\u0430\u0442\u0447\u0435\u0439 \u0438\u0433\u0440\u0430\u043b\u043e\u0441\u044c \u0432 \u0433\u043e\u0434?"}, "question": "How many matches were played in each year?", "kb_id": "wta_1"}, {"id": "D_0484", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [true, [[0, [0, [0, 34, false], null]], [0, [0, [0, 35, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["asc", [[0, [0, 28, false], null]]], "limit": 3, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [true, [[0, [0, [0, 34, false], null]], [0, [0, [0, 35, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["asc", [[0, [0, 28, false], null]]], "limit": 3, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Find", "the", "name", "and", "rank", "of", "the", "3", "youngest", "winners", "across", "all", "matches", "."], "ru": ["\u041d\u0430\u0439\u0434\u0438\u0442\u0435", "\u0438\u043c\u0435\u043d\u0430", "\u0438", "\u0440\u0430\u043d\u0433\u0438", "\u0442\u0440\u0435\u0445", "\u0441\u0430\u043c\u044b\u0445", "\u043c\u043e\u043b\u043e\u0434\u044b\u0445", "\u043f\u043e\u0431\u0435\u0434\u0438\u0442\u0435\u043b\u0435\u0439", "\u0432\u043e", "\u0432\u0441\u0435\u0445", "\u043c\u0430\u0442\u0447\u0430\u0445", "."]}, "query_toks": {"en": ["select", "distinct", "winner_name", ",", "winner_rank", "from", "matches", "order", "by", "winner_age", "limit", "3", ";"], "ru": ["select", "distinct", "winner_name", ",", "winner_rank", "from", "matches", "order", "by", "winner_age", "limit", "3", ";"]}, "query_toks_no_values": {"en": ["select", "distinct", "winner_name", ",", "winner_rank", "from", "matches", "order", "by", "winner_age", "limit", "3", ";"], "ru": ["select", "distinct", "winner_name", ",", "winner_rank", "from", "matches", "order", "by", "winner_age", "limit", "3", ";"]}, "masked_query": "SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3;", "question_pauq": {"ru": "\u041d\u0430\u0439\u0434\u0438\u0442\u0435 \u0438\u043c\u0435\u043d\u0430 \u0438 \u0440\u0430\u043d\u0433\u0438 \u0442\u0440\u0435\u0445 \u0441\u0430\u043c\u044b\u0445 \u043c\u043e\u043b\u043e\u0434\u044b\u0445 \u043f\u043e\u0431\u0435\u0434\u0438\u0442\u0435\u043b\u0435\u0439 \u0432\u043e \u0432\u0441\u0435\u0445 \u043c\u0430\u0442\u0447\u0430\u0445."}, "question": "Find the name and rank of the 3 youngest winners across all matches.", "kb_id": "wta_1"}, {"id": "D_0485", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [true, [[0, [0, [0, 34, false], null]], [0, [0, [0, 35, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["asc", [[0, [0, 28, false], null]]], "limit": 3, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [true, [[0, [0, [0, 34, false], null]], [0, [0, [0, 35, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["asc", [[0, [0, 28, false], null]]], "limit": 3, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "the", "names", "and", "ranks", "of", "the", "three", "youngest", "winners", "across", "all", "matches", "?"], "ru": ["\u041a\u0430\u043a\u043e\u0432\u044b", "\u0438\u043c\u0435\u043d\u0430", "\u0438", "\u0440\u0430\u043d\u0433\u0438", "\u0442\u0440\u0435\u0445", "\u0441\u0430\u043c\u044b\u0445", "\u043c\u043e\u043b\u043e\u0434\u044b\u0445", "\u043f\u043e\u0431\u0435\u0434\u0438\u0442\u0435\u043b\u0435\u0439", "\u0432\u043e", "\u0432\u0441\u0435\u0445", "\u043c\u0430\u0442\u0447\u0430\u0445", "?"]}, "query_toks": {"en": ["select", "distinct", "winner_name", ",", "winner_rank", "from", "matches", "order", "by", "winner_age", "limit", "3", ";"], "ru": ["select", "distinct", "winner_name", ",", "winner_rank", "from", "matches", "order", "by", "winner_age", "limit", "3", ";"]}, "query_toks_no_values": {"en": ["select", "distinct", "winner_name", ",", "winner_rank", "from", "matches", "order", "by", "winner_age", "limit", "3", ";"], "ru": ["select", "distinct", "winner_name", ",", "winner_rank", "from", "matches", "order", "by", "winner_age", "limit", "3", ";"]}, "masked_query": "SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3;", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0432\u044b \u0438\u043c\u0435\u043d\u0430 \u0438 \u0440\u0430\u043d\u0433\u0438 \u0442\u0440\u0435\u0445 \u0441\u0430\u043c\u044b\u0445 \u043c\u043e\u043b\u043e\u0434\u044b\u0445 \u043f\u043e\u0431\u0435\u0434\u0438\u0442\u0435\u043b\u0435\u0439 \u0432\u043e \u0432\u0441\u0435\u0445 \u043c\u0430\u0442\u0447\u0430\u0445?"}, "question": "What are the names and ranks of the three youngest winners across all matches?", "kb_id": "wta_1"}, {"id": "D_0486", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  '\u0420\u043e\u0441\u0441\u0438\u044f \u041f\u0435\u0440\u0432\u0430\u044f' AND winner_hand  =  'L';"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[3, [0, [0, 34, true], null]]]], "where": [[false, 2, [0, [0, 27, false], null], "\"WTA Championships\"", null], "and", [false, 2, [0, [0, 30, false], null], "\"L\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[3, [0, [0, 34, true], null]]]], "where": [[false, 2, [0, [0, 27, false], null], "\"\u0420\u043e\u0441\u0441\u0438\u044f \u041f\u0435\u0440\u0432\u0430\u044f\"", null], "and", [false, 2, [0, [0, 30, false], null], "\"L\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["How", "many", "different", "winners", "both", "participated", "in", "the", "WTA", "Championships", "and", "were", "left", "handed", "?"], "ru": ["\u0421\u043a\u043e\u043b\u044c\u043a\u043e", "\u0440\u0430\u0437\u043d\u044b\u0445", "\u043f\u043e\u0431\u0435\u0434\u0438\u0442\u0435\u043b\u0435\u0439", "\u0443\u0447\u0430\u0441\u0442\u0432\u043e\u0432\u0430\u043b\u0438", "\u0432", "\u0420\u043e\u0441\u0441\u0438\u044f", "\u041f\u0435\u0440\u0432\u0430\u044f", "\u0438", "\u0431\u044b\u043b\u0438", "\u043b\u0435\u0432\u0448\u0430\u043c\u0438", "?"]}, "query_toks": {"en": ["select", "count", "(", "distinct", "winner_name", ")", "from", "matches", "where", "tourney_name", "=", "\"WTA Championships\"", "and", "winner_hand", "=", "\"L\"", ";"], "ru": ["select", "count", "(", "distinct", "winner_name", ")", "from", "matches", "where", "tourney_name", "=", "\"\u0420\u043e\u0441\u0441\u0438\u044f \u041f\u0435\u0440\u0432\u0430\u044f\"", "and", "winner_hand", "=", "\"L\"", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "distinct", "winner_name", ")", "from", "matches", "where", "tourney_name", "=", "value", "and", "winner_hand", "=", "value", ";"], "ru": ["select", "count", "(", "distinct", "winner_name", ")", "from", "matches", "where", "tourney_name", "=", "value", "and", "winner_hand", "=", "value", ";"]}, "masked_query": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L';", "question_pauq": {"ru": "\u0421\u043a\u043e\u043b\u044c\u043a\u043e \u0440\u0430\u0437\u043d\u044b\u0445 \u043f\u043e\u0431\u0435\u0434\u0438\u0442\u0435\u043b\u0435\u0439 \u0443\u0447\u0430\u0441\u0442\u0432\u043e\u0432\u0430\u043b\u0438 \u0432 \u0420\u043e\u0441\u0441\u0438\u044f \u041f\u0435\u0440\u0432\u0430\u044f \u0438 \u0431\u044b\u043b\u0438 \u043b\u0435\u0432\u0448\u0430\u043c\u0438?"}, "question": "How many different winners both participated in the WTA Championships and were left handed?", "kb_id": "wta_1"}, {"id": "D_0487", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  '\u0420\u043e\u0441\u0441\u0438\u044f \u041f\u0435\u0440\u0432\u0430\u044f' AND winner_hand  =  'L';"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[3, [0, [0, 34, true], null]]]], "where": [[false, 2, [0, [0, 27, false], null], "\"WTA Championships\"", null], "and", [false, 2, [0, [0, 30, false], null], "\"L\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[3, [0, [0, 34, true], null]]]], "where": [[false, 2, [0, [0, 27, false], null], "\"\u0420\u043e\u0441\u0441\u0438\u044f \u041f\u0435\u0440\u0432\u0430\u044f\"", null], "and", [false, 2, [0, [0, 30, false], null], "\"L\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Find", "the", "number", "of", "left", "handed", "winners", "who", "participated", "in", "the", "WTA", "Championships", "."], "ru": ["\u041d\u0430\u0439\u0434\u0438\u0442\u0435", "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e", "\u043f\u043e\u0431\u0435\u0434\u0438\u0442\u0435\u043b\u0435\u0439-\u043b\u0435\u0432\u0448\u0435\u0439", ",", "\u043a\u043e\u0442\u043e\u0440\u044b\u0435", "\u0443\u0447\u0430\u0441\u0442\u0432\u043e\u0432\u0430\u043b\u0438", "\u0432", "\u0420\u043e\u0441\u0441\u0438\u044f", "\u041f\u0435\u0440\u0432\u0430\u044f", "."]}, "query_toks": {"en": ["select", "count", "(", "distinct", "winner_name", ")", "from", "matches", "where", "tourney_name", "=", "\"WTA Championships\"", "and", "winner_hand", "=", "\"L\"", ";"], "ru": ["select", "count", "(", "distinct", "winner_name", ")", "from", "matches", "where", "tourney_name", "=", "\"\u0420\u043e\u0441\u0441\u0438\u044f \u041f\u0435\u0440\u0432\u0430\u044f\"", "and", "winner_hand", "=", "\"L\"", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "distinct", "winner_name", ")", "from", "matches", "where", "tourney_name", "=", "value", "and", "winner_hand", "=", "value", ";"], "ru": ["select", "count", "(", "distinct", "winner_name", ")", "from", "matches", "where", "tourney_name", "=", "value", "and", "winner_hand", "=", "value", ";"]}, "masked_query": "SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L';", "question_pauq": {"ru": "\u041d\u0430\u0439\u0434\u0438\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u0431\u0435\u0434\u0438\u0442\u0435\u043b\u0435\u0439-\u043b\u0435\u0432\u0448\u0435\u0439, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0443\u0447\u0430\u0441\u0442\u0432\u043e\u0432\u0430\u043b\u0438 \u0432 \u0420\u043e\u0441\u0441\u0438\u044f \u041f\u0435\u0440\u0432\u0430\u044f."}, "question": "Find the number of left handed winners who participated in the WTA Championships.", "kb_id": "wta_1"}, {"id": "D_0488", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 32, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]], [0, [0, [0, 6, false], null]], [0, [0, [0, 5, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 36, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 32, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]], [0, [0, [0, 6, false], null]], [0, [0, [0, 5, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 36, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Find", "the", "first", "name", ",", "country", "code", "and", "birth", "date", "of", "the", "winner", "who", "has", "the", "highest", "rank", "points", "in", "all", "matches", "."], "ru": ["\u041d\u0430\u0439\u0434\u0438\u0442\u0435", "\u0438\u043c\u044f", ",", "\u043a\u043e\u0434", "\u0441\u0442\u0440\u0430\u043d\u044b", "\u0438", "\u0434\u0430\u0442\u0443", "\u0440\u043e\u0436\u0434\u0435\u043d\u0438\u044f", "\u043f\u043e\u0431\u0435\u0434\u0438\u0442\u0435\u043b\u044f", ",", "\u043d\u0430\u0431\u0440\u0430\u0432\u0448\u0435\u0433\u043e", "\u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0435\u0435", "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e", "\u043e\u0447\u043a\u043e\u0432", "\u0432\u043e", "\u0432\u0441\u0435\u0445", "\u043c\u0430\u0442\u0447\u0430\u0445", "."]}, "query_toks": {"en": ["select", "t1.first_name", ",", "t1.country_code", ",", "t1.birth_date", "from", "players", "as", "t1", "join", "matches", "as", "t2", "on", "t1.player_id", "=", "t2.winner_id", "order", "by", "t2.winner_rank_points", "desc", "limit", "1", ";"], "ru": ["select", "t1.first_name", ",", "t1.country_code", ",", "t1.birth_date", "from", "players", "as", "t1", "join", "matches", "as", "t2", "on", "t1.player_id", "=", "t2.winner_id", "order", "by", "t2.winner_rank_points", "desc", "limit", "1", ";"]}, "query_toks_no_values": {"en": ["select", "t1.first_name", ",", "t1.country_code", ",", "t1.birth_date", "from", "players", "as", "t1", "join", "matches", "as", "t2", "on", "t1.player_id", "=", "t2.winner_id", "order", "by", "t2.winner_rank_points", "desc", "limit", "1", ";"], "ru": ["select", "t1.first_name", ",", "t1.country_code", ",", "t1.birth_date", "from", "players", "as", "t1", "join", "matches", "as", "t2", "on", "t1.player_id", "=", "t2.winner_id", "order", "by", "t2.winner_rank_points", "desc", "limit", "1", ";"]}, "masked_query": "SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1;", "question_pauq": {"ru": "\u041d\u0430\u0439\u0434\u0438\u0442\u0435 \u0438\u043c\u044f, \u043a\u043e\u0434 \u0441\u0442\u0440\u0430\u043d\u044b \u0438 \u0434\u0430\u0442\u0443 \u0440\u043e\u0436\u0434\u0435\u043d\u0438\u044f \u043f\u043e\u0431\u0435\u0434\u0438\u0442\u0435\u043b\u044f, \u043d\u0430\u0431\u0440\u0430\u0432\u0448\u0435\u0433\u043e \u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0447\u043a\u043e\u0432 \u0432\u043e \u0432\u0441\u0435\u0445 \u043c\u0430\u0442\u0447\u0430\u0445."}, "question": "Find the first name, country code and birth date of the winner who has the highest rank points in all matches.", "kb_id": "wta_1"}, {"id": "D_0489", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 32, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]], [0, [0, [0, 6, false], null]], [0, [0, [0, 5, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 36, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 32, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]], [0, [0, [0, 6, false], null]], [0, [0, [0, 5, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 36, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "first", "name", ",", "country", "code", ",", "and", "birth", "date", "of", "the", "player", "with", "the", "most", "winner", "rank", "points", "across", "all", "matches", "?"], "ru": ["\u041a\u0430\u043a\u043e\u0432\u044b", "\u0438\u043c\u044f", ",", "\u043a\u043e\u0434", "\u0441\u0442\u0440\u0430\u043d\u044b", "\u0438", "\u0434\u0430\u0442\u0430", "\u0440\u043e\u0436\u0434\u0435\u043d\u0438\u044f", "\u0438\u0433\u0440\u043e\u043a\u0430", ",", "\u043d\u0430\u0431\u0440\u0430\u0432\u0448\u0435\u0433\u043e", "\u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0435\u0435", "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e", "\u043e\u0447\u043a\u043e\u0432", "\u043f\u043e\u0431\u0435\u0434\u0438\u0442\u0435\u043b\u044f", "\u0432\u043e", "\u0432\u0441\u0435\u0445", "\u043c\u0430\u0442\u0447\u0430\u0445", "?"]}, "query_toks": {"en": ["select", "t1.first_name", ",", "t1.country_code", ",", "t1.birth_date", "from", "players", "as", "t1", "join", "matches", "as", "t2", "on", "t1.player_id", "=", "t2.winner_id", "order", "by", "t2.winner_rank_points", "desc", "limit", "1", ";"], "ru": ["select", "t1.first_name", ",", "t1.country_code", ",", "t1.birth_date", "from", "players", "as", "t1", "join", "matches", "as", "t2", "on", "t1.player_id", "=", "t2.winner_id", "order", "by", "t2.winner_rank_points", "desc", "limit", "1", ";"]}, "query_toks_no_values": {"en": ["select", "t1.first_name", ",", "t1.country_code", ",", "t1.birth_date", "from", "players", "as", "t1", "join", "matches", "as", "t2", "on", "t1.player_id", "=", "t2.winner_id", "order", "by", "t2.winner_rank_points", "desc", "limit", "1", ";"], "ru": ["select", "t1.first_name", ",", "t1.country_code", ",", "t1.birth_date", "from", "players", "as", "t1", "join", "matches", "as", "t2", "on", "t1.player_id", "=", "t2.winner_id", "order", "by", "t2.winner_rank_points", "desc", "limit", "1", ";"]}, "masked_query": "SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1;", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0432\u044b \u0438\u043c\u044f, \u043a\u043e\u0434 \u0441\u0442\u0440\u0430\u043d\u044b \u0438 \u0434\u0430\u0442\u0430 \u0440\u043e\u0436\u0434\u0435\u043d\u0438\u044f \u0438\u0433\u0440\u043e\u043a\u0430, \u043d\u0430\u0431\u0440\u0430\u0432\u0448\u0435\u0433\u043e \u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0447\u043a\u043e\u0432 \u043f\u043e\u0431\u0435\u0434\u0438\u0442\u0435\u043b\u044f \u0432\u043e \u0432\u0441\u0435\u0445 \u043c\u0430\u0442\u0447\u0430\u0445?"}, "question": "What is the first name, country code, and birth date of the player with the most winner rank points across all matches?", "kb_id": "wta_1"}, {"id": "D_0490", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT count(*) ,  hand FROM players GROUP BY hand;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]], [0, [0, [0, 4, false], null]]]], "where": [], "groupBy": [[0, 4, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]], [0, [0, [0, 4, false], null]]]], "where": [], "groupBy": [[0, 4, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Find", "the", "number", "of", "players", "for", "each", "hand", "type", "."], "ru": ["\u041d\u0430\u0439\u0434\u0438\u0442\u0435", "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e", "\u0438\u0433\u0440\u043e\u043a\u043e\u0432", "\u0434\u043b\u044f", "\u043a\u0430\u0436\u0434\u043e\u0433\u043e", "\u0442\u0438\u043f\u0430", "\u0440\u0443\u043a\u0438", "."]}, "query_toks": {"en": ["select", "count", "(", "*", ")", ",", "hand", "from", "players", "group", "by", "hand", ";"], "ru": ["select", "count", "(", "*", ")", ",", "hand", "from", "players", "group", "by", "hand", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "*", ")", ",", "hand", "from", "players", "group", "by", "hand", ";"], "ru": ["select", "count", "(", "*", ")", ",", "hand", "from", "players", "group", "by", "hand", ";"]}, "masked_query": "SELECT count(*) ,  hand FROM players GROUP BY hand;", "question_pauq": {"ru": "\u041d\u0430\u0439\u0434\u0438\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0438\u0433\u0440\u043e\u043a\u043e\u0432 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0442\u0438\u043f\u0430 \u0440\u0443\u043a\u0438."}, "question": "Find the number of players for each hand type.", "kb_id": "wta_1"}, {"id": "D_0491", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT count(*) ,  hand FROM players GROUP BY hand;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]], [0, [0, [0, 4, false], null]]]], "where": [], "groupBy": [[0, 4, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]], [0, [0, [0, 4, false], null]]]], "where": [], "groupBy": [[0, 4, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["How", "many", "players", "are", "there", "for", "each", "hand", "type", "?"], "ru": ["\u0421\u043a\u043e\u043b\u044c\u043a\u043e", "\u0438\u0433\u0440\u043e\u043a\u043e\u0432", "\u043f\u043e\u0434\u0445\u043e\u0434\u0438\u0442", "\u0434\u043b\u044f", "\u043a\u0430\u0436\u0434\u043e\u0433\u043e", "\u0442\u0438\u043f\u0430", "\u0440\u0443\u043a", "?"]}, "query_toks": {"en": ["select", "count", "(", "*", ")", ",", "hand", "from", "players", "group", "by", "hand", ";"], "ru": ["select", "count", "(", "*", ")", ",", "hand", "from", "players", "group", "by", "hand", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "*", ")", ",", "hand", "from", "players", "group", "by", "hand", ";"], "ru": ["select", "count", "(", "*", ")", ",", "hand", "from", "players", "group", "by", "hand", ";"]}, "masked_query": "SELECT count(*) ,  hand FROM players GROUP BY hand;", "question_pauq": {"ru": "\u0421\u043a\u043e\u043b\u044c\u043a\u043e \u0438\u0433\u0440\u043e\u043a\u043e\u0432 \u043f\u043e\u0434\u0445\u043e\u0434\u0438\u0442 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0442\u0438\u043f\u0430 \u0440\u0443\u043a?"}, "question": "How many players are there for each hand type?", "kb_id": "wta_1"}, {"id": "D_0492", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT count(*) FROM ship WHERE disposition_of_ship  =  '\u041f\u043e\u0434\u043e\u0440\u0432\u0430\u043d';"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 13, false], null], "\"Captured\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 13, false], null], "\"\u041f\u043e\u0434\u043e\u0440\u0432\u0430\u043d\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["How", "many", "ships", "ended", "up", "being", "'Captured", "'", "?"], "ru": ["\u0421\u043a\u043e\u043b\u044c\u043a\u043e", "\u043a\u043e\u0440\u0430\u0431\u043b\u0435\u0439", "\u0431\u044b\u043b\u043e", "\u043f\u043e\u0434\u043e\u0440\u0432\u0430\u043d\u043e", "?"]}, "query_toks": {"en": ["select", "count", "(", "*", ")", "from", "ship", "where", "disposition_of_ship", "=", "\"Captured\"", ";"], "ru": ["select", "count", "(", "*", ")", "from", "ship", "where", "disposition_of_ship", "=", "\"\u041f\u043e\u0434\u043e\u0440\u0432\u0430\u043d\"", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "*", ")", "from", "ship", "where", "disposition_of_ship", "=", "value", ";"], "ru": ["select", "count", "(", "*", ")", "from", "ship", "where", "disposition_of_ship", "=", "value", ";"]}, "masked_query": "SELECT count(*) FROM ship WHERE disposition_of_ship  =  'Captured';", "question_pauq": {"ru": "\u0421\u043a\u043e\u043b\u044c\u043a\u043e \u043a\u043e\u0440\u0430\u0431\u043b\u0435\u0439 \u0431\u044b\u043b\u043e \u043f\u043e\u0434\u043e\u0440\u0432\u0430\u043d\u043e?"}, "question": "How many ships ended up being 'Captured'?", "kb_id": "battle_death"}, {"id": "D_0493", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT name ,  tonnage FROM ship ORDER BY name DESC;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 9, false], null]], [0, [0, [0, 10, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 9, false], null]]], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 9, false], null]], [0, [0, [0, 10, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 9, false], null]]], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["List", "the", "name", "and", "tonnage", "ordered", "by", "in", "descending", "alphaetical", "order", "for", "the", "names", "."], "ru": ["\u0423\u043a\u0430\u0437\u0430\u0442\u044c", "\u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435", "\u0438", "\u0442\u043e\u043d\u043d\u0430\u0436", "\u0432", "\u043f\u043e\u0440\u044f\u0434\u043a\u0435", "\u0443\u0431\u044b\u0432\u0430\u043d\u0438\u044f", "\u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0439", "\u0432", "\u0430\u043b\u0444\u0430\u0432\u0438\u0442\u043d\u043e\u043c", "\u043f\u043e\u0440\u044f\u0434\u043a\u0435", "."]}, "query_toks": {"en": ["select", "name", ",", "tonnage", "from", "ship", "order", "by", "name", "desc", ";"], "ru": ["select", "name", ",", "tonnage", "from", "ship", "order", "by", "name", "desc", ";"]}, "query_toks_no_values": {"en": ["select", "name", ",", "tonnage", "from", "ship", "order", "by", "name", "desc", ";"], "ru": ["select", "name", ",", "tonnage", "from", "ship", "order", "by", "name", "desc", ";"]}, "masked_query": "SELECT name ,  tonnage FROM ship ORDER BY name DESC;", "question_pauq": {"ru": "\u0423\u043a\u0430\u0437\u0430\u0442\u044c \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u0438 \u0442\u043e\u043d\u043d\u0430\u0436 \u0432 \u043f\u043e\u0440\u044f\u0434\u043a\u0435 \u0443\u0431\u044b\u0432\u0430\u043d\u0438\u044f \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0439 \u0432 \u0430\u043b\u0444\u0430\u0432\u0438\u0442\u043d\u043e\u043c \u043f\u043e\u0440\u044f\u0434\u043a\u0435."}, "question": "List the name and tonnage ordered by in descending alphaetical order for the names.", "kb_id": "battle_death"}, {"id": "D_0494", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT name ,  date FROM battle;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 2, false], null]], [0, [0, [0, 3, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 2, false], null]], [0, [0, [0, 3, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["List", "the", "name", ",", "date", "and", "result", "of", "each", "battle", "."], "ru": ["\u041f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0438\u0442\u0435", "\u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435", ",", "\u0434\u0430\u0442\u0443", "\u0438", "\u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442", "\u043a\u0430\u0436\u0434\u043e\u0433\u043e", "\u0431\u043e\u044f", "."]}, "query_toks": {"en": ["select", "name", ",", "date", "from", "battle", ";"], "ru": ["select", "name", ",", "date", "from", "battle", ";"]}, "query_toks_no_values": {"en": ["select", "name", ",", "date", "from", "battle", ";"], "ru": ["select", "name", ",", "date", "from", "battle", ";"]}, "masked_query": "SELECT name ,  date FROM battle;", "question_pauq": {"ru": "\u041f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0438\u0442\u0435 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435, \u0434\u0430\u0442\u0443 \u0438 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0431\u043e\u044f."}, "question": "List the name, date and result of each battle.", "kb_id": "battle_death"}, {"id": "D_0495", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT max(killed) ,  min(killed) FROM death;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[1, [0, [0, 17, false], null]], [2, [0, [0, 17, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[1, [0, [0, 17, false], null]], [2, [0, [0, 17, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "maximum", "and", "minimum", "death", "toll", "caused", "each", "time", "?"], "ru": ["\u041a\u0430\u043a\u043e\u0435", "\u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435", "\u0438", "\u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435", "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e", "\u043f\u043e\u0433\u0438\u0431\u0448\u0438\u0445", "\u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442", "\u043a\u0430\u0436\u0434\u044b\u0439", "\u0440\u0430\u0437", "?"]}, "query_toks": {"en": ["select", "max", "(", "killed", ")", ",", "min", "(", "killed", ")", "from", "death", ";"], "ru": ["select", "max", "(", "killed", ")", ",", "min", "(", "killed", ")", "from", "death", ";"]}, "query_toks_no_values": {"en": ["select", "max", "(", "killed", ")", ",", "min", "(", "killed", ")", "from", "death", ";"], "ru": ["select", "max", "(", "killed", ")", ",", "min", "(", "killed", ")", "from", "death", ";"]}, "masked_query": "SELECT max(killed) ,  min(killed) FROM death;", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0435 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0438 \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u0433\u0438\u0431\u0448\u0438\u0445 \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0434\u0438\u0442 \u043a\u0430\u0436\u0434\u044b\u0439 \u0440\u0430\u0437?"}, "question": "What is maximum and minimum death toll caused each time?", "kb_id": "battle_death"}, {"id": "D_0496", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT avg(injured) FROM death;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[5, [0, [0, 18, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[5, [0, [0, 18, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "average", "number", "of", "injuries", "caused", "each", "time", "?"], "ru": ["\u041a\u0430\u043a\u043e\u0432\u043e", "\u0441\u0440\u0435\u0434\u043d\u0435\u0435", "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e", "\u0442\u0440\u0430\u0432\u043c", ",", "\u043f\u0440\u0438\u0447\u0438\u043d\u0435\u043d\u043d\u044b\u0445", "\u043a\u0430\u0436\u0434\u044b\u0439", "\u0440\u0430\u0437", "?"]}, "query_toks": {"en": ["select", "avg", "(", "injured", ")", "from", "death", ";"], "ru": ["select", "avg", "(", "injured", ")", "from", "death", ";"]}, "query_toks_no_values": {"en": ["select", "avg", "(", "injured", ")", "from", "death", ";"], "ru": ["select", "avg", "(", "injured", ")", "from", "death", ";"]}, "masked_query": "SELECT avg(injured) FROM death;", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0432\u043e \u0441\u0440\u0435\u0434\u043d\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0442\u0440\u0430\u0432\u043c, \u043f\u0440\u0438\u0447\u0438\u043d\u0435\u043d\u043d\u044b\u0445 \u043a\u0430\u0436\u0434\u044b\u0439 \u0440\u0430\u0437?"}, "question": "What is the average number of injuries caused each time?", "kb_id": "battle_death"}, {"id": "D_0497", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T1.killed ,  T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  '100';"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 14, false], null], [0, 8, false], null]]}, "select": [false, [[0, [0, [0, 17, false], null]], [0, [0, [0, 18, false], null]]]], "where": [[false, 2, [0, [0, 10, false], null], "\"t\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 14, false], null], [0, 8, false], null]]}, "select": [false, [[0, [0, [0, 17, false], null]], [0, [0, [0, 18, false], null]]]], "where": [[false, 2, [0, [0, 10, false], null], "\"100\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "the", "death", "and", "injury", "situations", "caused", "by", "the", "ship", "with", "tonnage", "'t", "'", "?"], "ru": ["\u041a\u0430\u043a\u0438\u0435", "\u0441\u0438\u0442\u0443\u0430\u0446\u0438\u0438", "\u0441\u043e", "\u0441\u043c\u0435\u0440\u0442\u0435\u043b\u044c\u043d\u044b\u043c", "\u0438\u0441\u0445\u043e\u0434\u043e\u043c", "\u0438\u043b\u0438", "\u0442\u0435\u043b\u0435\u0441\u043d\u044b\u043c\u0438", "\u043f\u043e\u0432\u0440\u0435\u0436\u0434\u0435\u043d\u0438\u044f\u043c\u0438", "\u0432\u044b\u0437\u0432\u0430\u043d\u044b", "\u0441\u0443\u0434\u043d\u043e\u043c", "\u0441", "\u0442\u043e\u043d\u043d\u0430\u0436\u0435\u043c", "\u201c", "100", "''", "?"]}, "query_toks": {"en": ["select", "t1.killed", ",", "t1.injured", "from", "death", "as", "t1", "join", "ship", "as", "t2", "on", "t1.caused_by_ship_id", "=", "t2.id", "where", "t2.tonnage", "=", "\"t\"", ";"], "ru": ["select", "t1.killed", ",", "t1.injured", "from", "death", "as", "t1", "join", "ship", "as", "t2", "on", "t1.caused_by_ship_id", "=", "t2.id", "where", "t2.tonnage", "=", "\"100\"", ";"]}, "query_toks_no_values": {"en": ["select", "t1.killed", ",", "t1.injured", "from", "death", "as", "t1", "join", "ship", "as", "t2", "on", "t1.caused_by_ship_id", "=", "t2.id", "where", "t2.tonnage", "=", "value", ";"], "ru": ["select", "t1.killed", ",", "t1.injured", "from", "death", "as", "t1", "join", "ship", "as", "t2", "on", "t1.caused_by_ship_id", "=", "t2.id", "where", "t2.tonnage", "=", "value", ";"]}, "masked_query": "SELECT T1.killed ,  T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't';", "question_pauq": {"ru": "\u041a\u0430\u043a\u0438\u0435 \u0441\u0438\u0442\u0443\u0430\u0446\u0438\u0438 \u0441\u043e \u0441\u043c\u0435\u0440\u0442\u0435\u043b\u044c\u043d\u044b\u043c \u0438\u0441\u0445\u043e\u0434\u043e\u043c \u0438\u043b\u0438 \u0442\u0435\u043b\u0435\u0441\u043d\u044b\u043c\u0438 \u043f\u043e\u0432\u0440\u0435\u0436\u0434\u0435\u043d\u0438\u044f\u043c\u0438 \u0432\u044b\u0437\u0432\u0430\u043d\u044b \u0441\u0443\u0434\u043d\u043e\u043c \u0441 \u0442\u043e\u043d\u043d\u0430\u0436\u0435\u043c \u201c100\"?"}, "question": "What are the death and injury situations caused by the ship with tonnage 't'?", "kb_id": "battle_death"}, {"id": "D_0498", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT name ,  RESULT FROM battle WHERE bulgarian_commander != '\u041d\u0430\u0445\u0438\u043c\u043e\u0432';"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 2, false], null]], [0, [0, [0, 6, false], null]]]], "where": [[false, 7, [0, [0, 4, false], null], "\"Boril\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 2, false], null]], [0, [0, [0, 6, false], null]]]], "where": [[false, 7, [0, [0, 4, false], null], "\"\u041d\u0430\u0445\u0438\u043c\u043e\u0432\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "the", "name", "and", "results", "of", "the", "battles", "when", "the", "bulgarian", "commander", "is", "not", "'Boril", "'"], "ru": ["\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u044f", "\u0438", "\u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b", "\u0441\u0440\u0430\u0436\u0435\u043d\u0438\u0439", ",", "\u043a\u043e\u0433\u0434\u0430", "\u0431\u043e\u043b\u0433\u0430\u0440\u0441\u043a\u0438\u0439", "\u043a\u043e\u043c\u0430\u043d\u0434\u0438\u0440", "\u043d\u0435", "\u041d\u0430\u0445\u0438\u043c\u043e\u0432"]}, "query_toks": {"en": ["select", "name", ",", "result", "from", "battle", "where", "bulgarian_commander", "!=", "\"Boril\"", ";"], "ru": ["select", "name", ",", "result", "from", "battle", "where", "bulgarian_commander", "!=", "\"\u041d\u0430\u0445\u0438\u043c\u043e\u0432\"", ";"]}, "query_toks_no_values": {"en": ["select", "name", ",", "result", "from", "battle", "where", "bulgarian_commander", "!=", "value", ";"], "ru": ["select", "name", ",", "result", "from", "battle", "where", "bulgarian_commander", "!=", "value", ";"]}, "masked_query": "SELECT name ,  RESULT FROM battle WHERE bulgarian_commander != 'Boril';", "question_pauq": {"ru": "\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u044f \u0438 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0441\u0440\u0430\u0436\u0435\u043d\u0438\u0439, \u043a\u043e\u0433\u0434\u0430 \u0431\u043e\u043b\u0433\u0430\u0440\u0441\u043a\u0438\u0439 \u043a\u043e\u043c\u0430\u043d\u0434\u0438\u0440 \u043d\u0435 \u041d\u0430\u0445\u0438\u043c\u043e\u0432"}, "question": "What are the name and results of the battles when the bulgarian commander is not 'Boril'", "kb_id": "battle_death"}, {"id": "D_0499", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT DISTINCT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.ship_type  =  '\u041a\u0440\u0435\u0439\u0441\u0435\u0440';"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 7, false], null]]}, "select": [true, [[0, [0, [0, 1, false], null]], [0, [0, [0, 2, false], null]]]], "where": [[false, 2, [0, [0, 11, false], null], "\"Brig\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 7, false], null]]}, "select": [true, [[0, [0, [0, 1, false], null]], [0, [0, [0, 2, false], null]]]], "where": [[false, 2, [0, [0, 11, false], null], "\"\u041a\u0440\u0435\u0439\u0441\u0435\u0440\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "the", "different", "ids", "and", "names", "of", "the", "battles", "that", "lost", "any", "'Brig", "'", "type", "shipes", "?"], "ru": ["\u041a\u0430\u043a\u043e\u0432\u044b", "\u0440\u0430\u0437\u043d\u044b\u0435", "id", "\u0438", "\u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f", "\u0441\u0440\u0430\u0436\u0435\u043d\u0438\u0439", ",", "\u0432", "\u043a\u043e\u0442\u043e\u0440\u044b\u0445", "\u0431\u044b\u043b\u0438", "\u043f\u043e\u0442\u0435\u0440\u044f\u043d\u044b", "\u043a\u043e\u0440\u0430\u0431\u043b\u0438", "\u0442\u0438\u043f\u0430", "\u00ab", "\u041a\u0440\u0435\u0439\u0441\u0435\u0440", "\u00bb", "?"]}, "query_toks": {"en": ["select", "distinct", "t1.id", ",", "t1.name", "from", "battle", "as", "t1", "join", "ship", "as", "t2", "on", "t1.id", "=", "t2.lost_in_battle", "where", "t2.ship_type", "=", "\"Brig\"", ";"], "ru": ["select", "distinct", "t1.id", ",", "t1.name", "from", "battle", "as", "t1", "join", "ship", "as", "t2", "on", "t1.id", "=", "t2.lost_in_battle", "where", "t2.ship_type", "=", "\"\u041a\u0440\u0435\u0439\u0441\u0435\u0440\"", ";"]}, "query_toks_no_values": {"en": ["select", "distinct", "t1.id", ",", "t1.name", "from", "battle", "as", "t1", "join", "ship", "as", "t2", "on", "t1.id", "=", "t2.lost_in_battle", "where", "t2.ship_type", "=", "value", ";"], "ru": ["select", "distinct", "t1.id", ",", "t1.name", "from", "battle", "as", "t1", "join", "ship", "as", "t2", "on", "t1.id", "=", "t2.lost_in_battle", "where", "t2.ship_type", "=", "value", ";"]}, "masked_query": "SELECT DISTINCT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.ship_type  =  'Brig';", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0432\u044b \u0440\u0430\u0437\u043d\u044b\u0435 id \u0438 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f \u0441\u0440\u0430\u0436\u0435\u043d\u0438\u0439, \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0431\u044b\u043b\u0438 \u043f\u043e\u0442\u0435\u0440\u044f\u043d\u044b \u043a\u043e\u0440\u0430\u0431\u043b\u0438 \u0442\u0438\u043f\u0430 \u00ab\u041a\u0440\u0435\u0439\u0441\u0435\u0440\u00bb?"}, "question": "What are the different ids and names of the battles that lost any 'Brig' type shipes?", "kb_id": "battle_death"}, {"id": "D_0500", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle JOIN death AS T3 ON T2.id  =  T3.caused_by_ship_id GROUP BY T1.id HAVING sum(T3.killed)  >  10;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0], ["table_unit", 1], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 7, false], null], "and", [false, 2, [0, [0, 8, false], null], [0, 14, false], null]]}, "select": [false, [[0, [0, [0, 1, false], null]], [0, [0, [0, 2, false], null]]]], "where": [], "groupBy": [[0, 1, false]], "having": [[false, 3, [0, [4, 17, false], null], 10.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0], ["table_unit", 1], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 7, false], null], "and", [false, 2, [0, [0, 8, false], null], [0, 14, false], null]]}, "select": [false, [[0, [0, [0, 1, false], null]], [0, [0, [0, 2, false], null]]]], "where": [], "groupBy": [[0, 1, false]], "having": [[false, 3, [0, [4, 17, false], null], 10.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "the", "ids", "and", "names", "of", "the", "battles", "that", "led", "to", "more", "than", "10", "people", "killed", "in", "total", "."], "ru": ["\u041a\u0430\u043a\u043e\u0432\u044b", "id", "\u0438", "\u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f", "\u0441\u0440\u0430\u0436\u0435\u043d\u0438\u0439", ",", "\u0432", "\u043a\u043e\u0442\u043e\u0440\u044b\u0445", "\u0432", "\u043e\u0431\u0449\u0435\u0439", "\u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u0438", "\u043f\u043e\u0433\u0438\u0431\u043b\u043e", "\u0431\u043e\u043b\u0435\u0435", "10", "\u0447\u0435\u043b\u043e\u0432\u0435\u043a", "?"]}, "query_toks": {"en": ["select", "t1.id", ",", "t1.name", "from", "battle", "as", "t1", "join", "ship", "as", "t2", "on", "t1.id", "=", "t2.lost_in_battle", "join", "death", "as", "t3", "on", "t2.id", "=", "t3.caused_by_ship_id", "group", "by", "t1.id", "having", "sum", "(", "t3.killed", ")", ">", "10", ";"], "ru": ["select", "t1.id", ",", "t1.name", "from", "battle", "as", "t1", "join", "ship", "as", "t2", "on", "t1.id", "=", "t2.lost_in_battle", "join", "death", "as", "t3", "on", "t2.id", "=", "t3.caused_by_ship_id", "group", "by", "t1.id", "having", "sum", "(", "t3.killed", ")", ">", "10", ";"]}, "query_toks_no_values": {"en": ["select", "t1.id", ",", "t1.name", "from", "battle", "as", "t1", "join", "ship", "as", "t2", "on", "t1.id", "=", "t2.lost_in_battle", "join", "death", "as", "t3", "on", "t2.id", "=", "t3.caused_by_ship_id", "group", "by", "t1.id", "having", "sum", "(", "t3.killed", ")", ">", "10", ";"], "ru": ["select", "t1.id", ",", "t1.name", "from", "battle", "as", "t1", "join", "ship", "as", "t2", "on", "t1.id", "=", "t2.lost_in_battle", "join", "death", "as", "t3", "on", "t2.id", "=", "t3.caused_by_ship_id", "group", "by", "t1.id", "having", "sum", "(", "t3.killed", ")", ">", "10", ";"]}, "masked_query": "SELECT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle JOIN death AS T3 ON T2.id  =  T3.caused_by_ship_id GROUP BY T1.id HAVING sum(T3.killed)  >  10;", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0432\u044b id \u0438 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f \u0441\u0440\u0430\u0436\u0435\u043d\u0438\u0439, \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0432 \u043e\u0431\u0449\u0435\u0439 \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u043f\u043e\u0433\u0438\u0431\u043b\u043e \u0431\u043e\u043b\u0435\u0435 10 \u0447\u0435\u043b\u043e\u0432\u0435\u043a?"}, "question": "What are the ids and names of the battles that led to more than 10 people killed in total.", "kb_id": "battle_death"}, {"id": "D_0501", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T2.id ,  T2.name FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 14, false], null], [0, 8, false], null]]}, "select": [false, [[0, [0, [0, 8, false], null]], [0, [0, [0, 9, false], null]]]], "where": [], "groupBy": [[0, 8, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 14, false], null], [0, 8, false], null]]}, "select": [false, [[0, [0, [0, 8, false], null]], [0, [0, [0, 9, false], null]]]], "where": [], "groupBy": [[0, 8, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "ship", "id", "and", "name", "that", "caused", "most", "total", "injuries", "?"], "ru": ["\u041a\u0430\u043a\u043e\u0439", "id", "\u0438", "\u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435", "\u0443", "\u043a\u043e\u0440\u0430\u0431\u043b\u044f", "\u043d\u0430\u043d\u0435\u0441\u0448\u0435\u0433\u043e", "\u0431\u043e\u043b\u044c\u0448\u0435", "\u0432\u0441\u0435\u0433\u043e", "\u0442\u0440\u0430\u0432\u043c", "?"]}, "query_toks": {"en": ["select", "t2.id", ",", "t2.name", "from", "death", "as", "t1", "join", "ship", "as", "t2", "on", "t1.caused_by_ship_id", "=", "t2.id", "group", "by", "t2.id", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"], "ru": ["select", "t2.id", ",", "t2.name", "from", "death", "as", "t1", "join", "ship", "as", "t2", "on", "t1.caused_by_ship_id", "=", "t2.id", "group", "by", "t2.id", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"]}, "query_toks_no_values": {"en": ["select", "t2.id", ",", "t2.name", "from", "death", "as", "t1", "join", "ship", "as", "t2", "on", "t1.caused_by_ship_id", "=", "t2.id", "group", "by", "t2.id", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"], "ru": ["select", "t2.id", ",", "t2.name", "from", "death", "as", "t1", "join", "ship", "as", "t2", "on", "t1.caused_by_ship_id", "=", "t2.id", "group", "by", "t2.id", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"]}, "masked_query": "SELECT T2.id ,  T2.name FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1;", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0439 id \u0438 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u0443 \u043a\u043e\u0440\u0430\u0431\u043b\u044f \u043d\u0430\u043d\u0435\u0441\u0448\u0435\u0433\u043e \u0431\u043e\u043b\u044c\u0448\u0435 \u0432\u0441\u0435\u0433\u043e \u0442\u0440\u0430\u0432\u043c?"}, "question": "What is the ship id and name that caused most total injuries?", "kb_id": "battle_death"}, {"id": "D_0502", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT name FROM battle WHERE bulgarian_commander  =  '\u041d\u0430\u0445\u0438\u043c\u043e\u0432' AND latin_commander  =  '\u0420\u0430\u0441\u043f\u0443\u0442\u0438\u043d';"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [[false, 2, [0, [0, 4, false], null], "\"Kaloyan\"", null], "and", [false, 2, [0, [0, 5, false], null], "\"Baldwin I\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [[false, 2, [0, [0, 4, false], null], "\"\u041d\u0430\u0445\u0438\u043c\u043e\u0432\"", null], "and", [false, 2, [0, [0, 5, false], null], "\"\u0420\u0430\u0441\u043f\u0443\u0442\u0438\u043d\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "the", "distinct", "battle", "names", "which", "are", "between", "bulgarian", "commander", "'Kaloyan", "'", "and", "latin", "commander", "'Baldwin", "I", "'", "?"], "ru": ["\u041a\u0430\u043a\u043e\u0432\u044b", "\u043e\u0442\u043b\u0438\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435", "\u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f", "\u0441\u0440\u0430\u0436\u0435\u043d\u0438\u0439", "\u043c\u0435\u0436\u0434\u0443", "\u0431\u043e\u043b\u0433\u0430\u0440\u0441\u043a\u0438\u043c", "\u043a\u043e\u043c\u0430\u043d\u0434\u0438\u0440\u043e\u043c", "\u041d\u0430\u0445\u0438\u043c\u043e\u0432", "\u0438", "\u043b\u0430\u0442\u0438\u043d\u0441\u043a\u0438\u043c", "\u043a\u043e\u043c\u0430\u043d\u0434\u0438\u0440\u043e\u043c", "\u0420\u0430\u0441\u043f\u0443\u0442\u0438\u043d\u043e\u043c", "?"]}, "query_toks": {"en": ["select", "name", "from", "battle", "where", "bulgarian_commander", "=", "\"Kaloyan\"", "and", "latin_commander", "=", "\"Baldwin I\"", ";"], "ru": ["select", "name", "from", "battle", "where", "bulgarian_commander", "=", "\"\u041d\u0430\u0445\u0438\u043c\u043e\u0432\"", "and", "latin_commander", "=", "\"\u0420\u0430\u0441\u043f\u0443\u0442\u0438\u043d\"", ";"]}, "query_toks_no_values": {"en": ["select", "name", "from", "battle", "where", "bulgarian_commander", "=", "value", "and", "latin_commander", "=", "value", ";"], "ru": ["select", "name", "from", "battle", "where", "bulgarian_commander", "=", "value", "and", "latin_commander", "=", "value", ";"]}, "masked_query": "SELECT name FROM battle WHERE bulgarian_commander  =  'Kaloyan' AND latin_commander  =  'Baldwin I';", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0432\u044b \u043e\u0442\u043b\u0438\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f \u0441\u0440\u0430\u0436\u0435\u043d\u0438\u0439 \u043c\u0435\u0436\u0434\u0443 \u0431\u043e\u043b\u0433\u0430\u0440\u0441\u043a\u0438\u043c \u043a\u043e\u043c\u0430\u043d\u0434\u0438\u0440\u043e\u043c \u041d\u0430\u0445\u0438\u043c\u043e\u0432 \u0438 \u043b\u0430\u0442\u0438\u043d\u0441\u043a\u0438\u043c \u043a\u043e\u043c\u0430\u043d\u0434\u0438\u0440\u043e\u043c \u0420\u0430\u0441\u043f\u0443\u0442\u0438\u043d\u043e\u043c?"}, "question": "What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?", "kb_id": "battle_death"}, {"id": "D_0503", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT count(DISTINCT RESULT) FROM battle;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[3, [0, [0, 6, true], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[3, [0, [0, 6, true], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["How", "many", "different", "results", "are", "there", "for", "the", "battles", "?"], "ru": ["\u0421\u043a\u043e\u043b\u044c\u043a\u043e", "\u0440\u0430\u0437\u043d\u044b\u0445", "\u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432", "\u0443", "\u0441\u0440\u0430\u0436\u0435\u043d\u0438\u0439", "?"]}, "query_toks": {"en": ["select", "count", "(", "distinct", "result", ")", "from", "battle", ";"], "ru": ["select", "count", "(", "distinct", "result", ")", "from", "battle", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "distinct", "result", ")", "from", "battle", ";"], "ru": ["select", "count", "(", "distinct", "result", ")", "from", "battle", ";"]}, "masked_query": "SELECT count(DISTINCT RESULT) FROM battle;", "question_pauq": {"ru": "\u0421\u043a\u043e\u043b\u044c\u043a\u043e \u0440\u0430\u0437\u043d\u044b\u0445 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432 \u0443 \u0441\u0440\u0430\u0436\u0435\u043d\u0438\u0439?"}, "question": "How many different results are there for the battles?", "kb_id": "battle_death"}, {"id": "D_0504", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT count(*) FROM battle WHERE id NOT IN ( SELECT lost_in_battle FROM ship WHERE tonnage  =  '225' );"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[true, 8, [0, [0, 1, false], null], {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 7, false], null]]]], "where": [[false, 2, [0, [0, 10, false], null], "\"225\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[true, 8, [0, [0, 1, false], null], {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 7, false], null]]]], "where": [[false, 2, [0, [0, 10, false], null], "\"225\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["How", "many", "battles", "did", "not", "lose", "any", "ship", "with", "tonnage", "'225", "'", "?"], "ru": ["\u0421\u043a\u043e\u043b\u044c\u043a\u043e", "\u0431\u043e\u0451\u0432", "\u043d\u0435", "\u043f\u0440\u043e\u0438\u0433\u0440\u0430\u043b", "\u043d\u0438", "\u043e\u0434\u0438\u043d", "\u043a\u043e\u0440\u0430\u0431\u043b\u044c", "\u0432\u043e\u0434\u043e\u0438\u0437\u043c\u0435\u0449\u0435\u043d\u0438\u0435\u043c", "\u00ab", "225", "\u00bb", "?"]}, "query_toks": {"en": ["select", "count", "(", "*", ")", "from", "battle", "where", "id", "not", "in", "(", "select", "lost_in_battle", "from", "ship", "where", "tonnage", "=", "\"225\"", ")", ";"], "ru": ["select", "count", "(", "*", ")", "from", "battle", "where", "id", "not", "in", "(", "select", "lost_in_battle", "from", "ship", "where", "tonnage", "=", "\"225\"", ")", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "*", ")", "from", "battle", "where", "id", "not", "in", "(", "select", "lost_in_battle", "from", "ship", "where", "tonnage", "=", "value", ")", ";"], "ru": ["select", "count", "(", "*", ")", "from", "battle", "where", "id", "not", "in", "(", "select", "lost_in_battle", "from", "ship", "where", "tonnage", "=", "value", ")", ";"]}, "masked_query": "SELECT count(*) FROM battle WHERE id NOT IN ( SELECT lost_in_battle FROM ship WHERE tonnage  =  '225' );", "question_pauq": {"ru": "\u0421\u043a\u043e\u043b\u044c\u043a\u043e \u0431\u043e\u0451\u0432 \u043d\u0435 \u043f\u0440\u043e\u0438\u0433\u0440\u0430\u043b \u043d\u0438 \u043e\u0434\u0438\u043d \u043a\u043e\u0440\u0430\u0431\u043b\u044c \u0432\u043e\u0434\u043e\u0438\u0437\u043c\u0435\u0449\u0435\u043d\u0438\u0435\u043c \u00ab225\u00bb?"}, "question": "How many battles did not lose any ship with tonnage '225'?", "kb_id": "battle_death"}, {"id": "D_0505", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  '\u0410\u0434\u043c\u0438\u0440\u0430\u043b \u041c\u0430\u043a\u0430\u0440\u043e\u0432' INTERSECT SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  '\u0410\u0432\u0440\u043e\u0440\u0430';"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 7, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]], [0, [0, [0, 3, false], null]]]], "where": [[false, 2, [0, [0, 9, false], null], "\"Lettice\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": {"from": {"table_units": [["table_unit", 0], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 7, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]], [0, [0, [0, 3, false], null]]]], "where": [[false, 2, [0, [0, 9, false], null], "\"HMS Atalanta\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 7, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]], [0, [0, [0, 3, false], null]]]], "where": [[false, 2, [0, [0, 9, false], null], "\"\u0410\u0434\u043c\u0438\u0440\u0430\u043b \u041c\u0430\u043a\u0430\u0440\u043e\u0432\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": {"from": {"table_units": [["table_unit", 0], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 7, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]], [0, [0, [0, 3, false], null]]]], "where": [[false, 2, [0, [0, 9, false], null], "\"\u0410\u0432\u0440\u043e\u0440\u0430\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "union": null, "except": null}}, "question_toks": {"en": ["List", "the", "name", "and", "date", "the", "battle", "that", "has", "lost", "the", "ship", "named", "'Lettice", "'", "and", "the", "ship", "named", "'HMS", "Atalanta", "'"], "ru": ["\u0423\u043a\u0430\u0436\u0438\u0442\u0435", "\u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435", "\u0438", "\u0434\u0430\u0442\u0443", "\u0431\u0438\u0442\u0432\u044b", ",", "\u0432", "\u043a\u043e\u0442\u043e\u0440\u043e\u0439", "\u043f\u043e\u0442\u0435\u0440\u044f\u043b\u0438", "\u043a\u043e\u0440\u0430\u0431\u043b\u044c", "\u043f\u043e\u0434", "\u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435\u043c", "\u00ab", "\u0410\u0434\u043c\u0438\u0440\u0430\u043b", "\u041c\u0430\u043a\u0430\u0440\u043e\u0432", "\u00bb", "\u0438", "\u043a\u043e\u0440\u0430\u0431\u043b\u044c", "\u043f\u043e\u0434", "\u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435\u043c", "\u00ab", "\u0410\u0432\u0440\u043e\u0440\u0430", "\u00bb", "."]}, "query_toks": {"en": ["select", "t1.name", ",", "t1.date", "from", "battle", "as", "t1", "join", "ship", "as", "t2", "on", "t1.id", "=", "t2.lost_in_battle", "where", "t2.name", "=", "\"Lettice\"", "intersect", "select", "t1.name", ",", "t1.date", "from", "battle", "as", "t1", "join", "ship", "as", "t2", "on", "t1.id", "=", "t2.lost_in_battle", "where", "t2.name", "=", "\"HMS Atalanta\"", ";"], "ru": ["select", "t1.name", ",", "t1.date", "from", "battle", "as", "t1", "join", "ship", "as", "t2", "on", "t1.id", "=", "t2.lost_in_battle", "where", "t2.name", "=", "\"\u0410\u0434\u043c\u0438\u0440\u0430\u043b \u041c\u0430\u043a\u0430\u0440\u043e\u0432\"", "intersect", "select", "t1.name", ",", "t1.date", "from", "battle", "as", "t1", "join", "ship", "as", "t2", "on", "t1.id", "=", "t2.lost_in_battle", "where", "t2.name", "=", "\"\u0410\u0432\u0440\u043e\u0440\u0430\"", ";"]}, "query_toks_no_values": {"en": ["select", "t1.name", ",", "t1.date", "from", "battle", "as", "t1", "join", "ship", "as", "t2", "on", "t1.id", "=", "t2.lost_in_battle", "where", "t2.name", "=", "value", "intersect", "select", "t1.name", ",", "t1.date", "from", "battle", "as", "t1", "join", "ship", "as", "t2", "on", "t1.id", "=", "t2.lost_in_battle", "where", "t2.name", "=", "value", ";"], "ru": ["select", "t1.name", ",", "t1.date", "from", "battle", "as", "t1", "join", "ship", "as", "t2", "on", "t1.id", "=", "t2.lost_in_battle", "where", "t2.name", "=", "value", "intersect", "select", "t1.name", ",", "t1.date", "from", "battle", "as", "t1", "join", "ship", "as", "t2", "on", "t1.id", "=", "t2.lost_in_battle", "where", "t2.name", "=", "value", ";"]}, "masked_query": "SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'Lettice' INTERSECT SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'HMS Atalanta';", "question_pauq": {"ru": "\u0423\u043a\u0430\u0436\u0438\u0442\u0435 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u0438 \u0434\u0430\u0442\u0443 \u0431\u0438\u0442\u0432\u044b, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u043f\u043e\u0442\u0435\u0440\u044f\u043b\u0438 \u043a\u043e\u0440\u0430\u0431\u043b\u044c \u043f\u043e\u0434 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435\u043c \u00ab\u0410\u0434\u043c\u0438\u0440\u0430\u043b \u041c\u0430\u043a\u0430\u0440\u043e\u0432\u00bb \u0438 \u043a\u043e\u0440\u0430\u0431\u043b\u044c \u043f\u043e\u0434 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435\u043c \u00ab\u0410\u0432\u0440\u043e\u0440\u0430\u00bb."}, "question": "List the name and date the battle that has lost the ship named 'Lettice' and the ship named 'HMS Atalanta'", "kb_id": "battle_death"}, {"id": "D_0506", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT name ,  RESULT ,  bulgarian_commander FROM battle EXCEPT SELECT T1.name ,  T1.result ,  T1.bulgarian_commander FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.location  =  '\u0411\u0430\u043b\u0442\u0438\u0439\u0441\u043a\u043e\u0435 \u043c\u043e\u0440\u0435';"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 2, false], null]], [0, [0, [0, 6, false], null]], [0, [0, [0, 4, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": {"from": {"table_units": [["table_unit", 0], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 7, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]], [0, [0, [0, 6, false], null]], [0, [0, [0, 4, false], null]]]], "where": [[false, 2, [0, [0, 12, false], null], "\"English Channel\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 2, false], null]], [0, [0, [0, 6, false], null]], [0, [0, [0, 4, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": {"from": {"table_units": [["table_unit", 0], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 7, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]], [0, [0, [0, 6, false], null]], [0, [0, [0, 4, false], null]]]], "where": [[false, 2, [0, [0, 12, false], null], "\"\u0411\u0430\u043b\u0442\u0438\u0439\u0441\u043a\u043e\u0435 \u043c\u043e\u0440\u0435\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}}, "question_toks": {"en": ["Show", "names", ",", "results", "and", "bulgarian", "commanders", "of", "the", "battles", "with", "no", "ships", "lost", "in", "the", "'English", "Channel", "'", "."], "ru": ["\u041f\u043e\u043a\u0430\u0436\u0438\u0442\u0435", "\u0438\u043c\u0435\u043d\u0430", ",", "\u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b", "\u0438", "\u0431\u043e\u043b\u0433\u0430\u0440\u0441\u043a\u0438\u0445", "\u043a\u043e\u043c\u0430\u043d\u0434\u0438\u0440\u043e\u0432", "\u0441\u0440\u0430\u0436\u0435\u043d\u0438\u0439", "\u0431\u0435\u0437", "\u043f\u043e\u0442\u0435\u0440\u044c", "\u0432", "\u0411\u0430\u043b\u0442\u0438\u0439\u0441\u043a\u043e\u043c", "\u043c\u043e\u0440\u0435", "."]}, "query_toks": {"en": ["select", "name", ",", "result", ",", "bulgarian_commander", "from", "battle", "except", "select", "t1.name", ",", "t1.result", ",", "t1.bulgarian_commander", "from", "battle", "as", "t1", "join", "ship", "as", "t2", "on", "t1.id", "=", "t2.lost_in_battle", "where", "t2.location", "=", "\"English Channel\"", ";"], "ru": ["select", "name", ",", "result", ",", "bulgarian_commander", "from", "battle", "except", "select", "t1.name", ",", "t1.result", ",", "t1.bulgarian_commander", "from", "battle", "as", "t1", "join", "ship", "as", "t2", "on", "t1.id", "=", "t2.lost_in_battle", "where", "t2.location", "=", "\"\u0411\u0430\u043b\u0442\u0438\u0439\u0441\u043a\u043e\u0435 \u043c\u043e\u0440\u0435\"", ";"]}, "query_toks_no_values": {"en": ["select", "name", ",", "result", ",", "bulgarian_commander", "from", "battle", "except", "select", "t1.name", ",", "t1.result", ",", "t1.bulgarian_commander", "from", "battle", "as", "t1", "join", "ship", "as", "t2", "on", "t1.id", "=", "t2.lost_in_battle", "where", "t2.location", "=", "value", ";"], "ru": ["select", "name", ",", "result", ",", "bulgarian_commander", "from", "battle", "except", "select", "t1.name", ",", "t1.result", ",", "t1.bulgarian_commander", "from", "battle", "as", "t1", "join", "ship", "as", "t2", "on", "t1.id", "=", "t2.lost_in_battle", "where", "t2.location", "=", "value", ";"]}, "masked_query": "SELECT name ,  RESULT ,  bulgarian_commander FROM battle EXCEPT SELECT T1.name ,  T1.result ,  T1.bulgarian_commander FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.location  =  'English Channel';", "question_pauq": {"ru": "\u041f\u043e\u043a\u0430\u0436\u0438\u0442\u0435 \u0438\u043c\u0435\u043d\u0430, \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0438 \u0431\u043e\u043b\u0433\u0430\u0440\u0441\u043a\u0438\u0445 \u043a\u043e\u043c\u0430\u043d\u0434\u0438\u0440\u043e\u0432 \u0441\u0440\u0430\u0436\u0435\u043d\u0438\u0439 \u0431\u0435\u0437 \u043f\u043e\u0442\u0435\u0440\u044c \u0432 \u0411\u0430\u043b\u0442\u0438\u0439\u0441\u043a\u043e\u043c \u043c\u043e\u0440\u0435."}, "question": "Show names, results and bulgarian commanders of the battles with no ships lost in the 'English Channel'.", "kb_id": "battle_death"}, {"id": "D_0507", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT note FROM death WHERE note LIKE '%\u041f\u043e\u0440\u0442%';"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 16, false], null]]]], "where": [[false, 9, [0, [0, 16, false], null], "\"%East%\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 16, false], null]]]], "where": [[false, 9, [0, [0, 16, false], null], "\"%\u041f\u043e\u0440\u0442%\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "the", "notes", "of", "the", "death", "events", "which", "has", "substring", "'East", "'", "?"], "ru": ["\u041a\u0430\u043a\u0438\u0435", "\u043f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u044f", "\u043a", "\u0441\u043c\u0435\u0440\u0442\u0435\u043b\u044c\u043d\u044b\u043c", "\u0441\u043e\u0431\u044b\u0442\u0438\u044f\u043c", "\u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442", "\u043f\u043e\u0434\u0441\u0442\u0440\u043e\u043a\u0443", "\u00ab", "\u041f\u043e\u0440\u0442", "\u00bb", "?"]}, "query_toks": {"en": ["select", "note", "from", "death", "where", "note", "like", "\"%East%\"", ";"], "ru": ["select", "note", "from", "death", "where", "note", "like", "\"%\u041f\u043e\u0440\u0442%\"", ";"]}, "query_toks_no_values": {"en": ["select", "note", "from", "death", "where", "note", "like", "value", ";"], "ru": ["select", "note", "from", "death", "where", "note", "like", "value", ";"]}, "masked_query": "SELECT note FROM death WHERE note LIKE '%East%';", "question_pauq": {"ru": "\u041a\u0430\u043a\u0438\u0435 \u043f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u044f \u043a \u0441\u043c\u0435\u0440\u0442\u0435\u043b\u044c\u043d\u044b\u043c \u0441\u043e\u0431\u044b\u0442\u0438\u044f\u043c \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442 \u043f\u043e\u0434\u0441\u0442\u0440\u043e\u043a\u0443 \u00ab\u041f\u043e\u0440\u0442\u00bb?"}, "question": "What are the notes of the death events which has substring 'East'?", "kb_id": "battle_death"}, {"id": "D_0508", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT line_1 ,  line_2 FROM addresses;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 2, false], null]], [0, [0, [0, 3, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 2, false], null]], [0, [0, [0, 3, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["what", "are", "all", "the", "addresses", "including", "line", "1", "and", "line", "2", "?"], "ru": ["\u043a\u0430\u043a\u0438\u0435", "\u0432\u0441\u0435", "\u043f\u043e\u043b\u043d\u044b\u0435", "\u0430\u0434\u0440\u0435\u0441\u0430", ",", "\u0432\u043a\u043b\u044e\u0447\u0430\u044f", "\u0441\u0442\u0440\u043e\u043a\u0443", "1", "\u0438", "\u0441\u0442\u0440\u043e\u043a\u0443", "2", "?"]}, "query_toks": {"en": ["select", "line_1", ",", "line_2", "from", "addresses", ";"], "ru": ["select", "line_1", ",", "line_2", "from", "addresses", ";"]}, "query_toks_no_values": {"en": ["select", "line_1", ",", "line_2", "from", "addresses", ";"], "ru": ["select", "line_1", ",", "line_2", "from", "addresses", ";"]}, "masked_query": "SELECT line_1 ,  line_2 FROM addresses;", "question_pauq": {"ru": "\u043a\u0430\u043a\u0438\u0435 \u0432\u0441\u0435 \u043f\u043e\u043b\u043d\u044b\u0435 \u0430\u0434\u0440\u0435\u0441\u0430, \u0432\u043a\u043b\u044e\u0447\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0443 1 \u0438 \u0441\u0442\u0440\u043e\u043a\u0443 2?"}, "question": "what are all the addresses including line 1 and line 2?", "kb_id": "student_transcripts_tracking"}, {"id": "D_0509", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT line_1 ,  line_2 FROM addresses;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 2, false], null]], [0, [0, [0, 3, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 2, false], null]], [0, [0, [0, 3, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "first", "and", "second", "line", "for", "all", "addresses", "?"], "ru": ["\u041a\u0430\u043a\u0430\u044f", "\u043f\u0435\u0440\u0432\u0430\u044f", "\u0438", "\u0432\u0442\u043e\u0440\u0430\u044f", "\u0441\u0442\u0440\u043e\u043a\u0430", "\u0443", "\u0432\u0441\u0435\u0445", "\u0430\u0434\u0440\u0435\u0441\u043e\u0432", "?"]}, "query_toks": {"en": ["select", "line_1", ",", "line_2", "from", "addresses", ";"], "ru": ["select", "line_1", ",", "line_2", "from", "addresses", ";"]}, "query_toks_no_values": {"en": ["select", "line_1", ",", "line_2", "from", "addresses", ";"], "ru": ["select", "line_1", ",", "line_2", "from", "addresses", ";"]}, "masked_query": "SELECT line_1 ,  line_2 FROM addresses;", "question_pauq": {"ru": "\u041a\u0430\u043a\u0430\u044f \u043f\u0435\u0440\u0432\u0430\u044f \u0438 \u0432\u0442\u043e\u0440\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u0443 \u0432\u0441\u0435\u0445 \u0430\u0434\u0440\u0435\u0441\u043e\u0432?"}, "question": "What is the first and second line for all addresses?", "kb_id": "student_transcripts_tracking"}, {"id": "D_0510", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT count(*) FROM Courses;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["How", "many", "courses", "in", "total", "are", "listed", "?"], "ru": ["\u0421\u043a\u043e\u043b\u044c\u043a\u043e", "\u0432\u0441\u0435\u0433\u043e", "\u043a\u0443\u0440\u0441\u043e\u0432", "\u0443\u043a\u0430\u0437\u0430\u043d\u043e", "\u0432", "\u0441\u043f\u0438\u0441\u043a\u0435", "?"]}, "query_toks": {"en": ["select", "count", "(", "*", ")", "from", "courses", ";"], "ru": ["select", "count", "(", "*", ")", "from", "courses", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "*", ")", "from", "courses", ";"], "ru": ["select", "count", "(", "*", ")", "from", "courses", ";"]}, "masked_query": "SELECT count(*) FROM Courses;", "question_pauq": {"ru": "\u0421\u043a\u043e\u043b\u044c\u043a\u043e \u0432\u0441\u0435\u0433\u043e \u043a\u0443\u0440\u0441\u043e\u0432 \u0443\u043a\u0430\u0437\u0430\u043d\u043e \u0432 \u0441\u043f\u0438\u0441\u043a\u0435?"}, "question": "How many courses in total are listed?", "kb_id": "student_transcripts_tracking"}, {"id": "D_0511", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT count(*) FROM Courses;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["How", "many", "courses", "are", "there", "?"], "ru": ["\u0421\u043a\u043e\u043b\u044c\u043a\u043e", "\u0432\u0441\u0435\u0433\u043e", "\u043a\u0443\u0440\u0441\u043e\u0432", "?"]}, "query_toks": {"en": ["select", "count", "(", "*", ")", "from", "courses", ";"], "ru": ["select", "count", "(", "*", ")", "from", "courses", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "*", ")", "from", "courses", ";"], "ru": ["select", "count", "(", "*", ")", "from", "courses", ";"]}, "masked_query": "SELECT count(*) FROM Courses;", "question_pauq": {"ru": "\u0421\u043a\u043e\u043b\u044c\u043a\u043e \u0432\u0441\u0435\u0433\u043e \u043a\u0443\u0440\u0441\u043e\u0432?"}, "question": "How many courses are there?", "kb_id": "student_transcripts_tracking"}, {"id": "D_0512", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT course_description FROM Courses WHERE course_name  =  '\u044d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0430';"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 12, false], null]]]], "where": [[false, 2, [0, [0, 11, false], null], "\"math\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 12, false], null]]]], "where": [[false, 2, [0, [0, 11, false], null], "\"\u044d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0430\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["How", "is", "the", "math", "course", "described", "?"], "ru": ["\u041a\u0430\u043a", "\u043e\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442\u0441\u044f", "\u043a\u0443\u0440\u0441", "\u044d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0438", "?"]}, "query_toks": {"en": ["select", "course_description", "from", "courses", "where", "course_name", "=", "\"math\"", ";"], "ru": ["select", "course_description", "from", "courses", "where", "course_name", "=", "\"\u044d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0430\"", ";"]}, "query_toks_no_values": {"en": ["select", "course_description", "from", "courses", "where", "course_name", "=", "value", ";"], "ru": ["select", "course_description", "from", "courses", "where", "course_name", "=", "value", ";"]}, "masked_query": "SELECT course_description FROM Courses WHERE course_name  =  'math';", "question_pauq": {"ru": "\u041a\u0430\u043a \u043e\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u043a\u0443\u0440\u0441 \u044d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0438?"}, "question": "How is the math course described?", "kb_id": "student_transcripts_tracking"}, {"id": "D_0513", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT course_description FROM Courses WHERE course_name  =  '\u044d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0430';"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 12, false], null]]]], "where": [[false, 2, [0, [0, 11, false], null], "\"math\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 12, false], null]]]], "where": [[false, 2, [0, [0, 11, false], null], "\"\u044d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0430\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "the", "descriptions", "for", "all", "the", "math", "courses", "?"], "ru": ["\u041a\u0430\u043a\u043e\u0432\u044b", "\u043e\u043f\u0438\u0441\u0430\u043d\u0438\u044f", "\u0432\u0441\u0435\u0445", "\u043a\u0443\u0440\u0441\u043e\u0432", "\u044d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0438", "?"]}, "query_toks": {"en": ["select", "course_description", "from", "courses", "where", "course_name", "=", "\"math\"", ";"], "ru": ["select", "course_description", "from", "courses", "where", "course_name", "=", "\"\u044d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0430\"", ";"]}, "query_toks_no_values": {"en": ["select", "course_description", "from", "courses", "where", "course_name", "=", "value", ";"], "ru": ["select", "course_description", "from", "courses", "where", "course_name", "=", "value", ";"]}, "masked_query": "SELECT course_description FROM Courses WHERE course_name  =  'math';", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0432\u044b \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u0432\u0441\u0435\u0445 \u043a\u0443\u0440\u0441\u043e\u0432 \u044d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0438?"}, "question": "What are the descriptions for all the math courses?", "kb_id": "student_transcripts_tracking"}, {"id": "D_0514", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT zip_postcode FROM Addresses WHERE city  =  '\u041f\u043e\u0440\u0442 \u0420\u043e\u044f\u043b\u044c';"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 6, false], null]]]], "where": [[false, 2, [0, [0, 5, false], null], "\"Port Chelsea\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 6, false], null]]]], "where": [[false, 2, [0, [0, 5, false], null], "\"\u041f\u043e\u0440\u0442 \u0420\u043e\u044f\u043b\u044c\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "zip", "code", "of", "the", "address", "in", "the", "city", "Port", "Chelsea", "?"], "ru": ["\u041a\u0430\u043a\u043e\u0439", "\u043f\u043e\u0447\u0442\u043e\u0432\u044b\u0439", "\u0438\u043d\u0434\u0435\u043a\u0441", "\u0443", "\u0430\u0434\u0440\u0435\u0441\u0430", "\u0432", "\u0433\u043e\u0440\u043e\u0434\u0435", "\u041f\u043e\u0440\u0442", "\u0420\u043e\u044f\u043b\u044c", "?"]}, "query_toks": {"en": ["select", "zip_postcode", "from", "addresses", "where", "city", "=", "\"Port Chelsea\"", ";"], "ru": ["select", "zip_postcode", "from", "addresses", "where", "city", "=", "\"\u041f\u043e\u0440\u0442 \u0420\u043e\u044f\u043b\u044c\"", ";"]}, "query_toks_no_values": {"en": ["select", "zip_postcode", "from", "addresses", "where", "city", "=", "value", ";"], "ru": ["select", "zip_postcode", "from", "addresses", "where", "city", "=", "value", ";"]}, "masked_query": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea';", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0439 \u043f\u043e\u0447\u0442\u043e\u0432\u044b\u0439 \u0438\u043d\u0434\u0435\u043a\u0441 \u0443 \u0430\u0434\u0440\u0435\u0441\u0430 \u0432 \u0433\u043e\u0440\u043e\u0434\u0435 \u041f\u043e\u0440\u0442 \u0420\u043e\u044f\u043b\u044c?"}, "question": "What is the zip code of the address in the city Port Chelsea?", "kb_id": "student_transcripts_tracking"}, {"id": "D_0515", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT zip_postcode FROM Addresses WHERE city  =  '\u0413\u0430\u0432\u0430\u043d\u0430';"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 6, false], null]]]], "where": [[false, 2, [0, [0, 5, false], null], "\"Port Chelsea\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 6, false], null]]]], "where": [[false, 2, [0, [0, 5, false], null], "\"\u0413\u0430\u0432\u0430\u043d\u0430\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "zip", "code", "for", "Port", "Chelsea", "?"], "ru": ["\u041a\u0430\u043a\u043e\u0439", "\u043f\u043e\u0447\u0442\u043e\u0432\u044b\u0439", "\u0438\u043d\u0434\u0435\u043a\u0441", "\u0443", "\u0413\u0430\u0432\u0430\u043d\u044b", "?"]}, "query_toks": {"en": ["select", "zip_postcode", "from", "addresses", "where", "city", "=", "\"Port Chelsea\"", ";"], "ru": ["select", "zip_postcode", "from", "addresses", "where", "city", "=", "\"\u0413\u0430\u0432\u0430\u043d\u0430\"", ";"]}, "query_toks_no_values": {"en": ["select", "zip_postcode", "from", "addresses", "where", "city", "=", "value", ";"], "ru": ["select", "zip_postcode", "from", "addresses", "where", "city", "=", "value", ";"]}, "masked_query": "SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea';", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0439 \u043f\u043e\u0447\u0442\u043e\u0432\u044b\u0439 \u0438\u043d\u0434\u0435\u043a\u0441 \u0443 \u0413\u0430\u0432\u0430\u043d\u044b?"}, "question": "What is the zip code for Port Chelsea?", "kb_id": "student_transcripts_tracking"}, {"id": "D_0516", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T2.department_name ,  T1.department_id FROM Degree_Programs AS T1 JOIN Departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id ORDER BY count(*) DESC LIMIT 1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 3], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 19, false], null], [0, 14, false], null]]}, "select": [false, [[0, [0, [0, 15, false], null]], [0, [0, [0, 19, false], null]]]], "where": [], "groupBy": [[0, 19, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 3], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 19, false], null], [0, 14, false], null]]}, "select": [false, [[0, [0, [0, 15, false], null]], [0, [0, [0, 19, false], null]]]], "where": [], "groupBy": [[0, 19, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Which", "department", "offers", "the", "most", "number", "of", "degrees", "?", "List", "department", "name", "and", "id", "."], "ru": ["\u041a\u0430\u043a\u043e\u0439", "\u0444\u0430\u043a\u0443\u043b\u044c\u0442\u0435\u0442", "\u043f\u0440\u0435\u0434\u043b\u0430\u0433\u0430\u0435\u0442", "\u0431\u043e\u043b\u044c\u0448\u0435", "\u0432\u0441\u0435\u0433\u043e", "\u0441\u0442\u0435\u043f\u0435\u043d\u0435\u0439", "?", "\u041f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0438\u0442\u0435", "\u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435", "\u0438", "id", "\u0444\u0430\u043a\u0443\u043b\u044c\u0442\u0435\u0442\u0430", "."]}, "query_toks": {"en": ["select", "t2.department_name", ",", "t1.department_id", "from", "degree_programs", "as", "t1", "join", "departments", "as", "t2", "on", "t1.department_id", "=", "t2.department_id", "group", "by", "t1.department_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"], "ru": ["select", "t2.department_name", ",", "t1.department_id", "from", "degree_programs", "as", "t1", "join", "departments", "as", "t2", "on", "t1.department_id", "=", "t2.department_id", "group", "by", "t1.department_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"]}, "query_toks_no_values": {"en": ["select", "t2.department_name", ",", "t1.department_id", "from", "degree_programs", "as", "t1", "join", "departments", "as", "t2", "on", "t1.department_id", "=", "t2.department_id", "group", "by", "t1.department_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"], "ru": ["select", "t2.department_name", ",", "t1.department_id", "from", "degree_programs", "as", "t1", "join", "departments", "as", "t2", "on", "t1.department_id", "=", "t2.department_id", "group", "by", "t1.department_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"]}, "masked_query": "SELECT T2.department_name ,  T1.department_id FROM Degree_Programs AS T1 JOIN Departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id ORDER BY count(*) DESC LIMIT 1;", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0439 \u0444\u0430\u043a\u0443\u043b\u044c\u0442\u0435\u0442 \u043f\u0440\u0435\u0434\u043b\u0430\u0433\u0430\u0435\u0442 \u0431\u043e\u043b\u044c\u0448\u0435 \u0432\u0441\u0435\u0433\u043e \u0441\u0442\u0435\u043f\u0435\u043d\u0435\u0439? \u041f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0438\u0442\u0435 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u0438 id \u0444\u0430\u043a\u0443\u043b\u044c\u0442\u0435\u0442\u0430."}, "question": "Which department offers the most number of degrees? List department name and id.", "kb_id": "student_transcripts_tracking"}, {"id": "D_0517", "source": "spider-dev", "type": "dev", "query": {"ru": "select t2.department_name ,  t1.department_id from degree_programs as t1 join departments as t2 on t1.department_id  =  t2.department_id group by t1.department_id order by count(*) desc limit 1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 3], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 19, false], null], [0, 14, false], null]]}, "select": [false, [[0, [0, [0, 15, false], null]], [0, [0, [0, 19, false], null]]]], "where": [], "groupBy": [[0, 19, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 3], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 19, false], null], [0, 14, false], null]]}, "select": [false, [[0, [0, [0, 15, false], null]], [0, [0, [0, 19, false], null]]]], "where": [], "groupBy": [[0, 19, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "name", "and", "id", "of", "the", "department", "with", "the", "most", "number", "of", "degrees", "?"], "ru": ["\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435", "\u0438", "id", "\u0444\u0430\u043a\u0443\u043b\u044c\u0442\u0435\u0442\u0430", "\u0441", "\u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0438\u043c", "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c", "\u0443\u0447\u0435\u043d\u044b\u0445", "\u0441\u0442\u0435\u043f\u0435\u043d\u0435\u0439"]}, "query_toks": {"en": ["select", "t2.department_name", ",", "t1.department_id", "from", "degree_programs", "as", "t1", "join", "departments", "as", "t2", "on", "t1.department_id", "=", "t2.department_id", "group", "by", "t1.department_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"], "ru": ["select", "t2.department_name", ",", "t1.department_id", "from", "degree_programs", "as", "t1", "join", "departments", "as", "t2", "on", "t1.department_id", "=", "t2.department_id", "group", "by", "t1.department_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"]}, "query_toks_no_values": {"en": ["select", "t2.department_name", ",", "t1.department_id", "from", "degree_programs", "as", "t1", "join", "departments", "as", "t2", "on", "t1.department_id", "=", "t2.department_id", "group", "by", "t1.department_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"], "ru": ["select", "t2.department_name", ",", "t1.department_id", "from", "degree_programs", "as", "t1", "join", "departments", "as", "t2", "on", "t1.department_id", "=", "t2.department_id", "group", "by", "t1.department_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"]}, "masked_query": "select t2.department_name ,  t1.department_id from degree_programs as t1 join departments as t2 on t1.department_id  =  t2.department_id group by t1.department_id order by count(*) desc limit 1;", "question_pauq": {"ru": "\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u0438 id \u0444\u0430\u043a\u0443\u043b\u044c\u0442\u0435\u0442\u0430 \u0441 \u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0438\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c \u0443\u0447\u0435\u043d\u044b\u0445 \u0441\u0442\u0435\u043f\u0435\u043d\u0435\u0439"}, "question": "What is the name and id of the department with the most number of degrees ?", "kb_id": "student_transcripts_tracking"}, {"id": "D_0518", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT count(DISTINCT department_id) FROM Degree_Programs;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 3]], "conds": []}, "select": [false, [[3, [0, [0, 19, true], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 3]], "conds": []}, "select": [false, [[3, [0, [0, 19, true], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["How", "many", "departments", "offer", "any", "degree", "?"], "ru": ["\u0421\u043a\u043e\u043b\u044c\u043a\u043e", "\u0444\u0430\u043a\u0443\u043b\u044c\u0442\u0435\u0442\u043e\u0432", "\u043f\u0440\u0435\u0434\u043b\u0430\u0433\u0430\u044e\u0442", "\u043a\u0430\u043a\u0443\u044e-\u043b\u0438\u0431\u043e", "\u0441\u0442\u0435\u043f\u0435\u043d\u044c", "?"]}, "query_toks": {"en": ["select", "count", "(", "distinct", "department_id", ")", "from", "degree_programs", ";"], "ru": ["select", "count", "(", "distinct", "department_id", ")", "from", "degree_programs", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "distinct", "department_id", ")", "from", "degree_programs", ";"], "ru": ["select", "count", "(", "distinct", "department_id", ")", "from", "degree_programs", ";"]}, "masked_query": "SELECT count(DISTINCT department_id) FROM Degree_Programs;", "question_pauq": {"ru": "\u0421\u043a\u043e\u043b\u044c\u043a\u043e \u0444\u0430\u043a\u0443\u043b\u044c\u0442\u0435\u0442\u043e\u0432 \u043f\u0440\u0435\u0434\u043b\u0430\u0433\u0430\u044e\u0442 \u043a\u0430\u043a\u0443\u044e-\u043b\u0438\u0431\u043e \u0441\u0442\u0435\u043f\u0435\u043d\u044c?"}, "question": "How many departments offer any degree?", "kb_id": "student_transcripts_tracking"}, {"id": "D_0519", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT count(DISTINCT department_id) FROM Degree_Programs;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 3]], "conds": []}, "select": [false, [[3, [0, [0, 19, true], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 3]], "conds": []}, "select": [false, [[3, [0, [0, 19, true], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["How", "many", "different", "departments", "offer", "degrees", "?"], "ru": ["\u0421\u043a\u043e\u043b\u044c\u043a\u043e", "\u0440\u0430\u0437\u043d\u044b\u0445", "\u0444\u0430\u043a\u0443\u043b\u044c\u0442\u0435\u0442\u043e\u0432", "\u043f\u0440\u0435\u0434\u043b\u0430\u0433\u0430\u044e\u0442", "\u0441\u0442\u0435\u043f\u0435\u043d\u0438", "?"]}, "query_toks": {"en": ["select", "count", "(", "distinct", "department_id", ")", "from", "degree_programs", ";"], "ru": ["select", "count", "(", "distinct", "department_id", ")", "from", "degree_programs", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "distinct", "department_id", ")", "from", "degree_programs", ";"], "ru": ["select", "count", "(", "distinct", "department_id", ")", "from", "degree_programs", ";"]}, "masked_query": "SELECT count(DISTINCT department_id) FROM Degree_Programs;", "question_pauq": {"ru": "\u0421\u043a\u043e\u043b\u044c\u043a\u043e \u0440\u0430\u0437\u043d\u044b\u0445 \u0444\u0430\u043a\u0443\u043b\u044c\u0442\u0435\u0442\u043e\u0432 \u043f\u0440\u0435\u0434\u043b\u0430\u0433\u0430\u044e\u0442 \u0441\u0442\u0435\u043f\u0435\u043d\u0438?"}, "question": "How many different departments offer degrees?", "kb_id": "student_transcripts_tracking"}, {"id": "D_0520", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 3]], "conds": []}, "select": [false, [[3, [0, [0, 20, true], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 3]], "conds": []}, "select": [false, [[3, [0, [0, 20, true], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["How", "many", "different", "degree", "names", "are", "offered", "?"], "ru": ["\u0421\u043a\u043e\u043b\u044c\u043a\u043e", "\u0440\u0430\u0437\u043d\u044b\u0445", "\u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0439", "\u0441\u0442\u0435\u043f\u0435\u043d\u0435\u0439", "\u043f\u0440\u0435\u0434\u043b\u0430\u0433\u0430\u0435\u0442\u0441\u044f", "?"]}, "query_toks": {"en": ["select", "count", "(", "distinct", "degree_summary_name", ")", "from", "degree_programs", ";"], "ru": ["select", "count", "(", "distinct", "degree_summary_name", ")", "from", "degree_programs", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "distinct", "degree_summary_name", ")", "from", "degree_programs", ";"], "ru": ["select", "count", "(", "distinct", "degree_summary_name", ")", "from", "degree_programs", ";"]}, "masked_query": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs;", "question_pauq": {"ru": "\u0421\u043a\u043e\u043b\u044c\u043a\u043e \u0440\u0430\u0437\u043d\u044b\u0445 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0439 \u0441\u0442\u0435\u043f\u0435\u043d\u0435\u0439 \u043f\u0440\u0435\u0434\u043b\u0430\u0433\u0430\u0435\u0442\u0441\u044f?"}, "question": "How many different degree names are offered?", "kb_id": "student_transcripts_tracking"}, {"id": "D_0521", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 3]], "conds": []}, "select": [false, [[3, [0, [0, 20, true], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 3]], "conds": []}, "select": [false, [[3, [0, [0, 20, true], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["How", "many", "different", "degrees", "are", "offered", "?"], "ru": ["\u0421\u043a\u043e\u043b\u044c\u043a\u043e", "\u0440\u0430\u0437\u043d\u044b\u0445", "\u0441\u0442\u0435\u043f\u0435\u043d\u0435\u0439", "\u043f\u0440\u0435\u0434\u043b\u0430\u0433\u0430\u0435\u0442\u0441\u044f", "?"]}, "query_toks": {"en": ["select", "count", "(", "distinct", "degree_summary_name", ")", "from", "degree_programs", ";"], "ru": ["select", "count", "(", "distinct", "degree_summary_name", ")", "from", "degree_programs", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "distinct", "degree_summary_name", ")", "from", "degree_programs", ";"], "ru": ["select", "count", "(", "distinct", "degree_summary_name", ")", "from", "degree_programs", ";"]}, "masked_query": "SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs;", "question_pauq": {"ru": "\u0421\u043a\u043e\u043b\u044c\u043a\u043e \u0440\u0430\u0437\u043d\u044b\u0445 \u0441\u0442\u0435\u043f\u0435\u043d\u0435\u0439 \u043f\u0440\u0435\u0434\u043b\u0430\u0433\u0430\u0435\u0442\u0441\u044f?"}, "question": "How many different degrees are offered?", "kb_id": "student_transcripts_tracking"}, {"id": "D_0522", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  '\u0444\u0438\u0437\u0438\u0447\u0435\u0441\u043a\u0438\u0439';"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 14, false], null], [0, 19, false], null]]}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 15, false], null], "\"engineer\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 14, false], null], [0, 19, false], null]]}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 15, false], null], "\"\u0444\u0438\u0437\u0438\u0447\u0435\u0441\u043a\u0438\u0439\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["How", "many", "degrees", "does", "the", "engineering", "department", "offer", "?"], "ru": ["\u0421\u043a\u043e\u043b\u044c\u043a\u043e", "\u0441\u0442\u0435\u043f\u0435\u043d\u0435\u0439", "\u043f\u0440\u0435\u0434\u043b\u0430\u0433\u0430\u0435\u0442", "\u0444\u0438\u0437\u0438\u0447\u0435\u0441\u043a\u0438\u0439", "\u0444\u0430\u043a\u0443\u043b\u044c\u0442\u0435\u0442", "?"]}, "query_toks": {"en": ["select", "count", "(", "*", ")", "from", "departments", "as", "t1", "join", "degree_programs", "as", "t2", "on", "t1.department_id", "=", "t2.department_id", "where", "t1.department_name", "=", "\"engineer\"", ";"], "ru": ["select", "count", "(", "*", ")", "from", "departments", "as", "t1", "join", "degree_programs", "as", "t2", "on", "t1.department_id", "=", "t2.department_id", "where", "t1.department_name", "=", "\"\u0444\u0438\u0437\u0438\u0447\u0435\u0441\u043a\u0438\u0439\"", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "*", ")", "from", "departments", "as", "t1", "join", "degree_programs", "as", "t2", "on", "t1.department_id", "=", "t2.department_id", "where", "t1.department_name", "=", "value", ";"], "ru": ["select", "count", "(", "*", ")", "from", "departments", "as", "t1", "join", "degree_programs", "as", "t2", "on", "t1.department_id", "=", "t2.department_id", "where", "t1.department_name", "=", "value", ";"]}, "masked_query": "SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer';", "question_pauq": {"ru": "\u0421\u043a\u043e\u043b\u044c\u043a\u043e \u0441\u0442\u0435\u043f\u0435\u043d\u0435\u0439 \u043f\u0440\u0435\u0434\u043b\u0430\u0433\u0430\u0435\u0442 \u0444\u0438\u0437\u0438\u0447\u0435\u0441\u043a\u0438\u0439 \u0444\u0430\u043a\u0443\u043b\u044c\u0442\u0435\u0442?"}, "question": "How many degrees does the engineering department offer?", "kb_id": "student_transcripts_tracking"}, {"id": "D_0523", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  '\u0444\u0438\u0437\u0438\u0447\u0435\u0441\u043a\u0438\u0439';"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 14, false], null], [0, 19, false], null]]}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 15, false], null], "\"engineer\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 14, false], null], [0, 19, false], null]]}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 15, false], null], "\"\u0444\u0438\u0437\u0438\u0447\u0435\u0441\u043a\u0438\u0439\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["How", "many", "degrees", "does", "the", "engineering", "department", "have", "?"], "ru": ["\u0421\u043a\u043e\u043b\u044c\u043a\u043e", "\u0441\u0442\u0435\u043f\u0435\u043d\u0435\u0439", "\u043d\u0430", "\u0444\u0438\u0437\u0438\u0447\u0435\u0441\u043a\u043e\u043c", "\u0444\u0430\u043a\u0443\u043b\u044c\u0442\u0435\u0442\u0435", "?"]}, "query_toks": {"en": ["select", "count", "(", "*", ")", "from", "departments", "as", "t1", "join", "degree_programs", "as", "t2", "on", "t1.department_id", "=", "t2.department_id", "where", "t1.department_name", "=", "\"engineer\"", ";"], "ru": ["select", "count", "(", "*", ")", "from", "departments", "as", "t1", "join", "degree_programs", "as", "t2", "on", "t1.department_id", "=", "t2.department_id", "where", "t1.department_name", "=", "\"\u0444\u0438\u0437\u0438\u0447\u0435\u0441\u043a\u0438\u0439\"", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "*", ")", "from", "departments", "as", "t1", "join", "degree_programs", "as", "t2", "on", "t1.department_id", "=", "t2.department_id", "where", "t1.department_name", "=", "value", ";"], "ru": ["select", "count", "(", "*", ")", "from", "departments", "as", "t1", "join", "degree_programs", "as", "t2", "on", "t1.department_id", "=", "t2.department_id", "where", "t1.department_name", "=", "value", ";"]}, "masked_query": "SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer';", "question_pauq": {"ru": "\u0421\u043a\u043e\u043b\u044c\u043a\u043e \u0441\u0442\u0435\u043f\u0435\u043d\u0435\u0439 \u043d\u0430 \u0444\u0438\u0437\u0438\u0447\u0435\u0441\u043a\u043e\u043c \u0444\u0430\u043a\u0443\u043b\u044c\u0442\u0435\u0442\u0435?"}, "question": "How many degrees does the engineering department have?", "kb_id": "student_transcripts_tracking"}, {"id": "D_0524", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT section_name ,  section_description FROM Sections;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 4]], "conds": []}, "select": [false, [[0, [0, [0, 25, false], null]], [0, [0, [0, 26, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 4]], "conds": []}, "select": [false, [[0, [0, [0, 25, false], null]], [0, [0, [0, 26, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "the", "names", "and", "descriptions", "of", "all", "the", "sections", "?"], "ru": ["\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u044f", "\u0438", "\u043e\u043f\u0438\u0441\u0430\u043d\u0438\u044f", "\u0432\u0441\u0435\u0445", "\u0440\u0430\u0437\u0434\u0435\u043b\u043e\u0432"]}, "query_toks": {"en": ["select", "section_name", ",", "section_description", "from", "sections", ";"], "ru": ["select", "section_name", ",", "section_description", "from", "sections", ";"]}, "query_toks_no_values": {"en": ["select", "section_name", ",", "section_description", "from", "sections", ";"], "ru": ["select", "section_name", ",", "section_description", "from", "sections", ";"]}, "masked_query": "SELECT section_name ,  section_description FROM Sections;", "question_pauq": {"ru": "\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u044f \u0438 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u0432\u0441\u0435\u0445 \u0440\u0430\u0437\u0434\u0435\u043b\u043e\u0432"}, "question": "What are the names and descriptions of all the sections?", "kb_id": "student_transcripts_tracking"}, {"id": "D_0525", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT section_name ,  section_description FROM Sections;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 4]], "conds": []}, "select": [false, [[0, [0, [0, 25, false], null]], [0, [0, [0, 26, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 4]], "conds": []}, "select": [false, [[0, [0, [0, 25, false], null]], [0, [0, [0, 26, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "the", "names", "and", "descriptions", "for", "all", "the", "sections", "?"], "ru": ["\u041a\u0430\u043a\u0438\u0435", "\u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f", "\u0438", "\u043e\u043f\u0438\u0441\u0430\u043d\u0438\u044f", "\u0443", "\u0432\u0441\u0435\u0445", "\u0440\u0430\u0437\u0434\u0435\u043b\u043e\u0432", "?"]}, "query_toks": {"en": ["select", "section_name", ",", "section_description", "from", "sections", ";"], "ru": ["select", "section_name", ",", "section_description", "from", "sections", ";"]}, "query_toks_no_values": {"en": ["select", "section_name", ",", "section_description", "from", "sections", ";"], "ru": ["select", "section_name", ",", "section_description", "from", "sections", ";"]}, "masked_query": "SELECT section_name ,  section_description FROM Sections;", "question_pauq": {"ru": "\u041a\u0430\u043a\u0438\u0435 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f \u0438 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u0443 \u0432\u0441\u0435\u0445 \u0440\u0430\u0437\u0434\u0435\u043b\u043e\u0432?"}, "question": "What are the names and descriptions for all the sections?", "kb_id": "student_transcripts_tracking"}, {"id": "D_0526", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1], ["table_unit", 4]], "conds": [[false, 2, [0, [0, 10, false], null], [0, 24, false], null]]}, "select": [false, [[0, [0, [0, 11, false], null]], [0, [0, [0, 10, false], null]]]], "where": [], "groupBy": [[0, 10, false]], "having": [[false, 6, [0, [3, 0, false], null], 2.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1], ["table_unit", 4]], "conds": [[false, 2, [0, [0, 10, false], null], [0, 24, false], null]]}, "select": [false, [[0, [0, [0, 11, false], null]], [0, [0, [0, 10, false], null]]]], "where": [], "groupBy": [[0, 10, false]], "having": [[false, 6, [0, [3, 0, false], null], 2.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "the", "names", "and", "id", "of", "courses", "having", "at", "most", "2", "sections", "?"], "ru": ["\u041a\u0430\u043a\u0438\u0435", "\u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f", "\u0438", "id", "\u043a\u0443\u0440\u0441\u043e\u0432", ",", "\u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0445", "\u043d\u0435", "\u0431\u043e\u043b\u0435\u0435", "\u0434\u0432\u0443\u0445", "\u0440\u0430\u0437\u0434\u0435\u043b\u043e\u0432", "?"]}, "query_toks": {"en": ["select", "t1.course_name", ",", "t1.course_id", "from", "courses", "as", "t1", "join", "sections", "as", "t2", "on", "t1.course_id", "=", "t2.course_id", "group", "by", "t1.course_id", "having", "count", "(", "*", ")", "<=", "2", ";"], "ru": ["select", "t1.course_name", ",", "t1.course_id", "from", "courses", "as", "t1", "join", "sections", "as", "t2", "on", "t1.course_id", "=", "t2.course_id", "group", "by", "t1.course_id", "having", "count", "(", "*", ")", "<=", "2", ";"]}, "query_toks_no_values": {"en": ["select", "t1.course_name", ",", "t1.course_id", "from", "courses", "as", "t1", "join", "sections", "as", "t2", "on", "t1.course_id", "=", "t2.course_id", "group", "by", "t1.course_id", "having", "count", "(", "*", ")", "<=", "2", ";"], "ru": ["select", "t1.course_name", ",", "t1.course_id", "from", "courses", "as", "t1", "join", "sections", "as", "t2", "on", "t1.course_id", "=", "t2.course_id", "group", "by", "t1.course_id", "having", "count", "(", "*", ")", "<=", "2", ";"]}, "masked_query": "SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2;", "question_pauq": {"ru": "\u041a\u0430\u043a\u0438\u0435 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f \u0438 id \u043a\u0443\u0440\u0441\u043e\u0432, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0445 \u043d\u0435 \u0431\u043e\u043b\u0435\u0435 \u0434\u0432\u0443\u0445 \u0440\u0430\u0437\u0434\u0435\u043b\u043e\u0432?"}, "question": "What are the names and id of courses having at most 2 sections?", "kb_id": "student_transcripts_tracking"}, {"id": "D_0527", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1], ["table_unit", 4]], "conds": [[false, 2, [0, [0, 10, false], null], [0, 24, false], null]]}, "select": [false, [[0, [0, [0, 11, false], null]], [0, [0, [0, 10, false], null]]]], "where": [], "groupBy": [[0, 10, false]], "having": [[false, 6, [0, [3, 0, false], null], 2.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1], ["table_unit", 4]], "conds": [[false, 2, [0, [0, 10, false], null], [0, 24, false], null]]}, "select": [false, [[0, [0, [0, 11, false], null]], [0, [0, [0, 10, false], null]]]], "where": [], "groupBy": [[0, 10, false]], "having": [[false, 6, [0, [3, 0, false], null], 2.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "the", "names", "and", "ids", "of", "every", "course", "with", "less", "than", "2", "sections", "?"], "ru": ["\u041a\u0430\u043a\u0438\u0435", "\u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f", "\u0438", "id", "\u0443", "\u043a\u0430\u0436\u0434\u043e\u0433\u043e", "\u043a\u0443\u0440\u0441\u0430", ",", "\u0441\u043e\u0441\u0442\u043e\u044f\u0449\u0435\u0433\u043e", "\u043c\u0435\u043d\u0435\u0435", "\u0447\u0435\u043c", "\u0438\u0437", "\u0434\u0432\u0443\u0445", "\u0440\u0430\u0437\u0434\u0435\u043b\u043e\u0432", "?"]}, "query_toks": {"en": ["select", "t1.course_name", ",", "t1.course_id", "from", "courses", "as", "t1", "join", "sections", "as", "t2", "on", "t1.course_id", "=", "t2.course_id", "group", "by", "t1.course_id", "having", "count", "(", "*", ")", "<=", "2", ";"], "ru": ["select", "t1.course_name", ",", "t1.course_id", "from", "courses", "as", "t1", "join", "sections", "as", "t2", "on", "t1.course_id", "=", "t2.course_id", "group", "by", "t1.course_id", "having", "count", "(", "*", ")", "<=", "2", ";"]}, "query_toks_no_values": {"en": ["select", "t1.course_name", ",", "t1.course_id", "from", "courses", "as", "t1", "join", "sections", "as", "t2", "on", "t1.course_id", "=", "t2.course_id", "group", "by", "t1.course_id", "having", "count", "(", "*", ")", "<=", "2", ";"], "ru": ["select", "t1.course_name", ",", "t1.course_id", "from", "courses", "as", "t1", "join", "sections", "as", "t2", "on", "t1.course_id", "=", "t2.course_id", "group", "by", "t1.course_id", "having", "count", "(", "*", ")", "<=", "2", ";"]}, "masked_query": "SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2;", "question_pauq": {"ru": "\u041a\u0430\u043a\u0438\u0435 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f \u0438 id \u0443 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043a\u0443\u0440\u0441\u0430, \u0441\u043e\u0441\u0442\u043e\u044f\u0449\u0435\u0433\u043e \u043c\u0435\u043d\u0435\u0435 \u0447\u0435\u043c \u0438\u0437 \u0434\u0432\u0443\u0445 \u0440\u0430\u0437\u0434\u0435\u043b\u043e\u0432?"}, "question": "What are the names and ids of every course with less than 2 sections?", "kb_id": "student_transcripts_tracking"}, {"id": "D_0528", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT section_name FROM Sections ORDER BY section_name DESC;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 4]], "conds": []}, "select": [false, [[0, [0, [0, 25, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 25, false], null]]], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 4]], "conds": []}, "select": [false, [[0, [0, [0, 25, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 25, false], null]]], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["List", "the", "section_name", "in", "reversed", "lexicographical", "order", "."], "ru": ["\u041f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0438\u0442\u0435", "\u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f", "\u0440\u0430\u0437\u0434\u0435\u043b\u043e\u0432", "\u0432", "\u043e\u0431\u0440\u0430\u0442\u043d\u043e\u043c", "\u043b\u0435\u043a\u0441\u0438\u043a\u043e\u0433\u0440\u0430\u0444\u0438\u0447\u0435\u0441\u043a\u043e\u043c", "\u043f\u043e\u0440\u044f\u0434\u043a\u0435", "."]}, "query_toks": {"en": ["select", "section_name", "from", "sections", "order", "by", "section_name", "desc", ";"], "ru": ["select", "section_name", "from", "sections", "order", "by", "section_name", "desc", ";"]}, "query_toks_no_values": {"en": ["select", "section_name", "from", "sections", "order", "by", "section_name", "desc", ";"], "ru": ["select", "section_name", "from", "sections", "order", "by", "section_name", "desc", ";"]}, "masked_query": "SELECT section_name FROM Sections ORDER BY section_name DESC;", "question_pauq": {"ru": "\u041f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0438\u0442\u0435 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f \u0440\u0430\u0437\u0434\u0435\u043b\u043e\u0432 \u0432 \u043e\u0431\u0440\u0430\u0442\u043d\u043e\u043c \u043b\u0435\u043a\u0441\u0438\u043a\u043e\u0433\u0440\u0430\u0444\u0438\u0447\u0435\u0441\u043a\u043e\u043c \u043f\u043e\u0440\u044f\u0434\u043a\u0435."}, "question": "List the section_name in reversed lexicographical order.", "kb_id": "student_transcripts_tracking"}, {"id": "D_0529", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT section_name FROM Sections ORDER BY section_name DESC;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 4]], "conds": []}, "select": [false, [[0, [0, [0, 25, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 25, false], null]]], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 4]], "conds": []}, "select": [false, [[0, [0, [0, 25, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 25, false], null]]], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "the", "names", "of", "the", "sections", "in", "reverse", "alphabetical", "order", "?"], "ru": ["\u041a\u0430\u043a", "\u043d\u0430\u0437\u044b\u0432\u0430\u044e\u0442\u0441\u044f", "\u0440\u0430\u0437\u0434\u0435\u043b\u044b", "\u0432", "\u043e\u0431\u0440\u0430\u0442\u043d\u043e\u043c", "\u0430\u043b\u0444\u0430\u0432\u0438\u0442\u043d\u043e\u043c", "\u043f\u043e\u0440\u044f\u0434\u043a\u0435", "?"]}, "query_toks": {"en": ["select", "section_name", "from", "sections", "order", "by", "section_name", "desc", ";"], "ru": ["select", "section_name", "from", "sections", "order", "by", "section_name", "desc", ";"]}, "query_toks_no_values": {"en": ["select", "section_name", "from", "sections", "order", "by", "section_name", "desc", ";"], "ru": ["select", "section_name", "from", "sections", "order", "by", "section_name", "desc", ";"]}, "masked_query": "SELECT section_name FROM Sections ORDER BY section_name DESC;", "question_pauq": {"ru": "\u041a\u0430\u043a \u043d\u0430\u0437\u044b\u0432\u0430\u044e\u0442\u0441\u044f \u0440\u0430\u0437\u0434\u0435\u043b\u044b \u0432 \u043e\u0431\u0440\u0430\u0442\u043d\u043e\u043c \u0430\u043b\u0444\u0430\u0432\u0438\u0442\u043d\u043e\u043c \u043f\u043e\u0440\u044f\u0434\u043a\u0435?"}, "question": "What are the names of the sections in reverse alphabetical order?", "kb_id": "student_transcripts_tracking"}, {"id": "D_0530", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 5], ["table_unit", 7]], "conds": [[false, 2, [0, [0, 28, false], null], [0, 46, false], null]]}, "select": [false, [[0, [0, [0, 29, false], null]], [0, [0, [0, 28, false], null]]]], "where": [], "groupBy": [[0, 28, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 5], ["table_unit", 7]], "conds": [[false, 2, [0, [0, 28, false], null], [0, 46, false], null]]}, "select": [false, [[0, [0, [0, 29, false], null]], [0, [0, [0, 28, false], null]]]], "where": [], "groupBy": [[0, 28, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "semester", "which", "most", "student", "registered", "in", "?", "Show", "both", "the", "name", "and", "the", "id", "."], "ru": ["\u041d\u0430", "\u043a\u0430\u043a\u043e\u0439", "\u0441\u0435\u043c\u0435\u0441\u0442\u0440", "\u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043b\u043e\u0441\u044c", "\u0431\u043e\u043b\u044c\u0448\u0435", "\u0432\u0441\u0435\u0433\u043e", "\u0441\u0442\u0443\u0434\u0435\u043d\u0442\u043e\u0432", "?", "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c", "\u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435", "\u0438", "id", "\u0441\u0435\u043c\u0435\u0441\u0442\u0440\u0430", "."]}, "query_toks": {"en": ["select", "t1.semester_name", ",", "t1.semester_id", "from", "semesters", "as", "t1", "join", "student_enrolment", "as", "t2", "on", "t1.semester_id", "=", "t2.semester_id", "group", "by", "t1.semester_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"], "ru": ["select", "t1.semester_name", ",", "t1.semester_id", "from", "semesters", "as", "t1", "join", "student_enrolment", "as", "t2", "on", "t1.semester_id", "=", "t2.semester_id", "group", "by", "t1.semester_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"]}, "query_toks_no_values": {"en": ["select", "t1.semester_name", ",", "t1.semester_id", "from", "semesters", "as", "t1", "join", "student_enrolment", "as", "t2", "on", "t1.semester_id", "=", "t2.semester_id", "group", "by", "t1.semester_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"], "ru": ["select", "t1.semester_name", ",", "t1.semester_id", "from", "semesters", "as", "t1", "join", "student_enrolment", "as", "t2", "on", "t1.semester_id", "=", "t2.semester_id", "group", "by", "t1.semester_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"]}, "masked_query": "SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1;", "question_pauq": {"ru": "\u041d\u0430 \u043a\u0430\u043a\u043e\u0439 \u0441\u0435\u043c\u0435\u0441\u0442\u0440 \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043b\u043e\u0441\u044c \u0431\u043e\u043b\u044c\u0448\u0435 \u0432\u0441\u0435\u0433\u043e \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u043e\u0432? \u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u0438 id \u0441\u0435\u043c\u0435\u0441\u0442\u0440\u0430."}, "question": "What is the semester which most student registered in? Show both the name and the id.", "kb_id": "student_transcripts_tracking"}, {"id": "D_0531", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 5], ["table_unit", 7]], "conds": [[false, 2, [0, [0, 28, false], null], [0, 46, false], null]]}, "select": [false, [[0, [0, [0, 29, false], null]], [0, [0, [0, 28, false], null]]]], "where": [], "groupBy": [[0, 28, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 5], ["table_unit", 7]], "conds": [[false, 2, [0, [0, 28, false], null], [0, 46, false], null]]}, "select": [false, [[0, [0, [0, 29, false], null]], [0, [0, [0, 28, false], null]]]], "where": [], "groupBy": [[0, 28, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["For", "each", "semester", ",", "what", "is", "the", "name", "and", "id", "of", "the", "one", "with", "the", "most", "students", "registered", "?"], "ru": ["\u041a\u0430\u043a\u043e\u0435", "\u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435", "\u0438", "id", "\u0434\u043b\u044f", "\u043a\u0430\u0436\u0434\u043e\u0433\u043e", "\u0441\u0435\u043c\u0435\u0441\u0442\u0440\u0430", "\u0438\u043c\u0435\u0435\u0442", "\u0442\u043e\u0442", ",", "\u043d\u0430", "\u043a\u043e\u0442\u043e\u0440\u044b\u0439", "\u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043e", "\u0431\u043e\u043b\u044c\u0448\u0435", "\u0432\u0441\u0435\u0433\u043e", "\u0441\u0442\u0443\u0434\u0435\u043d\u0442\u043e\u0432", "?"]}, "query_toks": {"en": ["select", "t1.semester_name", ",", "t1.semester_id", "from", "semesters", "as", "t1", "join", "student_enrolment", "as", "t2", "on", "t1.semester_id", "=", "t2.semester_id", "group", "by", "t1.semester_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"], "ru": ["select", "t1.semester_name", ",", "t1.semester_id", "from", "semesters", "as", "t1", "join", "student_enrolment", "as", "t2", "on", "t1.semester_id", "=", "t2.semester_id", "group", "by", "t1.semester_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"]}, "query_toks_no_values": {"en": ["select", "t1.semester_name", ",", "t1.semester_id", "from", "semesters", "as", "t1", "join", "student_enrolment", "as", "t2", "on", "t1.semester_id", "=", "t2.semester_id", "group", "by", "t1.semester_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"], "ru": ["select", "t1.semester_name", ",", "t1.semester_id", "from", "semesters", "as", "t1", "join", "student_enrolment", "as", "t2", "on", "t1.semester_id", "=", "t2.semester_id", "group", "by", "t1.semester_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"]}, "masked_query": "SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1;", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0435 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u0438 id \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0441\u0435\u043c\u0435\u0441\u0442\u0440\u0430 \u0438\u043c\u0435\u0435\u0442 \u0442\u043e\u0442, \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043e \u0431\u043e\u043b\u044c\u0448\u0435 \u0432\u0441\u0435\u0433\u043e \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u043e\u0432?"}, "question": "For each semester, what is the name and id of the one with the most students registered?", "kb_id": "student_transcripts_tracking"}, {"id": "D_0532", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT department_description FROM Departments WHERE department_name LIKE '%\u0444\u0438\u0437\u0438\u0447\u0435\u0441\u043a\u0438\u0439%';"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 16, false], null]]]], "where": [[false, 9, [0, [0, 15, false], null], "\"%computer%\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 16, false], null]]]], "where": [[false, 9, [0, [0, 15, false], null], "\"%\u0444\u0438\u0437\u0438\u0447\u0435\u0441\u043a\u0438\u0439%\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "description", "of", "the", "department", "whose", "name", "has", "the", "substring", "the", "computer", "?"], "ru": ["\u041a\u0430\u043a\u043e\u0432\u043e", "\u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435", "\u043e\u0442\u0434\u0435\u043b\u0430", ",", "\u0432", "\u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0438", "\u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e", "\u0435\u0441\u0442\u044c", "\u043f\u043e\u0434\u0441\u0442\u0440\u043e\u043a\u0430", "\u0444\u0438\u0437\u0438\u0447\u0435\u0441\u043a\u0438\u0439", "?"]}, "query_toks": {"en": ["select", "department_description", "from", "departments", "where", "department_name", "like", "\"%computer%\"", ";"], "ru": ["select", "department_description", "from", "departments", "where", "department_name", "like", "\"%\u0444\u0438\u0437\u0438\u0447\u0435\u0441\u043a\u0438\u0439%\"", ";"]}, "query_toks_no_values": {"en": ["select", "department_description", "from", "departments", "where", "department_name", "like", "value", ";"], "ru": ["select", "department_description", "from", "departments", "where", "department_name", "like", "value", ";"]}, "masked_query": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%';", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0432\u043e \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043e\u0442\u0434\u0435\u043b\u0430, \u0432 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0438 \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u0435\u0441\u0442\u044c \u043f\u043e\u0434\u0441\u0442\u0440\u043e\u043a\u0430 \u0444\u0438\u0437\u0438\u0447\u0435\u0441\u043a\u0438\u0439?"}, "question": "What is the description of the department whose name has the substring the computer?", "kb_id": "student_transcripts_tracking"}, {"id": "D_0533", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT department_description FROM Departments WHERE department_name LIKE '%\u0444\u0438\u0437\u0438\u0447\u0435\u0441\u043a\u0438\u0439%';"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 16, false], null]]]], "where": [[false, 9, [0, [0, 15, false], null], "\"%computer%\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 16, false], null]]]], "where": [[false, 9, [0, [0, 15, false], null], "\"%\u0444\u0438\u0437\u0438\u0447\u0435\u0441\u043a\u0438\u0439%\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "department", "description", "for", "the", "one", "whose", "name", "has", "the", "word", "computer", "?"], "ru": ["\u041a\u0430\u043a\u043e\u0435", "\u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435", "\u043e\u0442\u0434\u0435\u043b\u0430", "\u0434\u043b\u044f", "\u043e\u0442\u0434\u0435\u043b\u0430", ",", "\u0432", "\u0447\u044c\u0435\u043c", "\u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0438", "\u0435\u0441\u0442\u044c", "\u0441\u043b\u043e\u0432\u043e", "\u0444\u0438\u0437\u0438\u0447\u0435\u0441\u043a\u0438\u0439", "?"]}, "query_toks": {"en": ["select", "department_description", "from", "departments", "where", "department_name", "like", "\"%computer%\"", ";"], "ru": ["select", "department_description", "from", "departments", "where", "department_name", "like", "\"%\u0444\u0438\u0437\u0438\u0447\u0435\u0441\u043a\u0438\u0439%\"", ";"]}, "query_toks_no_values": {"en": ["select", "department_description", "from", "departments", "where", "department_name", "like", "value", ";"], "ru": ["select", "department_description", "from", "departments", "where", "department_name", "like", "value", ";"]}, "masked_query": "SELECT department_description FROM Departments WHERE department_name LIKE '%computer%';", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0435 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043e\u0442\u0434\u0435\u043b\u0430 \u0434\u043b\u044f \u043e\u0442\u0434\u0435\u043b\u0430, \u0432 \u0447\u044c\u0435\u043c \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0438 \u0435\u0441\u0442\u044c \u0441\u043b\u043e\u0432\u043e \u0444\u0438\u0437\u0438\u0447\u0435\u0441\u043a\u0438\u0439?"}, "question": "What is the department description for the one whose name has the word computer?", "kb_id": "student_transcripts_tracking"}, {"id": "D_0534", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 6], ["table_unit", 7]], "conds": [[false, 2, [0, [0, 32, false], null], [0, 47, false], null]]}, "select": [false, [[0, [0, [0, 35, false], null]], [0, [0, [0, 36, false], null]], [0, [0, [0, 37, false], null]], [0, [0, [0, 32, false], null]]]], "where": [], "groupBy": [[0, 32, false]], "having": [[false, 2, [0, [3, 0, false], null], 2.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 6], ["table_unit", 7]], "conds": [[false, 2, [0, [0, 32, false], null], [0, 47, false], null]]}, "select": [false, [[0, [0, [0, 35, false], null]], [0, [0, [0, 36, false], null]], [0, [0, [0, 37, false], null]], [0, [0, [0, 32, false], null]]]], "where": [], "groupBy": [[0, 32, false]], "having": [[false, 2, [0, [3, 0, false], null], 2.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Who", "are", "enrolled", "in", "2", "degree", "programs", "in", "one", "semester", "?", "List", "the", "first", "name", ",", "middle", "name", "and", "last", "name", "and", "the", "id", "."], "ru": ["\u041a\u0442\u043e", "\u0437\u0430\u0447\u0438\u0441\u043b\u0435\u043d", "\u043d\u0430", "2", "\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b", "\u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f", "\u0437\u0430", "\u043e\u0434\u0438\u043d", "\u0441\u0435\u043c\u0435\u0441\u0442\u0440", "?", "\u041f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0438\u0442\u0435", "\u0438\u043c\u044f", ",", "\u043e\u0442\u0447\u0435\u0441\u0442\u0432\u043e", ",", "\u0444\u0430\u043c\u0438\u043b\u0438\u044e", "\u0438", "id", "."]}, "query_toks": {"en": ["select", "t1.first_name", ",", "t1.middle_name", ",", "t1.last_name", ",", "t1.student_id", "from", "students", "as", "t1", "join", "student_enrolment", "as", "t2", "on", "t1.student_id", "=", "t2.student_id", "group", "by", "t1.student_id", "having", "count", "(", "*", ")", "=", "2", ";"], "ru": ["select", "t1.first_name", ",", "t1.middle_name", ",", "t1.last_name", ",", "t1.student_id", "from", "students", "as", "t1", "join", "student_enrolment", "as", "t2", "on", "t1.student_id", "=", "t2.student_id", "group", "by", "t1.student_id", "having", "count", "(", "*", ")", "=", "2", ";"]}, "query_toks_no_values": {"en": ["select", "t1.first_name", ",", "t1.middle_name", ",", "t1.last_name", ",", "t1.student_id", "from", "students", "as", "t1", "join", "student_enrolment", "as", "t2", "on", "t1.student_id", "=", "t2.student_id", "group", "by", "t1.student_id", "having", "count", "(", "*", ")", "=", "2", ";"], "ru": ["select", "t1.first_name", ",", "t1.middle_name", ",", "t1.last_name", ",", "t1.student_id", "from", "students", "as", "t1", "join", "student_enrolment", "as", "t2", "on", "t1.student_id", "=", "t2.student_id", "group", "by", "t1.student_id", "having", "count", "(", "*", ")", "=", "2", ";"]}, "masked_query": "SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2;", "question_pauq": {"ru": "\u041a\u0442\u043e \u0437\u0430\u0447\u0438\u0441\u043b\u0435\u043d \u043d\u0430 2 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f \u0437\u0430 \u043e\u0434\u0438\u043d \u0441\u0435\u043c\u0435\u0441\u0442\u0440? \u041f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0438\u0442\u0435 \u0438\u043c\u044f, \u043e\u0442\u0447\u0435\u0441\u0442\u0432\u043e, \u0444\u0430\u043c\u0438\u043b\u0438\u044e \u0438 id."}, "question": "Who are enrolled in 2 degree programs in one semester? List the first name, middle name and last name and the id.", "kb_id": "student_transcripts_tracking"}, {"id": "D_0535", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 6], ["table_unit", 7]], "conds": [[false, 2, [0, [0, 32, false], null], [0, 47, false], null]]}, "select": [false, [[0, [0, [0, 35, false], null]], [0, [0, [0, 36, false], null]], [0, [0, [0, 37, false], null]], [0, [0, [0, 32, false], null]]]], "where": [], "groupBy": [[0, 32, false]], "having": [[false, 2, [0, [3, 0, false], null], 2.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 6], ["table_unit", 7]], "conds": [[false, 2, [0, [0, 32, false], null], [0, 47, false], null]]}, "select": [false, [[0, [0, [0, 35, false], null]], [0, [0, [0, 36, false], null]], [0, [0, [0, 37, false], null]], [0, [0, [0, 32, false], null]]]], "where": [], "groupBy": [[0, 32, false]], "having": [[false, 2, [0, [3, 0, false], null], 2.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "the", "first", ",", "middle", ",", "and", "last", "names", ",", "along", "with", "the", "ids", ",", "of", "all", "students", "who", "enrolled", "in", "2", "degree", "programs", "in", "one", "semester", "?"], "ru": ["\u041a\u0430\u043a\u043e\u0432\u044b", "\u0438\u043c\u044f", ",", "\u043e\u0442\u0447\u0435\u0441\u0442\u0432\u043e", "\u0438", "\u0444\u0430\u043c\u0438\u043b\u0438\u044f", ",", "\u0430", "\u0442\u0430\u043a\u0436\u0435", "id", "\u0432\u0441\u0435\u0445", "\u0441\u0442\u0443\u0434\u0435\u043d\u0442\u043e\u0432", ",", "\u043a\u043e\u0442\u043e\u0440\u044b\u0435", "\u043e\u0431\u0443\u0447\u0430\u043b\u0438\u0441\u044c", "\u043f\u043e", "\u0434\u0432\u0443\u043c", "\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430\u043c", "\u0437\u0430", "\u043e\u0434\u0438\u043d", "\u0441\u0435\u043c\u0435\u0441\u0442\u0440", "?"]}, "query_toks": {"en": ["select", "t1.first_name", ",", "t1.middle_name", ",", "t1.last_name", ",", "t1.student_id", "from", "students", "as", "t1", "join", "student_enrolment", "as", "t2", "on", "t1.student_id", "=", "t2.student_id", "group", "by", "t1.student_id", "having", "count", "(", "*", ")", "=", "2", ";"], "ru": ["select", "t1.first_name", ",", "t1.middle_name", ",", "t1.last_name", ",", "t1.student_id", "from", "students", "as", "t1", "join", "student_enrolment", "as", "t2", "on", "t1.student_id", "=", "t2.student_id", "group", "by", "t1.student_id", "having", "count", "(", "*", ")", "=", "2", ";"]}, "query_toks_no_values": {"en": ["select", "t1.first_name", ",", "t1.middle_name", ",", "t1.last_name", ",", "t1.student_id", "from", "students", "as", "t1", "join", "student_enrolment", "as", "t2", "on", "t1.student_id", "=", "t2.student_id", "group", "by", "t1.student_id", "having", "count", "(", "*", ")", "=", "2", ";"], "ru": ["select", "t1.first_name", ",", "t1.middle_name", ",", "t1.last_name", ",", "t1.student_id", "from", "students", "as", "t1", "join", "student_enrolment", "as", "t2", "on", "t1.student_id", "=", "t2.student_id", "group", "by", "t1.student_id", "having", "count", "(", "*", ")", "=", "2", ";"]}, "masked_query": "SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2;", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0432\u044b \u0438\u043c\u044f, \u043e\u0442\u0447\u0435\u0441\u0442\u0432\u043e \u0438 \u0444\u0430\u043c\u0438\u043b\u0438\u044f, \u0430 \u0442\u0430\u043a\u0436\u0435 id \u0432\u0441\u0435\u0445 \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043e\u0431\u0443\u0447\u0430\u043b\u0438\u0441\u044c \u043f\u043e \u0434\u0432\u0443\u043c \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430\u043c \u0437\u0430 \u043e\u0434\u0438\u043d \u0441\u0435\u043c\u0435\u0441\u0442\u0440?"}, "question": "What are the first, middle, and last names, along with the ids, of all students who enrolled in 2 degree programs in one semester?", "kb_id": "student_transcripts_tracking"}, {"id": "D_0536", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor';"}, "sql": {"en": {"from": {"table_units": [["table_unit", 6], ["table_unit", 7], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 32, false], null], [0, 47, false], null], "and", [false, 2, [0, [0, 45, false], null], [0, 18, false], null]]}, "select": [true, [[0, [0, [0, 35, false], null]], [0, [0, [0, 36, false], null]], [0, [0, [0, 37, false], null]]]], "where": [[false, 2, [0, [0, 20, false], null], "\"Bachelor\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 6], ["table_unit", 7], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 32, false], null], [0, 47, false], null], "and", [false, 2, [0, [0, 45, false], null], [0, 18, false], null]]}, "select": [true, [[0, [0, [0, 35, false], null]], [0, [0, [0, 36, false], null]], [0, [0, [0, 37, false], null]]]], "where": [[false, 2, [0, [0, 20, false], null], "\"Bachelor\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Who", "is", "enrolled", "in", "a", "Bachelor", "degree", "program", "?", "List", "the", "first", "name", ",", "middle", "name", ",", "last", "name", "."], "ru": ["\u041a\u0442\u043e", "\u0443\u0447\u0438\u0442\u0441\u044f", "\u043d\u0430", "\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0435", "\u0431\u0430\u043a\u0430\u043b\u0430\u0432\u0440\u0438\u0430\u0442\u0430", "?", "\u0423\u043a\u0430\u0436\u0438\u0442\u0435", "\u0438\u043c\u044f", ",", "\u043e\u0442\u0447\u0435\u0441\u0442\u0432\u043e", ",", "\u0444\u0430\u043c\u0438\u043b\u0438\u044e", "."]}, "query_toks": {"en": ["select", "distinct", "t1.first_name", ",", "t1.middle_name", ",", "t1.last_name", "from", "students", "as", "t1", "join", "student_enrolment", "as", "t2", "on", "t1.student_id", "=", "t2.student_id", "join", "degree_programs", "as", "t3", "on", "t2.degree_program_id", "=", "t3.degree_program_id", "where", "t3.degree_summary_name", "=", "\"Bachelor\"", ";"], "ru": ["select", "distinct", "t1.first_name", ",", "t1.middle_name", ",", "t1.last_name", "from", "students", "as", "t1", "join", "student_enrolment", "as", "t2", "on", "t1.student_id", "=", "t2.student_id", "join", "degree_programs", "as", "t3", "on", "t2.degree_program_id", "=", "t3.degree_program_id", "where", "t3.degree_summary_name", "=", "\"Bachelor\"", ";"]}, "query_toks_no_values": {"en": ["select", "distinct", "t1.first_name", ",", "t1.middle_name", ",", "t1.last_name", "from", "students", "as", "t1", "join", "student_enrolment", "as", "t2", "on", "t1.student_id", "=", "t2.student_id", "join", "degree_programs", "as", "t3", "on", "t2.degree_program_id", "=", "t3.degree_program_id", "where", "t3.degree_summary_name", "=", "value", ";"], "ru": ["select", "distinct", "t1.first_name", ",", "t1.middle_name", ",", "t1.last_name", "from", "students", "as", "t1", "join", "student_enrolment", "as", "t2", "on", "t1.student_id", "=", "t2.student_id", "join", "degree_programs", "as", "t3", "on", "t2.degree_program_id", "=", "t3.degree_program_id", "where", "t3.degree_summary_name", "=", "value", ";"]}, "masked_query": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor';", "question_pauq": {"ru": "\u041a\u0442\u043e \u0443\u0447\u0438\u0442\u0441\u044f \u043d\u0430 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0435 \u0431\u0430\u043a\u0430\u043b\u0430\u0432\u0440\u0438\u0430\u0442\u0430? \u0423\u043a\u0430\u0436\u0438\u0442\u0435 \u0438\u043c\u044f, \u043e\u0442\u0447\u0435\u0441\u0442\u0432\u043e, \u0444\u0430\u043c\u0438\u043b\u0438\u044e."}, "question": "Who is enrolled in a Bachelor degree program? List the first name, middle name, last name.", "kb_id": "student_transcripts_tracking"}, {"id": "D_0537", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  '\u0410\u0441\u043f\u0438\u0440\u0430\u043d\u0441\u0442\u043a\u0430\u044f';"}, "sql": {"en": {"from": {"table_units": [["table_unit", 6], ["table_unit", 7], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 32, false], null], [0, 47, false], null], "and", [false, 2, [0, [0, 45, false], null], [0, 18, false], null]]}, "select": [true, [[0, [0, [0, 35, false], null]], [0, [0, [0, 36, false], null]], [0, [0, [0, 37, false], null]]]], "where": [[false, 2, [0, [0, 20, false], null], "\"Bachelor\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 6], ["table_unit", 7], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 32, false], null], [0, 47, false], null], "and", [false, 2, [0, [0, 45, false], null], [0, 18, false], null]]}, "select": [true, [[0, [0, [0, 35, false], null]], [0, [0, [0, 36, false], null]], [0, [0, [0, 37, false], null]]]], "where": [[false, 2, [0, [0, 20, false], null], "\"\u0410\u0441\u043f\u0438\u0440\u0430\u043d\u0441\u0442\u043a\u0430\u044f\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "the", "first", ",", "middle", ",", "and", "last", "names", "for", "everybody", "enrolled", "in", "a", "Bachelors", "program", "?"], "ru": ["\u041a\u0430\u043a\u043e\u0432\u044b", "\u0438\u043c\u044f", ",", "\u043e\u0442\u0447\u0435\u0441\u0442\u0432\u043e", "\u0438", "\u0444\u0430\u043c\u0438\u043b\u0438\u044f", "\u0443", "\u0432\u0441\u0435\u0445", ",", "\u043a\u0442\u043e", "\u043e\u0431\u0443\u0447\u0430\u0435\u0442\u0441\u044f", "\u043f\u043e", "\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0435", "\u0430\u0441\u043f\u0438\u0440\u0430\u043d\u0442\u0443\u0440\u044b", "?"]}, "query_toks": {"en": ["select", "distinct", "t1.first_name", ",", "t1.middle_name", ",", "t1.last_name", "from", "students", "as", "t1", "join", "student_enrolment", "as", "t2", "on", "t1.student_id", "=", "t2.student_id", "join", "degree_programs", "as", "t3", "on", "t2.degree_program_id", "=", "t3.degree_program_id", "where", "t3.degree_summary_name", "=", "\"Bachelor\"", ";"], "ru": ["select", "distinct", "t1.first_name", ",", "t1.middle_name", ",", "t1.last_name", "from", "students", "as", "t1", "join", "student_enrolment", "as", "t2", "on", "t1.student_id", "=", "t2.student_id", "join", "degree_programs", "as", "t3", "on", "t2.degree_program_id", "=", "t3.degree_program_id", "where", "t3.degree_summary_name", "=", "\"\u0410\u0441\u043f\u0438\u0440\u0430\u043d\u0441\u0442\u043a\u0430\u044f\"", ";"]}, "query_toks_no_values": {"en": ["select", "distinct", "t1.first_name", ",", "t1.middle_name", ",", "t1.last_name", "from", "students", "as", "t1", "join", "student_enrolment", "as", "t2", "on", "t1.student_id", "=", "t2.student_id", "join", "degree_programs", "as", "t3", "on", "t2.degree_program_id", "=", "t3.degree_program_id", "where", "t3.degree_summary_name", "=", "value", ";"], "ru": ["select", "distinct", "t1.first_name", ",", "t1.middle_name", ",", "t1.last_name", "from", "students", "as", "t1", "join", "student_enrolment", "as", "t2", "on", "t1.student_id", "=", "t2.student_id", "join", "degree_programs", "as", "t3", "on", "t2.degree_program_id", "=", "t3.degree_program_id", "where", "t3.degree_summary_name", "=", "value", ";"]}, "masked_query": "SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor';", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0432\u044b \u0438\u043c\u044f, \u043e\u0442\u0447\u0435\u0441\u0442\u0432\u043e \u0438 \u0444\u0430\u043c\u0438\u043b\u0438\u044f \u0443 \u0432\u0441\u0435\u0445, \u043a\u0442\u043e \u043e\u0431\u0443\u0447\u0430\u0435\u0442\u0441\u044f \u043f\u043e \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0435 \u0430\u0441\u043f\u0438\u0440\u0430\u043d\u0442\u0443\u0440\u044b?"}, "question": "What are the first, middle, and last names for everybody enrolled in a Bachelors program?", "kb_id": "student_transcripts_tracking"}, {"id": "D_0538", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 3], ["table_unit", 7]], "conds": [[false, 2, [0, [0, 18, false], null], [0, 45, false], null]]}, "select": [false, [[0, [0, [0, 20, false], null]]]], "where": [], "groupBy": [[0, 20, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 3], ["table_unit", 7]], "conds": [[false, 2, [0, [0, 18, false], null], [0, 45, false], null]]}, "select": [false, [[0, [0, [0, 20, false], null]]]], "where": [], "groupBy": [[0, 20, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Find", "the", "kind", "of", "program", "which", "most", "number", "of", "students", "are", "enrolled", "in", "?"], "ru": ["\u041d\u0430\u0439\u0434\u0438\u0442\u0435", "\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443", ",", "\u043f\u043e", "\u043a\u043e\u0442\u043e\u0440\u043e\u0439", "\u043e\u0431\u0443\u0447\u0430\u0435\u0442\u0441\u044f", "\u0431\u043e\u043b\u044c\u0448\u0435", "\u0432\u0441\u0435\u0433\u043e", "\u0441\u0442\u0443\u0434\u0435\u043d\u0442\u043e\u0432"]}, "query_toks": {"en": ["select", "t1.degree_summary_name", "from", "degree_programs", "as", "t1", "join", "student_enrolment", "as", "t2", "on", "t1.degree_program_id", "=", "t2.degree_program_id", "group", "by", "t1.degree_summary_name", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"], "ru": ["select", "t1.degree_summary_name", "from", "degree_programs", "as", "t1", "join", "student_enrolment", "as", "t2", "on", "t1.degree_program_id", "=", "t2.degree_program_id", "group", "by", "t1.degree_summary_name", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"]}, "query_toks_no_values": {"en": ["select", "t1.degree_summary_name", "from", "degree_programs", "as", "t1", "join", "student_enrolment", "as", "t2", "on", "t1.degree_program_id", "=", "t2.degree_program_id", "group", "by", "t1.degree_summary_name", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"], "ru": ["select", "t1.degree_summary_name", "from", "degree_programs", "as", "t1", "join", "student_enrolment", "as", "t2", "on", "t1.degree_program_id", "=", "t2.degree_program_id", "group", "by", "t1.degree_summary_name", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"]}, "masked_query": "SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1;", "question_pauq": {"ru": "\u041d\u0430\u0439\u0434\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043f\u043e \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u043e\u0431\u0443\u0447\u0430\u0435\u0442\u0441\u044f \u0431\u043e\u043b\u044c\u0448\u0435 \u0432\u0441\u0435\u0433\u043e \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u043e\u0432"}, "question": "Find the kind of program which most number of students are enrolled in?", "kb_id": "student_transcripts_tracking"}, {"id": "D_0539", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 3], ["table_unit", 7]], "conds": [[false, 2, [0, [0, 18, false], null], [0, 45, false], null]]}, "select": [false, [[0, [0, [0, 20, false], null]]]], "where": [], "groupBy": [[0, 20, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 3], ["table_unit", 7]], "conds": [[false, 2, [0, [0, 18, false], null], [0, 45, false], null]]}, "select": [false, [[0, [0, [0, 20, false], null]]]], "where": [], "groupBy": [[0, 20, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "degree", "summary", "name", "that", "has", "the", "most", "number", "of", "students", "enrolled", "?"], "ru": ["\u041a\u0440\u0430\u0442\u043a\u043e\u0435", "\u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435", "\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b", ",", "\u043d\u0430", "\u043a\u043e\u0442\u043e\u0440\u043e\u0439", "\u043e\u0431\u0443\u0447\u0430\u0435\u0442\u0441\u044f", "\u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0435\u0435", "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e", "\u0441\u0442\u0443\u0434\u0435\u043d\u0442\u043e\u0432"]}, "query_toks": {"en": ["select", "t1.degree_summary_name", "from", "degree_programs", "as", "t1", "join", "student_enrolment", "as", "t2", "on", "t1.degree_program_id", "=", "t2.degree_program_id", "group", "by", "t1.degree_summary_name", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"], "ru": ["select", "t1.degree_summary_name", "from", "degree_programs", "as", "t1", "join", "student_enrolment", "as", "t2", "on", "t1.degree_program_id", "=", "t2.degree_program_id", "group", "by", "t1.degree_summary_name", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"]}, "query_toks_no_values": {"en": ["select", "t1.degree_summary_name", "from", "degree_programs", "as", "t1", "join", "student_enrolment", "as", "t2", "on", "t1.degree_program_id", "=", "t2.degree_program_id", "group", "by", "t1.degree_summary_name", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"], "ru": ["select", "t1.degree_summary_name", "from", "degree_programs", "as", "t1", "join", "student_enrolment", "as", "t2", "on", "t1.degree_program_id", "=", "t2.degree_program_id", "group", "by", "t1.degree_summary_name", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"]}, "masked_query": "SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1;", "question_pauq": {"ru": "\u041a\u0440\u0430\u0442\u043a\u043e\u0435 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b, \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u043e\u0431\u0443\u0447\u0430\u0435\u0442\u0441\u044f \u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u043e\u0432"}, "question": "What is the degree summary name that has the most number of students enrolled?", "kb_id": "student_transcripts_tracking"}, {"id": "D_0540", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 3], ["table_unit", 7]], "conds": [[false, 2, [0, [0, 18, false], null], [0, 45, false], null]]}, "select": [false, [[0, [0, [0, 18, false], null]], [0, [0, [0, 20, false], null]]]], "where": [], "groupBy": [[0, 18, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 3], ["table_unit", 7]], "conds": [[false, 2, [0, [0, 18, false], null], [0, 45, false], null]]}, "select": [false, [[0, [0, [0, 18, false], null]], [0, [0, [0, 20, false], null]]]], "where": [], "groupBy": [[0, 18, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Find", "the", "program", "which", "most", "number", "of", "students", "are", "enrolled", "in", ".", "List", "both", "the", "id", "and", "the", "summary", "."], "ru": ["\u041d\u0430\u0439\u0434\u0438", "\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443", ",", "\u043f\u043e", "\u043a\u043e\u0442\u043e\u0440\u043e\u0439", "\u043e\u0431\u0443\u0447\u0430\u0435\u0442\u0441\u044f", "\u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0435\u0435", "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e", "\u0441\u0442\u0443\u0434\u0435\u043d\u0442\u043e\u0432", ".", "\u0423\u043a\u0430\u0436\u0438", "id", "\u0438", "\u043a\u0440\u0430\u0442\u043a\u043e\u0435", "\u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435", "."]}, "query_toks": {"en": ["select", "t1.degree_program_id", ",", "t1.degree_summary_name", "from", "degree_programs", "as", "t1", "join", "student_enrolment", "as", "t2", "on", "t1.degree_program_id", "=", "t2.degree_program_id", "group", "by", "t1.degree_program_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"], "ru": ["select", "t1.degree_program_id", ",", "t1.degree_summary_name", "from", "degree_programs", "as", "t1", "join", "student_enrolment", "as", "t2", "on", "t1.degree_program_id", "=", "t2.degree_program_id", "group", "by", "t1.degree_program_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"]}, "query_toks_no_values": {"en": ["select", "t1.degree_program_id", ",", "t1.degree_summary_name", "from", "degree_programs", "as", "t1", "join", "student_enrolment", "as", "t2", "on", "t1.degree_program_id", "=", "t2.degree_program_id", "group", "by", "t1.degree_program_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"], "ru": ["select", "t1.degree_program_id", ",", "t1.degree_summary_name", "from", "degree_programs", "as", "t1", "join", "student_enrolment", "as", "t2", "on", "t1.degree_program_id", "=", "t2.degree_program_id", "group", "by", "t1.degree_program_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"]}, "masked_query": "SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1;", "question_pauq": {"ru": "\u041d\u0430\u0439\u0434\u0438 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443, \u043f\u043e \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u043e\u0431\u0443\u0447\u0430\u0435\u0442\u0441\u044f \u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u043e\u0432. \u0423\u043a\u0430\u0436\u0438 id \u0438 \u043a\u0440\u0430\u0442\u043a\u043e\u0435 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435."}, "question": "Find the program which most number of students are enrolled in. List both the id and the summary.", "kb_id": "student_transcripts_tracking"}, {"id": "D_0541", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 3], ["table_unit", 7]], "conds": [[false, 2, [0, [0, 18, false], null], [0, 45, false], null]]}, "select": [false, [[0, [0, [0, 18, false], null]], [0, [0, [0, 20, false], null]]]], "where": [], "groupBy": [[0, 18, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 3], ["table_unit", 7]], "conds": [[false, 2, [0, [0, 18, false], null], [0, 45, false], null]]}, "select": [false, [[0, [0, [0, 18, false], null]], [0, [0, [0, 20, false], null]]]], "where": [], "groupBy": [[0, 18, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "program", "id", "and", "the", "summary", "of", "the", "degree", "that", "has", "the", "most", "students", "enrolled", "?"], "ru": ["\u041a\u0430\u043a\u043e\u0432", "id", "\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b", "\u0438", "\u043a\u0440\u0430\u0442\u043a\u043e\u0435", "\u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435", "\u0441\u0442\u0435\u043f\u0435\u043d\u0438", ",", "\u043d\u0430", "\u043a\u043e\u0442\u043e\u0440\u0443\u044e", "\u043e\u0431\u0443\u0447\u0430\u0435\u0442\u0441\u044f", "\u0431\u043e\u043b\u044c\u0448\u0435", "\u0432\u0441\u0435\u0433\u043e", "\u0441\u0442\u0443\u0434\u0435\u043d\u0442\u043e\u0432", "?"]}, "query_toks": {"en": ["select", "t1.degree_program_id", ",", "t1.degree_summary_name", "from", "degree_programs", "as", "t1", "join", "student_enrolment", "as", "t2", "on", "t1.degree_program_id", "=", "t2.degree_program_id", "group", "by", "t1.degree_program_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"], "ru": ["select", "t1.degree_program_id", ",", "t1.degree_summary_name", "from", "degree_programs", "as", "t1", "join", "student_enrolment", "as", "t2", "on", "t1.degree_program_id", "=", "t2.degree_program_id", "group", "by", "t1.degree_program_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"]}, "query_toks_no_values": {"en": ["select", "t1.degree_program_id", ",", "t1.degree_summary_name", "from", "degree_programs", "as", "t1", "join", "student_enrolment", "as", "t2", "on", "t1.degree_program_id", "=", "t2.degree_program_id", "group", "by", "t1.degree_program_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"], "ru": ["select", "t1.degree_program_id", ",", "t1.degree_summary_name", "from", "degree_programs", "as", "t1", "join", "student_enrolment", "as", "t2", "on", "t1.degree_program_id", "=", "t2.degree_program_id", "group", "by", "t1.degree_program_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"]}, "masked_query": "SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1;", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0432 id \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u0438 \u043a\u0440\u0430\u0442\u043a\u043e\u0435 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0441\u0442\u0435\u043f\u0435\u043d\u0438, \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u043e\u0431\u0443\u0447\u0430\u0435\u0442\u0441\u044f \u0431\u043e\u043b\u044c\u0448\u0435 \u0432\u0441\u0435\u0433\u043e \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u043e\u0432?"}, "question": "What is the program id and the summary of the degree that has the most students enrolled?", "kb_id": "student_transcripts_tracking"}, {"id": "D_0542", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 6], ["table_unit", 7]], "conds": [[false, 2, [0, [0, 32, false], null], [0, 47, false], null]]}, "select": [false, [[0, [0, [0, 32, false], null]], [0, [0, [0, 35, false], null]], [0, [0, [0, 36, false], null]], [0, [0, [0, 37, false], null]], [3, [0, [0, 0, false], null]], [0, [0, [0, 32, false], null]]]], "where": [], "groupBy": [[0, 32, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 6], ["table_unit", 7]], "conds": [[false, 2, [0, [0, 32, false], null], [0, 47, false], null]]}, "select": [false, [[0, [0, [0, 32, false], null]], [0, [0, [0, 35, false], null]], [0, [0, [0, 36, false], null]], [0, [0, [0, 37, false], null]], [3, [0, [0, 0, false], null]], [0, [0, [0, 32, false], null]]]], "where": [], "groupBy": [[0, 32, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Which", "student", "has", "enrolled", "for", "the", "most", "times", "in", "any", "program", "?", "List", "the", "id", ",", "first", "name", ",", "middle", "name", ",", "last", "name", ",", "the", "number", "of", "enrollments", "and", "student", "id", "."], "ru": ["\u041a\u0430\u043a\u043e\u0439", "\u0441\u0442\u0443\u0434\u0435\u043d\u0442", "\u0447\u0430\u0449\u0435", "\u0432\u0441\u0435\u0433\u043e", "\u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u043b\u0441\u044f", "\u043d\u0430", "\u043b\u044e\u0431\u0443\u044e", "\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443", "?", "\u0423\u043a\u0430\u0436\u0438\u0442\u0435", "id", ",", "\u0438\u043c\u044f", ",", "\u043e\u0442\u0447\u0435\u0441\u0442\u0432\u043e", ",", "\u0444\u0430\u043c\u0438\u043b\u0438\u044e", ",", "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e", "\u0437\u0430\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0439", "\u0438", "id", "\u0441\u0442\u0443\u0434\u0435\u043d\u0442\u0430", "."]}, "query_toks": {"en": ["select", "t1.student_id", ",", "t1.first_name", ",", "t1.middle_name", ",", "t1.last_name", ",", "count", "(", "*", ")", ",", "t1.student_id", "from", "students", "as", "t1", "join", "student_enrolment", "as", "t2", "on", "t1.student_id", "=", "t2.student_id", "group", "by", "t1.student_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"], "ru": ["select", "t1.student_id", ",", "t1.first_name", ",", "t1.middle_name", ",", "t1.last_name", ",", "count", "(", "*", ")", ",", "t1.student_id", "from", "students", "as", "t1", "join", "student_enrolment", "as", "t2", "on", "t1.student_id", "=", "t2.student_id", "group", "by", "t1.student_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"]}, "query_toks_no_values": {"en": ["select", "t1.student_id", ",", "t1.first_name", ",", "t1.middle_name", ",", "t1.last_name", ",", "count", "(", "*", ")", ",", "t1.student_id", "from", "students", "as", "t1", "join", "student_enrolment", "as", "t2", "on", "t1.student_id", "=", "t2.student_id", "group", "by", "t1.student_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"], "ru": ["select", "t1.student_id", ",", "t1.first_name", ",", "t1.middle_name", ",", "t1.last_name", ",", "count", "(", "*", ")", ",", "t1.student_id", "from", "students", "as", "t1", "join", "student_enrolment", "as", "t2", "on", "t1.student_id", "=", "t2.student_id", "group", "by", "t1.student_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"]}, "masked_query": "SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1;", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0439 \u0441\u0442\u0443\u0434\u0435\u043d\u0442 \u0447\u0430\u0449\u0435 \u0432\u0441\u0435\u0433\u043e \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u043b\u0441\u044f \u043d\u0430 \u043b\u044e\u0431\u0443\u044e \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443? \u0423\u043a\u0430\u0436\u0438\u0442\u0435 id, \u0438\u043c\u044f, \u043e\u0442\u0447\u0435\u0441\u0442\u0432\u043e, \u0444\u0430\u043c\u0438\u043b\u0438\u044e, \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0437\u0430\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0439 \u0438 id \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u0430."}, "question": "Which student has enrolled for the most times in any program? List the id, first name, middle name, last name, the number of enrollments and student id.", "kb_id": "student_transcripts_tracking"}, {"id": "D_0543", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 6], ["table_unit", 7]], "conds": [[false, 2, [0, [0, 32, false], null], [0, 47, false], null]]}, "select": [false, [[0, [0, [0, 32, false], null]], [0, [0, [0, 35, false], null]], [0, [0, [0, 36, false], null]], [0, [0, [0, 37, false], null]], [3, [0, [0, 0, false], null]], [0, [0, [0, 32, false], null]]]], "where": [], "groupBy": [[0, 32, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 6], ["table_unit", 7]], "conds": [[false, 2, [0, [0, 32, false], null], [0, 47, false], null]]}, "select": [false, [[0, [0, [0, 32, false], null]], [0, [0, [0, 35, false], null]], [0, [0, [0, 36, false], null]], [0, [0, [0, 37, false], null]], [3, [0, [0, 0, false], null]], [0, [0, [0, 32, false], null]]]], "where": [], "groupBy": [[0, 32, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "first", ",", "middle", ",", "and", "last", "name", ",", "along", "with", "the", "id", "and", "number", "of", "enrollments", ",", "for", "the", "student", "who", "enrolled", "the", "most", "in", "any", "program", "?"], "ru": ["\u041a\u0430\u043a\u043e\u0432\u044b", "\u0438\u043c\u044f", ",", "\u043e\u0442\u0447\u0435\u0441\u0442\u0432\u043e", "\u0438", "\u0444\u0430\u043c\u0438\u043b\u0438\u044f", ",", "\u0430", "\u0442\u0430\u043a\u0436\u0435", "id", "\u0438", "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e", "\u0437\u0430\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0439", "\u0443", "\u0441\u0442\u0443\u0434\u0435\u043d\u0442\u0430", ",", "\u043a\u043e\u0442\u043e\u0440\u044b\u0439", "\u0438\u043c\u0435\u0435\u0442", "\u0431\u043e\u043b\u044c\u0448\u0435", "\u0432\u0441\u0435\u0433\u043e", "\u0437\u0430\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0439", "\u043d\u0430", "\u043b\u044e\u0431\u0443\u044e", "\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443", "?"]}, "query_toks": {"en": ["select", "t1.student_id", ",", "t1.first_name", ",", "t1.middle_name", ",", "t1.last_name", ",", "count", "(", "*", ")", ",", "t1.student_id", "from", "students", "as", "t1", "join", "student_enrolment", "as", "t2", "on", "t1.student_id", "=", "t2.student_id", "group", "by", "t1.student_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"], "ru": ["select", "t1.student_id", ",", "t1.first_name", ",", "t1.middle_name", ",", "t1.last_name", ",", "count", "(", "*", ")", ",", "t1.student_id", "from", "students", "as", "t1", "join", "student_enrolment", "as", "t2", "on", "t1.student_id", "=", "t2.student_id", "group", "by", "t1.student_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"]}, "query_toks_no_values": {"en": ["select", "t1.student_id", ",", "t1.first_name", ",", "t1.middle_name", ",", "t1.last_name", ",", "count", "(", "*", ")", ",", "t1.student_id", "from", "students", "as", "t1", "join", "student_enrolment", "as", "t2", "on", "t1.student_id", "=", "t2.student_id", "group", "by", "t1.student_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"], "ru": ["select", "t1.student_id", ",", "t1.first_name", ",", "t1.middle_name", ",", "t1.last_name", ",", "count", "(", "*", ")", ",", "t1.student_id", "from", "students", "as", "t1", "join", "student_enrolment", "as", "t2", "on", "t1.student_id", "=", "t2.student_id", "group", "by", "t1.student_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"]}, "masked_query": "SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1;", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0432\u044b \u0438\u043c\u044f, \u043e\u0442\u0447\u0435\u0441\u0442\u0432\u043e \u0438 \u0444\u0430\u043c\u0438\u043b\u0438\u044f, \u0430 \u0442\u0430\u043a\u0436\u0435 id \u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0437\u0430\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0439 \u0443 \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0438\u043c\u0435\u0435\u0442 \u0431\u043e\u043b\u044c\u0448\u0435 \u0432\u0441\u0435\u0433\u043e \u0437\u0430\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0439 \u043d\u0430 \u043b\u044e\u0431\u0443\u044e \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443?"}, "question": "What is the first, middle, and last name, along with the id and number of enrollments, for the student who enrolled the most in any program?", "kb_id": "student_transcripts_tracking"}, {"id": "D_0544", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment );"}, "sql": {"en": {"from": {"table_units": [["table_unit", 5]], "conds": []}, "select": [false, [[0, [0, [0, 29, false], null]]]], "where": [[true, 8, [0, [0, 28, false], null], {"from": {"table_units": [["table_unit", 7]], "conds": []}, "select": [false, [[0, [0, [0, 46, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 5]], "conds": []}, "select": [false, [[0, [0, [0, 29, false], null]]]], "where": [[true, 8, [0, [0, 28, false], null], {"from": {"table_units": [["table_unit", 7]], "conds": []}, "select": [false, [[0, [0, [0, 46, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Which", "semesters", "do", "not", "have", "any", "student", "enrolled", "?", "List", "the", "semester", "name", "."], "ru": ["\u041d\u0430", "\u043a\u0430\u043a\u0438\u0435", "\u0441\u0435\u043c\u0435\u0441\u0442\u0440\u044b", "\u043d\u0435", "\u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u044e\u0442\u0441\u044f", "\u0441\u0442\u0443\u0434\u0435\u043d\u0442\u044b", "?", "\u0423\u043a\u0430\u0436\u0438\u0442\u0435", "\u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435", "\u0441\u0435\u043c\u0435\u0441\u0442\u0440\u0430", "."]}, "query_toks": {"en": ["select", "semester_name", "from", "semesters", "where", "semester_id", "not", "in", "(", "select", "semester_id", "from", "student_enrolment", ")", ";"], "ru": ["select", "semester_name", "from", "semesters", "where", "semester_id", "not", "in", "(", "select", "semester_id", "from", "student_enrolment", ")", ";"]}, "query_toks_no_values": {"en": ["select", "semester_name", "from", "semesters", "where", "semester_id", "not", "in", "(", "select", "semester_id", "from", "student_enrolment", ")", ";"], "ru": ["select", "semester_name", "from", "semesters", "where", "semester_id", "not", "in", "(", "select", "semester_id", "from", "student_enrolment", ")", ";"]}, "masked_query": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment );", "question_pauq": {"ru": "\u041d\u0430 \u043a\u0430\u043a\u0438\u0435 \u0441\u0435\u043c\u0435\u0441\u0442\u0440\u044b \u043d\u0435 \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u044e\u0442\u0441\u044f \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u044b? \u0423\u043a\u0430\u0436\u0438\u0442\u0435 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u0441\u0435\u043c\u0435\u0441\u0442\u0440\u0430."}, "question": "Which semesters do not have any student enrolled? List the semester name.", "kb_id": "student_transcripts_tracking"}, {"id": "D_0545", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment );"}, "sql": {"en": {"from": {"table_units": [["table_unit", 5]], "conds": []}, "select": [false, [[0, [0, [0, 29, false], null]]]], "where": [[true, 8, [0, [0, 28, false], null], {"from": {"table_units": [["table_unit", 7]], "conds": []}, "select": [false, [[0, [0, [0, 46, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 5]], "conds": []}, "select": [false, [[0, [0, [0, 29, false], null]]]], "where": [[true, 8, [0, [0, 28, false], null], {"from": {"table_units": [["table_unit", 7]], "conds": []}, "select": [false, [[0, [0, [0, 46, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "name", "of", "the", "semester", "with", "no", "students", "enrolled", "?"], "ru": ["\u041a\u0430\u043a", "\u043d\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f", "\u0441\u0435\u043c\u0435\u0441\u0442\u0440", ",", "\u0432", "\u043a\u043e\u0442\u043e\u0440\u044b\u0439", "\u043d\u0435", "\u0437\u0430\u0447\u0438\u0441\u043b\u044f\u044e\u0442\u0441\u044f", "\u0441\u0442\u0443\u0434\u0435\u043d\u0442\u044b", "?"]}, "query_toks": {"en": ["select", "semester_name", "from", "semesters", "where", "semester_id", "not", "in", "(", "select", "semester_id", "from", "student_enrolment", ")", ";"], "ru": ["select", "semester_name", "from", "semesters", "where", "semester_id", "not", "in", "(", "select", "semester_id", "from", "student_enrolment", ")", ";"]}, "query_toks_no_values": {"en": ["select", "semester_name", "from", "semesters", "where", "semester_id", "not", "in", "(", "select", "semester_id", "from", "student_enrolment", ")", ";"], "ru": ["select", "semester_name", "from", "semesters", "where", "semester_id", "not", "in", "(", "select", "semester_id", "from", "student_enrolment", ")", ";"]}, "masked_query": "SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment );", "question_pauq": {"ru": "\u041a\u0430\u043a \u043d\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0441\u0435\u043c\u0435\u0441\u0442\u0440, \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043d\u0435 \u0437\u0430\u0447\u0438\u0441\u043b\u044f\u044e\u0442\u0441\u044f \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u044b?"}, "question": "What is the name of the semester with no students enrolled?", "kb_id": "student_transcripts_tracking"}, {"id": "D_0546", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1], ["table_unit", 8]], "conds": [[false, 2, [0, [0, 10, false], null], [0, 50, false], null]]}, "select": [true, [[0, [0, [0, 11, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1], ["table_unit", 8]], "conds": [[false, 2, [0, [0, 10, false], null], [0, 50, false], null]]}, "select": [true, [[0, [0, [0, 11, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "all", "the", "course", "names", "of", "the", "courses", "which", "ever", "have", "students", "enrolled", "in", "?"], "ru": ["\u041a\u0430\u043a", "\u043d\u0430\u0437\u044b\u0432\u0430\u044e\u0442\u0441\u044f", "\u0432\u0441\u0435", "\u043a\u0443\u0440\u0441\u044b", ",", "\u043d\u0430", "\u043a\u043e\u0442\u043e\u0440\u044b\u0435", "\u043a\u043e\u0433\u0434\u0430-\u043b\u0438\u0431\u043e", "\u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u043b\u0438\u0441\u044c", "\u0441\u0442\u0443\u0434\u0435\u043d\u0442\u044b", "?"]}, "query_toks": {"en": ["select", "distinct", "t1.course_name", "from", "courses", "as", "t1", "join", "student_enrolment_courses", "as", "t2", "on", "t1.course_id", "=", "t2.course_id", ";"], "ru": ["select", "distinct", "t1.course_name", "from", "courses", "as", "t1", "join", "student_enrolment_courses", "as", "t2", "on", "t1.course_id", "=", "t2.course_id", ";"]}, "query_toks_no_values": {"en": ["select", "distinct", "t1.course_name", "from", "courses", "as", "t1", "join", "student_enrolment_courses", "as", "t2", "on", "t1.course_id", "=", "t2.course_id", ";"], "ru": ["select", "distinct", "t1.course_name", "from", "courses", "as", "t1", "join", "student_enrolment_courses", "as", "t2", "on", "t1.course_id", "=", "t2.course_id", ";"]}, "masked_query": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id;", "question_pauq": {"ru": "\u041a\u0430\u043a \u043d\u0430\u0437\u044b\u0432\u0430\u044e\u0442\u0441\u044f \u0432\u0441\u0435 \u043a\u0443\u0440\u0441\u044b, \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043a\u043e\u0433\u0434\u0430-\u043b\u0438\u0431\u043e \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u043b\u0438\u0441\u044c \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u044b?"}, "question": "What are all the course names of the courses which ever have students enrolled in?", "kb_id": "student_transcripts_tracking"}, {"id": "D_0547", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1], ["table_unit", 8]], "conds": [[false, 2, [0, [0, 10, false], null], [0, 50, false], null]]}, "select": [true, [[0, [0, [0, 11, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1], ["table_unit", 8]], "conds": [[false, 2, [0, [0, 10, false], null], [0, 50, false], null]]}, "select": [true, [[0, [0, [0, 11, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "the", "names", "of", "all", "courses", "that", "have", "some", "students", "enrolled", "?"], "ru": ["\u041a\u0430\u043a", "\u043d\u0430\u0437\u044b\u0432\u0430\u044e\u0442\u0441\u044f", "\u0432\u0441\u0435", "\u043a\u0443\u0440\u0441\u044b", ",", "\u043d\u0430", "\u043a\u043e\u0442\u043e\u0440\u044b\u0435", "\u0437\u0430\u043f\u0438\u0441\u0430\u043d\u044b", "\u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0435", "\u0441\u0442\u0443\u0434\u0435\u043d\u0442\u044b", "?"]}, "query_toks": {"en": ["select", "distinct", "t1.course_name", "from", "courses", "as", "t1", "join", "student_enrolment_courses", "as", "t2", "on", "t1.course_id", "=", "t2.course_id", ";"], "ru": ["select", "distinct", "t1.course_name", "from", "courses", "as", "t1", "join", "student_enrolment_courses", "as", "t2", "on", "t1.course_id", "=", "t2.course_id", ";"]}, "query_toks_no_values": {"en": ["select", "distinct", "t1.course_name", "from", "courses", "as", "t1", "join", "student_enrolment_courses", "as", "t2", "on", "t1.course_id", "=", "t2.course_id", ";"], "ru": ["select", "distinct", "t1.course_name", "from", "courses", "as", "t1", "join", "student_enrolment_courses", "as", "t2", "on", "t1.course_id", "=", "t2.course_id", ";"]}, "masked_query": "SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id;", "question_pauq": {"ru": "\u041a\u0430\u043a \u043d\u0430\u0437\u044b\u0432\u0430\u044e\u0442\u0441\u044f \u0432\u0441\u0435 \u043a\u0443\u0440\u0441\u044b, \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u044b \u043d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u044b?"}, "question": "What are the names of all courses that have some students enrolled?", "kb_id": "student_transcripts_tracking"}, {"id": "D_0548", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1], ["table_unit", 8]], "conds": [[false, 2, [0, [0, 10, false], null], [0, 50, false], null]]}, "select": [false, [[0, [0, [0, 11, false], null]]]], "where": [], "groupBy": [[0, 11, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1], ["table_unit", 8]], "conds": [[false, 2, [0, [0, 10, false], null], [0, 50, false], null]]}, "select": [false, [[0, [0, [0, 11, false], null]]]], "where": [], "groupBy": [[0, 11, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "'s", "the", "name", "of", "the", "course", "with", "most", "number", "of", "enrollments", "?"], "ru": ["\u041a\u0430\u043a", "\u043d\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f", "\u043a\u0443\u0440\u0441", "\u0441", "\u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0438\u043c", "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c", "\u0437\u0430\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u044b\u0445", "?"]}, "query_toks": {"en": ["select", "t1.course_name", "from", "courses", "as", "t1", "join", "student_enrolment_courses", "as", "t2", "on", "t1.course_id", "=", "t2.course_id", "group", "by", "t1.course_name", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"], "ru": ["select", "t1.course_name", "from", "courses", "as", "t1", "join", "student_enrolment_courses", "as", "t2", "on", "t1.course_id", "=", "t2.course_id", "group", "by", "t1.course_name", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"]}, "query_toks_no_values": {"en": ["select", "t1.course_name", "from", "courses", "as", "t1", "join", "student_enrolment_courses", "as", "t2", "on", "t1.course_id", "=", "t2.course_id", "group", "by", "t1.course_name", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"], "ru": ["select", "t1.course_name", "from", "courses", "as", "t1", "join", "student_enrolment_courses", "as", "t2", "on", "t1.course_id", "=", "t2.course_id", "group", "by", "t1.course_name", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"]}, "masked_query": "SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1;", "question_pauq": {"ru": "\u041a\u0430\u043a \u043d\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u043a\u0443\u0440\u0441 \u0441 \u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0438\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c \u0437\u0430\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u044b\u0445?"}, "question": "What's the name of the course with most number of enrollments?", "kb_id": "student_transcripts_tracking"}, {"id": "D_0549", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1], ["table_unit", 8]], "conds": [[false, 2, [0, [0, 10, false], null], [0, 50, false], null]]}, "select": [false, [[0, [0, [0, 11, false], null]]]], "where": [], "groupBy": [[0, 11, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1], ["table_unit", 8]], "conds": [[false, 2, [0, [0, 10, false], null], [0, 50, false], null]]}, "select": [false, [[0, [0, [0, 11, false], null]]]], "where": [], "groupBy": [[0, 11, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "name", "of", "the", "course", "with", "the", "most", "students", "enrolled", "?"], "ru": ["\u041a\u0430\u043a", "\u043d\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f", "\u043a\u0443\u0440\u0441", ",", "\u0432", "\u043a\u043e\u0442\u043e\u0440\u043e\u043c", "\u043e\u0431\u0443\u0447\u0430\u0435\u0442\u0441\u044f", "\u0431\u043e\u043b\u044c\u0448\u0435", "\u0432\u0441\u0435\u0433\u043e", "\u0441\u0442\u0443\u0434\u0435\u043d\u0442\u043e\u0432", "?"]}, "query_toks": {"en": ["select", "t1.course_name", "from", "courses", "as", "t1", "join", "student_enrolment_courses", "as", "t2", "on", "t1.course_id", "=", "t2.course_id", "group", "by", "t1.course_name", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"], "ru": ["select", "t1.course_name", "from", "courses", "as", "t1", "join", "student_enrolment_courses", "as", "t2", "on", "t1.course_id", "=", "t2.course_id", "group", "by", "t1.course_name", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"]}, "query_toks_no_values": {"en": ["select", "t1.course_name", "from", "courses", "as", "t1", "join", "student_enrolment_courses", "as", "t2", "on", "t1.course_id", "=", "t2.course_id", "group", "by", "t1.course_name", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"], "ru": ["select", "t1.course_name", "from", "courses", "as", "t1", "join", "student_enrolment_courses", "as", "t2", "on", "t1.course_id", "=", "t2.course_id", "group", "by", "t1.course_name", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"]}, "masked_query": "SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1;", "question_pauq": {"ru": "\u041a\u0430\u043a \u043d\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u043a\u0443\u0440\u0441, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u043e\u0431\u0443\u0447\u0430\u0435\u0442\u0441\u044f \u0431\u043e\u043b\u044c\u0448\u0435 \u0432\u0441\u0435\u0433\u043e \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u043e\u0432?"}, "question": "What is the name of the course with the most students enrolled?", "kb_id": "student_transcripts_tracking"}, {"id": "D_0550", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 6], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 33, false], null], [0, 1, false], null]]}, "select": [false, [[0, [0, [0, 37, false], null]]]], "where": [[false, 2, [0, [0, 7, false], null], "\"NorthCarolina\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": {"from": {"table_units": [["table_unit", 6], ["table_unit", 7]], "conds": [[false, 2, [0, [0, 32, false], null], [0, 47, false], null]]}, "select": [true, [[0, [0, [0, 37, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "ru": {"from": {"table_units": [["table_unit", 6], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 33, false], null], [0, 1, false], null]]}, "select": [false, [[0, [0, [0, 37, false], null]]]], "where": [[false, 2, [0, [0, 7, false], null], "\"NorthCarolina\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": {"from": {"table_units": [["table_unit", 6], ["table_unit", 7]], "conds": [[false, 2, [0, [0, 32, false], null], [0, 47, false], null]]}, "select": [true, [[0, [0, [0, 37, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}}, "question_toks": {"en": ["Find", "the", "last", "name", "of", "the", "students", "who", "currently", "live", "in", "the", "state", "of", "North", "Carolina", "but", "have", "not", "registered", "in", "any", "degree", "program", "."], "ru": ["\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c", "\u0444\u0430\u043c\u0438\u043b\u0438\u0438", "\u0441\u0442\u0443\u0434\u0435\u043d\u0442\u043e\u0432", ",", "\u043a\u043e\u0442\u043e\u0440\u044b\u0435", "\u0432", "\u043d\u0430\u0441\u0442\u043e\u044f\u0449\u0435\u0435", "\u0432\u0440\u0435\u043c\u044f", "\u043f\u0440\u043e\u0436\u0438\u0432\u0430\u044e\u0442", "\u0432", "\u0448\u0442\u0430\u0442\u0435", "\u0421\u0435\u0432\u0435\u0440\u043d\u0430\u044f", "\u041a\u0430\u0440\u043e\u043b\u0438\u043d\u0430", ",", "\u043d\u043e", "\u043d\u0435", "\u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043b\u0438\u0441\u044c", "\u043d\u0438", "\u0432", "\u043e\u0434\u043d\u043e\u0439", "\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0435", "\u043d\u0430", "\u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435", "\u0441\u0442\u0435\u043f\u0435\u043d\u0438", "."]}, "query_toks": {"en": ["select", "t1.last_name", "from", "students", "as", "t1", "join", "addresses", "as", "t2", "on", "t1.current_address_id", "=", "t2.address_id", "where", "t2.state_province_county", "=", "\"NorthCarolina\"", "except", "select", "distinct", "t3.last_name", "from", "students", "as", "t3", "join", "student_enrolment", "as", "t4", "on", "t3.student_id", "=", "t4.student_id", ";"], "ru": ["select", "t1.last_name", "from", "students", "as", "t1", "join", "addresses", "as", "t2", "on", "t1.current_address_id", "=", "t2.address_id", "where", "t2.state_province_county", "=", "\"NorthCarolina\"", "except", "select", "distinct", "t3.last_name", "from", "students", "as", "t3", "join", "student_enrolment", "as", "t4", "on", "t3.student_id", "=", "t4.student_id", ";"]}, "query_toks_no_values": {"en": ["select", "t1.last_name", "from", "students", "as", "t1", "join", "addresses", "as", "t2", "on", "t1.current_address_id", "=", "t2.address_id", "where", "t2.state_province_county", "=", "value", "except", "select", "distinct", "t3.last_name", "from", "students", "as", "t3", "join", "student_enrolment", "as", "t4", "on", "t3.student_id", "=", "t4.student_id", ";"], "ru": ["select", "t1.last_name", "from", "students", "as", "t1", "join", "addresses", "as", "t2", "on", "t1.current_address_id", "=", "t2.address_id", "where", "t2.state_province_county", "=", "value", "except", "select", "distinct", "t3.last_name", "from", "students", "as", "t3", "join", "student_enrolment", "as", "t4", "on", "t3.student_id", "=", "t4.student_id", ";"]}, "masked_query": "SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id;", "question_pauq": {"ru": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0444\u0430\u043c\u0438\u043b\u0438\u0438 \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0432 \u043d\u0430\u0441\u0442\u043e\u044f\u0449\u0435\u0435 \u0432\u0440\u0435\u043c\u044f \u043f\u0440\u043e\u0436\u0438\u0432\u0430\u044e\u0442 \u0432 \u0448\u0442\u0430\u0442\u0435 \u0421\u0435\u0432\u0435\u0440\u043d\u0430\u044f \u041a\u0430\u0440\u043e\u043b\u0438\u043d\u0430, \u043d\u043e \u043d\u0435 \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043b\u0438\u0441\u044c \u043d\u0438 \u0432 \u043e\u0434\u043d\u043e\u0439 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0435 \u043d\u0430 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0441\u0442\u0435\u043f\u0435\u043d\u0438."}, "question": "Find the last name of the students who currently live in the state of North Carolina but have not registered in any degree program.", "kb_id": "student_transcripts_tracking"}, {"id": "D_0551", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 6], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 33, false], null], [0, 1, false], null]]}, "select": [false, [[0, [0, [0, 37, false], null]]]], "where": [[false, 2, [0, [0, 7, false], null], "\"NorthCarolina\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": {"from": {"table_units": [["table_unit", 6], ["table_unit", 7]], "conds": [[false, 2, [0, [0, 32, false], null], [0, 47, false], null]]}, "select": [true, [[0, [0, [0, 37, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "ru": {"from": {"table_units": [["table_unit", 6], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 33, false], null], [0, 1, false], null]]}, "select": [false, [[0, [0, [0, 37, false], null]]]], "where": [[false, 2, [0, [0, 7, false], null], "\"NorthCarolina\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": {"from": {"table_units": [["table_unit", 6], ["table_unit", 7]], "conds": [[false, 2, [0, [0, 32, false], null], [0, 47, false], null]]}, "select": [true, [[0, [0, [0, 37, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}}, "question_toks": {"en": ["What", "are", "the", "last", "name", "of", "the", "students", "who", "live", "in", "North", "Carolina", "but", "have", "not", "registered", "in", "any", "degree", "programs", "?"], "ru": ["\u041a\u0430\u043a\u043e\u0432\u044b", "\u0444\u0430\u043c\u0438\u043b\u0438\u0438", "\u0441\u0442\u0443\u0434\u0435\u043d\u0442\u043e\u0432", ",", "\u043a\u043e\u0442\u043e\u0440\u044b\u0435", "\u0436\u0438\u0432\u0443\u0442", "\u0432", "\u0421\u0435\u0432\u0435\u0440\u043d\u043e\u0439", "\u041a\u0430\u0440\u043e\u043b\u0438\u043d\u0435", ",", "\u043d\u043e", "\u043d\u0435", "\u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043b\u0438\u0441\u044c", "\u043d\u0438", "\u043d\u0430", "\u043a\u0430\u043a\u0438\u0435", "\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b", "\u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f", "?"]}, "query_toks": {"en": ["select", "t1.last_name", "from", "students", "as", "t1", "join", "addresses", "as", "t2", "on", "t1.current_address_id", "=", "t2.address_id", "where", "t2.state_province_county", "=", "\"NorthCarolina\"", "except", "select", "distinct", "t3.last_name", "from", "students", "as", "t3", "join", "student_enrolment", "as", "t4", "on", "t3.student_id", "=", "t4.student_id", ";"], "ru": ["select", "t1.last_name", "from", "students", "as", "t1", "join", "addresses", "as", "t2", "on", "t1.current_address_id", "=", "t2.address_id", "where", "t2.state_province_county", "=", "\"NorthCarolina\"", "except", "select", "distinct", "t3.last_name", "from", "students", "as", "t3", "join", "student_enrolment", "as", "t4", "on", "t3.student_id", "=", "t4.student_id", ";"]}, "query_toks_no_values": {"en": ["select", "t1.last_name", "from", "students", "as", "t1", "join", "addresses", "as", "t2", "on", "t1.current_address_id", "=", "t2.address_id", "where", "t2.state_province_county", "=", "value", "except", "select", "distinct", "t3.last_name", "from", "students", "as", "t3", "join", "student_enrolment", "as", "t4", "on", "t3.student_id", "=", "t4.student_id", ";"], "ru": ["select", "t1.last_name", "from", "students", "as", "t1", "join", "addresses", "as", "t2", "on", "t1.current_address_id", "=", "t2.address_id", "where", "t2.state_province_county", "=", "value", "except", "select", "distinct", "t3.last_name", "from", "students", "as", "t3", "join", "student_enrolment", "as", "t4", "on", "t3.student_id", "=", "t4.student_id", ";"]}, "masked_query": "SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id;", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0432\u044b \u0444\u0430\u043c\u0438\u043b\u0438\u0438 \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0436\u0438\u0432\u0443\u0442 \u0432 \u0421\u0435\u0432\u0435\u0440\u043d\u043e\u0439 \u041a\u0430\u0440\u043e\u043b\u0438\u043d\u0435, \u043d\u043e \u043d\u0435 \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043b\u0438\u0441\u044c \u043d\u0438 \u043d\u0430 \u043a\u0430\u043a\u0438\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u044f?"}, "question": "What are the last name of the students who live in North Carolina but have not registered in any degree programs?", "kb_id": "student_transcripts_tracking"}, {"id": "D_0552", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 10], ["table_unit", 9]], "conds": [[false, 2, [0, [0, 56, false], null], [0, 52, false], null]]}, "select": [false, [[0, [0, [0, 53, false], null]], [0, [0, [0, 56, false], null]]]], "where": [], "groupBy": [[0, 56, false]], "having": [[false, 5, [0, [3, 0, false], null], 2.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 10], ["table_unit", 9]], "conds": [[false, 2, [0, [0, 56, false], null], [0, 52, false], null]]}, "select": [false, [[0, [0, [0, 53, false], null]], [0, [0, [0, 56, false], null]]]], "where": [], "groupBy": [[0, 56, false]], "having": [[false, 5, [0, [3, 0, false], null], 2.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Show", "the", "date", "and", "id", "of", "the", "transcript", "with", "at", "least", "2", "course", "results", "."], "ru": ["\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c", "\u0434\u0430\u0442\u0443", "\u0438", "id", "\u0442\u0440\u0430\u043d\u0441\u043a\u0440\u0438\u043f\u0442\u0430", "\u043a\u0430\u043a", "\u043c\u0438\u043d\u0438\u043c\u0443\u043c", "\u0441", "2", "\u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430\u043c\u0438", "\u043a\u0443\u0440\u0441\u0430", "."]}, "query_toks": {"en": ["select", "t2.transcript_date", ",", "t1.transcript_id", "from", "transcript_contents", "as", "t1", "join", "transcripts", "as", "t2", "on", "t1.transcript_id", "=", "t2.transcript_id", "group", "by", "t1.transcript_id", "having", "count", "(", "*", ")", ">=", "2", ";"], "ru": ["select", "t2.transcript_date", ",", "t1.transcript_id", "from", "transcript_contents", "as", "t1", "join", "transcripts", "as", "t2", "on", "t1.transcript_id", "=", "t2.transcript_id", "group", "by", "t1.transcript_id", "having", "count", "(", "*", ")", ">=", "2", ";"]}, "query_toks_no_values": {"en": ["select", "t2.transcript_date", ",", "t1.transcript_id", "from", "transcript_contents", "as", "t1", "join", "transcripts", "as", "t2", "on", "t1.transcript_id", "=", "t2.transcript_id", "group", "by", "t1.transcript_id", "having", "count", "(", "*", ")", ">=", "2", ";"], "ru": ["select", "t2.transcript_date", ",", "t1.transcript_id", "from", "transcript_contents", "as", "t1", "join", "transcripts", "as", "t2", "on", "t1.transcript_id", "=", "t2.transcript_id", "group", "by", "t1.transcript_id", "having", "count", "(", "*", ")", ">=", "2", ";"]}, "masked_query": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2;", "question_pauq": {"ru": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0434\u0430\u0442\u0443 \u0438 id \u0442\u0440\u0430\u043d\u0441\u043a\u0440\u0438\u043f\u0442\u0430 \u043a\u0430\u043a \u043c\u0438\u043d\u0438\u043c\u0443\u043c \u0441 2 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0430\u043c\u0438 \u043a\u0443\u0440\u0441\u0430."}, "question": "Show the date and id of the transcript with at least 2 course results.", "kb_id": "student_transcripts_tracking"}, {"id": "D_0553", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 10], ["table_unit", 9]], "conds": [[false, 2, [0, [0, 56, false], null], [0, 52, false], null]]}, "select": [false, [[0, [0, [0, 53, false], null]], [0, [0, [0, 56, false], null]]]], "where": [], "groupBy": [[0, 56, false]], "having": [[false, 5, [0, [3, 0, false], null], 2.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 10], ["table_unit", 9]], "conds": [[false, 2, [0, [0, 56, false], null], [0, 52, false], null]]}, "select": [false, [[0, [0, [0, 53, false], null]], [0, [0, [0, 56, false], null]]]], "where": [], "groupBy": [[0, 56, false]], "having": [[false, 5, [0, [3, 0, false], null], 2.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "date", "and", "id", "of", "the", "transcript", "with", "at", "least", "2", "courses", "listed", "?"], "ru": ["\u041a\u0430\u043a\u043e\u0432\u0430", "\u0434\u0430\u0442\u0430", "\u0438", "id", "\u0442\u0440\u0430\u043d\u0441\u043a\u0440\u0438\u043f\u0442\u0430", "\u0441", "\u0443\u043a\u0430\u0437\u0430\u043d\u0438\u0435\u043c", "\u043a\u0430\u043a", "\u043c\u0438\u043d\u0438\u043c\u0443\u043c", "2", "\u043a\u0443\u0440\u0441\u043e\u0432", "?"]}, "query_toks": {"en": ["select", "t2.transcript_date", ",", "t1.transcript_id", "from", "transcript_contents", "as", "t1", "join", "transcripts", "as", "t2", "on", "t1.transcript_id", "=", "t2.transcript_id", "group", "by", "t1.transcript_id", "having", "count", "(", "*", ")", ">=", "2", ";"], "ru": ["select", "t2.transcript_date", ",", "t1.transcript_id", "from", "transcript_contents", "as", "t1", "join", "transcripts", "as", "t2", "on", "t1.transcript_id", "=", "t2.transcript_id", "group", "by", "t1.transcript_id", "having", "count", "(", "*", ")", ">=", "2", ";"]}, "query_toks_no_values": {"en": ["select", "t2.transcript_date", ",", "t1.transcript_id", "from", "transcript_contents", "as", "t1", "join", "transcripts", "as", "t2", "on", "t1.transcript_id", "=", "t2.transcript_id", "group", "by", "t1.transcript_id", "having", "count", "(", "*", ")", ">=", "2", ";"], "ru": ["select", "t2.transcript_date", ",", "t1.transcript_id", "from", "transcript_contents", "as", "t1", "join", "transcripts", "as", "t2", "on", "t1.transcript_id", "=", "t2.transcript_id", "group", "by", "t1.transcript_id", "having", "count", "(", "*", ")", ">=", "2", ";"]}, "masked_query": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2;", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0432\u0430 \u0434\u0430\u0442\u0430 \u0438 id \u0442\u0440\u0430\u043d\u0441\u043a\u0440\u0438\u043f\u0442\u0430 \u0441 \u0443\u043a\u0430\u0437\u0430\u043d\u0438\u0435\u043c \u043a\u0430\u043a \u043c\u0438\u043d\u0438\u043c\u0443\u043c 2 \u043a\u0443\u0440\u0441\u043e\u0432?"}, "question": "What is the date and id of the transcript with at least 2 courses listed?", "kb_id": "student_transcripts_tracking"}, {"id": "D_0554", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT cell_mobile_number FROM Students WHERE first_name  =  '\u0422\u0438\u043c\u043e\u0444\u0435\u0439' AND last_name  =  '\u0423\u043b\u0438\u0446\u043a\u0438\u0439';"}, "sql": {"en": {"from": {"table_units": [["table_unit", 6]], "conds": []}, "select": [false, [[0, [0, [0, 38, false], null]]]], "where": [[false, 2, [0, [0, 35, false], null], "\"Timmothy\"", null], "and", [false, 2, [0, [0, 37, false], null], "\"Ward\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 6]], "conds": []}, "select": [false, [[0, [0, [0, 38, false], null]]]], "where": [[false, 2, [0, [0, 35, false], null], "\"\u0422\u0438\u043c\u043e\u0444\u0435\u0439\"", null], "and", [false, 2, [0, [0, 37, false], null], "\"\u0423\u043b\u0438\u0446\u043a\u0438\u0439\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "phone", "number", "of", "the", "man", "with", "the", "first", "name", "Timmothy", "and", "the", "last", "name", "Ward", "?"], "ru": ["\u041a\u0430\u043a\u043e\u0439", "\u043d\u043e\u043c\u0435\u0440", "\u0442\u0435\u043b\u0435\u0444\u043e\u043d\u0430", "\u0443", "\u0447\u0435\u043b\u043e\u0432\u0435\u043a\u0430", "\u043f\u043e", "\u0438\u043c\u0435\u043d\u0438", "\u0422\u0438\u043c\u043e\u0444\u0435\u0439", "\u0438", "\u0444\u0430\u043c\u0438\u043b\u0438\u0438", "\u0423\u043b\u0438\u0446\u043a\u0438\u0439", "?"]}, "query_toks": {"en": ["select", "cell_mobile_number", "from", "students", "where", "first_name", "=", "\"Timmothy\"", "and", "last_name", "=", "\"Ward\"", ";"], "ru": ["select", "cell_mobile_number", "from", "students", "where", "first_name", "=", "\"\u0422\u0438\u043c\u043e\u0444\u0435\u0439\"", "and", "last_name", "=", "\"\u0423\u043b\u0438\u0446\u043a\u0438\u0439\"", ";"]}, "query_toks_no_values": {"en": ["select", "cell_mobile_number", "from", "students", "where", "first_name", "=", "value", "and", "last_name", "=", "value", ";"], "ru": ["select", "cell_mobile_number", "from", "students", "where", "first_name", "=", "value", "and", "last_name", "=", "value", ";"]}, "masked_query": "SELECT cell_mobile_number FROM Students WHERE first_name  =  'Timmothy' AND last_name  =  'Ward';", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0439 \u043d\u043e\u043c\u0435\u0440 \u0442\u0435\u043b\u0435\u0444\u043e\u043d\u0430 \u0443 \u0447\u0435\u043b\u043e\u0432\u0435\u043a\u0430 \u043f\u043e \u0438\u043c\u0435\u043d\u0438 \u0422\u0438\u043c\u043e\u0444\u0435\u0439 \u0438 \u0444\u0430\u043c\u0438\u043b\u0438\u0438 \u0423\u043b\u0438\u0446\u043a\u0438\u0439?"}, "question": "What is the phone number of the man with the first name Timmothy and the last name Ward?", "kb_id": "student_transcripts_tracking"}, {"id": "D_0555", "source": "spider-dev", "type": "dev", "query": {"ru": "select cell_mobile_number from students where first_name  =  '\u0422\u0438\u043c\u043e\u0444\u0435\u0439' and last_name  =  '\u0423\u043b\u0438\u0446\u043a\u0438\u0439';"}, "sql": {"en": {"from": {"table_units": [["table_unit", 6]], "conds": []}, "select": [false, [[0, [0, [0, 38, false], null]]]], "where": [[false, 2, [0, [0, 35, false], null], "\"Timmothy\"", null], "and", [false, 2, [0, [0, 37, false], null], "\"Ward\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 6]], "conds": []}, "select": [false, [[0, [0, [0, 38, false], null]]]], "where": [[false, 2, [0, [0, 35, false], null], "\"\u0422\u0438\u043c\u043e\u0444\u0435\u0439\"", null], "and", [false, 2, [0, [0, 37, false], null], "\"\u0423\u043b\u0438\u0446\u043a\u0438\u0439\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "mobile", "phone", "number", "of", "the", "student", "named", "Timmothy", "Ward", "?"], "ru": ["\u041a\u0430\u043a\u043e\u0439", "\u043d\u043e\u043c\u0435\u0440", "\u043c\u043e\u0431\u0438\u043b\u044c\u043d\u043e\u0433\u043e", "\u0442\u0435\u043b\u0435\u0444\u043e\u043d\u0430", "\u0443", "\u0441\u0442\u0443\u0434\u0435\u043d\u0442\u0430", "\u043f\u043e", "\u0438\u043c\u0435\u043d\u0438", "\u0422\u0438\u043c\u043e\u0444\u0435\u0439", "\u0423\u043b\u0438\u0446\u043a\u0438\u0439", "?"]}, "query_toks": {"en": ["select", "cell_mobile_number", "from", "students", "where", "first_name", "=", "\"Timmothy\"", "and", "last_name", "=", "\"Ward\"", ";"], "ru": ["select", "cell_mobile_number", "from", "students", "where", "first_name", "=", "\"\u0422\u0438\u043c\u043e\u0444\u0435\u0439\"", "and", "last_name", "=", "\"\u0423\u043b\u0438\u0446\u043a\u0438\u0439\"", ";"]}, "query_toks_no_values": {"en": ["select", "cell_mobile_number", "from", "students", "where", "first_name", "=", "value", "and", "last_name", "=", "value", ";"], "ru": ["select", "cell_mobile_number", "from", "students", "where", "first_name", "=", "value", "and", "last_name", "=", "value", ";"]}, "masked_query": "select cell_mobile_number from students where first_name  =  'Timmothy' and last_name  =  'Ward';", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0439 \u043d\u043e\u043c\u0435\u0440 \u043c\u043e\u0431\u0438\u043b\u044c\u043d\u043e\u0433\u043e \u0442\u0435\u043b\u0435\u0444\u043e\u043d\u0430 \u0443 \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u0430 \u043f\u043e \u0438\u043c\u0435\u043d\u0438 \u0422\u0438\u043c\u043e\u0444\u0435\u0439 \u0423\u043b\u0438\u0446\u043a\u0438\u0439?"}, "question": "What is the mobile phone number of the student named Timmothy Ward ?", "kb_id": "student_transcripts_tracking"}, {"id": "D_0556", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 6]], "conds": []}, "select": [false, [[0, [0, [0, 35, false], null]], [0, [0, [0, 36, false], null]], [0, [0, [0, 37, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["asc", [[0, [0, 41, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 6]], "conds": []}, "select": [false, [[0, [0, [0, 35, false], null]], [0, [0, [0, 36, false], null]], [0, [0, [0, 37, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["asc", [[0, [0, 41, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Who", "is", "the", "first", "student", "to", "register", "?", "List", "the", "first", "name", ",", "middle", "name", "and", "last", "name", "."], "ru": ["\u041a\u0442\u043e", "\u043f\u0435\u0440\u0432\u044b\u043c", "\u0438\u0437", "\u0441\u0442\u0443\u0434\u0435\u043d\u0442\u043e\u0432", "\u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043b\u0441\u044f", "?", "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c", "\u0438\u043c\u044f", ",", "\u043e\u0442\u0447\u0435\u0441\u0442\u0432\u043e", "\u0438", "\u0444\u0430\u043c\u0438\u043b\u0438\u044e", "."]}, "query_toks": {"en": ["select", "first_name", ",", "middle_name", ",", "last_name", "from", "students", "order", "by", "date_first_registered", "asc", "limit", "1", ";"], "ru": ["select", "first_name", ",", "middle_name", ",", "last_name", "from", "students", "order", "by", "date_first_registered", "asc", "limit", "1", ";"]}, "query_toks_no_values": {"en": ["select", "first_name", ",", "middle_name", ",", "last_name", "from", "students", "order", "by", "date_first_registered", "asc", "limit", "1", ";"], "ru": ["select", "first_name", ",", "middle_name", ",", "last_name", "from", "students", "order", "by", "date_first_registered", "asc", "limit", "1", ";"]}, "masked_query": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1;", "question_pauq": {"ru": "\u041a\u0442\u043e \u043f\u0435\u0440\u0432\u044b\u043c \u0438\u0437 \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u043e\u0432 \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u043b\u0441\u044f? \u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0438\u043c\u044f, \u043e\u0442\u0447\u0435\u0441\u0442\u0432\u043e \u0438 \u0444\u0430\u043c\u0438\u043b\u0438\u044e."}, "question": "Who is the first student to register? List the first name, middle name and last name.", "kb_id": "student_transcripts_tracking"}, {"id": "D_0557", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 6]], "conds": []}, "select": [false, [[0, [0, [0, 35, false], null]], [0, [0, [0, 36, false], null]], [0, [0, [0, 37, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["asc", [[0, [0, 41, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 6]], "conds": []}, "select": [false, [[0, [0, [0, 35, false], null]], [0, [0, [0, 36, false], null]], [0, [0, [0, 37, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["asc", [[0, [0, 41, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "first", ",", "middle", ",", "and", "last", "name", "of", "the", "first", "student", "to", "register", "?"], "ru": ["\u041a\u0430\u043a\u043e\u0432\u044b", "\u0438\u043c\u044f", ",", "\u043e\u0442\u0447\u0435\u0441\u0442\u0432\u043e", "\u0438", "\u0444\u0430\u043c\u0438\u043b\u0438\u044f", "\u043f\u0435\u0440\u0432\u043e\u0433\u043e", "\u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u0432\u0448\u0435\u0433\u043e\u0441\u044f", "\u0441\u0442\u0443\u0434\u0435\u043d\u0442\u0430", "?"]}, "query_toks": {"en": ["select", "first_name", ",", "middle_name", ",", "last_name", "from", "students", "order", "by", "date_first_registered", "asc", "limit", "1", ";"], "ru": ["select", "first_name", ",", "middle_name", ",", "last_name", "from", "students", "order", "by", "date_first_registered", "asc", "limit", "1", ";"]}, "query_toks_no_values": {"en": ["select", "first_name", ",", "middle_name", ",", "last_name", "from", "students", "order", "by", "date_first_registered", "asc", "limit", "1", ";"], "ru": ["select", "first_name", ",", "middle_name", ",", "last_name", "from", "students", "order", "by", "date_first_registered", "asc", "limit", "1", ";"]}, "masked_query": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1;", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0432\u044b \u0438\u043c\u044f, \u043e\u0442\u0447\u0435\u0441\u0442\u0432\u043e \u0438 \u0444\u0430\u043c\u0438\u043b\u0438\u044f \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u0432\u0448\u0435\u0433\u043e\u0441\u044f \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u0430?"}, "question": "What is the first, middle, and last name of the first student to register?", "kb_id": "student_transcripts_tracking"}, {"id": "D_0558", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 6]], "conds": []}, "select": [false, [[0, [0, [0, 35, false], null]], [0, [0, [0, 36, false], null]], [0, [0, [0, 37, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["asc", [[0, [0, 42, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 6]], "conds": []}, "select": [false, [[0, [0, [0, 35, false], null]], [0, [0, [0, 36, false], null]], [0, [0, [0, 37, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["asc", [[0, [0, 42, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Who", "is", "the", "earliest", "graduate", "of", "the", "school", "?", "List", "the", "first", "name", ",", "middle", "name", "and", "last", "name", "."], "ru": ["\u041a\u0442\u043e", "\u043f\u0435\u0440\u0432\u044b\u0439", "\u0432\u044b\u043f\u0443\u0441\u043a\u043d\u0438\u043a", "\u0448\u043a\u043e\u043b\u044b", "?", "\u041e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0442\u044c", "\u0438\u043c\u044f", ",", "\u043e\u0442\u0447\u0435\u0441\u0442\u0432\u043e", "\u0438", "\u0444\u0430\u043c\u0438\u043b\u0438\u044e", "."]}, "query_toks": {"en": ["select", "first_name", ",", "middle_name", ",", "last_name", "from", "students", "order", "by", "date_left", "asc", "limit", "1", ";"], "ru": ["select", "first_name", ",", "middle_name", ",", "last_name", "from", "students", "order", "by", "date_left", "asc", "limit", "1", ";"]}, "query_toks_no_values": {"en": ["select", "first_name", ",", "middle_name", ",", "last_name", "from", "students", "order", "by", "date_left", "asc", "limit", "1", ";"], "ru": ["select", "first_name", ",", "middle_name", ",", "last_name", "from", "students", "order", "by", "date_left", "asc", "limit", "1", ";"]}, "masked_query": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1;", "question_pauq": {"ru": "\u041a\u0442\u043e \u043f\u0435\u0440\u0432\u044b\u0439 \u0432\u044b\u043f\u0443\u0441\u043a\u043d\u0438\u043a \u0448\u043a\u043e\u043b\u044b? \u041e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0442\u044c \u0438\u043c\u044f, \u043e\u0442\u0447\u0435\u0441\u0442\u0432\u043e \u0438 \u0444\u0430\u043c\u0438\u043b\u0438\u044e."}, "question": "Who is the earliest graduate of the school? List the first name, middle name and last name.", "kb_id": "student_transcripts_tracking"}, {"id": "D_0559", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 6]], "conds": []}, "select": [false, [[0, [0, [0, 35, false], null]], [0, [0, [0, 36, false], null]], [0, [0, [0, 37, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["asc", [[0, [0, 42, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 6]], "conds": []}, "select": [false, [[0, [0, [0, 35, false], null]], [0, [0, [0, 36, false], null]], [0, [0, [0, 37, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["asc", [[0, [0, 42, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "first", ",", "middle", ",", "and", "last", "name", "of", "the", "earliest", "school", "graduate", "?"], "ru": ["\u041a\u0430\u043a\u043e\u0432\u044b", "\u0438\u043c\u044f", ",", "\u043e\u0442\u0447\u0435\u0441\u0442\u0432\u043e", "\u0438", "\u0444\u0430\u043c\u0438\u043b\u0438\u044f", "\u043f\u0435\u0440\u0432\u043e\u0433\u043e", "\u0432\u044b\u043f\u0443\u0441\u043a\u043d\u0438\u043a\u0430", "\u0448\u043a\u043e\u043b\u044b", "?"]}, "query_toks": {"en": ["select", "first_name", ",", "middle_name", ",", "last_name", "from", "students", "order", "by", "date_left", "asc", "limit", "1", ";"], "ru": ["select", "first_name", ",", "middle_name", ",", "last_name", "from", "students", "order", "by", "date_left", "asc", "limit", "1", ";"]}, "query_toks_no_values": {"en": ["select", "first_name", ",", "middle_name", ",", "last_name", "from", "students", "order", "by", "date_left", "asc", "limit", "1", ";"], "ru": ["select", "first_name", ",", "middle_name", ",", "last_name", "from", "students", "order", "by", "date_left", "asc", "limit", "1", ";"]}, "masked_query": "SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1;", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0432\u044b \u0438\u043c\u044f, \u043e\u0442\u0447\u0435\u0441\u0442\u0432\u043e \u0438 \u0444\u0430\u043c\u0438\u043b\u0438\u044f \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u0432\u044b\u043f\u0443\u0441\u043a\u043d\u0438\u043a\u0430 \u0448\u043a\u043e\u043b\u044b?"}, "question": "What is the first, middle, and last name of the earliest school graduate?", "kb_id": "student_transcripts_tracking"}, {"id": "D_0560", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT first_name FROM Students WHERE current_address_id != permanent_address_id;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 6]], "conds": []}, "select": [false, [[0, [0, [0, 35, false], null]]]], "where": [[false, 7, [0, [0, 33, false], null], [0, 34, false], null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 6]], "conds": []}, "select": [false, [[0, [0, [0, 35, false], null]]]], "where": [[false, 7, [0, [0, 33, false], null], [0, 34, false], null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Whose", "permanent", "address", "is", "different", "from", "his", "or", "her", "current", "address", "?", "List", "his", "or", "her", "first", "name", "."], "ru": ["\u0427\u0435\u0439", "\u043f\u043e\u0441\u0442\u043e\u044f\u043d\u043d\u044b\u0439", "\u0430\u0434\u0440\u0435\u0441", "\u043e\u0442\u043b\u0438\u0447\u0430\u0435\u0442\u0441\u044f", "\u043e\u0442", "\u0435\u0433\u043e", "\u043d\u044b\u043d\u0435\u0448\u043d\u0435\u0433\u043e", "\u0430\u0434\u0440\u0435\u0441\u0430", "?", "\u0423\u043a\u0430\u0436\u0438\u0442\u0435", "\u0435\u0433\u043e", "\u0438\u043b\u0438", "\u0435\u0435", "\u0438\u043c\u044f", "."]}, "query_toks": {"en": ["select", "first_name", "from", "students", "where", "current_address_id", "!=", "permanent_address_id", ";"], "ru": ["select", "first_name", "from", "students", "where", "current_address_id", "!=", "permanent_address_id", ";"]}, "query_toks_no_values": {"en": ["select", "first_name", "from", "students", "where", "current_address_id", "!=", "permanent_address_id", ";"], "ru": ["select", "first_name", "from", "students", "where", "current_address_id", "!=", "permanent_address_id", ";"]}, "masked_query": "SELECT first_name FROM Students WHERE current_address_id != permanent_address_id;", "question_pauq": {"ru": "\u0427\u0435\u0439 \u043f\u043e\u0441\u0442\u043e\u044f\u043d\u043d\u044b\u0439 \u0430\u0434\u0440\u0435\u0441 \u043e\u0442\u043b\u0438\u0447\u0430\u0435\u0442\u0441\u044f \u043e\u0442 \u0435\u0433\u043e \u043d\u044b\u043d\u0435\u0448\u043d\u0435\u0433\u043e \u0430\u0434\u0440\u0435\u0441\u0430? \u0423\u043a\u0430\u0436\u0438\u0442\u0435 \u0435\u0433\u043e \u0438\u043b\u0438 \u0435\u0435 \u0438\u043c\u044f."}, "question": "Whose permanent address is different from his or her current address? List his or her first name.", "kb_id": "student_transcripts_tracking"}, {"id": "D_0561", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT first_name FROM Students WHERE current_address_id != permanent_address_id;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 6]], "conds": []}, "select": [false, [[0, [0, [0, 35, false], null]]]], "where": [[false, 7, [0, [0, 33, false], null], [0, 34, false], null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 6]], "conds": []}, "select": [false, [[0, [0, [0, 35, false], null]]]], "where": [[false, 7, [0, [0, 33, false], null], [0, 34, false], null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "first", "name", "of", "the", "student", "whose", "permanent", "address", "is", "different", "from", "his", "or", "her", "current", "one", "?"], "ru": ["\u041a\u0430\u043a", "\u0437\u043e\u0432\u0443\u0442", "\u0441\u0442\u0443\u0434\u0435\u043d\u0442\u0430", ",", "\u043f\u043e\u0441\u0442\u043e\u044f\u043d\u043d\u044b\u0439", "\u0430\u0434\u0440\u0435\u0441", "\u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e", "\u043e\u0442\u043b\u0438\u0447\u0430\u0435\u0442\u0441\u044f", "\u043e\u0442", "\u0435\u0433\u043e", "\u043d\u044b\u043d\u0435\u0448\u043d\u0435\u0433\u043e", "?"]}, "query_toks": {"en": ["select", "first_name", "from", "students", "where", "current_address_id", "!=", "permanent_address_id", ";"], "ru": ["select", "first_name", "from", "students", "where", "current_address_id", "!=", "permanent_address_id", ";"]}, "query_toks_no_values": {"en": ["select", "first_name", "from", "students", "where", "current_address_id", "!=", "permanent_address_id", ";"], "ru": ["select", "first_name", "from", "students", "where", "current_address_id", "!=", "permanent_address_id", ";"]}, "masked_query": "SELECT first_name FROM Students WHERE current_address_id != permanent_address_id;", "question_pauq": {"ru": "\u041a\u0430\u043a \u0437\u043e\u0432\u0443\u0442 \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u0430, \u043f\u043e\u0441\u0442\u043e\u044f\u043d\u043d\u044b\u0439 \u0430\u0434\u0440\u0435\u0441 \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u043e\u0442\u043b\u0438\u0447\u0430\u0435\u0442\u0441\u044f \u043e\u0442 \u0435\u0433\u043e \u043d\u044b\u043d\u0435\u0448\u043d\u0435\u0433\u043e?"}, "question": "What is the first name of the student whose permanent address is different from his or her current one?", "kb_id": "student_transcripts_tracking"}, {"id": "D_0562", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0], ["table_unit", 6]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 33, false], null]]}, "select": [false, [[0, [0, [0, 1, false], null]], [0, [0, [0, 2, false], null]], [0, [0, [0, 3, false], null]]]], "where": [], "groupBy": [[0, 1, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0], ["table_unit", 6]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 33, false], null]]}, "select": [false, [[0, [0, [0, 1, false], null]], [0, [0, [0, 2, false], null]], [0, [0, [0, 3, false], null]]]], "where": [], "groupBy": [[0, 1, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Which", "address", "holds", "the", "most", "number", "of", "students", "currently", "?", "List", "the", "address", "id", "and", "all", "lines", "."], "ru": ["\u041f\u043e", "\u043a\u0430\u043a\u043e\u043c\u0443", "\u0430\u0434\u0440\u0435\u0441\u0443", "\u0441\u0435\u0439\u0447\u0430\u0441", "\u043f\u0440\u043e\u0436\u0438\u0432\u0430\u0435\u0442", "\u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0435\u0435", "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e", "\u0441\u0442\u0443\u0434\u0435\u043d\u0442\u043e\u0432", "?", "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c", "id", "\u0430\u0434\u0440\u0435\u0441\u0430", "\u0438", "\u0432\u0441\u0435", "\u0430\u0434\u0440\u0435\u0441\u043d\u044b\u0435", "\u0441\u0442\u0440\u043e\u043a\u0438", "."]}, "query_toks": {"en": ["select", "t1.address_id", ",", "t1.line_1", ",", "t1.line_2", "from", "addresses", "as", "t1", "join", "students", "as", "t2", "on", "t1.address_id", "=", "t2.current_address_id", "group", "by", "t1.address_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"], "ru": ["select", "t1.address_id", ",", "t1.line_1", ",", "t1.line_2", "from", "addresses", "as", "t1", "join", "students", "as", "t2", "on", "t1.address_id", "=", "t2.current_address_id", "group", "by", "t1.address_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"]}, "query_toks_no_values": {"en": ["select", "t1.address_id", ",", "t1.line_1", ",", "t1.line_2", "from", "addresses", "as", "t1", "join", "students", "as", "t2", "on", "t1.address_id", "=", "t2.current_address_id", "group", "by", "t1.address_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"], "ru": ["select", "t1.address_id", ",", "t1.line_1", ",", "t1.line_2", "from", "addresses", "as", "t1", "join", "students", "as", "t2", "on", "t1.address_id", "=", "t2.current_address_id", "group", "by", "t1.address_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"]}, "masked_query": "SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1;", "question_pauq": {"ru": "\u041f\u043e \u043a\u0430\u043a\u043e\u043c\u0443 \u0430\u0434\u0440\u0435\u0441\u0443 \u0441\u0435\u0439\u0447\u0430\u0441 \u043f\u0440\u043e\u0436\u0438\u0432\u0430\u0435\u0442 \u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u043e\u0432? \u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c id \u0430\u0434\u0440\u0435\u0441\u0430 \u0438 \u0432\u0441\u0435 \u0430\u0434\u0440\u0435\u0441\u043d\u044b\u0435 \u0441\u0442\u0440\u043e\u043a\u0438."}, "question": "Which address holds the most number of students currently? List the address id and all lines.", "kb_id": "student_transcripts_tracking"}, {"id": "D_0563", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0], ["table_unit", 6]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 33, false], null]]}, "select": [false, [[0, [0, [0, 1, false], null]], [0, [0, [0, 2, false], null]], [0, [0, [0, 3, false], null]]]], "where": [], "groupBy": [[0, 1, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0], ["table_unit", 6]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 33, false], null]]}, "select": [false, [[0, [0, [0, 1, false], null]], [0, [0, [0, 2, false], null]], [0, [0, [0, 3, false], null]]]], "where": [], "groupBy": [[0, 1, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "id", ",", "line", "1", ",", "and", "line", "2", "of", "the", "address", "with", "the", "most", "students", "?"], "ru": ["\u041a\u0430\u043a\u043e\u0432\u044b", "id", ",", "\u0441\u0442\u0440\u043e\u043a\u0430", "1", "\u0438", "\u0441\u0442\u0440\u043e\u043a\u0430", "2", "\u0430\u0434\u0440\u0435\u0441\u0430", "\u0441", "\u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0438\u043c", "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c", "\u0441\u0442\u0443\u0434\u0435\u043d\u0442\u043e\u0432", "?"]}, "query_toks": {"en": ["select", "t1.address_id", ",", "t1.line_1", ",", "t1.line_2", "from", "addresses", "as", "t1", "join", "students", "as", "t2", "on", "t1.address_id", "=", "t2.current_address_id", "group", "by", "t1.address_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"], "ru": ["select", "t1.address_id", ",", "t1.line_1", ",", "t1.line_2", "from", "addresses", "as", "t1", "join", "students", "as", "t2", "on", "t1.address_id", "=", "t2.current_address_id", "group", "by", "t1.address_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"]}, "query_toks_no_values": {"en": ["select", "t1.address_id", ",", "t1.line_1", ",", "t1.line_2", "from", "addresses", "as", "t1", "join", "students", "as", "t2", "on", "t1.address_id", "=", "t2.current_address_id", "group", "by", "t1.address_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"], "ru": ["select", "t1.address_id", ",", "t1.line_1", ",", "t1.line_2", "from", "addresses", "as", "t1", "join", "students", "as", "t2", "on", "t1.address_id", "=", "t2.current_address_id", "group", "by", "t1.address_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"]}, "masked_query": "SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1;", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0432\u044b id, \u0441\u0442\u0440\u043e\u043a\u0430 1 \u0438 \u0441\u0442\u0440\u043e\u043a\u0430 2 \u0430\u0434\u0440\u0435\u0441\u0430 \u0441 \u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0438\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u043e\u0432?"}, "question": "What is the id, line 1, and line 2 of the address with the most students?", "kb_id": "student_transcripts_tracking"}, {"id": "D_0564", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT avg(transcript_date) FROM Transcripts;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 9]], "conds": []}, "select": [false, [[5, [0, [0, 53, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 9]], "conds": []}, "select": [false, [[5, [0, [0, 53, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["On", "average", ",", "when", "were", "the", "transcripts", "printed", "?"], "ru": ["\u041a\u043e\u0433\u0434\u0430", "\u0432", "\u0441\u0440\u0435\u0434\u043d\u0435\u043c", "\u0431\u044b\u043b\u0438", "\u043d\u0430\u043f\u0435\u0447\u0430\u0442\u0430\u043d\u044b", "\u0442\u0440\u0430\u043d\u0441\u043a\u0440\u0438\u043f\u0442", "?"]}, "query_toks": {"en": ["select", "avg", "(", "transcript_date", ")", "from", "transcripts", ";"], "ru": ["select", "avg", "(", "transcript_date", ")", "from", "transcripts", ";"]}, "query_toks_no_values": {"en": ["select", "avg", "(", "transcript_date", ")", "from", "transcripts", ";"], "ru": ["select", "avg", "(", "transcript_date", ")", "from", "transcripts", ";"]}, "masked_query": "SELECT avg(transcript_date) FROM Transcripts;", "question_pauq": {"ru": "\u041a\u043e\u0433\u0434\u0430 \u0432 \u0441\u0440\u0435\u0434\u043d\u0435\u043c \u0431\u044b\u043b\u0438 \u043d\u0430\u043f\u0435\u0447\u0430\u0442\u0430\u043d\u044b \u0442\u0440\u0430\u043d\u0441\u043a\u0440\u0438\u043f\u0442?"}, "question": "On average, when were the transcripts printed?", "kb_id": "student_transcripts_tracking"}, {"id": "D_0565", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT avg(transcript_date) FROM Transcripts;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 9]], "conds": []}, "select": [false, [[5, [0, [0, 53, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 9]], "conds": []}, "select": [false, [[5, [0, [0, 53, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "average", "transcript", "date", "?"], "ru": ["\u041a\u0430\u043a\u0430\u044f", "\u0432", "\u0441\u0440\u0435\u0434\u043d\u0435\u043c", "\u0434\u0430\u0442\u0430", "\u0442\u0440\u0430\u043d\u0441\u043a\u0440\u0438\u043f\u0442\u0430", "?"]}, "query_toks": {"en": ["select", "avg", "(", "transcript_date", ")", "from", "transcripts", ";"], "ru": ["select", "avg", "(", "transcript_date", ")", "from", "transcripts", ";"]}, "query_toks_no_values": {"en": ["select", "avg", "(", "transcript_date", ")", "from", "transcripts", ";"], "ru": ["select", "avg", "(", "transcript_date", ")", "from", "transcripts", ";"]}, "masked_query": "SELECT avg(transcript_date) FROM Transcripts;", "question_pauq": {"ru": "\u041a\u0430\u043a\u0430\u044f \u0432 \u0441\u0440\u0435\u0434\u043d\u0435\u043c \u0434\u0430\u0442\u0430 \u0442\u0440\u0430\u043d\u0441\u043a\u0440\u0438\u043f\u0442\u0430?"}, "question": "What is the average transcript date?", "kb_id": "student_transcripts_tracking"}, {"id": "D_0566", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 9]], "conds": []}, "select": [false, [[0, [0, [0, 53, false], null]], [0, [0, [0, 54, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["asc", [[0, [0, 53, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 9]], "conds": []}, "select": [false, [[0, [0, [0, 53, false], null]], [0, [0, [0, 54, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["asc", [[0, [0, 53, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["When", "is", "the", "first", "transcript", "released", "?", "List", "the", "date", "and", "details", "."], "ru": ["\u041a\u043e\u0433\u0434\u0430", "\u0431\u0443\u0434\u0435\u0442", "\u0432\u044b\u043f\u0443\u0449\u0435\u043d", "\u043f\u0435\u0440\u0432\u044b\u0439", "\u0442\u0440\u0430\u043d\u0441\u043a\u0440\u0438\u043f\u0442", "?", "\u0423\u043a\u0430\u0436\u0438\u0442\u0435", "\u0434\u0430\u0442\u0443", "\u0438", "\u043f\u043e\u0434\u0440\u043e\u0431\u043d\u043e\u0441\u0442\u0438", "."]}, "query_toks": {"en": ["select", "transcript_date", ",", "other_details", "from", "transcripts", "order", "by", "transcript_date", "asc", "limit", "1", ";"], "ru": ["select", "transcript_date", ",", "other_details", "from", "transcripts", "order", "by", "transcript_date", "asc", "limit", "1", ";"]}, "query_toks_no_values": {"en": ["select", "transcript_date", ",", "other_details", "from", "transcripts", "order", "by", "transcript_date", "asc", "limit", "1", ";"], "ru": ["select", "transcript_date", ",", "other_details", "from", "transcripts", "order", "by", "transcript_date", "asc", "limit", "1", ";"]}, "masked_query": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1;", "question_pauq": {"ru": "\u041a\u043e\u0433\u0434\u0430 \u0431\u0443\u0434\u0435\u0442 \u0432\u044b\u043f\u0443\u0449\u0435\u043d \u043f\u0435\u0440\u0432\u044b\u0439 \u0442\u0440\u0430\u043d\u0441\u043a\u0440\u0438\u043f\u0442? \u0423\u043a\u0430\u0436\u0438\u0442\u0435 \u0434\u0430\u0442\u0443 \u0438 \u043f\u043e\u0434\u0440\u043e\u0431\u043d\u043e\u0441\u0442\u0438."}, "question": "When is the first transcript released? List the date and details.", "kb_id": "student_transcripts_tracking"}, {"id": "D_0567", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 9]], "conds": []}, "select": [false, [[0, [0, [0, 53, false], null]], [0, [0, [0, 54, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["asc", [[0, [0, 53, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 9]], "conds": []}, "select": [false, [[0, [0, [0, 53, false], null]], [0, [0, [0, 54, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["asc", [[0, [0, 53, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "earliest", "date", "of", "a", "transcript", "release", ",", "and", "what", "details", "can", "you", "tell", "me", "?"], "ru": ["\u041a\u0430\u043a\u0430\u044f", "\u0441\u0430\u043c\u0430\u044f", "\u0440\u0430\u043d\u043d\u044f\u044f", "\u0434\u0430\u0442\u0430", "\u0432\u044b\u043f\u0443\u0441\u043a\u0430", "\u0442\u0440\u0430\u043d\u0441\u043a\u0440\u0438\u043f\u0442\u0430", "\u0438", "\u043a\u0430\u043a\u0438\u0435", "\u043f\u043e\u0434\u0440\u043e\u0431\u043d\u043e\u0441\u0442\u0438", "\u0432\u044b", "\u043c\u043e\u0436\u0435\u0442\u0435", "\u043c\u043d\u0435", "\u0441\u043e\u043e\u0431\u0449\u0438\u0442\u044c", "?"]}, "query_toks": {"en": ["select", "transcript_date", ",", "other_details", "from", "transcripts", "order", "by", "transcript_date", "asc", "limit", "1", ";"], "ru": ["select", "transcript_date", ",", "other_details", "from", "transcripts", "order", "by", "transcript_date", "asc", "limit", "1", ";"]}, "query_toks_no_values": {"en": ["select", "transcript_date", ",", "other_details", "from", "transcripts", "order", "by", "transcript_date", "asc", "limit", "1", ";"], "ru": ["select", "transcript_date", ",", "other_details", "from", "transcripts", "order", "by", "transcript_date", "asc", "limit", "1", ";"]}, "masked_query": "SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1;", "question_pauq": {"ru": "\u041a\u0430\u043a\u0430\u044f \u0441\u0430\u043c\u0430\u044f \u0440\u0430\u043d\u043d\u044f\u044f \u0434\u0430\u0442\u0430 \u0432\u044b\u043f\u0443\u0441\u043a\u0430 \u0442\u0440\u0430\u043d\u0441\u043a\u0440\u0438\u043f\u0442\u0430 \u0438 \u043a\u0430\u043a\u0438\u0435 \u043f\u043e\u0434\u0440\u043e\u0431\u043d\u043e\u0441\u0442\u0438 \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043c\u043d\u0435 \u0441\u043e\u043e\u0431\u0449\u0438\u0442\u044c?"}, "question": "What is the earliest date of a transcript release, and what details can you tell me?", "kb_id": "student_transcripts_tracking"}, {"id": "D_0568", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT count(*) FROM Transcripts;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 9]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 9]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["How", "many", "transcripts", "are", "released", "?"], "ru": ["\u0421\u043a\u043e\u043b\u044c\u043a\u043e", "\u0441\u0442\u0435\u043d\u043e\u0433\u0440\u0430\u043c\u043c", "\u0432\u044b\u043f\u0443\u0449\u0435\u043d\u043e", "?"]}, "query_toks": {"en": ["select", "count", "(", "*", ")", "from", "transcripts", ";"], "ru": ["select", "count", "(", "*", ")", "from", "transcripts", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "*", ")", "from", "transcripts", ";"], "ru": ["select", "count", "(", "*", ")", "from", "transcripts", ";"]}, "masked_query": "SELECT count(*) FROM Transcripts;", "question_pauq": {"ru": "\u0421\u043a\u043e\u043b\u044c\u043a\u043e \u0441\u0442\u0435\u043d\u043e\u0433\u0440\u0430\u043c\u043c \u0432\u044b\u043f\u0443\u0449\u0435\u043d\u043e?"}, "question": "How many transcripts are released?", "kb_id": "student_transcripts_tracking"}, {"id": "D_0569", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT count(*) FROM Transcripts;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 9]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 9]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["How", "many", "transcripts", "are", "listed", "?"], "ru": ["\u0421\u043a\u043e\u043b\u044c\u043a\u043e", "\u0441\u0442\u0435\u043d\u043e\u0433\u0440\u0430\u043c\u043c", "\u0443\u043a\u0430\u0437\u0430\u043d\u043e", "?"]}, "query_toks": {"en": ["select", "count", "(", "*", ")", "from", "transcripts", ";"], "ru": ["select", "count", "(", "*", ")", "from", "transcripts", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "*", ")", "from", "transcripts", ";"], "ru": ["select", "count", "(", "*", ")", "from", "transcripts", ";"]}, "masked_query": "SELECT count(*) FROM Transcripts;", "question_pauq": {"ru": "\u0421\u043a\u043e\u043b\u044c\u043a\u043e \u0441\u0442\u0435\u043d\u043e\u0433\u0440\u0430\u043c\u043c \u0443\u043a\u0430\u0437\u0430\u043d\u043e?"}, "question": "How many transcripts are listed?", "kb_id": "student_transcripts_tracking"}, {"id": "D_0570", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 9]], "conds": []}, "select": [false, [[0, [0, [0, 53, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 53, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 9]], "conds": []}, "select": [false, [[0, [0, [0, 53, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 53, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "last", "transcript", "release", "date", "?"], "ru": ["\u041a\u0430\u043a\u0430\u044f", "\u0434\u0430\u0442\u0430", "\u0432\u044b\u043f\u0443\u0441\u043a\u0430", "\u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0439", "\u0441\u0442\u0435\u043d\u043e\u0433\u0440\u0430\u043c\u043c\u044b", "?"]}, "query_toks": {"en": ["select", "transcript_date", "from", "transcripts", "order", "by", "transcript_date", "desc", "limit", "1", ";"], "ru": ["select", "transcript_date", "from", "transcripts", "order", "by", "transcript_date", "desc", "limit", "1", ";"]}, "query_toks_no_values": {"en": ["select", "transcript_date", "from", "transcripts", "order", "by", "transcript_date", "desc", "limit", "1", ";"], "ru": ["select", "transcript_date", "from", "transcripts", "order", "by", "transcript_date", "desc", "limit", "1", ";"]}, "masked_query": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1;", "question_pauq": {"ru": "\u041a\u0430\u043a\u0430\u044f \u0434\u0430\u0442\u0430 \u0432\u044b\u043f\u0443\u0441\u043a\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0439 \u0441\u0442\u0435\u043d\u043e\u0433\u0440\u0430\u043c\u043c\u044b?"}, "question": "What is the last transcript release date?", "kb_id": "student_transcripts_tracking"}, {"id": "D_0571", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 9]], "conds": []}, "select": [false, [[0, [0, [0, 53, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 53, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 9]], "conds": []}, "select": [false, [[0, [0, [0, 53, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 53, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["When", "was", "the", "last", "transcript", "released", "?"], "ru": ["\u041a\u043e\u0433\u0434\u0430", "\u0431\u044b\u043b\u0430", "\u043e\u043f\u0443\u0431\u043b\u0438\u043a\u043e\u0432\u0430\u043d\u0430", "\u043f\u043e\u0441\u043b\u0435\u0434\u043d\u044f\u044f", "\u0441\u0442\u0435\u043d\u043e\u0433\u0440\u0430\u043c\u043c\u0430", "?"]}, "query_toks": {"en": ["select", "transcript_date", "from", "transcripts", "order", "by", "transcript_date", "desc", "limit", "1", ";"], "ru": ["select", "transcript_date", "from", "transcripts", "order", "by", "transcript_date", "desc", "limit", "1", ";"]}, "query_toks_no_values": {"en": ["select", "transcript_date", "from", "transcripts", "order", "by", "transcript_date", "desc", "limit", "1", ";"], "ru": ["select", "transcript_date", "from", "transcripts", "order", "by", "transcript_date", "desc", "limit", "1", ";"]}, "masked_query": "SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1;", "question_pauq": {"ru": "\u041a\u043e\u0433\u0434\u0430 \u0431\u044b\u043b\u0430 \u043e\u043f\u0443\u0431\u043b\u0438\u043a\u043e\u0432\u0430\u043d\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u044f\u044f \u0441\u0442\u0435\u043d\u043e\u0433\u0440\u0430\u043c\u043c\u0430?"}, "question": "When was the last transcript released?", "kb_id": "student_transcripts_tracking"}, {"id": "D_0572", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 10]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]], [0, [0, [0, 55, false], null]]]], "where": [], "groupBy": [[0, 55, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 10]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]], [0, [0, [0, 55, false], null]]]], "where": [], "groupBy": [[0, 55, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["How", "many", "times", "at", "most", "can", "a", "course", "enrollment", "result", "show", "in", "different", "transcripts", "?", "Also", "show", "the", "course", "enrollment", "id", "."], "ru": ["\u0421\u043a\u043e\u043b\u044c\u043a\u043e", "\u0440\u0430\u0437", "\u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442", "\u0437\u0430\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f", "\u043d\u0430", "\u043a\u0443\u0440\u0441", "\u043c\u043e\u0436\u0435\u0442", "\u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0442\u044c\u0441\u044f", "\u0432", "\u0440\u0430\u0437\u043d\u044b\u0445", "\u0442\u0440\u0430\u043d\u0441\u043a\u0440\u0438\u043f\u0442\u0430\u0445", "?", "\u0422\u0430\u043a\u0436\u0435", "\u043f\u043e\u043a\u0430\u0436\u0438\u0442\u0435", "id", "\u0437\u0430\u043f\u0438\u0441\u0438", "\u043d\u0430", "\u043a\u0443\u0440\u0441", "."]}, "query_toks": {"en": ["select", "count", "(", "*", ")", ",", "student_course_id", "from", "transcript_contents", "group", "by", "student_course_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"], "ru": ["select", "count", "(", "*", ")", ",", "student_course_id", "from", "transcript_contents", "group", "by", "student_course_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "*", ")", ",", "student_course_id", "from", "transcript_contents", "group", "by", "student_course_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"], "ru": ["select", "count", "(", "*", ")", ",", "student_course_id", "from", "transcript_contents", "group", "by", "student_course_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"]}, "masked_query": "SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1;", "question_pauq": {"ru": "\u0421\u043a\u043e\u043b\u044c\u043a\u043e \u0440\u0430\u0437 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0437\u0430\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f \u043d\u0430 \u043a\u0443\u0440\u0441 \u043c\u043e\u0436\u0435\u0442 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0442\u044c\u0441\u044f \u0432 \u0440\u0430\u0437\u043d\u044b\u0445 \u0442\u0440\u0430\u043d\u0441\u043a\u0440\u0438\u043f\u0442\u0430\u0445? \u0422\u0430\u043a\u0436\u0435 \u043f\u043e\u043a\u0430\u0436\u0438\u0442\u0435 id \u0437\u0430\u043f\u0438\u0441\u0438 \u043d\u0430 \u043a\u0443\u0440\u0441."}, "question": "How many times at most can a course enrollment result show in different transcripts? Also show the course enrollment id.", "kb_id": "student_transcripts_tracking"}, {"id": "D_0573", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 10]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]], [0, [0, [0, 55, false], null]]]], "where": [], "groupBy": [[0, 55, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 10]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]], [0, [0, [0, 55, false], null]]]], "where": [], "groupBy": [[0, 55, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "maximum", "number", "of", "times", "that", "a", "course", "shows", "up", "in", "different", "transcripts", "and", "what", "is", "that", "course", "'s", "enrollment", "id", "?"], "ru": ["\u041a\u0430\u043a\u043e\u0435", "\u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435", "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e", "\u0440\u0430\u0437", "\u043a\u0443\u0440\u0441", "\u043f\u043e\u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f", "\u0432", "\u0440\u0430\u0437\u043d\u044b\u0445", "\u0442\u0440\u0430\u043d\u0441\u043a\u0440\u0438\u043f\u0442\u0430\u0445", "\u0438", "\u043a\u0430\u043a\u043e\u0432", "id", "\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438", "\u044d\u0442\u043e\u0433\u043e", "\u043a\u0443\u0440\u0441\u0430", "?"]}, "query_toks": {"en": ["select", "count", "(", "*", ")", ",", "student_course_id", "from", "transcript_contents", "group", "by", "student_course_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"], "ru": ["select", "count", "(", "*", ")", ",", "student_course_id", "from", "transcript_contents", "group", "by", "student_course_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "*", ")", ",", "student_course_id", "from", "transcript_contents", "group", "by", "student_course_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"], "ru": ["select", "count", "(", "*", ")", ",", "student_course_id", "from", "transcript_contents", "group", "by", "student_course_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"]}, "masked_query": "SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1;", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0435 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0440\u0430\u0437 \u043a\u0443\u0440\u0441 \u043f\u043e\u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0432 \u0440\u0430\u0437\u043d\u044b\u0445 \u0442\u0440\u0430\u043d\u0441\u043a\u0440\u0438\u043f\u0442\u0430\u0445 \u0438 \u043a\u0430\u043a\u043e\u0432 id \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438 \u044d\u0442\u043e\u0433\u043e \u043a\u0443\u0440\u0441\u0430?"}, "question": "What is the maximum number of times that a course shows up in different transcripts and what is that course's enrollment id?", "kb_id": "student_transcripts_tracking"}, {"id": "D_0574", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 10], ["table_unit", 9]], "conds": [[false, 2, [0, [0, 56, false], null], [0, 52, false], null]]}, "select": [false, [[0, [0, [0, 53, false], null]], [0, [0, [0, 56, false], null]]]], "where": [], "groupBy": [[0, 56, false]], "having": [], "orderBy": ["asc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 10], ["table_unit", 9]], "conds": [[false, 2, [0, [0, 56, false], null], [0, 52, false], null]]}, "select": [false, [[0, [0, [0, 53, false], null]], [0, [0, [0, 56, false], null]]]], "where": [], "groupBy": [[0, 56, false]], "having": [], "orderBy": ["asc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Show", "the", "date", "of", "the", "transcript", "which", "shows", "the", "least", "number", "of", "results", ",", "also", "list", "the", "id", "."], "ru": ["\u0414\u0430\u0442\u0430", "\u0441\u0442\u0435\u043d\u043e\u0433\u0440\u0430\u043c\u043c\u044b", ",", "\u043a\u043e\u0442\u043e\u0440\u0430\u044f", "\u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442", "\u043d\u0430\u0438\u043c\u0435\u043d\u044c\u0448\u0435\u0435", "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e", "\u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432", ",", "\u0432\u043c\u0435\u0441\u0442\u0435", "\u0441", "id", "\u0441\u0442\u0435\u043d\u043e\u0433\u0440\u0430\u043c\u043c\u044b", "."]}, "query_toks": {"en": ["select", "t2.transcript_date", ",", "t1.transcript_id", "from", "transcript_contents", "as", "t1", "join", "transcripts", "as", "t2", "on", "t1.transcript_id", "=", "t2.transcript_id", "group", "by", "t1.transcript_id", "order", "by", "count", "(", "*", ")", "asc", "limit", "1", ";"], "ru": ["select", "t2.transcript_date", ",", "t1.transcript_id", "from", "transcript_contents", "as", "t1", "join", "transcripts", "as", "t2", "on", "t1.transcript_id", "=", "t2.transcript_id", "group", "by", "t1.transcript_id", "order", "by", "count", "(", "*", ")", "asc", "limit", "1", ";"]}, "query_toks_no_values": {"en": ["select", "t2.transcript_date", ",", "t1.transcript_id", "from", "transcript_contents", "as", "t1", "join", "transcripts", "as", "t2", "on", "t1.transcript_id", "=", "t2.transcript_id", "group", "by", "t1.transcript_id", "order", "by", "count", "(", "*", ")", "asc", "limit", "1", ";"], "ru": ["select", "t2.transcript_date", ",", "t1.transcript_id", "from", "transcript_contents", "as", "t1", "join", "transcripts", "as", "t2", "on", "t1.transcript_id", "=", "t2.transcript_id", "group", "by", "t1.transcript_id", "order", "by", "count", "(", "*", ")", "asc", "limit", "1", ";"]}, "masked_query": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1;", "question_pauq": {"ru": "\u0414\u0430\u0442\u0430 \u0441\u0442\u0435\u043d\u043e\u0433\u0440\u0430\u043c\u043c\u044b, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442 \u043d\u0430\u0438\u043c\u0435\u043d\u044c\u0448\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432, \u0432\u043c\u0435\u0441\u0442\u0435 \u0441 id \u0441\u0442\u0435\u043d\u043e\u0433\u0440\u0430\u043c\u043c\u044b."}, "question": "Show the date of the transcript which shows the least number of results, also list the id.", "kb_id": "student_transcripts_tracking"}, {"id": "D_0575", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 10], ["table_unit", 9]], "conds": [[false, 2, [0, [0, 56, false], null], [0, 52, false], null]]}, "select": [false, [[0, [0, [0, 53, false], null]], [0, [0, [0, 56, false], null]]]], "where": [], "groupBy": [[0, 56, false]], "having": [], "orderBy": ["asc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 10], ["table_unit", 9]], "conds": [[false, 2, [0, [0, 56, false], null], [0, 52, false], null]]}, "select": [false, [[0, [0, [0, 53, false], null]], [0, [0, [0, 56, false], null]]]], "where": [], "groupBy": [[0, 56, false]], "having": [], "orderBy": ["asc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "date", "and", "id", "of", "the", "transcript", "with", "the", "least", "number", "of", "results", "?"], "ru": ["\u041a\u0430\u043a\u0430\u044f", "\u0434\u0430\u0442\u0430", "\u0438", "id", "\u0441\u0442\u0435\u043d\u043e\u0433\u0440\u0430\u043c\u043c\u044b", "\u0441", "\u043d\u0430\u0438\u043c\u0435\u043d\u044c\u0448\u0438\u043c", "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c", "\u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432", "?"]}, "query_toks": {"en": ["select", "t2.transcript_date", ",", "t1.transcript_id", "from", "transcript_contents", "as", "t1", "join", "transcripts", "as", "t2", "on", "t1.transcript_id", "=", "t2.transcript_id", "group", "by", "t1.transcript_id", "order", "by", "count", "(", "*", ")", "asc", "limit", "1", ";"], "ru": ["select", "t2.transcript_date", ",", "t1.transcript_id", "from", "transcript_contents", "as", "t1", "join", "transcripts", "as", "t2", "on", "t1.transcript_id", "=", "t2.transcript_id", "group", "by", "t1.transcript_id", "order", "by", "count", "(", "*", ")", "asc", "limit", "1", ";"]}, "query_toks_no_values": {"en": ["select", "t2.transcript_date", ",", "t1.transcript_id", "from", "transcript_contents", "as", "t1", "join", "transcripts", "as", "t2", "on", "t1.transcript_id", "=", "t2.transcript_id", "group", "by", "t1.transcript_id", "order", "by", "count", "(", "*", ")", "asc", "limit", "1", ";"], "ru": ["select", "t2.transcript_date", ",", "t1.transcript_id", "from", "transcript_contents", "as", "t1", "join", "transcripts", "as", "t2", "on", "t1.transcript_id", "=", "t2.transcript_id", "group", "by", "t1.transcript_id", "order", "by", "count", "(", "*", ")", "asc", "limit", "1", ";"]}, "masked_query": "SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1;", "question_pauq": {"ru": "\u041a\u0430\u043a\u0430\u044f \u0434\u0430\u0442\u0430 \u0438 id \u0441\u0442\u0435\u043d\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u0441 \u043d\u0430\u0438\u043c\u0435\u043d\u044c\u0448\u0438\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432?"}, "question": "What is the date and id of the transcript with the least number of results?", "kb_id": "student_transcripts_tracking"}, {"id": "D_0576", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  '\u041a\u0430\u043d\u0434\u0438\u0434\u0430\u0442\u0441\u043a\u0430\u044f' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  '\u0410\u0441\u043f\u0438\u0440\u0430\u043d\u0441\u0442\u043a\u0430\u044f';"}, "sql": {"en": {"from": {"table_units": [["table_unit", 3], ["table_unit", 7]], "conds": [[false, 2, [0, [0, 18, false], null], [0, 45, false], null]]}, "select": [true, [[0, [0, [0, 46, false], null]]]], "where": [[false, 2, [0, [0, 20, false], null], "\"Master\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": {"from": {"table_units": [["table_unit", 3], ["table_unit", 7]], "conds": [[false, 2, [0, [0, 18, false], null], [0, 45, false], null]]}, "select": [true, [[0, [0, [0, 46, false], null]]]], "where": [[false, 2, [0, [0, 20, false], null], "\"Bachelor\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 3], ["table_unit", 7]], "conds": [[false, 2, [0, [0, 18, false], null], [0, 45, false], null]]}, "select": [true, [[0, [0, [0, 46, false], null]]]], "where": [[false, 2, [0, [0, 20, false], null], "\"\u041a\u0430\u043d\u0434\u0438\u0434\u0430\u0442\u0441\u043a\u0430\u044f\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": {"from": {"table_units": [["table_unit", 3], ["table_unit", 7]], "conds": [[false, 2, [0, [0, 18, false], null], [0, 45, false], null]]}, "select": [true, [[0, [0, [0, 46, false], null]]]], "where": [[false, 2, [0, [0, 20, false], null], "\"\u0410\u0441\u043f\u0438\u0440\u0430\u043d\u0441\u0442\u043a\u0430\u044f\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "union": null, "except": null}}, "question_toks": {"en": ["Find", "the", "semester", "when", "both", "Master", "students", "and", "Bachelor", "students", "got", "enrolled", "in", "."], "ru": ["\u041d\u0430\u0439\u0434\u0438\u0442\u0435", "\u0441\u0435\u043c\u0435\u0441\u0442\u0440", ",", "\u0432", "\u043a\u043e\u0442\u043e\u0440\u044b\u0439", "\u0431\u044b\u043b\u0438", "\u0437\u0430\u0447\u0438\u0441\u043b\u0435\u043d\u044b", "\u0438", "\u0441\u0442\u0443\u0434\u0435\u043d\u0442\u044b", "\u0430\u0441\u043f\u0438\u0440\u0430\u043d\u0442\u0443\u0440\u044b", ",", "\u0438", "\u0441\u0442\u0443\u0434\u0435\u043d\u0442\u044b", "\u0434\u043e\u043a\u0442\u043e\u0440\u0430\u043d\u0442\u0443\u0440\u044b", "."]}, "query_toks": {"en": ["select", "distinct", "t2.semester_id", "from", "degree_programs", "as", "t1", "join", "student_enrolment", "as", "t2", "on", "t1.degree_program_id", "=", "t2.degree_program_id", "where", "degree_summary_name", "=", "\"Master\"", "intersect", "select", "distinct", "t2.semester_id", "from", "degree_programs", "as", "t1", "join", "student_enrolment", "as", "t2", "on", "t1.degree_program_id", "=", "t2.degree_program_id", "where", "degree_summary_name", "=", "\"Bachelor\"", ";"], "ru": ["select", "distinct", "t2.semester_id", "from", "degree_programs", "as", "t1", "join", "student_enrolment", "as", "t2", "on", "t1.degree_program_id", "=", "t2.degree_program_id", "where", "degree_summary_name", "=", "\"\u041a\u0430\u043d\u0434\u0438\u0434\u0430\u0442\u0441\u043a\u0430\u044f\"", "intersect", "select", "distinct", "t2.semester_id", "from", "degree_programs", "as", "t1", "join", "student_enrolment", "as", "t2", "on", "t1.degree_program_id", "=", "t2.degree_program_id", "where", "degree_summary_name", "=", "\"\u0410\u0441\u043f\u0438\u0440\u0430\u043d\u0441\u0442\u043a\u0430\u044f\"", ";"]}, "query_toks_no_values": {"en": ["select", "distinct", "t2.semester_id", "from", "degree_programs", "as", "t1", "join", "student_enrolment", "as", "t2", "on", "t1.degree_program_id", "=", "t2.degree_program_id", "where", "degree_summary_name", "=", "value", "intersect", "select", "distinct", "t2.semester_id", "from", "degree_programs", "as", "t1", "join", "student_enrolment", "as", "t2", "on", "t1.degree_program_id", "=", "t2.degree_program_id", "where", "degree_summary_name", "=", "value", ";"], "ru": ["select", "distinct", "t2.semester_id", "from", "degree_programs", "as", "t1", "join", "student_enrolment", "as", "t2", "on", "t1.degree_program_id", "=", "t2.degree_program_id", "where", "degree_summary_name", "=", "value", "intersect", "select", "distinct", "t2.semester_id", "from", "degree_programs", "as", "t1", "join", "student_enrolment", "as", "t2", "on", "t1.degree_program_id", "=", "t2.degree_program_id", "where", "degree_summary_name", "=", "value", ";"]}, "masked_query": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor';", "question_pauq": {"ru": "\u041d\u0430\u0439\u0434\u0438\u0442\u0435 \u0441\u0435\u043c\u0435\u0441\u0442\u0440, \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u044b\u043b\u0438 \u0437\u0430\u0447\u0438\u0441\u043b\u0435\u043d\u044b \u0438 \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u044b \u0430\u0441\u043f\u0438\u0440\u0430\u043d\u0442\u0443\u0440\u044b, \u0438 \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u044b \u0434\u043e\u043a\u0442\u043e\u0440\u0430\u043d\u0442\u0443\u0440\u044b."}, "question": "Find the semester when both Master students and Bachelor students got enrolled in.", "kb_id": "student_transcripts_tracking"}, {"id": "D_0577", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  '\u041a\u0430\u043d\u0434\u0438\u0434\u0430\u0442\u0441\u043a\u0430\u044f' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  '\u0410\u0441\u043f\u0438\u0440\u0430\u043d\u0441\u0442\u043a\u0430\u044f';"}, "sql": {"en": {"from": {"table_units": [["table_unit", 3], ["table_unit", 7]], "conds": [[false, 2, [0, [0, 18, false], null], [0, 45, false], null]]}, "select": [true, [[0, [0, [0, 46, false], null]]]], "where": [[false, 2, [0, [0, 20, false], null], "\"Master\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": {"from": {"table_units": [["table_unit", 3], ["table_unit", 7]], "conds": [[false, 2, [0, [0, 18, false], null], [0, 45, false], null]]}, "select": [true, [[0, [0, [0, 46, false], null]]]], "where": [[false, 2, [0, [0, 20, false], null], "\"Bachelor\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 3], ["table_unit", 7]], "conds": [[false, 2, [0, [0, 18, false], null], [0, 45, false], null]]}, "select": [true, [[0, [0, [0, 46, false], null]]]], "where": [[false, 2, [0, [0, 20, false], null], "\"\u041a\u0430\u043d\u0434\u0438\u0434\u0430\u0442\u0441\u043a\u0430\u044f\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": {"from": {"table_units": [["table_unit", 3], ["table_unit", 7]], "conds": [[false, 2, [0, [0, 18, false], null], [0, 45, false], null]]}, "select": [true, [[0, [0, [0, 46, false], null]]]], "where": [[false, 2, [0, [0, 20, false], null], "\"\u0410\u0441\u043f\u0438\u0440\u0430\u043d\u0441\u0442\u043a\u0430\u044f\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "id", "of", "the", "semester", "that", "had", "both", "Masters", "and", "Bachelors", "students", "enrolled", "?"], "ru": ["\u041a\u0430\u043a\u043e\u0432", "id", "\u0441\u0435\u043c\u0435\u0441\u0442\u0440\u0430", ",", "\u0432", "\u043a\u043e\u0442\u043e\u0440\u044b\u0439", "\u0437\u0430\u0447\u0438\u0441\u043b\u0435\u043d\u044b", "\u0441\u0442\u0443\u0434\u0435\u043d\u0442\u044b", "\u0430\u0441\u043f\u0438\u0440\u0430\u043d\u0442\u0443\u0440\u044b", "\u0438", "\u0434\u043e\u043a\u0442\u043e\u0440\u0430\u043d\u0442\u0443\u0440\u044b", "?"]}, "query_toks": {"en": ["select", "distinct", "t2.semester_id", "from", "degree_programs", "as", "t1", "join", "student_enrolment", "as", "t2", "on", "t1.degree_program_id", "=", "t2.degree_program_id", "where", "degree_summary_name", "=", "\"Master\"", "intersect", "select", "distinct", "t2.semester_id", "from", "degree_programs", "as", "t1", "join", "student_enrolment", "as", "t2", "on", "t1.degree_program_id", "=", "t2.degree_program_id", "where", "degree_summary_name", "=", "\"Bachelor\"", ";"], "ru": ["select", "distinct", "t2.semester_id", "from", "degree_programs", "as", "t1", "join", "student_enrolment", "as", "t2", "on", "t1.degree_program_id", "=", "t2.degree_program_id", "where", "degree_summary_name", "=", "\"\u041a\u0430\u043d\u0434\u0438\u0434\u0430\u0442\u0441\u043a\u0430\u044f\"", "intersect", "select", "distinct", "t2.semester_id", "from", "degree_programs", "as", "t1", "join", "student_enrolment", "as", "t2", "on", "t1.degree_program_id", "=", "t2.degree_program_id", "where", "degree_summary_name", "=", "\"\u0410\u0441\u043f\u0438\u0440\u0430\u043d\u0441\u0442\u043a\u0430\u044f\"", ";"]}, "query_toks_no_values": {"en": ["select", "distinct", "t2.semester_id", "from", "degree_programs", "as", "t1", "join", "student_enrolment", "as", "t2", "on", "t1.degree_program_id", "=", "t2.degree_program_id", "where", "degree_summary_name", "=", "value", "intersect", "select", "distinct", "t2.semester_id", "from", "degree_programs", "as", "t1", "join", "student_enrolment", "as", "t2", "on", "t1.degree_program_id", "=", "t2.degree_program_id", "where", "degree_summary_name", "=", "value", ";"], "ru": ["select", "distinct", "t2.semester_id", "from", "degree_programs", "as", "t1", "join", "student_enrolment", "as", "t2", "on", "t1.degree_program_id", "=", "t2.degree_program_id", "where", "degree_summary_name", "=", "value", "intersect", "select", "distinct", "t2.semester_id", "from", "degree_programs", "as", "t1", "join", "student_enrolment", "as", "t2", "on", "t1.degree_program_id", "=", "t2.degree_program_id", "where", "degree_summary_name", "=", "value", ";"]}, "masked_query": "SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor';", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0432 id \u0441\u0435\u043c\u0435\u0441\u0442\u0440\u0430, \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0437\u0430\u0447\u0438\u0441\u043b\u0435\u043d\u044b \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u044b \u0430\u0441\u043f\u0438\u0440\u0430\u043d\u0442\u0443\u0440\u044b \u0438 \u0434\u043e\u043a\u0442\u043e\u0440\u0430\u043d\u0442\u0443\u0440\u044b?"}, "question": "What is the id of the semester that had both Masters and Bachelors students enrolled?", "kb_id": "student_transcripts_tracking"}, {"id": "D_0578", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT count(DISTINCT current_address_id) FROM Students;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 6]], "conds": []}, "select": [false, [[3, [0, [0, 33, true], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 6]], "conds": []}, "select": [false, [[3, [0, [0, 33, true], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["How", "many", "different", "addresses", "do", "the", "students", "currently", "live", "?"], "ru": ["\u041f\u043e", "\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u043c", "\u0430\u0434\u0440\u0435\u0441\u0430\u043c", "\u0441\u0435\u0439\u0447\u0430\u0441", "\u043f\u0440\u043e\u0436\u0438\u0432\u0430\u044e\u0442", "\u0441\u0442\u0443\u0434\u0435\u043d\u0442\u044b", "?"]}, "query_toks": {"en": ["select", "count", "(", "distinct", "current_address_id", ")", "from", "students", ";"], "ru": ["select", "count", "(", "distinct", "current_address_id", ")", "from", "students", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "distinct", "current_address_id", ")", "from", "students", ";"], "ru": ["select", "count", "(", "distinct", "current_address_id", ")", "from", "students", ";"]}, "masked_query": "SELECT count(DISTINCT current_address_id) FROM Students;", "question_pauq": {"ru": "\u041f\u043e \u0441\u043a\u043e\u043b\u044c\u043a\u0438\u043c \u0430\u0434\u0440\u0435\u0441\u0430\u043c \u0441\u0435\u0439\u0447\u0430\u0441 \u043f\u0440\u043e\u0436\u0438\u0432\u0430\u044e\u0442 \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u044b?"}, "question": "How many different addresses do the students currently live?", "kb_id": "student_transcripts_tracking"}, {"id": "D_0579", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT count(DISTINCT current_address_id) FROM Students;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 6]], "conds": []}, "select": [false, [[3, [0, [0, 33, true], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 6]], "conds": []}, "select": [false, [[3, [0, [0, 33, true], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "the", "different", "addresses", "that", "have", "students", "living", "there", "?"], "ru": ["\u041f\u043e", "\u043a\u0430\u043a\u0438\u043c", "\u0430\u0434\u0440\u0435\u0441\u0430\u043c", "\u0436\u0438\u0432\u0443\u0442", "\u0441\u0442\u0443\u0434\u0435\u043d\u0442\u044b", "?"]}, "query_toks": {"en": ["select", "count", "(", "distinct", "current_address_id", ")", "from", "students", ";"], "ru": ["select", "count", "(", "distinct", "current_address_id", ")", "from", "students", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "distinct", "current_address_id", ")", "from", "students", ";"], "ru": ["select", "count", "(", "distinct", "current_address_id", ")", "from", "students", ";"]}, "masked_query": "SELECT count(DISTINCT current_address_id) FROM Students;", "question_pauq": {"ru": "\u041f\u043e \u043a\u0430\u043a\u0438\u043c \u0430\u0434\u0440\u0435\u0441\u0430\u043c \u0436\u0438\u0432\u0443\u0442 \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u044b?"}, "question": "What are the different addresses that have students living there?", "kb_id": "student_transcripts_tracking"}, {"id": "D_0580", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT other_student_details FROM Students ORDER BY other_student_details DESC;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 6]], "conds": []}, "select": [false, [[0, [0, [0, 43, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 43, false], null]]], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 6]], "conds": []}, "select": [false, [[0, [0, [0, 43, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 43, false], null]]], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["List", "all", "the", "student", "details", "in", "reversed", "lexicographical", "order", "."], "ru": ["\u041f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0438\u0442\u0435", "\u0432\u0441\u0435", "\u0441\u0432\u0435\u0434\u0435\u043d\u0438\u044f", "\u043e", "\u0441\u0442\u0443\u0434\u0435\u043d\u0442\u0430\u0445", "\u0432", "\u043e\u0431\u0440\u0430\u0442\u043d\u043e\u043c", "\u043b\u0435\u043a\u0441\u0438\u043a\u043e\u0433\u0440\u0430\u0444\u0438\u0447\u0435\u0441\u043a\u043e\u043c", "\u043f\u043e\u0440\u044f\u0434\u043a\u0435", "."]}, "query_toks": {"en": ["select", "other_student_details", "from", "students", "order", "by", "other_student_details", "desc", ";"], "ru": ["select", "other_student_details", "from", "students", "order", "by", "other_student_details", "desc", ";"]}, "query_toks_no_values": {"en": ["select", "other_student_details", "from", "students", "order", "by", "other_student_details", "desc", ";"], "ru": ["select", "other_student_details", "from", "students", "order", "by", "other_student_details", "desc", ";"]}, "masked_query": "SELECT other_student_details FROM Students ORDER BY other_student_details DESC;", "question_pauq": {"ru": "\u041f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0438\u0442\u0435 \u0432\u0441\u0435 \u0441\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043e \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u0430\u0445 \u0432 \u043e\u0431\u0440\u0430\u0442\u043d\u043e\u043c \u043b\u0435\u043a\u0441\u0438\u043a\u043e\u0433\u0440\u0430\u0444\u0438\u0447\u0435\u0441\u043a\u043e\u043c \u043f\u043e\u0440\u044f\u0434\u043a\u0435."}, "question": "List all the student details in reversed lexicographical order.", "kb_id": "student_transcripts_tracking"}, {"id": "D_0581", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT other_student_details FROM Students ORDER BY other_student_details DESC;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 6]], "conds": []}, "select": [false, [[0, [0, [0, 43, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 43, false], null]]], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 6]], "conds": []}, "select": [false, [[0, [0, [0, 43, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 43, false], null]]], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "other", "details", "can", "you", "tell", "me", "about", "students", "in", "reverse", "alphabetical", "order", "?"], "ru": ["\u041a\u0430\u043a\u0438\u0435", "\u0435\u0449\u0435", "\u043f\u043e\u0434\u0440\u043e\u0431\u043d\u043e\u0441\u0442\u0438", "\u043e", "\u0441\u0442\u0443\u0434\u0435\u043d\u0442\u0430\u0445", "\u0432\u044b", "\u043c\u043e\u0436\u0435\u0442\u0435", "\u0440\u0430\u0441\u0441\u043a\u0430\u0437\u0430\u0442\u044c", "\u0432", "\u043e\u0431\u0440\u0430\u0442\u043d\u043e\u043c", "\u0430\u043b\u0444\u0430\u0432\u0438\u0442\u043d\u043e\u043c", "\u043f\u043e\u0440\u044f\u0434\u043a\u0435", "?"]}, "query_toks": {"en": ["select", "other_student_details", "from", "students", "order", "by", "other_student_details", "desc", ";"], "ru": ["select", "other_student_details", "from", "students", "order", "by", "other_student_details", "desc", ";"]}, "query_toks_no_values": {"en": ["select", "other_student_details", "from", "students", "order", "by", "other_student_details", "desc", ";"], "ru": ["select", "other_student_details", "from", "students", "order", "by", "other_student_details", "desc", ";"]}, "masked_query": "SELECT other_student_details FROM Students ORDER BY other_student_details DESC;", "question_pauq": {"ru": "\u041a\u0430\u043a\u0438\u0435 \u0435\u0449\u0435 \u043f\u043e\u0434\u0440\u043e\u0431\u043d\u043e\u0441\u0442\u0438 \u043e \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u0430\u0445 \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0440\u0430\u0441\u0441\u043a\u0430\u0437\u0430\u0442\u044c \u0432 \u043e\u0431\u0440\u0430\u0442\u043d\u043e\u043c \u0430\u043b\u0444\u0430\u0432\u0438\u0442\u043d\u043e\u043c \u043f\u043e\u0440\u044f\u0434\u043a\u0435?"}, "question": "What other details can you tell me about students in reverse alphabetical order?", "kb_id": "student_transcripts_tracking"}, {"id": "D_0582", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT section_description FROM Sections WHERE section_name  =  'h';"}, "sql": {"en": {"from": {"table_units": [["table_unit", 4]], "conds": []}, "select": [false, [[0, [0, [0, 26, false], null]]]], "where": [[false, 2, [0, [0, 25, false], null], "\"h\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 4]], "conds": []}, "select": [false, [[0, [0, [0, 26, false], null]]]], "where": [[false, 2, [0, [0, 25, false], null], "\"h\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Describe", "the", "section", "h", "."], "ru": ["\u041e\u043f\u0438\u0448\u0438\u0442\u0435", "\u0440\u0430\u0437\u0434\u0435\u043b", "h", "."]}, "query_toks": {"en": ["select", "section_description", "from", "sections", "where", "section_name", "=", "\"h\"", ";"], "ru": ["select", "section_description", "from", "sections", "where", "section_name", "=", "\"h\"", ";"]}, "query_toks_no_values": {"en": ["select", "section_description", "from", "sections", "where", "section_name", "=", "value", ";"], "ru": ["select", "section_description", "from", "sections", "where", "section_name", "=", "value", ";"]}, "masked_query": "SELECT section_description FROM Sections WHERE section_name  =  'h';", "question_pauq": {"ru": "\u041e\u043f\u0438\u0448\u0438\u0442\u0435 \u0440\u0430\u0437\u0434\u0435\u043b h."}, "question": "Describe the section h.", "kb_id": "student_transcripts_tracking"}, {"id": "D_0583", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT section_description FROM Sections WHERE section_name  =  'h';"}, "sql": {"en": {"from": {"table_units": [["table_unit", 4]], "conds": []}, "select": [false, [[0, [0, [0, 26, false], null]]]], "where": [[false, 2, [0, [0, 25, false], null], "\"h\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 4]], "conds": []}, "select": [false, [[0, [0, [0, 26, false], null]]]], "where": [[false, 2, [0, [0, 25, false], null], "\"h\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "description", "for", "the", "section", "named", "h", "?"], "ru": ["\u041a\u0430\u043a\u043e\u0432\u043e", "\u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435", "\u0440\u0430\u0437\u0434\u0435\u043b\u0430", "\u0441", "\u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435\u043c", "h", "?"]}, "query_toks": {"en": ["select", "section_description", "from", "sections", "where", "section_name", "=", "\"h\"", ";"], "ru": ["select", "section_description", "from", "sections", "where", "section_name", "=", "\"h\"", ";"]}, "query_toks_no_values": {"en": ["select", "section_description", "from", "sections", "where", "section_name", "=", "value", ";"], "ru": ["select", "section_description", "from", "sections", "where", "section_name", "=", "value", ";"]}, "masked_query": "SELECT section_description FROM Sections WHERE section_name  =  'h';", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0432\u043e \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0440\u0430\u0437\u0434\u0435\u043b\u0430 \u0441 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435\u043c h?"}, "question": "What is the description for the section named h?", "kb_id": "student_transcripts_tracking"}, {"id": "D_0584", "source": "spider-dev", "type": "dev", "query": {"ru": "select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  '\u041a\u0443\u0431\u0430' or t1.cell_mobile_number  =  '(605)919-3594x3661';"}, "sql": {"en": {"from": {"table_units": [["table_unit", 6], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 34, false], null], [0, 1, false], null]]}, "select": [false, [[0, [0, [0, 35, false], null]]]], "where": [[false, 2, [0, [0, 8, false], null], "\"haiti\"", null], "or", [false, 2, [0, [0, 38, false], null], "\"09700166582\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 6], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 34, false], null], [0, 1, false], null]]}, "select": [false, [[0, [0, [0, 35, false], null]]]], "where": [[false, 2, [0, [0, 8, false], null], "\"\u041a\u0443\u0431\u0430\"", null], "or", [false, 2, [0, [0, 38, false], null], "\"(605)919-3594x3661\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Find", "the", "first", "name", "of", "the", "students", "who", "permanently", "live", "in", "the", "country", "Haiti", "or", "have", "the", "cell", "phone", "number", "09700166582", "."], "ru": ["\u041d\u0430\u0439\u0434\u0438\u0442\u0435", "\u0438\u043c\u0435\u043d\u0430", "\u0441\u0442\u0443\u0434\u0435\u043d\u0442\u043e\u0432", ",", "\u043a\u043e\u0442\u043e\u0440\u044b\u0435", "\u043f\u043e\u0441\u0442\u043e\u044f\u043d\u043d\u043e", "\u043f\u0440\u043e\u0436\u0438\u0432\u0430\u044e\u0442", "\u0432", "\u0441\u0442\u0440\u0430\u043d\u0435", "\u041a\u0443\u0431\u0430", ",", "\u0438\u043b\u0438", "\u0443", "\u043a\u043e\u0442\u043e\u0440\u044b\u0445", "\u0435\u0441\u0442\u044c", "\u043d\u043e\u043c\u0435\u0440", "\u043c\u043e\u0431\u0438\u043b\u044c\u043d\u043e\u0433\u043e", "\u0442\u0435\u043b\u0435\u0444\u043e\u043d\u0430", "(", "605", ")", "919-3594x3661", "."]}, "query_toks": {"en": ["select", "t1.first_name", "from", "students", "as", "t1", "join", "addresses", "as", "t2", "on", "t1.permanent_address_id", "=", "t2.address_id", "where", "t2.country", "=", "\"haiti\"", "or", "t1.cell_mobile_number", "=", "\"09700166582\"", ";"], "ru": ["select", "t1.first_name", "from", "students", "as", "t1", "join", "addresses", "as", "t2", "on", "t1.permanent_address_id", "=", "t2.address_id", "where", "t2.country", "=", "\"\u041a\u0443\u0431\u0430\"", "or", "t1.cell_mobile_number", "=", "\"(605)919-3594x3661\"", ";"]}, "query_toks_no_values": {"en": ["select", "t1.first_name", "from", "students", "as", "t1", "join", "addresses", "as", "t2", "on", "t1.permanent_address_id", "=", "t2.address_id", "where", "t2.country", "=", "value", "or", "t1.cell_mobile_number", "=", "value", ";"], "ru": ["select", "t1.first_name", "from", "students", "as", "t1", "join", "addresses", "as", "t2", "on", "t1.permanent_address_id", "=", "t2.address_id", "where", "t2.country", "=", "value", "or", "t1.cell_mobile_number", "=", "value", ";"]}, "masked_query": "select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582';", "question_pauq": {"ru": "\u041d\u0430\u0439\u0434\u0438\u0442\u0435 \u0438\u043c\u0435\u043d\u0430 \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u043e\u0441\u0442\u043e\u044f\u043d\u043d\u043e \u043f\u0440\u043e\u0436\u0438\u0432\u0430\u044e\u0442 \u0432 \u0441\u0442\u0440\u0430\u043d\u0435 \u041a\u0443\u0431\u0430, \u0438\u043b\u0438 \u0443 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0435\u0441\u0442\u044c \u043d\u043e\u043c\u0435\u0440 \u043c\u043e\u0431\u0438\u043b\u044c\u043d\u043e\u0433\u043e \u0442\u0435\u043b\u0435\u0444\u043e\u043d\u0430 (605)919-3594x3661."}, "question": "Find the first name of the students who permanently live in the country Haiti or have the cell phone number 09700166582 .", "kb_id": "student_transcripts_tracking"}, {"id": "D_0585", "source": "spider-dev", "type": "dev", "query": {"ru": "select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  '\u041a\u0443\u0431\u0430' or t1.cell_mobile_number  =  '(605)919-3594x3661';"}, "sql": {"en": {"from": {"table_units": [["table_unit", 6], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 34, false], null], [0, 1, false], null]]}, "select": [false, [[0, [0, [0, 35, false], null]]]], "where": [[false, 2, [0, [0, 8, false], null], "\"haiti\"", null], "or", [false, 2, [0, [0, 38, false], null], "\"09700166582\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 6], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 34, false], null], [0, 1, false], null]]}, "select": [false, [[0, [0, [0, 35, false], null]]]], "where": [[false, 2, [0, [0, 8, false], null], "\"\u041a\u0443\u0431\u0430\"", null], "or", [false, 2, [0, [0, 38, false], null], "\"(605)919-3594x3661\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "the", "first", "names", "of", "the", "students", "who", "live", "in", "Haiti", "permanently", "or", "have", "the", "cell", "phone", "number", "09700166582", "?"], "ru": ["\u041a\u0430\u043a", "\u0437\u043e\u0432\u0443\u0442", "\u0441\u0442\u0443\u0434\u0435\u043d\u0442\u043e\u0432", ",", "\u043a\u043e\u0442\u043e\u0440\u044b\u0435", "\u043f\u043e\u0441\u0442\u043e\u044f\u043d\u043d\u043e", "\u0436\u0438\u0432\u0443\u0442", "\u043d\u0430", "\u041a\u0443\u0431\u0435", "\u0438\u043b\u0438", "\u0438\u043c\u0435\u044e\u0442", "\u043d\u043e\u043c\u0435\u0440", "\u043c\u043e\u0431\u0438\u043b\u044c\u043d\u043e\u0433\u043e", "\u0442\u0435\u043b\u0435\u0444\u043e\u043d\u0430", "(", "605", ")", "919-3594x3661", "?"]}, "query_toks": {"en": ["select", "t1.first_name", "from", "students", "as", "t1", "join", "addresses", "as", "t2", "on", "t1.permanent_address_id", "=", "t2.address_id", "where", "t2.country", "=", "\"haiti\"", "or", "t1.cell_mobile_number", "=", "\"09700166582\"", ";"], "ru": ["select", "t1.first_name", "from", "students", "as", "t1", "join", "addresses", "as", "t2", "on", "t1.permanent_address_id", "=", "t2.address_id", "where", "t2.country", "=", "\"\u041a\u0443\u0431\u0430\"", "or", "t1.cell_mobile_number", "=", "\"(605)919-3594x3661\"", ";"]}, "query_toks_no_values": {"en": ["select", "t1.first_name", "from", "students", "as", "t1", "join", "addresses", "as", "t2", "on", "t1.permanent_address_id", "=", "t2.address_id", "where", "t2.country", "=", "value", "or", "t1.cell_mobile_number", "=", "value", ";"], "ru": ["select", "t1.first_name", "from", "students", "as", "t1", "join", "addresses", "as", "t2", "on", "t1.permanent_address_id", "=", "t2.address_id", "where", "t2.country", "=", "value", "or", "t1.cell_mobile_number", "=", "value", ";"]}, "masked_query": "select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582';", "question_pauq": {"ru": "\u041a\u0430\u043a \u0437\u043e\u0432\u0443\u0442 \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u043e\u0441\u0442\u043e\u044f\u043d\u043d\u043e \u0436\u0438\u0432\u0443\u0442 \u043d\u0430 \u041a\u0443\u0431\u0435 \u0438\u043b\u0438 \u0438\u043c\u0435\u044e\u0442 \u043d\u043e\u043c\u0435\u0440 \u043c\u043e\u0431\u0438\u043b\u044c\u043d\u043e\u0433\u043e \u0442\u0435\u043b\u0435\u0444\u043e\u043d\u0430 (605)919-3594x3661?"}, "question": "What are the first names of the students who live in Haiti permanently or have the cell phone number 09700166582 ?", "kb_id": "student_transcripts_tracking"}, {"id": "D_0586", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT Title FROM Cartoon ORDER BY title;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 20, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["asc", [[0, [0, 20, false], null]]], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 20, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["asc", [[0, [0, 20, false], null]]], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["List", "the", "title", "of", "all", "cartoons", "in", "alphabetical", "order", "."], "ru": ["\u041f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0438\u0442\u0435", "\u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f", "\u0432\u0441\u0435\u0445", "\u043c\u0443\u043b\u044c\u0442\u0444\u0438\u043b\u044c\u043c\u043e\u0432", "\u0432", "\u0430\u043b\u0444\u0430\u0432\u0438\u0442\u043d\u043e\u043c", "\u043f\u043e\u0440\u044f\u0434\u043a\u0435", "."]}, "query_toks": {"en": ["select", "title", "from", "cartoon", "order", "by", "title", ";"], "ru": ["select", "title", "from", "cartoon", "order", "by", "title", ";"]}, "query_toks_no_values": {"en": ["select", "title", "from", "cartoon", "order", "by", "title", ";"], "ru": ["select", "title", "from", "cartoon", "order", "by", "title", ";"]}, "masked_query": "SELECT Title FROM Cartoon ORDER BY title;", "question_pauq": {"ru": "\u041f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0438\u0442\u0435 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f \u0432\u0441\u0435\u0445 \u043c\u0443\u043b\u044c\u0442\u0444\u0438\u043b\u044c\u043c\u043e\u0432 \u0432 \u0430\u043b\u0444\u0430\u0432\u0438\u0442\u043d\u043e\u043c \u043f\u043e\u0440\u044f\u0434\u043a\u0435."}, "question": "List the title of all cartoons in alphabetical order.", "kb_id": "tvshow"}, {"id": "D_0587", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT Title FROM Cartoon ORDER BY title;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 20, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["asc", [[0, [0, 20, false], null]]], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 20, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["asc", [[0, [0, 20, false], null]]], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "the", "titles", "of", "the", "cartoons", "sorted", "alphabetically", "?"], "ru": ["\u041a\u0430\u043a\u0438\u0435", "\u0435\u0441\u0442\u044c", "\u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f", "\u043c\u0443\u043b\u044c\u0442\u0444\u0438\u043b\u044c\u043c\u043e\u0432", ",", "\u043e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435", "\u043f\u043e", "\u0430\u043b\u0444\u0430\u0432\u0438\u0442\u0443", "?"]}, "query_toks": {"en": ["select", "title", "from", "cartoon", "order", "by", "title", ";"], "ru": ["select", "title", "from", "cartoon", "order", "by", "title", ";"]}, "query_toks_no_values": {"en": ["select", "title", "from", "cartoon", "order", "by", "title", ";"], "ru": ["select", "title", "from", "cartoon", "order", "by", "title", ";"]}, "masked_query": "SELECT Title FROM Cartoon ORDER BY title;", "question_pauq": {"ru": "\u041a\u0430\u043a\u0438\u0435 \u0435\u0441\u0442\u044c \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f \u043c\u0443\u043b\u044c\u0442\u0444\u0438\u043b\u044c\u043c\u043e\u0432, \u043e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u043f\u043e \u0430\u043b\u0444\u0430\u0432\u0438\u0442\u0443?"}, "question": "What are the titles of the cartoons sorted alphabetically?", "kb_id": "tvshow"}, {"id": "D_0588", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT Title FROM Cartoon WHERE Directed_by = \"\u0414\u0435\u043d\u0438\u0441 \u0423\u0441\u0442\u0438\u043d\u043e\u0432\";"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 20, false], null]]]], "where": [[false, 2, [0, [0, 21, false], null], "\"Ben Jones\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 20, false], null]]]], "where": [[false, 2, [0, [0, 21, false], null], "\"\u0414\u0435\u043d\u0438\u0441 \u0423\u0441\u0442\u0438\u043d\u043e\u0432\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["List", "all", "cartoon", "directed", "by", "``", "Ben", "Jones", "''", "."], "ru": ["\u0421\u043f\u0438\u0441\u043e\u043a", "\u0432\u0441\u0435\u0445", "\u043c\u0443\u043b\u044c\u0442\u0444\u0438\u043b\u044c\u043c\u043e\u0432", "\u0440\u0435\u0436\u0438\u0441\u0441\u0435\u0440\u0430", "\u00ab", "\u0414\u0435\u043d\u0438\u0441", "\u0423\u0441\u0442\u0438\u043d\u043e\u0432", "\u00bb", "."]}, "query_toks": {"en": ["select", "title", "from", "cartoon", "where", "directed_by", "=", "\"Ben Jones\"", ";"], "ru": ["select", "title", "from", "cartoon", "where", "directed_by", "=", "\"\u0414\u0435\u043d\u0438\u0441 \u0423\u0441\u0442\u0438\u043d\u043e\u0432\"", ";"]}, "query_toks_no_values": {"en": ["select", "title", "from", "cartoon", "where", "directed_by", "=", "value", ";"], "ru": ["select", "title", "from", "cartoon", "where", "directed_by", "=", "value", ";"]}, "masked_query": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\";", "question_pauq": {"ru": "\u0421\u043f\u0438\u0441\u043e\u043a \u0432\u0441\u0435\u0445 \u043c\u0443\u043b\u044c\u0442\u0444\u0438\u043b\u044c\u043c\u043e\u0432 \u0440\u0435\u0436\u0438\u0441\u0441\u0435\u0440\u0430 \u00ab\u0414\u0435\u043d\u0438\u0441 \u0423\u0441\u0442\u0438\u043d\u043e\u0432\u00bb."}, "question": "List all cartoon directed by \"Ben Jones\".", "kb_id": "tvshow"}, {"id": "D_0589", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT Title FROM Cartoon WHERE Directed_by = \"\u0414\u0435\u043d\u0438\u0441 \u0423\u0441\u0442\u0438\u043d\u043e\u0432\";"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 20, false], null]]]], "where": [[false, 2, [0, [0, 21, false], null], "\"Ben Jones\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 20, false], null]]]], "where": [[false, 2, [0, [0, 21, false], null], "\"\u0414\u0435\u043d\u0438\u0441 \u0423\u0441\u0442\u0438\u043d\u043e\u0432\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "the", "names", "of", "all", "cartoons", "directed", "by", "Ben", "Jones", "?"], "ru": ["\u041a\u0430\u043a", "\u043d\u0430\u0437\u044b\u0432\u0430\u044e\u0442\u0441\u044f", "\u0432\u0441\u0435", "\u043c\u0443\u043b\u044c\u0442\u0444\u0438\u043b\u044c\u043c\u044b", "\u0414\u0435\u043d\u0438\u0441\u0430", "\u0423\u0441\u0442\u0438\u043d\u043e\u0432\u0430", "?"]}, "query_toks": {"en": ["select", "title", "from", "cartoon", "where", "directed_by", "=", "\"Ben Jones\"", ";"], "ru": ["select", "title", "from", "cartoon", "where", "directed_by", "=", "\"\u0414\u0435\u043d\u0438\u0441 \u0423\u0441\u0442\u0438\u043d\u043e\u0432\"", ";"]}, "query_toks_no_values": {"en": ["select", "title", "from", "cartoon", "where", "directed_by", "=", "value", ";"], "ru": ["select", "title", "from", "cartoon", "where", "directed_by", "=", "value", ";"]}, "masked_query": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\";", "question_pauq": {"ru": "\u041a\u0430\u043a \u043d\u0430\u0437\u044b\u0432\u0430\u044e\u0442\u0441\u044f \u0432\u0441\u0435 \u043c\u0443\u043b\u044c\u0442\u0444\u0438\u043b\u044c\u043c\u044b \u0414\u0435\u043d\u0438\u0441\u0430 \u0423\u0441\u0442\u0438\u043d\u043e\u0432\u0430?"}, "question": "What are the names of all cartoons directed by Ben Jones?", "kb_id": "tvshow"}, {"id": "D_0590", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT count(*) FROM Cartoon WHERE Written_by = \"\u0422\u0438\u043c\u0443\u0440 \u0412\u0430\u0434\u0438\u043c\u043e\u0432\";"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 22, false], null], "\"Joseph Kuhr\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 22, false], null], "\"\u0422\u0438\u043c\u0443\u0440 \u0412\u0430\u0434\u0438\u043c\u043e\u0432\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["How", "many", "cartoons", "were", "written", "by", "``", "Joseph", "Kuhr", "''", "?"], "ru": ["\u0421\u043a\u043e\u043b\u044c\u043a\u043e", "\u043c\u0443\u043b\u044c\u0442\u0444\u0438\u043b\u044c\u043c\u043e\u0432", "\u0441\u043e\u0437\u0434\u0430\u043b", "\u00ab", "\u0422\u0438\u043c\u0443\u0440", "\u0412\u0430\u0434\u0438\u043c\u043e\u0432", "\u00bb", "?"]}, "query_toks": {"en": ["select", "count", "(", "*", ")", "from", "cartoon", "where", "written_by", "=", "\"Joseph Kuhr\"", ";"], "ru": ["select", "count", "(", "*", ")", "from", "cartoon", "where", "written_by", "=", "\"\u0422\u0438\u043c\u0443\u0440 \u0412\u0430\u0434\u0438\u043c\u043e\u0432\"", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "*", ")", "from", "cartoon", "where", "written_by", "=", "value", ";"], "ru": ["select", "count", "(", "*", ")", "from", "cartoon", "where", "written_by", "=", "value", ";"]}, "masked_query": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\";", "question_pauq": {"ru": "\u0421\u043a\u043e\u043b\u044c\u043a\u043e \u043c\u0443\u043b\u044c\u0442\u0444\u0438\u043b\u044c\u043c\u043e\u0432 \u0441\u043e\u0437\u0434\u0430\u043b \u00ab\u0422\u0438\u043c\u0443\u0440 \u0412\u0430\u0434\u0438\u043c\u043e\u0432\u00bb?"}, "question": "How many cartoons were written by \"Joseph Kuhr\"?", "kb_id": "tvshow"}, {"id": "D_0591", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT count(*) FROM Cartoon WHERE Written_by = \"\u0422\u0438\u043c\u0443\u0440 \u0412\u0430\u0434\u0438\u043c\u043e\u0432\";"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 22, false], null], "\"Joseph Kuhr\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 22, false], null], "\"\u0422\u0438\u043c\u0443\u0440 \u0412\u0430\u0434\u0438\u043c\u043e\u0432\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "number", "of", "cartoones", "written", "by", "Joseph", "Kuhr", "?"], "ru": ["\u0421\u043a\u043e\u043b\u044c\u043a\u043e", "\u043c\u0443\u043b\u044c\u0442\u0444\u0438\u043b\u044c\u043c\u043e\u0432", "\u043d\u0430\u043f\u0438\u0441\u0430\u043b", "\u0422\u0438\u043c\u0443\u0440", "\u0412\u0430\u0434\u0438\u043c\u043e\u0432", "?"]}, "query_toks": {"en": ["select", "count", "(", "*", ")", "from", "cartoon", "where", "written_by", "=", "\"Joseph Kuhr\"", ";"], "ru": ["select", "count", "(", "*", ")", "from", "cartoon", "where", "written_by", "=", "\"\u0422\u0438\u043c\u0443\u0440 \u0412\u0430\u0434\u0438\u043c\u043e\u0432\"", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "*", ")", "from", "cartoon", "where", "written_by", "=", "value", ";"], "ru": ["select", "count", "(", "*", ")", "from", "cartoon", "where", "written_by", "=", "value", ";"]}, "masked_query": "SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\";", "question_pauq": {"ru": "\u0421\u043a\u043e\u043b\u044c\u043a\u043e \u043c\u0443\u043b\u044c\u0442\u0444\u0438\u043b\u044c\u043c\u043e\u0432 \u043d\u0430\u043f\u0438\u0441\u0430\u043b \u0422\u0438\u043c\u0443\u0440 \u0412\u0430\u0434\u0438\u043c\u043e\u0432?"}, "question": "What is the number of cartoones written by Joseph Kuhr?", "kb_id": "tvshow"}, {"id": "D_0592", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 20, false], null]], [0, [0, [0, 21, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["asc", [[0, [0, 23, false], null]]], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 20, false], null]], [0, [0, [0, 21, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["asc", [[0, [0, 23, false], null]]], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["list", "all", "cartoon", "titles", "and", "their", "directors", "ordered", "by", "their", "air", "date"], "ru": ["\u043f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0438\u0442\u044c", "\u0432\u0441\u0435", "\u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f", "\u043c\u0443\u043b\u044c\u0442\u0444\u0438\u043b\u044c\u043c\u043e\u0432", "\u0438", "\u0438\u0445", "\u0440\u0435\u0436\u0438\u0441\u0441\u0435\u0440\u043e\u0432", "\u043f\u043e", "\u0434\u0430\u0442\u0435", "\u0432\u044b\u0445\u043e\u0434\u0430", "\u0432", "\u044d\u0444\u0438\u0440"]}, "query_toks": {"en": ["select", "title", ",", "directed_by", "from", "cartoon", "order", "by", "original_air_date", ";"], "ru": ["select", "title", ",", "directed_by", "from", "cartoon", "order", "by", "original_air_date", ";"]}, "query_toks_no_values": {"en": ["select", "title", ",", "directed_by", "from", "cartoon", "order", "by", "original_air_date", ";"], "ru": ["select", "title", ",", "directed_by", "from", "cartoon", "order", "by", "original_air_date", ";"]}, "masked_query": "SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date;", "question_pauq": {"ru": "\u043f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0438\u0442\u044c \u0432\u0441\u0435 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f \u043c\u0443\u043b\u044c\u0442\u0444\u0438\u043b\u044c\u043c\u043e\u0432 \u0438 \u0438\u0445 \u0440\u0435\u0436\u0438\u0441\u0441\u0435\u0440\u043e\u0432 \u043f\u043e \u0434\u0430\u0442\u0435 \u0432\u044b\u0445\u043e\u0434\u0430 \u0432 \u044d\u0444\u0438\u0440"}, "question": "list all cartoon titles and their directors ordered by their air date", "kb_id": "tvshow"}, {"id": "D_0593", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 20, false], null]], [0, [0, [0, 21, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["asc", [[0, [0, 23, false], null]]], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 20, false], null]], [0, [0, [0, 21, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["asc", [[0, [0, 23, false], null]]], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "name", "and", "directors", "of", "all", "the", "cartoons", "that", "are", "ordered", "by", "air", "date", "?"], "ru": ["\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u044f", "\u0438", "\u0440\u0435\u0436\u0438\u0441\u0441\u0435\u0440\u044b", "\u0432\u0441\u0435\u0445", "\u043c\u0443\u043b\u044c\u0442\u0444\u0438\u043b\u044c\u043c\u043e\u0432", ",", "\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445", "\u043f\u043e", "\u0434\u0430\u0442\u0435", "\u0432\u044b\u0445\u043e\u0434\u0430", "\u0432", "\u044d\u0444\u0438\u0440"]}, "query_toks": {"en": ["select", "title", ",", "directed_by", "from", "cartoon", "order", "by", "original_air_date", ";"], "ru": ["select", "title", ",", "directed_by", "from", "cartoon", "order", "by", "original_air_date", ";"]}, "query_toks_no_values": {"en": ["select", "title", ",", "directed_by", "from", "cartoon", "order", "by", "original_air_date", ";"], "ru": ["select", "title", ",", "directed_by", "from", "cartoon", "order", "by", "original_air_date", ";"]}, "masked_query": "SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date;", "question_pauq": {"ru": "\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u044f \u0438 \u0440\u0435\u0436\u0438\u0441\u0441\u0435\u0440\u044b \u0432\u0441\u0435\u0445 \u043c\u0443\u043b\u044c\u0442\u0444\u0438\u043b\u044c\u043c\u043e\u0432, \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u043f\u043e \u0434\u0430\u0442\u0435 \u0432\u044b\u0445\u043e\u0434\u0430 \u0432 \u044d\u0444\u0438\u0440"}, "question": "What is the name and directors of all the cartoons that are ordered by air date?", "kb_id": "tvshow"}, {"id": "D_0594", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT Title FROM Cartoon WHERE Directed_by = \"\u0414\u0435\u043d\u0438\u0441 \u0423\u0441\u0442\u0438\u043d\u043e\u0432\" OR Directed_by = \"\u0411\u043e\u0433\u0434\u0430\u043d \u0427\u0443\u043f\u0440\u0438\u043a\u043e\u0432\";"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 20, false], null]]]], "where": [[false, 2, [0, [0, 21, false], null], "\"Ben Jones\"", null], "or", [false, 2, [0, [0, 21, false], null], "\"Brandon Vietti\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 20, false], null]]]], "where": [[false, 2, [0, [0, 21, false], null], "\"\u0414\u0435\u043d\u0438\u0441 \u0423\u0441\u0442\u0438\u043d\u043e\u0432\"", null], "or", [false, 2, [0, [0, 21, false], null], "\"\u0411\u043e\u0433\u0434\u0430\u043d \u0427\u0443\u043f\u0440\u0438\u043a\u043e\u0432\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["List", "the", "title", "of", "all", "cartoon", "directed", "by", "``", "Ben", "Jones", "''", "or", "``", "Brandon", "Vietti", "''", "."], "ru": ["\u041f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0438\u0442\u0435", "\u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f", "\u0432\u0441\u0435\u0445", "\u043c\u0443\u043b\u044c\u0442\u0444\u0438\u043b\u044c\u043c\u043e\u0432", ",", "\u043f\u043e\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0445", "\u00ab", "\u0414\u0435\u043d\u0438\u0441\u043e\u043c", "\u0423\u0441\u0442\u0438\u043d\u043e\u0432\u044b\u043c", "\u00bb", "\u0438\u043b\u0438", "\u00ab", "\u0411\u043e\u0433\u0434\u0430\u043d\u043e\u043c", "\u0427\u0443\u043f\u0440\u0438\u043a\u043e\u0432\u044b\u043c", "\u00bb", "."]}, "query_toks": {"en": ["select", "title", "from", "cartoon", "where", "directed_by", "=", "\"Ben Jones\"", "or", "directed_by", "=", "\"Brandon Vietti\"", ";"], "ru": ["select", "title", "from", "cartoon", "where", "directed_by", "=", "\"\u0414\u0435\u043d\u0438\u0441 \u0423\u0441\u0442\u0438\u043d\u043e\u0432\"", "or", "directed_by", "=", "\"\u0411\u043e\u0433\u0434\u0430\u043d \u0427\u0443\u043f\u0440\u0438\u043a\u043e\u0432\"", ";"]}, "query_toks_no_values": {"en": ["select", "title", "from", "cartoon", "where", "directed_by", "=", "value", "or", "directed_by", "=", "value", ";"], "ru": ["select", "title", "from", "cartoon", "where", "directed_by", "=", "value", "or", "directed_by", "=", "value", ";"]}, "masked_query": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\";", "question_pauq": {"ru": "\u041f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0438\u0442\u0435 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f \u0432\u0441\u0435\u0445 \u043c\u0443\u043b\u044c\u0442\u0444\u0438\u043b\u044c\u043c\u043e\u0432, \u043f\u043e\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0445 \u00ab\u0414\u0435\u043d\u0438\u0441\u043e\u043c \u0423\u0441\u0442\u0438\u043d\u043e\u0432\u044b\u043c\u00bb \u0438\u043b\u0438 \u00ab\u0411\u043e\u0433\u0434\u0430\u043d\u043e\u043c \u0427\u0443\u043f\u0440\u0438\u043a\u043e\u0432\u044b\u043c\u00bb."}, "question": "List the title of all cartoon directed by \"Ben Jones\" or \"Brandon Vietti\".", "kb_id": "tvshow"}, {"id": "D_0595", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT Title FROM Cartoon WHERE Directed_by = \"\u0414\u0435\u043d\u0438\u0441 \u0423\u0441\u0442\u0438\u043d\u043e\u0432\" OR Directed_by = \"\u0411\u043e\u0433\u0434\u0430\u043d \u0427\u0443\u043f\u0440\u0438\u043a\u043e\u0432\";"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 20, false], null]]]], "where": [[false, 2, [0, [0, 21, false], null], "\"Ben Jones\"", null], "or", [false, 2, [0, [0, 21, false], null], "\"Brandon Vietti\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 20, false], null]]]], "where": [[false, 2, [0, [0, 21, false], null], "\"\u0414\u0435\u043d\u0438\u0441 \u0423\u0441\u0442\u0438\u043d\u043e\u0432\"", null], "or", [false, 2, [0, [0, 21, false], null], "\"\u0411\u043e\u0433\u0434\u0430\u043d \u0427\u0443\u043f\u0440\u0438\u043a\u043e\u0432\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "the", "titles", "of", "all", "cartoons", "directed", "by", "Ben", "Jones", "or", "Brandon", "Vietti", "?"], "ru": ["\u041a\u0430\u043a", "\u043d\u0430\u0437\u044b\u0432\u0430\u044e\u0442\u0441\u044f", "\u0432\u0441\u0435", "\u043c\u0443\u043b\u044c\u0442\u0444\u0438\u043b\u044c\u043c\u044b", "\u0414\u0435\u043d\u0438\u0441\u0430", "\u0423\u0441\u0442\u0438\u043d\u043e\u0432\u0430", "\u0438\u043b\u0438", "\u0411\u043e\u0433\u0434\u0430\u043d\u0430", "\u0427\u0443\u043f\u0440\u0438\u043a\u043e\u0432\u0430", "?"]}, "query_toks": {"en": ["select", "title", "from", "cartoon", "where", "directed_by", "=", "\"Ben Jones\"", "or", "directed_by", "=", "\"Brandon Vietti\"", ";"], "ru": ["select", "title", "from", "cartoon", "where", "directed_by", "=", "\"\u0414\u0435\u043d\u0438\u0441 \u0423\u0441\u0442\u0438\u043d\u043e\u0432\"", "or", "directed_by", "=", "\"\u0411\u043e\u0433\u0434\u0430\u043d \u0427\u0443\u043f\u0440\u0438\u043a\u043e\u0432\"", ";"]}, "query_toks_no_values": {"en": ["select", "title", "from", "cartoon", "where", "directed_by", "=", "value", "or", "directed_by", "=", "value", ";"], "ru": ["select", "title", "from", "cartoon", "where", "directed_by", "=", "value", "or", "directed_by", "=", "value", ";"]}, "masked_query": "SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\";", "question_pauq": {"ru": "\u041a\u0430\u043a \u043d\u0430\u0437\u044b\u0432\u0430\u044e\u0442\u0441\u044f \u0432\u0441\u0435 \u043c\u0443\u043b\u044c\u0442\u0444\u0438\u043b\u044c\u043c\u044b \u0414\u0435\u043d\u0438\u0441\u0430 \u0423\u0441\u0442\u0438\u043d\u043e\u0432\u0430 \u0438\u043b\u0438 \u0411\u043e\u0433\u0434\u0430\u043d\u0430 \u0427\u0443\u043f\u0440\u0438\u043a\u043e\u0432\u0430?"}, "question": "What are the titles of all cartoons directed by Ben Jones or Brandon Vietti?", "kb_id": "tvshow"}, {"id": "D_0596", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 3, false], null]], [3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [[0, 3, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 3, false], null]], [3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [[0, 3, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Which", "country", "has", "the", "most", "of", "TV", "Channels", "?", "List", "the", "country", "and", "number", "of", "TV", "Channels", "it", "has", "."], "ru": ["\u0412", "\u043a\u0430\u043a\u043e\u0439", "\u0441\u0442\u0440\u0430\u043d\u0435", "\u0431\u043e\u043b\u044c\u0448\u0435", "\u0432\u0441\u0435\u0433\u043e", "\u0442\u0435\u043b\u0435\u043a\u0430\u043d\u0430\u043b\u043e\u0432", "?", "\u0423\u043a\u0430\u0436\u0438\u0442\u0435", "\u0441\u0442\u0440\u0430\u043d\u0443", "\u0438", "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e", "\u0438\u043c\u0435\u044e\u0449\u0438\u0445\u0441\u044f", "\u0432", "\u043d\u0435\u0439", "\u0442\u0435\u043b\u0435\u043a\u0430\u043d\u0430\u043b\u043e\u0432", "."]}, "query_toks": {"en": ["select", "country", ",", "count", "(", "*", ")", "from", "tv_channel", "group", "by", "country", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"], "ru": ["select", "country", ",", "count", "(", "*", ")", "from", "tv_channel", "group", "by", "country", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"]}, "query_toks_no_values": {"en": ["select", "country", ",", "count", "(", "*", ")", "from", "tv_channel", "group", "by", "country", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"], "ru": ["select", "country", ",", "count", "(", "*", ")", "from", "tv_channel", "group", "by", "country", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"]}, "masked_query": "SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;", "question_pauq": {"ru": "\u0412 \u043a\u0430\u043a\u043e\u0439 \u0441\u0442\u0440\u0430\u043d\u0435 \u0431\u043e\u043b\u044c\u0448\u0435 \u0432\u0441\u0435\u0433\u043e \u0442\u0435\u043b\u0435\u043a\u0430\u043d\u0430\u043b\u043e\u0432? \u0423\u043a\u0430\u0436\u0438\u0442\u0435 \u0441\u0442\u0440\u0430\u043d\u0443 \u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0438\u043c\u0435\u044e\u0449\u0438\u0445\u0441\u044f \u0432 \u043d\u0435\u0439 \u0442\u0435\u043b\u0435\u043a\u0430\u043d\u0430\u043b\u043e\u0432."}, "question": "Which country has the most of TV Channels? List the country and number of TV Channels it has.", "kb_id": "tvshow"}, {"id": "D_0597", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 3, false], null]], [3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [[0, 3, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 3, false], null]], [3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [[0, 3, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "country", "with", "the", "most", "number", "of", "TV", "Channels", "and", "how", "many", "does", "it", "have", "?"], "ru": ["\u0412", "\u043a\u0430\u043a\u043e\u0439", "\u0441\u0442\u0440\u0430\u043d\u0435", "\u0431\u043e\u043b\u044c\u0448\u0435", "\u0432\u0441\u0435\u0433\u043e", "\u0442\u0435\u043b\u0435\u043a\u0430\u043d\u0430\u043b\u043e\u0432", "\u0438", "\u0441\u043a\u043e\u043b\u044c\u043a\u043e", "\u0438\u0445", "?"]}, "query_toks": {"en": ["select", "country", ",", "count", "(", "*", ")", "from", "tv_channel", "group", "by", "country", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"], "ru": ["select", "country", ",", "count", "(", "*", ")", "from", "tv_channel", "group", "by", "country", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"]}, "query_toks_no_values": {"en": ["select", "country", ",", "count", "(", "*", ")", "from", "tv_channel", "group", "by", "country", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"], "ru": ["select", "country", ",", "count", "(", "*", ")", "from", "tv_channel", "group", "by", "country", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"]}, "masked_query": "SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;", "question_pauq": {"ru": "\u0412 \u043a\u0430\u043a\u043e\u0439 \u0441\u0442\u0440\u0430\u043d\u0435 \u0431\u043e\u043b\u044c\u0448\u0435 \u0432\u0441\u0435\u0433\u043e \u0442\u0435\u043b\u0435\u043a\u0430\u043d\u0430\u043b\u043e\u0432 \u0438 \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0438\u0445?"}, "question": "What is the country with the most number of TV Channels and how many does it have?", "kb_id": "tvshow"}, {"id": "D_0598", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[3, [0, [0, 2, true], null]], [3, [0, [0, 5, true], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[3, [0, [0, 2, true], null]], [3, [0, [0, 5, true], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["List", "the", "number", "of", "different", "series", "names", "and", "contents", "in", "the", "TV", "Channel", "table", "."], "ru": ["\u0423\u043a\u0430\u0436\u0438\u0442\u0435", "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e", "\u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0439", "\u0438", "\u0441\u043e\u0434\u0435\u0440\u0436\u0430\u043d\u0438\u044f", "\u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445", "\u0441\u0435\u0440\u0438\u0430\u043b\u043e\u0432", "\u0432", "\u0442\u0430\u0431\u043b\u0438\u0446\u0435", "\u0442\u0435\u043b\u0435\u043a\u0430\u043d\u0430\u043b\u043e\u0432", "."]}, "query_toks": {"en": ["select", "count", "(", "distinct", "series_name", ")", ",", "count", "(", "distinct", "content", ")", "from", "tv_channel", ";"], "ru": ["select", "count", "(", "distinct", "series_name", ")", ",", "count", "(", "distinct", "content", ")", "from", "tv_channel", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "distinct", "series_name", ")", ",", "count", "(", "distinct", "content", ")", "from", "tv_channel", ";"], "ru": ["select", "count", "(", "distinct", "series_name", ")", ",", "count", "(", "distinct", "content", ")", "from", "tv_channel", ";"]}, "masked_query": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;", "question_pauq": {"ru": "\u0423\u043a\u0430\u0436\u0438\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0439 \u0438 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u043d\u0438\u044f \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u0441\u0435\u0440\u0438\u0430\u043b\u043e\u0432 \u0432 \u0442\u0430\u0431\u043b\u0438\u0446\u0435 \u0442\u0435\u043b\u0435\u043a\u0430\u043d\u0430\u043b\u043e\u0432."}, "question": "List the number of different series names and contents in the TV Channel table.", "kb_id": "tvshow"}, {"id": "D_0599", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[3, [0, [0, 2, true], null]], [3, [0, [0, 5, true], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[3, [0, [0, 2, true], null]], [3, [0, [0, 5, true], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["How", "many", "different", "series", "and", "contents", "are", "listed", "in", "the", "TV", "Channel", "table", "?"], "ru": ["\u0421\u043a\u043e\u043b\u044c\u043a\u043e", "\u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445", "\u0441\u0435\u0440\u0438\u0430\u043b\u043e\u0432", "\u0438", "\u0441\u043e\u0434\u0435\u0440\u0436\u0430\u043d\u0438\u0439", "\u0443\u043a\u0430\u0437\u0430\u043d\u043e", "\u0432", "\u0442\u0430\u0431\u043b\u0438\u0446\u0435", "\u0442\u0435\u043b\u0435\u043a\u0430\u043d\u0430\u043b\u043e\u0432", "?"]}, "query_toks": {"en": ["select", "count", "(", "distinct", "series_name", ")", ",", "count", "(", "distinct", "content", ")", "from", "tv_channel", ";"], "ru": ["select", "count", "(", "distinct", "series_name", ")", ",", "count", "(", "distinct", "content", ")", "from", "tv_channel", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "distinct", "series_name", ")", ",", "count", "(", "distinct", "content", ")", "from", "tv_channel", ";"], "ru": ["select", "count", "(", "distinct", "series_name", ")", ",", "count", "(", "distinct", "content", ")", "from", "tv_channel", ";"]}, "masked_query": "SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;", "question_pauq": {"ru": "\u0421\u043a\u043e\u043b\u044c\u043a\u043e \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u0441\u0435\u0440\u0438\u0430\u043b\u043e\u0432 \u0438 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u043d\u0438\u0439 \u0443\u043a\u0430\u0437\u0430\u043d\u043e \u0432 \u0442\u0430\u0431\u043b\u0438\u0446\u0435 \u0442\u0435\u043b\u0435\u043a\u0430\u043d\u0430\u043b\u043e\u0432?"}, "question": "How many different series and contents are listed in the TV Channel table?", "kb_id": "tvshow"}, {"id": "D_0600", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT Content FROM TV_Channel WHERE series_name = \"\u041f\u044f\u0442\u043d\u0438\u0446\u0430\";"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 5, false], null]]]], "where": [[false, 2, [0, [0, 2, false], null], "\"Sky Radio\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 5, false], null]]]], "where": [[false, 2, [0, [0, 2, false], null], "\"\u041f\u044f\u0442\u043d\u0438\u0446\u0430\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "content", "of", "TV", "Channel", "with", "serial", "name", "``", "Sky", "Radio", "''", "?"], "ru": ["\u0427\u0442\u043e", "\u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442", "\u0441\u043e\u0431\u043e\u0439", "\u0441\u0435\u0440\u0438\u0430\u043b", "\u0441", "\u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435\u043c", "\u201c", "\u041f\u044f\u0442\u043d\u0438\u0446\u0430", "''", "?"]}, "query_toks": {"en": ["select", "content", "from", "tv_channel", "where", "series_name", "=", "\"Sky Radio\"", ";"], "ru": ["select", "content", "from", "tv_channel", "where", "series_name", "=", "\"\u041f\u044f\u0442\u043d\u0438\u0446\u0430\"", ";"]}, "query_toks_no_values": {"en": ["select", "content", "from", "tv_channel", "where", "series_name", "=", "value", ";"], "ru": ["select", "content", "from", "tv_channel", "where", "series_name", "=", "value", ";"]}, "masked_query": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\";", "question_pauq": {"ru": "\u0427\u0442\u043e \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u043e\u0431\u043e\u0439 \u0441\u0435\u0440\u0438\u0430\u043b \u0441 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435\u043c \u201c\u041f\u044f\u0442\u043d\u0438\u0446\u0430\"?"}, "question": "What is the content of TV Channel with serial name \"Sky Radio\"?", "kb_id": "tvshow"}, {"id": "D_0601", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT Content FROM TV_Channel WHERE series_name = \"\u041f\u044f\u0442\u043d\u0438\u0446\u0430\";"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 5, false], null]]]], "where": [[false, 2, [0, [0, 2, false], null], "\"Sky Radio\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 5, false], null]]]], "where": [[false, 2, [0, [0, 2, false], null], "\"\u041f\u044f\u0442\u043d\u0438\u0446\u0430\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "content", "of", "the", "series", "Sky", "Radio", "?"], "ru": ["\u041a\u0430\u043a\u043e\u0432\u043e", "\u0441\u043e\u0434\u0435\u0440\u0436\u0430\u043d\u0438\u0435", "\u0441\u0435\u0440\u0438\u0430\u043b\u0430", "\u041f\u044f\u0442\u043d\u0438\u0446\u0430", "?"]}, "query_toks": {"en": ["select", "content", "from", "tv_channel", "where", "series_name", "=", "\"Sky Radio\"", ";"], "ru": ["select", "content", "from", "tv_channel", "where", "series_name", "=", "\"\u041f\u044f\u0442\u043d\u0438\u0446\u0430\"", ";"]}, "query_toks_no_values": {"en": ["select", "content", "from", "tv_channel", "where", "series_name", "=", "value", ";"], "ru": ["select", "content", "from", "tv_channel", "where", "series_name", "=", "value", ";"]}, "masked_query": "SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\";", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0432\u043e \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u043d\u0438\u0435 \u0441\u0435\u0440\u0438\u0430\u043b\u0430 \u041f\u044f\u0442\u043d\u0438\u0446\u0430?"}, "question": "What is the content of the series Sky Radio?", "kb_id": "tvshow"}, {"id": "D_0602", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"\u041f\u044f\u0442\u043d\u0438\u0446\u0430\";"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [[false, 2, [0, [0, 2, false], null], "\"Sky Radio\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [[false, 2, [0, [0, 2, false], null], "\"\u041f\u044f\u0442\u043d\u0438\u0446\u0430\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "Package", "Option", "of", "TV", "Channel", "with", "serial", "name", "``", "Sky", "Radio", "''", "?"], "ru": ["\u0427\u0442\u043e", "\u0442\u0430\u043a\u043e\u0435", "\u043f\u0430\u043a\u0435\u0442\u043d\u044b\u0439", "\u0432\u0430\u0440\u0438\u0430\u043d\u0442", "\u0441\u0435\u0440\u0438\u0430\u043b\u0430", "\u043f\u043e\u0434", "\u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435\u043c", "\u201c", "\u041f\u044f\u0442\u043d\u0438\u0446\u0430", "\u201d", "?"]}, "query_toks": {"en": ["select", "package_option", "from", "tv_channel", "where", "series_name", "=", "\"Sky Radio\"", ";"], "ru": ["select", "package_option", "from", "tv_channel", "where", "series_name", "=", "\"\u041f\u044f\u0442\u043d\u0438\u0446\u0430\"", ";"]}, "query_toks_no_values": {"en": ["select", "package_option", "from", "tv_channel", "where", "series_name", "=", "value", ";"], "ru": ["select", "package_option", "from", "tv_channel", "where", "series_name", "=", "value", ";"]}, "masked_query": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\";", "question_pauq": {"ru": "\u0427\u0442\u043e \u0442\u0430\u043a\u043e\u0435 \u043f\u0430\u043a\u0435\u0442\u043d\u044b\u0439 \u0432\u0430\u0440\u0438\u0430\u043d\u0442 \u0441\u0435\u0440\u0438\u0430\u043b\u0430 \u043f\u043e\u0434 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435\u043c \u201c\u041f\u044f\u0442\u043d\u0438\u0446\u0430\u201d?"}, "question": "What is the Package Option of TV Channel with serial name \"Sky Radio\"?", "kb_id": "tvshow"}, {"id": "D_0603", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"\u041f\u044f\u0442\u043d\u0438\u0446\u0430\";"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [[false, 2, [0, [0, 2, false], null], "\"Sky Radio\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [[false, 2, [0, [0, 2, false], null], "\"\u041f\u044f\u0442\u043d\u0438\u0446\u0430\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "the", "Package", "Options", "of", "the", "TV", "Channels", "whose", "series", "names", "are", "Sky", "Radio", "?"], "ru": ["\u041a\u0430\u043a\u0438\u0435", "\u043f\u0430\u043a\u0435\u0442\u044b", "\u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0435\u043d\u0438\u0439", "\u0438\u043c\u0435\u044e\u0442", "\u0441\u0435\u0440\u0438\u0430\u043b\u044b", ",", "\u043a\u043e\u0442\u043e\u0440\u044b\u0435", "\u043d\u0430\u0437\u044b\u0432\u0430\u044e\u0442\u0441\u044f", "\u041f\u044f\u0442\u043d\u0438\u0446\u0430", "?"]}, "query_toks": {"en": ["select", "package_option", "from", "tv_channel", "where", "series_name", "=", "\"Sky Radio\"", ";"], "ru": ["select", "package_option", "from", "tv_channel", "where", "series_name", "=", "\"\u041f\u044f\u0442\u043d\u0438\u0446\u0430\"", ";"]}, "query_toks_no_values": {"en": ["select", "package_option", "from", "tv_channel", "where", "series_name", "=", "value", ";"], "ru": ["select", "package_option", "from", "tv_channel", "where", "series_name", "=", "value", ";"]}, "masked_query": "SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\";", "question_pauq": {"ru": "\u041a\u0430\u043a\u0438\u0435 \u043f\u0430\u043a\u0435\u0442\u044b \u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0435\u043d\u0438\u0439 \u0438\u043c\u0435\u044e\u0442 \u0441\u0435\u0440\u0438\u0430\u043b\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0430\u0437\u044b\u0432\u0430\u044e\u0442\u0441\u044f \u041f\u044f\u0442\u043d\u0438\u0446\u0430?"}, "question": "What are the Package Options of the TV Channels whose series names are Sky Radio?", "kb_id": "tvshow"}, {"id": "D_0604", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"\u0410\u043b\u0431\u0430\u043d\u0441\u043a\u0438\u0439\";"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 4, false], null], "\"English\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 4, false], null], "\"\u0410\u043b\u0431\u0430\u043d\u0441\u043a\u0438\u0439\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["How", "many", "TV", "Channel", "using", "language", "English", "?"], "ru": ["\u0421\u043a\u043e\u043b\u044c\u043a\u043e", "\u0442\u0435\u043b\u0435\u043a\u0430\u043d\u0430\u043b\u043e\u0432", "\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442", "\u0430\u043b\u0431\u0430\u043d\u0441\u043a\u0438\u0439", "\u044f\u0437\u044b\u043a", "?"]}, "query_toks": {"en": ["select", "count", "(", "*", ")", "from", "tv_channel", "where", "language", "=", "\"English\"", ";"], "ru": ["select", "count", "(", "*", ")", "from", "tv_channel", "where", "language", "=", "\"\u0410\u043b\u0431\u0430\u043d\u0441\u043a\u0438\u0439\"", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "*", ")", "from", "tv_channel", "where", "language", "=", "value", ";"], "ru": ["select", "count", "(", "*", ")", "from", "tv_channel", "where", "language", "=", "value", ";"]}, "masked_query": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\";", "question_pauq": {"ru": "\u0421\u043a\u043e\u043b\u044c\u043a\u043e \u0442\u0435\u043b\u0435\u043a\u0430\u043d\u0430\u043b\u043e\u0432 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442 \u0430\u043b\u0431\u0430\u043d\u0441\u043a\u0438\u0439 \u044f\u0437\u044b\u043a?"}, "question": "How many TV Channel using language English?", "kb_id": "tvshow"}, {"id": "D_0605", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"\u0410\u043b\u0431\u0430\u043d\u0441\u043a\u0438\u0439\";"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 4, false], null], "\"English\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 4, false], null], "\"\u0410\u043b\u0431\u0430\u043d\u0441\u043a\u0438\u0439\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["How", "many", "TV", "Channels", "use", "the", "English", "language", "?"], "ru": ["\u0421\u043a\u043e\u043b\u044c\u043a\u043e", "\u0442\u0435\u043b\u0435\u043a\u0430\u043d\u0430\u043b\u043e\u0432", "\u043d\u0430", "\u0430\u043b\u0431\u0430\u043d\u0441\u043a\u043e\u043c", "\u044f\u0437\u044b\u043a\u0435", "?"]}, "query_toks": {"en": ["select", "count", "(", "*", ")", "from", "tv_channel", "where", "language", "=", "\"English\"", ";"], "ru": ["select", "count", "(", "*", ")", "from", "tv_channel", "where", "language", "=", "\"\u0410\u043b\u0431\u0430\u043d\u0441\u043a\u0438\u0439\"", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "*", ")", "from", "tv_channel", "where", "language", "=", "value", ";"], "ru": ["select", "count", "(", "*", ")", "from", "tv_channel", "where", "language", "=", "value", ";"]}, "masked_query": "SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\";", "question_pauq": {"ru": "\u0421\u043a\u043e\u043b\u044c\u043a\u043e \u0442\u0435\u043b\u0435\u043a\u0430\u043d\u0430\u043b\u043e\u0432 \u043d\u0430 \u0430\u043b\u0431\u0430\u043d\u0441\u043a\u043e\u043c \u044f\u0437\u044b\u043a\u0435?"}, "question": "How many TV Channels use the English language?", "kb_id": "tvshow"}, {"id": "D_0606", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 4, false], null]], [3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [[0, 4, false]], "having": [], "orderBy": ["asc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 4, false], null]], [3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [[0, 4, false]], "having": [], "orderBy": ["asc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["List", "the", "language", "used", "least", "number", "of", "TV", "Channel", ".", "List", "language", "and", "number", "of", "TV", "Channel", "."], "ru": ["\u0423\u043a\u0430\u0436\u0438\u0442\u0435", "\u044f\u0437\u044b\u043a", ",", "\u043d\u0430", "\u043a\u043e\u0442\u043e\u0440\u043e\u043c", "\u0442\u0440\u0430\u043d\u0441\u043b\u0438\u0440\u0443\u044e\u0442", "\u043d\u0430\u0438\u043c\u0435\u043d\u044c\u0448\u0435\u0435", "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e", "\u0442\u0435\u043b\u0435\u043a\u0430\u043d\u0430\u043b\u043e\u0432", ".", "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c", "\u044f\u0437\u044b\u043a", "\u0438", "\u043d\u043e\u043c\u0435\u0440", "\u0442\u0435\u043b\u0435\u043a\u0430\u043d\u0430\u043b\u0430", "."]}, "query_toks": {"en": ["select", "language", ",", "count", "(", "*", ")", "from", "tv_channel", "group", "by", "language", "order", "by", "count", "(", "*", ")", "asc", "limit", "1", ";"], "ru": ["select", "language", ",", "count", "(", "*", ")", "from", "tv_channel", "group", "by", "language", "order", "by", "count", "(", "*", ")", "asc", "limit", "1", ";"]}, "query_toks_no_values": {"en": ["select", "language", ",", "count", "(", "*", ")", "from", "tv_channel", "group", "by", "language", "order", "by", "count", "(", "*", ")", "asc", "limit", "1", ";"], "ru": ["select", "language", ",", "count", "(", "*", ")", "from", "tv_channel", "group", "by", "language", "order", "by", "count", "(", "*", ")", "asc", "limit", "1", ";"]}, "masked_query": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;", "question_pauq": {"ru": "\u0423\u043a\u0430\u0436\u0438\u0442\u0435 \u044f\u0437\u044b\u043a, \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u0442\u0440\u0430\u043d\u0441\u043b\u0438\u0440\u0443\u044e\u0442 \u043d\u0430\u0438\u043c\u0435\u043d\u044c\u0448\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0442\u0435\u043b\u0435\u043a\u0430\u043d\u0430\u043b\u043e\u0432. \u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u044f\u0437\u044b\u043a \u0438 \u043d\u043e\u043c\u0435\u0440 \u0442\u0435\u043b\u0435\u043a\u0430\u043d\u0430\u043b\u0430."}, "question": "List the language used least number of TV Channel. List language and number of TV Channel.", "kb_id": "tvshow"}, {"id": "D_0607", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 4, false], null]], [3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [[0, 4, false]], "having": [], "orderBy": ["asc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 4, false], null]], [3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [[0, 4, false]], "having": [], "orderBy": ["asc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "the", "languages", "used", "by", "the", "least", "number", "of", "TV", "Channels", "and", "how", "many", "channels", "use", "it", "?"], "ru": ["\u041a\u0430\u043a\u0438\u0435", "\u044f\u0437\u044b\u043a\u0438", "\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442", "\u043d\u0430\u0438\u043c\u0435\u043d\u044c\u0448\u0435\u0435", "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e", "\u0442\u0435\u043b\u0435\u043a\u0430\u043d\u0430\u043b\u043e\u0432", "\u0438", "\u0441\u043a\u043e\u043b\u044c\u043a\u043e", "\u043a\u0430\u043d\u0430\u043b\u043e\u0432", "\u0438\u0445", "\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442", "?"]}, "query_toks": {"en": ["select", "language", ",", "count", "(", "*", ")", "from", "tv_channel", "group", "by", "language", "order", "by", "count", "(", "*", ")", "asc", "limit", "1", ";"], "ru": ["select", "language", ",", "count", "(", "*", ")", "from", "tv_channel", "group", "by", "language", "order", "by", "count", "(", "*", ")", "asc", "limit", "1", ";"]}, "query_toks_no_values": {"en": ["select", "language", ",", "count", "(", "*", ")", "from", "tv_channel", "group", "by", "language", "order", "by", "count", "(", "*", ")", "asc", "limit", "1", ";"], "ru": ["select", "language", ",", "count", "(", "*", ")", "from", "tv_channel", "group", "by", "language", "order", "by", "count", "(", "*", ")", "asc", "limit", "1", ";"]}, "masked_query": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;", "question_pauq": {"ru": "\u041a\u0430\u043a\u0438\u0435 \u044f\u0437\u044b\u043a\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442 \u043d\u0430\u0438\u043c\u0435\u043d\u044c\u0448\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0442\u0435\u043b\u0435\u043a\u0430\u043d\u0430\u043b\u043e\u0432 \u0438 \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043a\u0430\u043d\u0430\u043b\u043e\u0432 \u0438\u0445 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442?"}, "question": "What are the languages used by the least number of TV Channels and how many channels use it?", "kb_id": "tvshow"}, {"id": "D_0608", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 4, false], null]], [3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [[0, 4, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 4, false], null]], [3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [[0, 4, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["List", "each", "language", "and", "the", "number", "of", "TV", "Channels", "using", "it", "."], "ru": ["\u041f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0438\u0442\u0435", "\u043a\u0430\u0436\u0434\u044b\u0439", "\u044f\u0437\u044b\u043a", "\u0438", "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e", "\u0442\u0435\u043b\u0435\u043a\u0430\u043d\u0430\u043b\u043e\u0432", ",", "\u043a\u043e\u0442\u043e\u0440\u044b\u0435", "\u0435\u0433\u043e", "\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442", "."]}, "query_toks": {"en": ["select", "language", ",", "count", "(", "*", ")", "from", "tv_channel", "group", "by", "language", ";"], "ru": ["select", "language", ",", "count", "(", "*", ")", "from", "tv_channel", "group", "by", "language", ";"]}, "query_toks_no_values": {"en": ["select", "language", ",", "count", "(", "*", ")", "from", "tv_channel", "group", "by", "language", ";"], "ru": ["select", "language", ",", "count", "(", "*", ")", "from", "tv_channel", "group", "by", "language", ";"]}, "masked_query": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE;", "question_pauq": {"ru": "\u041f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0438\u0442\u0435 \u043a\u0430\u0436\u0434\u044b\u0439 \u044f\u0437\u044b\u043a \u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0442\u0435\u043b\u0435\u043a\u0430\u043d\u0430\u043b\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0435\u0433\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442."}, "question": "List each language and the number of TV Channels using it.", "kb_id": "tvshow"}, {"id": "D_0609", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 4, false], null]], [3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [[0, 4, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 4, false], null]], [3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [[0, 4, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["For", "each", "language", ",", "list", "the", "number", "of", "TV", "Channels", "that", "use", "it", "."], "ru": ["\u0414\u043b\u044f", "\u043a\u0430\u0436\u0434\u043e\u0433\u043e", "\u044f\u0437\u044b\u043a\u0430", "\u0443\u043a\u0430\u0436\u0438\u0442\u0435", "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e", "\u0442\u0435\u043b\u0435\u043a\u0430\u043d\u0430\u043b\u043e\u0432", ",", "\u043a\u043e\u0442\u043e\u0440\u044b\u0435", "\u0435\u0433\u043e", "\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442", "."]}, "query_toks": {"en": ["select", "language", ",", "count", "(", "*", ")", "from", "tv_channel", "group", "by", "language", ";"], "ru": ["select", "language", ",", "count", "(", "*", ")", "from", "tv_channel", "group", "by", "language", ";"]}, "query_toks_no_values": {"en": ["select", "language", ",", "count", "(", "*", ")", "from", "tv_channel", "group", "by", "language", ";"], "ru": ["select", "language", ",", "count", "(", "*", ")", "from", "tv_channel", "group", "by", "language", ";"]}, "masked_query": "SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE;", "question_pauq": {"ru": "\u0414\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u044f\u0437\u044b\u043a\u0430 \u0443\u043a\u0430\u0436\u0438\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0442\u0435\u043b\u0435\u043a\u0430\u043d\u0430\u043b\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0435\u0433\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442."}, "question": "For each language, list the number of TV Channels that use it.", "kb_id": "tvshow"}, {"id": "D_0610", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"\u0421\u043c\u0435\u0448\u0430\u0440\u0438\u043a\u0438\";"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 25, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [[false, 2, [0, [0, 20, false], null], "\"The Rise of the Blue Beetle!\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 25, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [[false, 2, [0, [0, 20, false], null], "\"\u0421\u043c\u0435\u0448\u0430\u0440\u0438\u043a\u0438\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "TV", "Channel", "that", "shows", "the", "cartoon", "``", "The", "Rise", "of", "the", "Blue", "Beetle", "!", "''", "?", "List", "the", "TV", "Channel", "'s", "series", "name", "."], "ru": ["\u041d\u0430", "\u043a\u0430\u043a\u043e\u043c", "\u0442\u0435\u043b\u0435\u043a\u0430\u043d\u0430\u043b\u0435", "\u0438\u0434\u0435\u0442", "\u043c\u0443\u043b\u044c\u0442\u0444\u0438\u043b\u044c\u043c", "\u00ab", "\u0421\u043c\u0435\u0448\u0430\u0440\u0438\u043a\u0438", "\u00bb", "?", "\u0423\u043a\u0430\u0436\u0438\u0442\u0435", "\u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435", "\u0442\u0435\u043b\u0435\u043a\u0430\u043d\u0430\u043b\u0430", "."]}, "query_toks": {"en": ["select", "t1.series_name", "from", "tv_channel", "as", "t1", "join", "cartoon", "as", "t2", "on", "t1.id", "=", "t2.channel", "where", "t2.title", "=", "\"The Rise of the Blue Beetle!\"", ";"], "ru": ["select", "t1.series_name", "from", "tv_channel", "as", "t1", "join", "cartoon", "as", "t2", "on", "t1.id", "=", "t2.channel", "where", "t2.title", "=", "\"\u0421\u043c\u0435\u0448\u0430\u0440\u0438\u043a\u0438\"", ";"]}, "query_toks_no_values": {"en": ["select", "t1.series_name", "from", "tv_channel", "as", "t1", "join", "cartoon", "as", "t2", "on", "t1.id", "=", "t2.channel", "where", "t2.title", "=", "value", ";"], "ru": ["select", "t1.series_name", "from", "tv_channel", "as", "t1", "join", "cartoon", "as", "t2", "on", "t1.id", "=", "t2.channel", "where", "t2.title", "=", "value", ";"]}, "masked_query": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\";", "question_pauq": {"ru": "\u041d\u0430 \u043a\u0430\u043a\u043e\u043c \u0442\u0435\u043b\u0435\u043a\u0430\u043d\u0430\u043b\u0435 \u0438\u0434\u0435\u0442 \u043c\u0443\u043b\u044c\u0442\u0444\u0438\u043b\u044c\u043c \u00ab\u0421\u043c\u0435\u0448\u0430\u0440\u0438\u043a\u0438\u00bb? \u0423\u043a\u0430\u0436\u0438\u0442\u0435 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u0442\u0435\u043b\u0435\u043a\u0430\u043d\u0430\u043b\u0430."}, "question": "What is the TV Channel that shows the cartoon \"The Rise of the Blue Beetle!\"? List the TV Channel's series name.", "kb_id": "tvshow"}, {"id": "D_0611", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"\u0421\u043c\u0435\u0448\u0430\u0440\u0438\u043a\u0438\";"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 25, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [[false, 2, [0, [0, 20, false], null], "\"The Rise of the Blue Beetle!\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 25, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [[false, 2, [0, [0, 20, false], null], "\"\u0421\u043c\u0435\u0448\u0430\u0440\u0438\u043a\u0438\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "series", "name", "of", "the", "TV", "Channel", "that", "shows", "the", "cartoon", "``", "The", "Rise", "of", "the", "Blue", "Beetle", "''", "?"], "ru": ["\u041a\u0430\u043a", "\u043d\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f", "\u0442\u0435\u043b\u0435\u043a\u0430\u043d\u0430\u043b", ",", "\u043d\u0430", "\u043a\u043e\u0442\u043e\u0440\u043e\u043c", "\u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u044e\u0442", "\u043c\u0443\u043b\u044c\u0442\u0444\u0438\u043b\u044c\u043c", "\u00ab", "\u0421\u043c\u0435\u0448\u0430\u0440\u0438\u043a\u0438", "\u00bb", "?"]}, "query_toks": {"en": ["select", "t1.series_name", "from", "tv_channel", "as", "t1", "join", "cartoon", "as", "t2", "on", "t1.id", "=", "t2.channel", "where", "t2.title", "=", "\"The Rise of the Blue Beetle!\"", ";"], "ru": ["select", "t1.series_name", "from", "tv_channel", "as", "t1", "join", "cartoon", "as", "t2", "on", "t1.id", "=", "t2.channel", "where", "t2.title", "=", "\"\u0421\u043c\u0435\u0448\u0430\u0440\u0438\u043a\u0438\"", ";"]}, "query_toks_no_values": {"en": ["select", "t1.series_name", "from", "tv_channel", "as", "t1", "join", "cartoon", "as", "t2", "on", "t1.id", "=", "t2.channel", "where", "t2.title", "=", "value", ";"], "ru": ["select", "t1.series_name", "from", "tv_channel", "as", "t1", "join", "cartoon", "as", "t2", "on", "t1.id", "=", "t2.channel", "where", "t2.title", "=", "value", ";"]}, "masked_query": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\";", "question_pauq": {"ru": "\u041a\u0430\u043a \u043d\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0442\u0435\u043b\u0435\u043a\u0430\u043d\u0430\u043b, \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u044e\u0442 \u043c\u0443\u043b\u044c\u0442\u0444\u0438\u043b\u044c\u043c \u00ab\u0421\u043c\u0435\u0448\u0430\u0440\u0438\u043a\u0438\u00bb?"}, "question": "What is the series name of the TV Channel that shows the cartoon \"The Rise of the Blue Beetle\"?", "kb_id": "tvshow"}, {"id": "D_0612", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"\u041f\u044f\u0442\u043d\u0438\u0446\u0430\";"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 25, false], null]]}, "select": [false, [[0, [0, [0, 20, false], null]]]], "where": [[false, 2, [0, [0, 2, false], null], "\"Sky Radio\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 25, false], null]]}, "select": [false, [[0, [0, [0, 20, false], null]]]], "where": [[false, 2, [0, [0, 2, false], null], "\"\u041f\u044f\u0442\u043d\u0438\u0446\u0430\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["List", "the", "title", "of", "all", "Cartoons", "showed", "on", "TV", "Channel", "with", "series", "name", "``", "Sky", "Radio", "''", "."], "ru": ["\u041f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0438\u0442\u044c", "\u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f", "\u0432\u0441\u0435\u0445", "\u043c\u0443\u043b\u044c\u0442\u0444\u0438\u043b\u044c\u043c\u043e\u0432", ",", "\u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u043c\u044b\u0445", "\u043d\u0430", "\u0442\u0435\u043b\u0435\u043a\u0430\u043d\u0430\u043b\u0435", "\u0433\u0434\u0435", "\u0435\u0441\u0442\u044c", "\u0441\u0435\u0440\u0438\u0430\u043b", "\u201c", "\u041f\u044f\u0442\u043d\u0438\u0446\u0430", "''", "."]}, "query_toks": {"en": ["select", "t2.title", "from", "tv_channel", "as", "t1", "join", "cartoon", "as", "t2", "on", "t1.id", "=", "t2.channel", "where", "t1.series_name", "=", "\"Sky Radio\"", ";"], "ru": ["select", "t2.title", "from", "tv_channel", "as", "t1", "join", "cartoon", "as", "t2", "on", "t1.id", "=", "t2.channel", "where", "t1.series_name", "=", "\"\u041f\u044f\u0442\u043d\u0438\u0446\u0430\"", ";"]}, "query_toks_no_values": {"en": ["select", "t2.title", "from", "tv_channel", "as", "t1", "join", "cartoon", "as", "t2", "on", "t1.id", "=", "t2.channel", "where", "t1.series_name", "=", "value", ";"], "ru": ["select", "t2.title", "from", "tv_channel", "as", "t1", "join", "cartoon", "as", "t2", "on", "t1.id", "=", "t2.channel", "where", "t1.series_name", "=", "value", ";"]}, "masked_query": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";", "question_pauq": {"ru": "\u041f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0438\u0442\u044c \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f \u0432\u0441\u0435\u0445 \u043c\u0443\u043b\u044c\u0442\u0444\u0438\u043b\u044c\u043c\u043e\u0432, \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u043c\u044b\u0445 \u043d\u0430 \u0442\u0435\u043b\u0435\u043a\u0430\u043d\u0430\u043b\u0435 \u0433\u0434\u0435 \u0435\u0441\u0442\u044c \u0441\u0435\u0440\u0438\u0430\u043b \u201c\u041f\u044f\u0442\u043d\u0438\u0446\u0430\"."}, "question": "List the title of all  Cartoons showed on TV Channel with series name \"Sky Radio\".", "kb_id": "tvshow"}, {"id": "D_0613", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"\u041f\u044f\u0442\u043d\u0438\u0446\u0430\";"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 25, false], null]]}, "select": [false, [[0, [0, [0, 20, false], null]]]], "where": [[false, 2, [0, [0, 2, false], null], "\"Sky Radio\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 25, false], null]]}, "select": [false, [[0, [0, [0, 20, false], null]]]], "where": [[false, 2, [0, [0, 2, false], null], "\"\u041f\u044f\u0442\u043d\u0438\u0446\u0430\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "title", "of", "all", "the", "cartools", "that", "are", "on", "the", "TV", "Channel", "with", "the", "series", "name", "``", "Sky", "Radio", "''", "?"], "ru": ["\u041a\u0430\u043a", "\u043d\u0430\u0437\u044b\u0432\u0430\u044e\u0442\u0441\u044f", "\u0432\u0441\u0435", "\u043c\u0443\u043b\u044c\u0442\u0444\u0438\u043b\u044c\u043c\u044b", ",", "\u043a\u043e\u0442\u043e\u0440\u044b\u0435", "\u0438\u0434\u0443\u0442", "\u043d\u0430", "\u0442\u0435\u043b\u0435\u043a\u0430\u043d\u0430\u043b\u0435", "\u0433\u0434\u0435", "\u0438\u0434\u0435\u0442", "\u00ab", "\u041f\u044f\u0442\u043d\u0438\u0446\u0430", "\u00bb", "?"]}, "query_toks": {"en": ["select", "t2.title", "from", "tv_channel", "as", "t1", "join", "cartoon", "as", "t2", "on", "t1.id", "=", "t2.channel", "where", "t1.series_name", "=", "\"Sky Radio\"", ";"], "ru": ["select", "t2.title", "from", "tv_channel", "as", "t1", "join", "cartoon", "as", "t2", "on", "t1.id", "=", "t2.channel", "where", "t1.series_name", "=", "\"\u041f\u044f\u0442\u043d\u0438\u0446\u0430\"", ";"]}, "query_toks_no_values": {"en": ["select", "t2.title", "from", "tv_channel", "as", "t1", "join", "cartoon", "as", "t2", "on", "t1.id", "=", "t2.channel", "where", "t1.series_name", "=", "value", ";"], "ru": ["select", "t2.title", "from", "tv_channel", "as", "t1", "join", "cartoon", "as", "t2", "on", "t1.id", "=", "t2.channel", "where", "t1.series_name", "=", "value", ";"]}, "masked_query": "SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";", "question_pauq": {"ru": "\u041a\u0430\u043a \u043d\u0430\u0437\u044b\u0432\u0430\u044e\u0442\u0441\u044f \u0432\u0441\u0435 \u043c\u0443\u043b\u044c\u0442\u0444\u0438\u043b\u044c\u043c\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0438\u0434\u0443\u0442 \u043d\u0430 \u0442\u0435\u043b\u0435\u043a\u0430\u043d\u0430\u043b\u0435 \u0433\u0434\u0435 \u0438\u0434\u0435\u0442 \u00ab\u041f\u044f\u0442\u043d\u0438\u0446\u0430\u00bb?"}, "question": "What is the title of all the cartools that are on the TV Channel with the series name \"Sky Radio\"?", "kb_id": "tvshow"}, {"id": "D_0614", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT Episode FROM TV_series ORDER BY rating;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 11, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["asc", [[0, [0, 13, false], null]]], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 11, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["asc", [[0, [0, 13, false], null]]], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["List", "the", "Episode", "of", "all", "TV", "series", "sorted", "by", "rating", "."], "ru": ["\u0421\u043f\u0438\u0441\u043e\u043a", "\u044d\u043f\u0438\u0437\u043e\u0434\u043e\u0432", "\u0432\u0441\u0435\u0445", "\u0441\u0435\u0440\u0438\u0430\u043b\u043e\u0432", ",", "\u043e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445", "\u043f\u043e", "\u0440\u0435\u0439\u0442\u0438\u043d\u0433\u0443", "."]}, "query_toks": {"en": ["select", "episode", "from", "tv_series", "order", "by", "rating", ";"], "ru": ["select", "episode", "from", "tv_series", "order", "by", "rating", ";"]}, "query_toks_no_values": {"en": ["select", "episode", "from", "tv_series", "order", "by", "rating", ";"], "ru": ["select", "episode", "from", "tv_series", "order", "by", "rating", ";"]}, "masked_query": "SELECT Episode FROM TV_series ORDER BY rating;", "question_pauq": {"ru": "\u0421\u043f\u0438\u0441\u043e\u043a \u044d\u043f\u0438\u0437\u043e\u0434\u043e\u0432 \u0432\u0441\u0435\u0445 \u0441\u0435\u0440\u0438\u0430\u043b\u043e\u0432, \u043e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u043f\u043e \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u0443."}, "question": "List the Episode of all TV series sorted by rating.", "kb_id": "tvshow"}, {"id": "D_0615", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT Episode FROM TV_series ORDER BY rating;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 11, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["asc", [[0, [0, 13, false], null]]], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 11, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["asc", [[0, [0, 13, false], null]]], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "all", "of", "the", "episodes", "ordered", "by", "ratings", "?"], "ru": ["\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c", "\u0432\u0441\u0435", "\u0441\u0435\u0440\u0438\u0438", "\u0441\u0435\u0440\u0438\u0430\u043b\u0430", ",", "\u043e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435", "\u043f\u043e", "\u0440\u0435\u0439\u0442\u0438\u043d\u0433\u0443"]}, "query_toks": {"en": ["select", "episode", "from", "tv_series", "order", "by", "rating", ";"], "ru": ["select", "episode", "from", "tv_series", "order", "by", "rating", ";"]}, "query_toks_no_values": {"en": ["select", "episode", "from", "tv_series", "order", "by", "rating", ";"], "ru": ["select", "episode", "from", "tv_series", "order", "by", "rating", ";"]}, "masked_query": "SELECT Episode FROM TV_series ORDER BY rating;", "question_pauq": {"ru": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0432\u0441\u0435 \u0441\u0435\u0440\u0438\u0438 \u0441\u0435\u0440\u0438\u0430\u043b\u0430, \u043e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u043f\u043e \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u0443"}, "question": "What are all of the episodes ordered by ratings?", "kb_id": "tvshow"}, {"id": "D_0616", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 11, false], null]], [0, [0, [0, 13, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 13, false], null]]], "limit": 3, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 11, false], null]], [0, [0, [0, 13, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 13, false], null]]], "limit": 3, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["List", "top", "3", "highest", "Rating", "TV", "series", ".", "List", "the", "TV", "series", "'s", "Episode", "and", "Rating", "."], "ru": ["\u0442\u043e\u043f-3", "\u0441\u0435\u0440\u0438\u0430\u043b\u0430", "\u0441", "\u0441\u0430\u043c\u044b\u043c", "\u0432\u044b\u0441\u043e\u043a\u0438\u043c", "\u0440\u0435\u0439\u0442\u0438\u043d\u0433\u043e\u043c", ".", "\u0423\u043a\u0430\u0437\u0430\u0442\u044c", "\u0441\u0435\u0440\u0438\u044e", "\u0441\u0435\u0440\u0438\u0430\u043b\u0430", "\u0438", "\u0440\u0435\u0439\u0442\u0438\u043d\u0433", "."]}, "query_toks": {"en": ["select", "episode", ",", "rating", "from", "tv_series", "order", "by", "rating", "desc", "limit", "3", ";"], "ru": ["select", "episode", ",", "rating", "from", "tv_series", "order", "by", "rating", "desc", "limit", "3", ";"]}, "query_toks_no_values": {"en": ["select", "episode", ",", "rating", "from", "tv_series", "order", "by", "rating", "desc", "limit", "3", ";"], "ru": ["select", "episode", ",", "rating", "from", "tv_series", "order", "by", "rating", "desc", "limit", "3", ";"]}, "masked_query": "SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;", "question_pauq": {"ru": "\u0442\u043e\u043f-3 \u0441\u0435\u0440\u0438\u0430\u043b\u0430 \u0441 \u0441\u0430\u043c\u044b\u043c \u0432\u044b\u0441\u043e\u043a\u0438\u043c \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u043e\u043c. \u0423\u043a\u0430\u0437\u0430\u0442\u044c \u0441\u0435\u0440\u0438\u044e \u0441\u0435\u0440\u0438\u0430\u043b\u0430 \u0438 \u0440\u0435\u0439\u0442\u0438\u043d\u0433."}, "question": "List top 3 highest Rating  TV series. List the TV series's Episode and Rating.", "kb_id": "tvshow"}, {"id": "D_0617", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 11, false], null]], [0, [0, [0, 13, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 13, false], null]]], "limit": 3, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 11, false], null]], [0, [0, [0, 13, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 13, false], null]]], "limit": 3, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "3", "most", "highly", "rated", "episodes", "in", "the", "TV", "series", "table", "and", "what", "were", "those", "ratings", "?"], "ru": ["\u041a\u0430\u043a\u0438\u0435", "3", "\u044d\u043f\u0438\u0437\u043e\u0434\u0430", "\u0432", "\u0442\u0430\u0431\u043b\u0438\u0446\u0435", "\u0441\u0435\u0440\u0438\u0430\u043b\u043e\u0432", "\u0438\u043c\u0435\u044e\u0442", "\u0441\u0430\u043c\u044b\u0435", "\u0432\u044b\u0441\u043e\u043a\u0438\u0435", "\u043e\u0446\u0435\u043d\u043a\u0438", "\u0438", "\u043a\u0430\u043a\u043e\u0432\u044b", "\u0431\u044b\u043b\u0438", "\u044d\u0442\u0438", "\u0440\u0435\u0439\u0442\u0438\u043d\u0433\u0438", "?"]}, "query_toks": {"en": ["select", "episode", ",", "rating", "from", "tv_series", "order", "by", "rating", "desc", "limit", "3", ";"], "ru": ["select", "episode", ",", "rating", "from", "tv_series", "order", "by", "rating", "desc", "limit", "3", ";"]}, "query_toks_no_values": {"en": ["select", "episode", ",", "rating", "from", "tv_series", "order", "by", "rating", "desc", "limit", "3", ";"], "ru": ["select", "episode", ",", "rating", "from", "tv_series", "order", "by", "rating", "desc", "limit", "3", ";"]}, "masked_query": "SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;", "question_pauq": {"ru": "\u041a\u0430\u043a\u0438\u0435 3 \u044d\u043f\u0438\u0437\u043e\u0434\u0430 \u0432 \u0442\u0430\u0431\u043b\u0438\u0446\u0435 \u0441\u0435\u0440\u0438\u0430\u043b\u043e\u0432 \u0438\u043c\u0435\u044e\u0442 \u0441\u0430\u043c\u044b\u0435 \u0432\u044b\u0441\u043e\u043a\u0438\u0435 \u043e\u0446\u0435\u043d\u043a\u0438 \u0438 \u043a\u0430\u043a\u043e\u0432\u044b \u0431\u044b\u043b\u0438 \u044d\u0442\u0438 \u0440\u0435\u0439\u0442\u0438\u043d\u0433\u0438?"}, "question": "What are 3 most highly rated episodes in the TV series table and what were those ratings?", "kb_id": "tvshow"}, {"id": "D_0618", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT max(SHARE) , min(SHARE) FROM TV_series;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[1, [0, [0, 14, false], null]], [2, [0, [0, 14, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[1, [0, [0, 14, false], null]], [2, [0, [0, 14, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "minimum", "and", "maximum", "share", "of", "TV", "series", "?"], "ru": ["\u041a\u0430\u043a\u0430\u044f", "\u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u0430\u044f", "\u0438", "\u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u0430\u044f", "\u0434\u043e\u043b\u044f", "\u0441\u0435\u0440\u0438\u0430\u043b\u043e\u0432", "?"]}, "query_toks": {"en": ["select", "max", "(", "share", ")", ",", "min", "(", "share", ")", "from", "tv_series", ";"], "ru": ["select", "max", "(", "share", ")", ",", "min", "(", "share", ")", "from", "tv_series", ";"]}, "query_toks_no_values": {"en": ["select", "max", "(", "share", ")", ",", "min", "(", "share", ")", "from", "tv_series", ";"], "ru": ["select", "max", "(", "share", ")", ",", "min", "(", "share", ")", "from", "tv_series", ";"]}, "masked_query": "SELECT max(SHARE) , min(SHARE) FROM TV_series;", "question_pauq": {"ru": "\u041a\u0430\u043a\u0430\u044f \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u0430\u044f \u0438 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u0430\u044f \u0434\u043e\u043b\u044f \u0441\u0435\u0440\u0438\u0430\u043b\u043e\u0432?"}, "question": "What is minimum and maximum share of TV series?", "kb_id": "tvshow"}, {"id": "D_0619", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT max(SHARE) , min(SHARE) FROM TV_series;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[1, [0, [0, 14, false], null]], [2, [0, [0, 14, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[1, [0, [0, 14, false], null]], [2, [0, [0, 14, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "maximum", "and", "minimum", "share", "for", "the", "TV", "series", "?"], "ru": ["\u041a\u0430\u043a\u0430\u044f", "\u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u0430\u044f", "\u0438", "\u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u0430\u044f", "\u0434\u043e\u043b\u044f", "\u0441\u0435\u0440\u0438\u0430\u043b\u043e\u0432", "\u043d\u0430", "\u0442\u0435\u043b\u0435\u043a\u0430\u043d\u0430\u043b\u0435", "?"]}, "query_toks": {"en": ["select", "max", "(", "share", ")", ",", "min", "(", "share", ")", "from", "tv_series", ";"], "ru": ["select", "max", "(", "share", ")", ",", "min", "(", "share", ")", "from", "tv_series", ";"]}, "query_toks_no_values": {"en": ["select", "max", "(", "share", ")", ",", "min", "(", "share", ")", "from", "tv_series", ";"], "ru": ["select", "max", "(", "share", ")", ",", "min", "(", "share", ")", "from", "tv_series", ";"]}, "masked_query": "SELECT max(SHARE) , min(SHARE) FROM TV_series;", "question_pauq": {"ru": "\u041a\u0430\u043a\u0430\u044f \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u0430\u044f \u0438 \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u0430\u044f \u0434\u043e\u043b\u044f \u0441\u0435\u0440\u0438\u0430\u043b\u043e\u0432 \u043d\u0430 \u0442\u0435\u043b\u0435\u043a\u0430\u043d\u0430\u043b\u0435?"}, "question": "What is the maximum and minimum share for the TV series?", "kb_id": "tvshow"}, {"id": "D_0620", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT Air_Date FROM TV_series WHERE Episode = \"\u041b\u044e\u0431\u043e\u0432\u044c \u0432\u0441\u0435\u0439 \u0436\u0438\u0437\u043d\u0438\";"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 12, false], null]]]], "where": [[false, 2, [0, [0, 11, false], null], "\"A Love of a Lifetime\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 12, false], null]]]], "where": [[false, 2, [0, [0, 11, false], null], "\"\u041b\u044e\u0431\u043e\u0432\u044c \u0432\u0441\u0435\u0439 \u0436\u0438\u0437\u043d\u0438\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "air", "date", "of", "TV", "series", "with", "Episode", "``", "A", "Love", "of", "a", "Lifetime", "''", "?"], "ru": ["\u041a\u0430\u043a\u0430\u044f", "\u0434\u0430\u0442\u0430", "\u0432\u044b\u0445\u043e\u0434\u0430", "\u0441\u0435\u0440\u0438\u0430\u043b\u0430", "\u0441", "\u044d\u043f\u0438\u0437\u043e\u0434\u043e\u043c", "\u00ab", "\u041b\u044e\u0431\u043e\u0432\u044c", "\u0432\u0441\u0435\u0439", "\u0436\u0438\u0437\u043d\u0438", "\u00bb", "?"]}, "query_toks": {"en": ["select", "air_date", "from", "tv_series", "where", "episode", "=", "\"A Love of a Lifetime\"", ";"], "ru": ["select", "air_date", "from", "tv_series", "where", "episode", "=", "\"\u041b\u044e\u0431\u043e\u0432\u044c \u0432\u0441\u0435\u0439 \u0436\u0438\u0437\u043d\u0438\"", ";"]}, "query_toks_no_values": {"en": ["select", "air_date", "from", "tv_series", "where", "episode", "=", "value", ";"], "ru": ["select", "air_date", "from", "tv_series", "where", "episode", "=", "value", ";"]}, "masked_query": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\";", "question_pauq": {"ru": "\u041a\u0430\u043a\u0430\u044f \u0434\u0430\u0442\u0430 \u0432\u044b\u0445\u043e\u0434\u0430 \u0441\u0435\u0440\u0438\u0430\u043b\u0430 \u0441 \u044d\u043f\u0438\u0437\u043e\u0434\u043e\u043c \u00ab\u041b\u044e\u0431\u043e\u0432\u044c \u0432\u0441\u0435\u0439 \u0436\u0438\u0437\u043d\u0438\u00bb?"}, "question": "What is the air date of TV series with Episode \"A Love of a Lifetime\"?", "kb_id": "tvshow"}, {"id": "D_0621", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT Air_Date FROM TV_series WHERE Episode = \"\u041b\u044e\u0431\u043e\u0432\u044c \u0432\u0441\u0435\u0439 \u0436\u0438\u0437\u043d\u0438\";"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 12, false], null]]]], "where": [[false, 2, [0, [0, 11, false], null], "\"A Love of a Lifetime\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 12, false], null]]]], "where": [[false, 2, [0, [0, 11, false], null], "\"\u041b\u044e\u0431\u043e\u0432\u044c \u0432\u0441\u0435\u0439 \u0436\u0438\u0437\u043d\u0438\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["When", "did", "the", "episode", "``", "A", "Love", "of", "a", "Lifetime", "''", "air", "?"], "ru": ["\u041a\u043e\u0433\u0434\u0430", "\u0432\u044b\u0448\u0435\u043b", "\u0432", "\u044d\u0444\u0438\u0440", "\u044d\u043f\u0438\u0437\u043e\u0434", "``", "\u041b\u044e\u0431\u043e\u0432\u044c", "\u0432\u0441\u0435\u0439", "\u0436\u0438\u0437\u043d\u0438", "''", "?"]}, "query_toks": {"en": ["select", "air_date", "from", "tv_series", "where", "episode", "=", "\"A Love of a Lifetime\"", ";"], "ru": ["select", "air_date", "from", "tv_series", "where", "episode", "=", "\"\u041b\u044e\u0431\u043e\u0432\u044c \u0432\u0441\u0435\u0439 \u0436\u0438\u0437\u043d\u0438\"", ";"]}, "query_toks_no_values": {"en": ["select", "air_date", "from", "tv_series", "where", "episode", "=", "value", ";"], "ru": ["select", "air_date", "from", "tv_series", "where", "episode", "=", "value", ";"]}, "masked_query": "SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\";", "question_pauq": {"ru": "\u041a\u043e\u0433\u0434\u0430 \u0432\u044b\u0448\u0435\u043b \u0432 \u044d\u0444\u0438\u0440 \u044d\u043f\u0438\u0437\u043e\u0434 \"\u041b\u044e\u0431\u043e\u0432\u044c \u0432\u0441\u0435\u0439 \u0436\u0438\u0437\u043d\u0438\"?"}, "question": "When did the episode \"A Love of a Lifetime\" air?", "kb_id": "tvshow"}, {"id": "D_0622", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"\u041b\u044e\u0431\u043e\u0432\u044c \u0432\u0441\u0435\u0439 \u0436\u0438\u0437\u043d\u0438\";"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 17, false], null]]]], "where": [[false, 2, [0, [0, 11, false], null], "\"A Love of a Lifetime\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 17, false], null]]]], "where": [[false, 2, [0, [0, 11, false], null], "\"\u041b\u044e\u0431\u043e\u0432\u044c \u0432\u0441\u0435\u0439 \u0436\u0438\u0437\u043d\u0438\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "Weekly", "Rank", "of", "TV", "series", "with", "Episode", "``", "A", "Love", "of", "a", "Lifetime", "''", "?"], "ru": ["\u041a\u0430\u043a\u043e\u0432", "\u0435\u0436\u0435\u043d\u0435\u0434\u0435\u043b\u044c\u043d\u044b\u0439", "\u0440\u0435\u0439\u0442\u0438\u043d\u0433", "\u0441\u0435\u0440\u0438\u0430\u043b\u0430", "\u0441", "\u044d\u043f\u0438\u0437\u043e\u0434\u043e\u043c", "\u00ab", "\u041b\u044e\u0431\u043e\u0432\u044c", "\u0432\u0441\u0435\u0439", "\u0436\u0438\u0437\u043d\u0438", "\u00bb", "?"]}, "query_toks": {"en": ["select", "weekly_rank", "from", "tv_series", "where", "episode", "=", "\"A Love of a Lifetime\"", ";"], "ru": ["select", "weekly_rank", "from", "tv_series", "where", "episode", "=", "\"\u041b\u044e\u0431\u043e\u0432\u044c \u0432\u0441\u0435\u0439 \u0436\u0438\u0437\u043d\u0438\"", ";"]}, "query_toks_no_values": {"en": ["select", "weekly_rank", "from", "tv_series", "where", "episode", "=", "value", ";"], "ru": ["select", "weekly_rank", "from", "tv_series", "where", "episode", "=", "value", ";"]}, "masked_query": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\";", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0432 \u0435\u0436\u0435\u043d\u0435\u0434\u0435\u043b\u044c\u043d\u044b\u0439 \u0440\u0435\u0439\u0442\u0438\u043d\u0433 \u0441\u0435\u0440\u0438\u0430\u043b\u0430 \u0441 \u044d\u043f\u0438\u0437\u043e\u0434\u043e\u043c \u00ab\u041b\u044e\u0431\u043e\u0432\u044c \u0432\u0441\u0435\u0439 \u0436\u0438\u0437\u043d\u0438\u00bb?"}, "question": "What is Weekly Rank of TV series with Episode \"A Love of a Lifetime\"?", "kb_id": "tvshow"}, {"id": "D_0623", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"\u041b\u044e\u0431\u043e\u0432\u044c \u0432\u0441\u0435\u0439 \u0436\u0438\u0437\u043d\u0438\";"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 17, false], null]]]], "where": [[false, 2, [0, [0, 11, false], null], "\"A Love of a Lifetime\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 17, false], null]]]], "where": [[false, 2, [0, [0, 11, false], null], "\"\u041b\u044e\u0431\u043e\u0432\u044c \u0432\u0441\u0435\u0439 \u0436\u0438\u0437\u043d\u0438\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "weekly", "rank", "for", "the", "episode", "``", "A", "Love", "of", "a", "Lifetime", "''", "?"], "ru": ["\u041a\u0430\u043a\u043e\u0439", "\u0435\u0436\u0435\u043d\u0435\u0434\u0435\u043b\u044c\u043d\u044b\u0439", "\u0440\u0435\u0439\u0442\u0438\u043d\u0433", "\u0443", "\u0441\u0435\u0440\u0438\u0438", "\u00ab", "\u041b\u044e\u0431\u043e\u0432\u044c", "\u0432\u0441\u0435\u0439", "\u0436\u0438\u0437\u043d\u0438", "\u00bb", "?"]}, "query_toks": {"en": ["select", "weekly_rank", "from", "tv_series", "where", "episode", "=", "\"A Love of a Lifetime\"", ";"], "ru": ["select", "weekly_rank", "from", "tv_series", "where", "episode", "=", "\"\u041b\u044e\u0431\u043e\u0432\u044c \u0432\u0441\u0435\u0439 \u0436\u0438\u0437\u043d\u0438\"", ";"]}, "query_toks_no_values": {"en": ["select", "weekly_rank", "from", "tv_series", "where", "episode", "=", "value", ";"], "ru": ["select", "weekly_rank", "from", "tv_series", "where", "episode", "=", "value", ";"]}, "masked_query": "SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\";", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0439 \u0435\u0436\u0435\u043d\u0435\u0434\u0435\u043b\u044c\u043d\u044b\u0439 \u0440\u0435\u0439\u0442\u0438\u043d\u0433 \u0443 \u0441\u0435\u0440\u0438\u0438 \u00ab\u041b\u044e\u0431\u043e\u0432\u044c \u0432\u0441\u0435\u0439 \u0436\u0438\u0437\u043d\u0438\u00bb?"}, "question": "What is the weekly rank for the episode \"A Love of a Lifetime\"?", "kb_id": "tvshow"}, {"id": "D_0624", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"\u041b\u044e\u0431\u043e\u0432\u044c \u0432\u0441\u0435\u0439 \u0436\u0438\u0437\u043d\u0438\";"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 18, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [[false, 2, [0, [0, 11, false], null], "\"A Love of a Lifetime\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 18, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [[false, 2, [0, [0, 11, false], null], "\"\u041b\u044e\u0431\u043e\u0432\u044c \u0432\u0441\u0435\u0439 \u0436\u0438\u0437\u043d\u0438\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "TV", "Channel", "of", "TV", "series", "with", "Episode", "``", "A", "Love", "of", "a", "Lifetime", "''", "?", "List", "the", "TV", "Channel", "'s", "series", "name", "."], "ru": ["\u041d\u0430", "\u043a\u0430\u043a\u043e\u043c", "\u0442\u0435\u043b\u0435\u043a\u0430\u043d\u0430\u043b\u0435", "\u0435\u0441\u0442\u044c", "\u0441\u0435\u0440\u0438\u0430\u043b", "\u0441", "\u044d\u043f\u0438\u0437\u043e\u0434\u043e\u043c", "\u00ab", "\u041b\u044e\u0431\u043e\u0432\u044c", "\u0432\u0441\u0435\u0439", "\u0436\u0438\u0437\u043d\u0438", "\u00bb", "?", "\u0423\u043a\u0430\u0436\u0438\u0442\u0435", "\u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435", "\u0441\u0435\u0440\u0438\u0430\u043b\u0430", "."]}, "query_toks": {"en": ["select", "t1.series_name", "from", "tv_channel", "as", "t1", "join", "tv_series", "as", "t2", "on", "t1.id", "=", "t2.channel", "where", "t2.episode", "=", "\"A Love of a Lifetime\"", ";"], "ru": ["select", "t1.series_name", "from", "tv_channel", "as", "t1", "join", "tv_series", "as", "t2", "on", "t1.id", "=", "t2.channel", "where", "t2.episode", "=", "\"\u041b\u044e\u0431\u043e\u0432\u044c \u0432\u0441\u0435\u0439 \u0436\u0438\u0437\u043d\u0438\"", ";"]}, "query_toks_no_values": {"en": ["select", "t1.series_name", "from", "tv_channel", "as", "t1", "join", "tv_series", "as", "t2", "on", "t1.id", "=", "t2.channel", "where", "t2.episode", "=", "value", ";"], "ru": ["select", "t1.series_name", "from", "tv_channel", "as", "t1", "join", "tv_series", "as", "t2", "on", "t1.id", "=", "t2.channel", "where", "t2.episode", "=", "value", ";"]}, "masked_query": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\";", "question_pauq": {"ru": "\u041d\u0430 \u043a\u0430\u043a\u043e\u043c \u0442\u0435\u043b\u0435\u043a\u0430\u043d\u0430\u043b\u0435 \u0435\u0441\u0442\u044c \u0441\u0435\u0440\u0438\u0430\u043b \u0441 \u044d\u043f\u0438\u0437\u043e\u0434\u043e\u043c \u00ab\u041b\u044e\u0431\u043e\u0432\u044c \u0432\u0441\u0435\u0439 \u0436\u0438\u0437\u043d\u0438\u00bb? \u0423\u043a\u0430\u0436\u0438\u0442\u0435 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u0441\u0435\u0440\u0438\u0430\u043b\u0430."}, "question": "What is the TV Channel of TV series with Episode \"A Love of a Lifetime\"? List the TV Channel's series name.", "kb_id": "tvshow"}, {"id": "D_0625", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"\u041b\u044e\u0431\u043e\u0432\u044c \u0432\u0441\u0435\u0439 \u0436\u0438\u0437\u043d\u0438\";"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 18, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [[false, 2, [0, [0, 11, false], null], "\"A Love of a Lifetime\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 18, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [[false, 2, [0, [0, 11, false], null], "\"\u041b\u044e\u0431\u043e\u0432\u044c \u0432\u0441\u0435\u0439 \u0436\u0438\u0437\u043d\u0438\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "name", "of", "the", "series", "that", "has", "the", "episode", "``", "A", "Love", "of", "a", "Lifetime", "''", "?"], "ru": ["\u041a\u0430\u043a", "\u043d\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f", "\u0441\u0435\u0440\u0438\u0430\u043b", ",", "\u0432", "\u043a\u043e\u0442\u043e\u0440\u043e\u043c", "\u0435\u0441\u0442\u044c", "\u0441\u0435\u0440\u0438\u044f", "\u00ab", "\u041b\u044e\u0431\u043e\u0432\u044c", "\u0432\u0441\u0435\u0439", "\u0436\u0438\u0437\u043d\u0438", "\u00bb", "?"]}, "query_toks": {"en": ["select", "t1.series_name", "from", "tv_channel", "as", "t1", "join", "tv_series", "as", "t2", "on", "t1.id", "=", "t2.channel", "where", "t2.episode", "=", "\"A Love of a Lifetime\"", ";"], "ru": ["select", "t1.series_name", "from", "tv_channel", "as", "t1", "join", "tv_series", "as", "t2", "on", "t1.id", "=", "t2.channel", "where", "t2.episode", "=", "\"\u041b\u044e\u0431\u043e\u0432\u044c \u0432\u0441\u0435\u0439 \u0436\u0438\u0437\u043d\u0438\"", ";"]}, "query_toks_no_values": {"en": ["select", "t1.series_name", "from", "tv_channel", "as", "t1", "join", "tv_series", "as", "t2", "on", "t1.id", "=", "t2.channel", "where", "t2.episode", "=", "value", ";"], "ru": ["select", "t1.series_name", "from", "tv_channel", "as", "t1", "join", "tv_series", "as", "t2", "on", "t1.id", "=", "t2.channel", "where", "t2.episode", "=", "value", ";"]}, "masked_query": "SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\";", "question_pauq": {"ru": "\u041a\u0430\u043a \u043d\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0441\u0435\u0440\u0438\u0430\u043b, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u0435\u0441\u0442\u044c \u0441\u0435\u0440\u0438\u044f \u00ab\u041b\u044e\u0431\u043e\u0432\u044c \u0432\u0441\u0435\u0439 \u0436\u0438\u0437\u043d\u0438\u00bb?"}, "question": "What is the name of the series that has the episode \"A Love of a Lifetime\"?", "kb_id": "tvshow"}, {"id": "D_0626", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"\u041f\u044f\u0442\u043d\u0438\u0446\u0430\";"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 18, false], null]]}, "select": [false, [[0, [0, [0, 11, false], null]]]], "where": [[false, 2, [0, [0, 2, false], null], "\"Sky Radio\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 18, false], null]]}, "select": [false, [[0, [0, [0, 11, false], null]]]], "where": [[false, 2, [0, [0, 2, false], null], "\"\u041f\u044f\u0442\u043d\u0438\u0446\u0430\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["List", "the", "Episode", "of", "all", "TV", "series", "showed", "on", "TV", "Channel", "with", "series", "name", "``", "Sky", "Radio", "''", "."], "ru": ["\u041f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0438\u0442\u044c", "\u0441\u0435\u0440\u0438\u0438", ",", "\u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u043c\u044b\u0445", "\u0432", "\u0441\u0435\u0440\u0438\u0430\u043b\u0435", "\u0441", "\u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435\u043c", "\u201c", "\u041f\u044f\u0442\u043d\u0438\u0446\u0430", "''", "."]}, "query_toks": {"en": ["select", "t2.episode", "from", "tv_channel", "as", "t1", "join", "tv_series", "as", "t2", "on", "t1.id", "=", "t2.channel", "where", "t1.series_name", "=", "\"Sky Radio\"", ";"], "ru": ["select", "t2.episode", "from", "tv_channel", "as", "t1", "join", "tv_series", "as", "t2", "on", "t1.id", "=", "t2.channel", "where", "t1.series_name", "=", "\"\u041f\u044f\u0442\u043d\u0438\u0446\u0430\"", ";"]}, "query_toks_no_values": {"en": ["select", "t2.episode", "from", "tv_channel", "as", "t1", "join", "tv_series", "as", "t2", "on", "t1.id", "=", "t2.channel", "where", "t1.series_name", "=", "value", ";"], "ru": ["select", "t2.episode", "from", "tv_channel", "as", "t1", "join", "tv_series", "as", "t2", "on", "t1.id", "=", "t2.channel", "where", "t1.series_name", "=", "value", ";"]}, "masked_query": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";", "question_pauq": {"ru": "\u041f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0438\u0442\u044c \u0441\u0435\u0440\u0438\u0438, \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u043c\u044b\u0445 \u0432 \u0441\u0435\u0440\u0438\u0430\u043b\u0435 \u0441 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435\u043c \u201c\u041f\u044f\u0442\u043d\u0438\u0446\u0430\"."}, "question": "List the Episode of all  TV series showed on TV Channel with series name \"Sky Radio\".", "kb_id": "tvshow"}, {"id": "D_0627", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"\u041f\u044f\u0442\u043d\u0438\u0446\u0430\";"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 18, false], null]]}, "select": [false, [[0, [0, [0, 11, false], null]]]], "where": [[false, 2, [0, [0, 2, false], null], "\"Sky Radio\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 18, false], null]]}, "select": [false, [[0, [0, [0, 11, false], null]]]], "where": [[false, 2, [0, [0, 2, false], null], "\"\u041f\u044f\u0442\u043d\u0438\u0446\u0430\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "episode", "for", "the", "TV", "series", "named", "``", "Sky", "Radio", "''", "?"], "ru": ["\u041a\u0430\u043a\u0430\u044f", "\u0435\u0441\u0442\u044c", "\u0441\u0435\u0440\u0438\u044f", "\u0441\u0435\u0440\u0438\u0430\u043b\u0430", "\u00ab", "\u041f\u044f\u0442\u043d\u0438\u0446\u0430", "\u00bb", "?"]}, "query_toks": {"en": ["select", "t2.episode", "from", "tv_channel", "as", "t1", "join", "tv_series", "as", "t2", "on", "t1.id", "=", "t2.channel", "where", "t1.series_name", "=", "\"Sky Radio\"", ";"], "ru": ["select", "t2.episode", "from", "tv_channel", "as", "t1", "join", "tv_series", "as", "t2", "on", "t1.id", "=", "t2.channel", "where", "t1.series_name", "=", "\"\u041f\u044f\u0442\u043d\u0438\u0446\u0430\"", ";"]}, "query_toks_no_values": {"en": ["select", "t2.episode", "from", "tv_channel", "as", "t1", "join", "tv_series", "as", "t2", "on", "t1.id", "=", "t2.channel", "where", "t1.series_name", "=", "value", ";"], "ru": ["select", "t2.episode", "from", "tv_channel", "as", "t1", "join", "tv_series", "as", "t2", "on", "t1.id", "=", "t2.channel", "where", "t1.series_name", "=", "value", ";"]}, "masked_query": "SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";", "question_pauq": {"ru": "\u041a\u0430\u043a\u0430\u044f \u0435\u0441\u0442\u044c \u0441\u0435\u0440\u0438\u044f \u0441\u0435\u0440\u0438\u0430\u043b\u0430 \u00ab\u041f\u044f\u0442\u043d\u0438\u0446\u0430\u00bb?"}, "question": "What is the episode for the TV series named \"Sky Radio\"?", "kb_id": "tvshow"}, {"id": "D_0628", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]], [0, [0, [0, 21, false], null]]]], "where": [], "groupBy": [[0, 21, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]], [0, [0, [0, 21, false], null]]]], "where": [], "groupBy": [[0, 21, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Find", "the", "number", "of", "cartoons", "directed", "by", "each", "of", "the", "listed", "directors", "."], "ru": ["\u041d\u0430\u0439\u0434\u0438\u0442\u0435", "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e", "\u043c\u0443\u043b\u044c\u0442\u0444\u0438\u043b\u044c\u043c\u043e\u0432", ",", "\u043f\u043e\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0445", "\u043a\u0430\u0436\u0434\u044b\u043c", "\u0438\u0437", "\u043f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u044b\u0445", "\u0440\u0435\u0436\u0438\u0441\u0441\u0435\u0440\u043e\u0432", "."]}, "query_toks": {"en": ["select", "count", "(", "*", ")", ",", "directed_by", "from", "cartoon", "group", "by", "directed_by", ";"], "ru": ["select", "count", "(", "*", ")", ",", "directed_by", "from", "cartoon", "group", "by", "directed_by", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "*", ")", ",", "directed_by", "from", "cartoon", "group", "by", "directed_by", ";"], "ru": ["select", "count", "(", "*", ")", ",", "directed_by", "from", "cartoon", "group", "by", "directed_by", ";"]}, "masked_query": "SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by;", "question_pauq": {"ru": "\u041d\u0430\u0439\u0434\u0438\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0443\u043b\u044c\u0442\u0444\u0438\u043b\u044c\u043c\u043e\u0432, \u043f\u043e\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0445 \u043a\u0430\u0436\u0434\u044b\u043c \u0438\u0437 \u043f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u044b\u0445 \u0440\u0435\u0436\u0438\u0441\u0441\u0435\u0440\u043e\u0432."}, "question": "Find the number of cartoons directed by each of the listed directors.", "kb_id": "tvshow"}, {"id": "D_0629", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]], [0, [0, [0, 21, false], null]]]], "where": [], "groupBy": [[0, 21, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]], [0, [0, [0, 21, false], null]]]], "where": [], "groupBy": [[0, 21, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["How", "many", "cartoons", "did", "each", "director", "create", "?"], "ru": ["\u0421\u043a\u043e\u043b\u044c\u043a\u043e", "\u043c\u0443\u043b\u044c\u0442\u0444\u0438\u043b\u044c\u043c\u043e\u0432", "\u0441\u043e\u0437\u0434\u0430\u043b", "\u043a\u0430\u0436\u0434\u044b\u0439", "\u0440\u0435\u0436\u0438\u0441\u0441\u0435\u0440", "?"]}, "query_toks": {"en": ["select", "count", "(", "*", ")", ",", "directed_by", "from", "cartoon", "group", "by", "directed_by", ";"], "ru": ["select", "count", "(", "*", ")", ",", "directed_by", "from", "cartoon", "group", "by", "directed_by", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "*", ")", ",", "directed_by", "from", "cartoon", "group", "by", "directed_by", ";"], "ru": ["select", "count", "(", "*", ")", ",", "directed_by", "from", "cartoon", "group", "by", "directed_by", ";"]}, "masked_query": "SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by;", "question_pauq": {"ru": "\u0421\u043a\u043e\u043b\u044c\u043a\u043e \u043c\u0443\u043b\u044c\u0442\u0444\u0438\u043b\u044c\u043c\u043e\u0432 \u0441\u043e\u0437\u0434\u0430\u043b \u043a\u0430\u0436\u0434\u044b\u0439 \u0440\u0435\u0436\u0438\u0441\u0441\u0435\u0440?"}, "question": "How many cartoons did each director create?", "kb_id": "tvshow"}, {"id": "D_0630", "source": "spider-dev", "type": "dev", "query": {"ru": "select production_code ,  channel from cartoon order by original_air_date desc limit 1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 24, false], null]], [0, [0, [0, 25, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 23, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 24, false], null]], [0, [0, [0, 25, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 23, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Find", "the", "production", "code", "and", "channel", "of", "the", "most", "recently", "aired", "cartoon", "."], "ru": ["\u041d\u0430\u0439\u0434\u0438\u0442\u0435", "\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0439", "\u043a\u043e\u0434", "\u0438", "\u043a\u0430\u043d\u0430\u043b", "\u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0433\u043e", "\u0432\u044b\u0448\u0435\u0434\u0448\u0435\u0433\u043e", "\u0432", "\u044d\u0444\u0438\u0440", "\u043c\u0443\u043b\u044c\u0442\u0444\u0438\u043b\u044c\u043c\u0430", "."]}, "query_toks": {"en": ["select", "production_code", ",", "channel", "from", "cartoon", "order", "by", "original_air_date", "desc", "limit", "1", ";"], "ru": ["select", "production_code", ",", "channel", "from", "cartoon", "order", "by", "original_air_date", "desc", "limit", "1", ";"]}, "query_toks_no_values": {"en": ["select", "production_code", ",", "channel", "from", "cartoon", "order", "by", "original_air_date", "desc", "limit", "1", ";"], "ru": ["select", "production_code", ",", "channel", "from", "cartoon", "order", "by", "original_air_date", "desc", "limit", "1", ";"]}, "masked_query": "select production_code ,  channel from cartoon order by original_air_date desc limit 1;", "question_pauq": {"ru": "\u041d\u0430\u0439\u0434\u0438\u0442\u0435 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0439 \u043a\u043e\u0434 \u0438 \u043a\u0430\u043d\u0430\u043b \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0433\u043e \u0432\u044b\u0448\u0435\u0434\u0448\u0435\u0433\u043e \u0432 \u044d\u0444\u0438\u0440 \u043c\u0443\u043b\u044c\u0442\u0444\u0438\u043b\u044c\u043c\u0430."}, "question": "Find the production code and channel of the most recently aired cartoon .", "kb_id": "tvshow"}, {"id": "D_0631", "source": "spider-dev", "type": "dev", "query": {"ru": "select production_code ,  channel from cartoon order by original_air_date desc limit 1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 24, false], null]], [0, [0, [0, 25, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 23, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 24, false], null]], [0, [0, [0, 25, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 23, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "produdction", "code", "and", "channel", "of", "the", "most", "recent", "cartoon", "?"], "ru": ["\u041a\u0430\u043a\u043e\u0439", "\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0439", "\u043a\u043e\u0434", "\u0438", "\u043a\u0430\u043d\u0430\u043b", "\u0443", "\u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0433\u043e", "\u043c\u0443\u043b\u044c\u0442\u0444\u0438\u043b\u044c\u043c\u0430", "?"]}, "query_toks": {"en": ["select", "production_code", ",", "channel", "from", "cartoon", "order", "by", "original_air_date", "desc", "limit", "1", ";"], "ru": ["select", "production_code", ",", "channel", "from", "cartoon", "order", "by", "original_air_date", "desc", "limit", "1", ";"]}, "query_toks_no_values": {"en": ["select", "production_code", ",", "channel", "from", "cartoon", "order", "by", "original_air_date", "desc", "limit", "1", ";"], "ru": ["select", "production_code", ",", "channel", "from", "cartoon", "order", "by", "original_air_date", "desc", "limit", "1", ";"]}, "masked_query": "select production_code ,  channel from cartoon order by original_air_date desc limit 1;", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0439 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0439 \u043a\u043e\u0434 \u0438 \u043a\u0430\u043d\u0430\u043b \u0443 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0433\u043e \u043c\u0443\u043b\u044c\u0442\u0444\u0438\u043b\u044c\u043c\u0430?"}, "question": "What is the produdction code and channel of the most recent cartoon ?", "kb_id": "tvshow"}, {"id": "D_0632", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\";"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 9, false], null]], [0, [0, [0, 2, false], null]]]], "where": [[false, 2, [0, [0, 7, false], null], "\"yes\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 9, false], null]], [0, [0, [0, 2, false], null]]]], "where": [[false, 2, [0, [0, 7, false], null], "\"yes\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Find", "the", "package", "choice", "and", "series", "name", "of", "the", "TV", "channel", "that", "has", "high", "definition", "TV", "."], "ru": ["\u041d\u0430\u0439\u0442\u0438", "\u043f\u0430\u043a\u0435\u0442", "\u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0435\u043d\u0438\u0439", "\u0438", "\u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435", "\u0441\u0435\u0440\u0438\u0430\u043b\u043e\u0432", "\u0442\u0435\u043b\u0435\u043a\u0430\u043d\u0430\u043b\u0430", ",", "\u043d\u0430", "\u043a\u043e\u0442\u043e\u0440\u043e\u043c", "\u0435\u0441\u0442\u044c", "\u0432\u0438\u0434\u0435\u043e", "\u0432\u044b\u0441\u043e\u043a\u043e\u0439", "\u0447\u0435\u0442\u043a\u043e\u0441\u0442\u0438", "."]}, "query_toks": {"en": ["select", "package_option", ",", "series_name", "from", "tv_channel", "where", "hight_definition_tv", "=", "\"yes\"", ";"], "ru": ["select", "package_option", ",", "series_name", "from", "tv_channel", "where", "hight_definition_tv", "=", "\"yes\"", ";"]}, "query_toks_no_values": {"en": ["select", "package_option", ",", "series_name", "from", "tv_channel", "where", "hight_definition_tv", "=", "value", ";"], "ru": ["select", "package_option", ",", "series_name", "from", "tv_channel", "where", "hight_definition_tv", "=", "value", ";"]}, "masked_query": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\";", "question_pauq": {"ru": "\u041d\u0430\u0439\u0442\u0438 \u043f\u0430\u043a\u0435\u0442 \u043f\u0440\u0435\u0434\u043b\u043e\u0436\u0435\u043d\u0438\u0439 \u0438 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u0441\u0435\u0440\u0438\u0430\u043b\u043e\u0432 \u0442\u0435\u043b\u0435\u043a\u0430\u043d\u0430\u043b\u0430, \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u0435\u0441\u0442\u044c \u0432\u0438\u0434\u0435\u043e \u0432\u044b\u0441\u043e\u043a\u043e\u0439 \u0447\u0435\u0442\u043a\u043e\u0441\u0442\u0438."}, "question": "Find the package choice and series name of the TV channel that has high definition TV.", "kb_id": "tvshow"}, {"id": "D_0633", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\";"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 9, false], null]], [0, [0, [0, 2, false], null]]]], "where": [[false, 2, [0, [0, 7, false], null], "\"yes\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 9, false], null]], [0, [0, [0, 2, false], null]]]], "where": [[false, 2, [0, [0, 7, false], null], "\"yes\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "the", "package", "options", "and", "the", "name", "of", "the", "series", "for", "the", "TV", "Channel", "that", "supports", "high", "definition", "TV", "?"], "ru": ["\u041a\u0430\u043a\u0438\u0435", "\u0435\u0441\u0442\u044c", "\u0432\u0430\u0440\u0438\u0430\u043d\u0442\u044b", "\u043f\u0430\u043a\u0435\u0442\u0430", "\u0438", "\u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f", "\u0441\u0435\u0440\u0438\u0430\u043b\u043e\u0432", "\u0442\u0435\u043b\u0435\u043a\u0430\u043d\u0430\u043b\u0430", ",", "\u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u044e\u0449\u0435\u0433\u043e", "\u0432\u0438\u0434\u0435\u043e", "\u0432\u044b\u0441\u043e\u043a\u043e\u0433\u043e", "\u0440\u0430\u0437\u0440\u0435\u0448\u0435\u043d\u0438\u044f", "?"]}, "query_toks": {"en": ["select", "package_option", ",", "series_name", "from", "tv_channel", "where", "hight_definition_tv", "=", "\"yes\"", ";"], "ru": ["select", "package_option", ",", "series_name", "from", "tv_channel", "where", "hight_definition_tv", "=", "\"yes\"", ";"]}, "query_toks_no_values": {"en": ["select", "package_option", ",", "series_name", "from", "tv_channel", "where", "hight_definition_tv", "=", "value", ";"], "ru": ["select", "package_option", ",", "series_name", "from", "tv_channel", "where", "hight_definition_tv", "=", "value", ";"]}, "masked_query": "SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\";", "question_pauq": {"ru": "\u041a\u0430\u043a\u0438\u0435 \u0435\u0441\u0442\u044c \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u044b \u043f\u0430\u043a\u0435\u0442\u0430 \u0438 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f \u0441\u0435\u0440\u0438\u0430\u043b\u043e\u0432 \u0442\u0435\u043b\u0435\u043a\u0430\u043d\u0430\u043b\u0430, \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u044e\u0449\u0435\u0433\u043e \u0432\u0438\u0434\u0435\u043e \u0432\u044b\u0441\u043e\u043a\u043e\u0433\u043e \u0440\u0430\u0437\u0440\u0435\u0448\u0435\u043d\u0438\u044f?"}, "question": "What are the package options and the name of the series for the TV Channel that supports high definition TV?", "kb_id": "tvshow"}, {"id": "D_0634", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  '\u0420\u0438\u0434\u043b\u0438 \u0421\u043a\u043e\u0442\u0442';"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 25, false], null]]}, "select": [false, [[0, [0, [0, 3, false], null]]]], "where": [[false, 2, [0, [0, 22, false], null], "\"Todd Casey\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 25, false], null]]}, "select": [false, [[0, [0, [0, 3, false], null]]]], "where": [[false, 2, [0, [0, 22, false], null], "\"\u0420\u0438\u0434\u043b\u0438 \u0421\u043a\u043e\u0442\u0442\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["which", "countries", "'", "tv", "channels", "are", "playing", "some", "cartoon", "written", "by", "Todd", "Casey", "?"], "ru": ["\u041d\u0430", "\u0442\u0435\u043b\u0435\u043a\u0430\u043d\u0430\u043b\u0430\u0445", "\u043a\u0430\u043a\u0438\u0445", "\u0441\u0442\u0440\u0430\u043d", "\u0442\u0440\u0430\u043d\u0441\u043b\u0438\u0440\u0443\u0435\u0442\u0441\u044f", "\u043a\u0430\u043a\u043e\u0439-\u043d\u0438\u0431\u0443\u0434\u044c", "\u043c\u0443\u043b\u044c\u0442\u0444\u0438\u043b\u044c\u043c", "\u0420\u0438\u0434\u043b\u0438", "\u0421\u043a\u043e\u0442\u0442\u0430", "?"]}, "query_toks": {"en": ["select", "t1.country", "from", "tv_channel", "as", "t1", "join", "cartoon", "as", "t2", "on", "t1.id", "=", "t2.channel", "where", "t2.written_by", "=", "\"Todd Casey\"", ";"], "ru": ["select", "t1.country", "from", "tv_channel", "as", "t1", "join", "cartoon", "as", "t2", "on", "t1.id", "=", "t2.channel", "where", "t2.written_by", "=", "\"\u0420\u0438\u0434\u043b\u0438 \u0421\u043a\u043e\u0442\u0442\"", ";"]}, "query_toks_no_values": {"en": ["select", "t1.country", "from", "tv_channel", "as", "t1", "join", "cartoon", "as", "t2", "on", "t1.id", "=", "t2.channel", "where", "t2.written_by", "=", "value", ";"], "ru": ["select", "t1.country", "from", "tv_channel", "as", "t1", "join", "cartoon", "as", "t2", "on", "t1.id", "=", "t2.channel", "where", "t2.written_by", "=", "value", ";"]}, "masked_query": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey';", "question_pauq": {"ru": "\u041d\u0430 \u0442\u0435\u043b\u0435\u043a\u0430\u043d\u0430\u043b\u0430\u0445 \u043a\u0430\u043a\u0438\u0445 \u0441\u0442\u0440\u0430\u043d \u0442\u0440\u0430\u043d\u0441\u043b\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u043a\u0430\u043a\u043e\u0439-\u043d\u0438\u0431\u0443\u0434\u044c \u043c\u0443\u043b\u044c\u0442\u0444\u0438\u043b\u044c\u043c \u0420\u0438\u0434\u043b\u0438 \u0421\u043a\u043e\u0442\u0442\u0430?"}, "question": "which countries' tv channels are playing some cartoon written by Todd Casey?", "kb_id": "tvshow"}, {"id": "D_0635", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  '\u0420\u0438\u0434\u043b\u0438 \u0421\u043a\u043e\u0442\u0442';"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 25, false], null]]}, "select": [false, [[0, [0, [0, 3, false], null]]]], "where": [[false, 2, [0, [0, 22, false], null], "\"Todd Casey\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 25, false], null]]}, "select": [false, [[0, [0, [0, 3, false], null]]]], "where": [[false, 2, [0, [0, 22, false], null], "\"\u0420\u0438\u0434\u043b\u0438 \u0421\u043a\u043e\u0442\u0442\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "the", "countries", "that", "have", "cartoons", "on", "TV", "that", "were", "written", "by", "Todd", "Casey", "?"], "ru": ["\u0412", "\u043a\u0430\u043a\u0438\u0445", "\u0441\u0442\u0440\u0430\u043d\u0430\u0445", "\u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u044e\u0442", "\u043c\u0443\u043b\u044c\u0442\u0444\u0438\u043b\u044c\u043c\u044b", ",", "\u043d\u0430\u043f\u0438\u0441\u0430\u043d\u043d\u044b\u0435", "\u0420\u0438\u0434\u043b\u0438", "\u0421\u043a\u043e\u0442\u0442\u043e\u043c", "?"]}, "query_toks": {"en": ["select", "t1.country", "from", "tv_channel", "as", "t1", "join", "cartoon", "as", "t2", "on", "t1.id", "=", "t2.channel", "where", "t2.written_by", "=", "\"Todd Casey\"", ";"], "ru": ["select", "t1.country", "from", "tv_channel", "as", "t1", "join", "cartoon", "as", "t2", "on", "t1.id", "=", "t2.channel", "where", "t2.written_by", "=", "\"\u0420\u0438\u0434\u043b\u0438 \u0421\u043a\u043e\u0442\u0442\"", ";"]}, "query_toks_no_values": {"en": ["select", "t1.country", "from", "tv_channel", "as", "t1", "join", "cartoon", "as", "t2", "on", "t1.id", "=", "t2.channel", "where", "t2.written_by", "=", "value", ";"], "ru": ["select", "t1.country", "from", "tv_channel", "as", "t1", "join", "cartoon", "as", "t2", "on", "t1.id", "=", "t2.channel", "where", "t2.written_by", "=", "value", ";"]}, "masked_query": "SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey';", "question_pauq": {"ru": "\u0412 \u043a\u0430\u043a\u0438\u0445 \u0441\u0442\u0440\u0430\u043d\u0430\u0445 \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u044e\u0442 \u043c\u0443\u043b\u044c\u0442\u0444\u0438\u043b\u044c\u043c\u044b, \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u043d\u044b\u0435 \u0420\u0438\u0434\u043b\u0438 \u0421\u043a\u043e\u0442\u0442\u043e\u043c?"}, "question": "What are the countries that have cartoons on TV that were written by Todd Casey?", "kb_id": "tvshow"}, {"id": "D_0636", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  '\u0420\u0438\u0434\u043b\u0438 \u0421\u043a\u043e\u0442\u0442';"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 3, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": {"from": {"table_units": [["table_unit", 0], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 25, false], null]]}, "select": [false, [[0, [0, [0, 3, false], null]]]], "where": [[false, 2, [0, [0, 22, false], null], "\"Todd Casey\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 3, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": {"from": {"table_units": [["table_unit", 0], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 25, false], null]]}, "select": [false, [[0, [0, [0, 3, false], null]]]], "where": [[false, 2, [0, [0, 22, false], null], "\"\u0420\u0438\u0434\u043b\u0438 \u0421\u043a\u043e\u0442\u0442\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}}, "question_toks": {"en": ["which", "countries", "'", "tv", "channels", "are", "not", "playing", "any", "cartoon", "written", "by", "Todd", "Casey", "?"], "ru": ["\u0442\u0435\u043b\u0435\u043a\u0430\u043d\u0430\u043b\u044b", "\u043a\u0430\u043a\u0438\u0445", "\u0441\u0442\u0440\u0430\u043d", "\u043d\u0435", "\u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u044e\u0442", "\u043c\u0443\u043b\u044c\u0442\u0444\u0438\u043b\u044c\u043c\u044b", ",", "\u043d\u0430\u043f\u0438\u0441\u0430\u043d\u043d\u044b\u0435", "\u0420\u0438\u0434\u043b\u0438", "\u0421\u043a\u043e\u0442\u0442\u043e\u043c", "?"]}, "query_toks": {"en": ["select", "country", "from", "tv_channel", "except", "select", "t1.country", "from", "tv_channel", "as", "t1", "join", "cartoon", "as", "t2", "on", "t1.id", "=", "t2.channel", "where", "t2.written_by", "=", "\"Todd Casey\"", ";"], "ru": ["select", "country", "from", "tv_channel", "except", "select", "t1.country", "from", "tv_channel", "as", "t1", "join", "cartoon", "as", "t2", "on", "t1.id", "=", "t2.channel", "where", "t2.written_by", "=", "\"\u0420\u0438\u0434\u043b\u0438 \u0421\u043a\u043e\u0442\u0442\"", ";"]}, "query_toks_no_values": {"en": ["select", "country", "from", "tv_channel", "except", "select", "t1.country", "from", "tv_channel", "as", "t1", "join", "cartoon", "as", "t2", "on", "t1.id", "=", "t2.channel", "where", "t2.written_by", "=", "value", ";"], "ru": ["select", "country", "from", "tv_channel", "except", "select", "t1.country", "from", "tv_channel", "as", "t1", "join", "cartoon", "as", "t2", "on", "t1.id", "=", "t2.channel", "where", "t2.written_by", "=", "value", ";"]}, "masked_query": "SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey';", "question_pauq": {"ru": "\u0442\u0435\u043b\u0435\u043a\u0430\u043d\u0430\u043b\u044b \u043a\u0430\u043a\u0438\u0445 \u0441\u0442\u0440\u0430\u043d \u043d\u0435 \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u044e\u0442 \u043c\u0443\u043b\u044c\u0442\u0444\u0438\u043b\u044c\u043c\u044b, \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u043d\u044b\u0435 \u0420\u0438\u0434\u043b\u0438 \u0421\u043a\u043e\u0442\u0442\u043e\u043c?"}, "question": "which countries' tv channels are not playing any cartoon written by Todd Casey?", "kb_id": "tvshow"}, {"id": "D_0637", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  '\u0420\u0438\u0434\u043b\u0438 \u0421\u043a\u043e\u0442\u0442';"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 3, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": {"from": {"table_units": [["table_unit", 0], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 25, false], null]]}, "select": [false, [[0, [0, [0, 3, false], null]]]], "where": [[false, 2, [0, [0, 22, false], null], "\"Todd Casey\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 3, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": {"from": {"table_units": [["table_unit", 0], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 25, false], null]]}, "select": [false, [[0, [0, [0, 3, false], null]]]], "where": [[false, 2, [0, [0, 22, false], null], "\"\u0420\u0438\u0434\u043b\u0438 \u0421\u043a\u043e\u0442\u0442\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}}, "question_toks": {"en": ["What", "are", "the", "countries", "that", "are", "not", "playing", "cartoons", "written", "by", "Todd", "Casey", "?"], "ru": ["\u0412", "\u043a\u0430\u043a\u0438\u0445", "\u0441\u0442\u0440\u0430\u043d\u0430\u0445", "\u043d\u0435", "\u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u044e\u0442", "\u043c\u0443\u043b\u044c\u0442\u0444\u0438\u043b\u044c\u043c\u044b", "\u0420\u0438\u0434\u043b\u0438", "\u0421\u043a\u043e\u0442\u0442\u0430", "?"]}, "query_toks": {"en": ["select", "country", "from", "tv_channel", "except", "select", "t1.country", "from", "tv_channel", "as", "t1", "join", "cartoon", "as", "t2", "on", "t1.id", "=", "t2.channel", "where", "t2.written_by", "=", "\"Todd Casey\"", ";"], "ru": ["select", "country", "from", "tv_channel", "except", "select", "t1.country", "from", "tv_channel", "as", "t1", "join", "cartoon", "as", "t2", "on", "t1.id", "=", "t2.channel", "where", "t2.written_by", "=", "\"\u0420\u0438\u0434\u043b\u0438 \u0421\u043a\u043e\u0442\u0442\"", ";"]}, "query_toks_no_values": {"en": ["select", "country", "from", "tv_channel", "except", "select", "t1.country", "from", "tv_channel", "as", "t1", "join", "cartoon", "as", "t2", "on", "t1.id", "=", "t2.channel", "where", "t2.written_by", "=", "value", ";"], "ru": ["select", "country", "from", "tv_channel", "except", "select", "t1.country", "from", "tv_channel", "as", "t1", "join", "cartoon", "as", "t2", "on", "t1.id", "=", "t2.channel", "where", "t2.written_by", "=", "value", ";"]}, "masked_query": "SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey';", "question_pauq": {"ru": "\u0412 \u043a\u0430\u043a\u0438\u0445 \u0441\u0442\u0440\u0430\u043d\u0430\u0445 \u043d\u0435 \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u044e\u0442 \u043c\u0443\u043b\u044c\u0442\u0444\u0438\u043b\u044c\u043c\u044b \u0420\u0438\u0434\u043b\u0438 \u0421\u043a\u043e\u0442\u0442\u0430?"}, "question": "What are the countries that are not playing cartoons written by Todd Casey?", "kb_id": "tvshow"}, {"id": "D_0638", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  '\u041d\u0438\u043a\u043e\u043b\u0430\u0439 \u041b\u0435\u0431\u0435\u0434\u0435\u0432' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  '\u0424\u0435\u0434\u043e\u0440 \u0411\u043e\u043d\u0434\u0430\u0440\u0447\u0443\u043a';"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 25, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]], [0, [0, [0, 3, false], null]]]], "where": [[false, 2, [0, [0, 21, false], null], "\"Michael Chang\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": {"from": {"table_units": [["table_unit", 0], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 25, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]], [0, [0, [0, 3, false], null]]]], "where": [[false, 2, [0, [0, 21, false], null], "\"Ben Jones\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 25, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]], [0, [0, [0, 3, false], null]]]], "where": [[false, 2, [0, [0, 21, false], null], "\"\u041d\u0438\u043a\u043e\u043b\u0430\u0439 \u041b\u0435\u0431\u0435\u0434\u0435\u0432\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": {"from": {"table_units": [["table_unit", 0], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 25, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]], [0, [0, [0, 3, false], null]]]], "where": [[false, 2, [0, [0, 21, false], null], "\"\u0424\u0435\u0434\u043e\u0440 \u0411\u043e\u043d\u0434\u0430\u0440\u0447\u0443\u043a\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "union": null, "except": null}}, "question_toks": {"en": ["Find", "the", "series", "name", "and", "country", "of", "the", "tv", "channel", "that", "is", "playing", "some", "cartoons", "directed", "by", "Ben", "Jones", "and", "Michael", "Chang", "?"], "ru": ["\u041d\u0430\u0439\u0434\u0438\u0442\u0435", "\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443", "\u0438", "\u0441\u0442\u0440\u0430\u043d\u0443", "\u0442\u0435\u043b\u0435\u043a\u0430\u043d\u0430\u043b\u0430", ",", "\u043d\u0430", "\u043a\u043e\u0442\u043e\u0440\u043e\u043c", "\u0442\u0440\u0430\u043d\u0441\u043b\u0438\u0440\u0443\u044e\u0442\u0441\u044f", "\u043c\u0443\u043b\u044c\u0442\u0444\u0438\u043b\u044c\u043c\u044b", "\u0424\u0435\u0434\u043e\u0440\u0430", "\u0411\u043e\u043d\u0434\u0430\u0440\u0447\u0443\u043a\u0430", "\u0438", "\u041d\u0438\u043a\u043e\u043b\u0430\u044f", "\u041b\u0435\u0431\u0435\u0434\u0435\u0432\u0430"]}, "query_toks": {"en": ["select", "t1.series_name", ",", "t1.country", "from", "tv_channel", "as", "t1", "join", "cartoon", "as", "t2", "on", "t1.id", "=", "t2.channel", "where", "t2.directed_by", "=", "\"Michael Chang\"", "intersect", "select", "t1.series_name", ",", "t1.country", "from", "tv_channel", "as", "t1", "join", "cartoon", "as", "t2", "on", "t1.id", "=", "t2.channel", "where", "t2.directed_by", "=", "\"Ben Jones\"", ";"], "ru": ["select", "t1.series_name", ",", "t1.country", "from", "tv_channel", "as", "t1", "join", "cartoon", "as", "t2", "on", "t1.id", "=", "t2.channel", "where", "t2.directed_by", "=", "\"\u041d\u0438\u043a\u043e\u043b\u0430\u0439 \u041b\u0435\u0431\u0435\u0434\u0435\u0432\"", "intersect", "select", "t1.series_name", ",", "t1.country", "from", "tv_channel", "as", "t1", "join", "cartoon", "as", "t2", "on", "t1.id", "=", "t2.channel", "where", "t2.directed_by", "=", "\"\u0424\u0435\u0434\u043e\u0440 \u0411\u043e\u043d\u0434\u0430\u0440\u0447\u0443\u043a\"", ";"]}, "query_toks_no_values": {"en": ["select", "t1.series_name", ",", "t1.country", "from", "tv_channel", "as", "t1", "join", "cartoon", "as", "t2", "on", "t1.id", "=", "t2.channel", "where", "t2.directed_by", "=", "value", "intersect", "select", "t1.series_name", ",", "t1.country", "from", "tv_channel", "as", "t1", "join", "cartoon", "as", "t2", "on", "t1.id", "=", "t2.channel", "where", "t2.directed_by", "=", "value", ";"], "ru": ["select", "t1.series_name", ",", "t1.country", "from", "tv_channel", "as", "t1", "join", "cartoon", "as", "t2", "on", "t1.id", "=", "t2.channel", "where", "t2.directed_by", "=", "value", "intersect", "select", "t1.series_name", ",", "t1.country", "from", "tv_channel", "as", "t1", "join", "cartoon", "as", "t2", "on", "t1.id", "=", "t2.channel", "where", "t2.directed_by", "=", "value", ";"]}, "masked_query": "SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones';", "question_pauq": {"ru": "\u041d\u0430\u0439\u0434\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443 \u0438 \u0441\u0442\u0440\u0430\u043d\u0443 \u0442\u0435\u043b\u0435\u043a\u0430\u043d\u0430\u043b\u0430, \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u0442\u0440\u0430\u043d\u0441\u043b\u0438\u0440\u0443\u044e\u0442\u0441\u044f \u043c\u0443\u043b\u044c\u0442\u0444\u0438\u043b\u044c\u043c\u044b \u0424\u0435\u0434\u043e\u0440\u0430 \u0411\u043e\u043d\u0434\u0430\u0440\u0447\u0443\u043a\u0430 \u0438 \u041d\u0438\u043a\u043e\u043b\u0430\u044f \u041b\u0435\u0431\u0435\u0434\u0435\u0432\u0430"}, "question": "Find the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and Michael Chang?", "kb_id": "tvshow"}, {"id": "D_0639", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  '\u041d\u0438\u043a\u043e\u043b\u0430\u0439 \u041b\u0435\u0431\u0435\u0434\u0435\u0432' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  '\u0424\u0435\u0434\u043e\u0440 \u0411\u043e\u043d\u0434\u0430\u0440\u0447\u0443\u043a';"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 25, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]], [0, [0, [0, 3, false], null]]]], "where": [[false, 2, [0, [0, 21, false], null], "\"Michael Chang\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": {"from": {"table_units": [["table_unit", 0], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 25, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]], [0, [0, [0, 3, false], null]]]], "where": [[false, 2, [0, [0, 21, false], null], "\"Ben Jones\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 25, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]], [0, [0, [0, 3, false], null]]]], "where": [[false, 2, [0, [0, 21, false], null], "\"\u041d\u0438\u043a\u043e\u043b\u0430\u0439 \u041b\u0435\u0431\u0435\u0434\u0435\u0432\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": {"from": {"table_units": [["table_unit", 0], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 25, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]], [0, [0, [0, 3, false], null]]]], "where": [[false, 2, [0, [0, 21, false], null], "\"\u0424\u0435\u0434\u043e\u0440 \u0411\u043e\u043d\u0434\u0430\u0440\u0447\u0443\u043a\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "series", "name", "and", "country", "of", "all", "TV", "channels", "that", "are", "playing", "cartoons", "directed", "by", "Ben", "Jones", "and", "cartoons", "directed", "by", "Michael", "Chang", "?"], "ru": ["\u041a\u0430\u043a\u0430\u044f", "\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430", "\u0438", "\u0441\u0442\u0440\u0430\u043d\u0430", "\u0443", "\u0432\u0441\u0435\u0445", "\u0442\u0435\u043b\u0435\u043a\u0430\u043d\u0430\u043b\u043e\u0432", ",", "\u043a\u043e\u0442\u043e\u0440\u044b\u0435", "\u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u044e\u0442", "\u043c\u0443\u043b\u044c\u0442\u0444\u0438\u043b\u044c\u043c\u044b", "\u0424\u0435\u0434\u043e\u0440\u0430", "\u0411\u043e\u043d\u0434\u0430\u0440\u0447\u0443\u043a\u0430", "\u0438", "\u041d\u0438\u043a\u043e\u043b\u0430\u044f", "\u041b\u0435\u0431\u0435\u0434\u0435\u0432\u0430", "?"]}, "query_toks": {"en": ["select", "t1.series_name", ",", "t1.country", "from", "tv_channel", "as", "t1", "join", "cartoon", "as", "t2", "on", "t1.id", "=", "t2.channel", "where", "t2.directed_by", "=", "\"Michael Chang\"", "intersect", "select", "t1.series_name", ",", "t1.country", "from", "tv_channel", "as", "t1", "join", "cartoon", "as", "t2", "on", "t1.id", "=", "t2.channel", "where", "t2.directed_by", "=", "\"Ben Jones\"", ";"], "ru": ["select", "t1.series_name", ",", "t1.country", "from", "tv_channel", "as", "t1", "join", "cartoon", "as", "t2", "on", "t1.id", "=", "t2.channel", "where", "t2.directed_by", "=", "\"\u041d\u0438\u043a\u043e\u043b\u0430\u0439 \u041b\u0435\u0431\u0435\u0434\u0435\u0432\"", "intersect", "select", "t1.series_name", ",", "t1.country", "from", "tv_channel", "as", "t1", "join", "cartoon", "as", "t2", "on", "t1.id", "=", "t2.channel", "where", "t2.directed_by", "=", "\"\u0424\u0435\u0434\u043e\u0440 \u0411\u043e\u043d\u0434\u0430\u0440\u0447\u0443\u043a\"", ";"]}, "query_toks_no_values": {"en": ["select", "t1.series_name", ",", "t1.country", "from", "tv_channel", "as", "t1", "join", "cartoon", "as", "t2", "on", "t1.id", "=", "t2.channel", "where", "t2.directed_by", "=", "value", "intersect", "select", "t1.series_name", ",", "t1.country", "from", "tv_channel", "as", "t1", "join", "cartoon", "as", "t2", "on", "t1.id", "=", "t2.channel", "where", "t2.directed_by", "=", "value", ";"], "ru": ["select", "t1.series_name", ",", "t1.country", "from", "tv_channel", "as", "t1", "join", "cartoon", "as", "t2", "on", "t1.id", "=", "t2.channel", "where", "t2.directed_by", "=", "value", "intersect", "select", "t1.series_name", ",", "t1.country", "from", "tv_channel", "as", "t1", "join", "cartoon", "as", "t2", "on", "t1.id", "=", "t2.channel", "where", "t2.directed_by", "=", "value", ";"]}, "masked_query": "SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones';", "question_pauq": {"ru": "\u041a\u0430\u043a\u0430\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0438 \u0441\u0442\u0440\u0430\u043d\u0430 \u0443 \u0432\u0441\u0435\u0445 \u0442\u0435\u043b\u0435\u043a\u0430\u043d\u0430\u043b\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u044e\u0442 \u043c\u0443\u043b\u044c\u0442\u0444\u0438\u043b\u044c\u043c\u044b \u0424\u0435\u0434\u043e\u0440\u0430 \u0411\u043e\u043d\u0434\u0430\u0440\u0447\u0443\u043a\u0430 \u0438 \u041d\u0438\u043a\u043e\u043b\u0430\u044f \u041b\u0435\u0431\u0435\u0434\u0435\u0432\u0430?"}, "question": "What is the series name and country of all TV channels that are playing cartoons directed by Ben Jones and cartoons directed by Michael Chang?", "kb_id": "tvshow"}, {"id": "D_0640", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != '\u0410\u043b\u0431\u0430\u043d\u0441\u043a\u0438\u0439';"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 6, false], null]], [0, [0, [0, 3, false], null]]]], "where": [[false, 7, [0, [0, 4, false], null], "\"English\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 6, false], null]], [0, [0, [0, 3, false], null]]]], "where": [[false, 7, [0, [0, 4, false], null], "\"\u0410\u043b\u0431\u0430\u043d\u0441\u043a\u0438\u0439\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["find", "the", "pixel", "aspect", "ratio", "and", "nation", "of", "the", "tv", "channels", "that", "do", "not", "use", "English", "."], "ru": ["\u041d\u0430\u0439\u0434\u0438\u0442\u0435", "\u0441\u043e\u043e\u0442\u043d\u043e\u0448\u0435\u043d\u0438\u0435", "\u0441\u0442\u043e\u0440\u043e\u043d", "\u043f\u0438\u043a\u0441\u0435\u043b\u0435\u0439", "\u0438", "\u0441\u0442\u0440\u0430\u043d\u0443", "\u0442\u0435\u043b\u0435\u043a\u0430\u043d\u0430\u043b\u043e\u0432", ",", "\u043a\u043e\u0442\u043e\u0440\u044b\u0435", "\u043d\u0435", "\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442", "\u0430\u043b\u0431\u0430\u043d\u0441\u043a\u0438\u0439", "\u044f\u0437\u044b\u043a", "."]}, "query_toks": {"en": ["select", "pixel_aspect_ratio_par", ",", "country", "from", "tv_channel", "where", "language", "!=", "\"English\"", ";"], "ru": ["select", "pixel_aspect_ratio_par", ",", "country", "from", "tv_channel", "where", "language", "!=", "\"\u0410\u043b\u0431\u0430\u043d\u0441\u043a\u0438\u0439\"", ";"]}, "query_toks_no_values": {"en": ["select", "pixel_aspect_ratio_par", ",", "country", "from", "tv_channel", "where", "language", "!=", "value", ";"], "ru": ["select", "pixel_aspect_ratio_par", ",", "country", "from", "tv_channel", "where", "language", "!=", "value", ";"]}, "masked_query": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English';", "question_pauq": {"ru": "\u041d\u0430\u0439\u0434\u0438\u0442\u0435 \u0441\u043e\u043e\u0442\u043d\u043e\u0448\u0435\u043d\u0438\u0435 \u0441\u0442\u043e\u0440\u043e\u043d \u043f\u0438\u043a\u0441\u0435\u043b\u0435\u0439 \u0438 \u0441\u0442\u0440\u0430\u043d\u0443 \u0442\u0435\u043b\u0435\u043a\u0430\u043d\u0430\u043b\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442 \u0430\u043b\u0431\u0430\u043d\u0441\u043a\u0438\u0439 \u044f\u0437\u044b\u043a."}, "question": "find the pixel aspect ratio and nation of the tv channels that do not use English.", "kb_id": "tvshow"}, {"id": "D_0641", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != '\u0410\u043b\u0431\u0430\u043d\u0441\u043a\u0438\u0439';"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 6, false], null]], [0, [0, [0, 3, false], null]]]], "where": [[false, 7, [0, [0, 4, false], null], "\"English\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 6, false], null]], [0, [0, [0, 3, false], null]]]], "where": [[false, 7, [0, [0, 4, false], null], "\"\u0410\u043b\u0431\u0430\u043d\u0441\u043a\u0438\u0439\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "pixel", "aspect", "ratio", "and", "country", "of", "origin", "for", "all", "TV", "channels", "that", "do", "not", "use", "English", "?"], "ru": ["\u041a\u0430\u043a\u043e\u0435", "\u0441\u043e\u043e\u0442\u043d\u043e\u0448\u0435\u043d\u0438\u0435", "\u0441\u0442\u043e\u0440\u043e\u043d", "\u043f\u0438\u043a\u0441\u0435\u043b\u0435\u0439", "\u0438", "\u0441\u0442\u0440\u0430\u043d\u0430", "\u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u044f", "\u0443", "\u0432\u0441\u0435\u0445", "\u0442\u0435\u043b\u0435\u043a\u0430\u043d\u0430\u043b\u043e\u0432", ",", "\u043d\u0435", "\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0449\u0438\u0445", "\u0430\u043b\u0431\u0430\u043d\u0441\u043a\u0438\u0439", "\u044f\u0437\u044b\u043a", "?"]}, "query_toks": {"en": ["select", "pixel_aspect_ratio_par", ",", "country", "from", "tv_channel", "where", "language", "!=", "\"English\"", ";"], "ru": ["select", "pixel_aspect_ratio_par", ",", "country", "from", "tv_channel", "where", "language", "!=", "\"\u0410\u043b\u0431\u0430\u043d\u0441\u043a\u0438\u0439\"", ";"]}, "query_toks_no_values": {"en": ["select", "pixel_aspect_ratio_par", ",", "country", "from", "tv_channel", "where", "language", "!=", "value", ";"], "ru": ["select", "pixel_aspect_ratio_par", ",", "country", "from", "tv_channel", "where", "language", "!=", "value", ";"]}, "masked_query": "SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English';", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0435 \u0441\u043e\u043e\u0442\u043d\u043e\u0448\u0435\u043d\u0438\u0435 \u0441\u0442\u043e\u0440\u043e\u043d \u043f\u0438\u043a\u0441\u0435\u043b\u0435\u0439 \u0438 \u0441\u0442\u0440\u0430\u043d\u0430 \u043f\u0440\u043e\u0438\u0441\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u044f \u0443 \u0432\u0441\u0435\u0445 \u0442\u0435\u043b\u0435\u043a\u0430\u043d\u0430\u043b\u043e\u0432, \u043d\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0449\u0438\u0445 \u0430\u043b\u0431\u0430\u043d\u0441\u043a\u0438\u0439 \u044f\u0437\u044b\u043a?"}, "question": "What is the pixel aspect ratio and country of origin for all TV channels that do not use English?", "kb_id": "tvshow"}, {"id": "D_0642", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 1, false], null]]]], "where": [], "groupBy": [[0, 3, false]], "having": [[false, 3, [0, [3, 0, false], null], 2.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 1, false], null]]]], "where": [], "groupBy": [[0, 3, false]], "having": [[false, 3, [0, [3, 0, false], null], 2.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["find", "id", "of", "the", "tv", "channels", "that", "from", "the", "countries", "where", "have", "more", "than", "two", "tv", "channels", "."], "ru": ["\u043d\u0430\u0439\u0442\u0438", "id", "\u0442\u0435\u043b\u0435\u043a\u0430\u043d\u0430\u043b\u043e\u0432", "\u0438\u0437", "\u0441\u0442\u0440\u0430\u043d", ",", "\u0433\u0434\u0435", "\u0435\u0441\u0442\u044c", "\u0431\u043e\u043b\u0435\u0435", "\u0434\u0432\u0443\u0445", "\u0442\u0435\u043b\u0435\u043a\u0430\u043d\u0430\u043b\u043e\u0432", "."]}, "query_toks": {"en": ["select", "id", "from", "tv_channel", "group", "by", "country", "having", "count", "(", "*", ")", ">", "2", ";"], "ru": ["select", "id", "from", "tv_channel", "group", "by", "country", "having", "count", "(", "*", ")", ">", "2", ";"]}, "query_toks_no_values": {"en": ["select", "id", "from", "tv_channel", "group", "by", "country", "having", "count", "(", "*", ")", ">", "2", ";"], "ru": ["select", "id", "from", "tv_channel", "group", "by", "country", "having", "count", "(", "*", ")", ">", "2", ";"]}, "masked_query": "SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2;", "question_pauq": {"ru": "\u043d\u0430\u0439\u0442\u0438 id \u0442\u0435\u043b\u0435\u043a\u0430\u043d\u0430\u043b\u043e\u0432 \u0438\u0437 \u0441\u0442\u0440\u0430\u043d, \u0433\u0434\u0435 \u0435\u0441\u0442\u044c \u0431\u043e\u043b\u0435\u0435 \u0434\u0432\u0443\u0445 \u0442\u0435\u043b\u0435\u043a\u0430\u043d\u0430\u043b\u043e\u0432."}, "question": "find id of the tv channels that from the countries where have more than two tv channels.", "kb_id": "tvshow"}, {"id": "D_0643", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 1, false], null]]]], "where": [], "groupBy": [[0, 3, false]], "having": [[false, 3, [0, [3, 0, false], null], 2.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 1, false], null]]]], "where": [], "groupBy": [[0, 3, false]], "having": [[false, 3, [0, [3, 0, false], null], 2.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "the", "ids", "of", "all", "tv", "channels", "that", "have", "more", "than", "2", "TV", "channels", "?"], "ru": ["\u041a\u0430\u043a\u0438\u0435", "id", "\u0443", "\u0432\u0441\u0435\u0445", "\u0442\u0435\u043b\u0435\u043a\u0430\u043d\u0430\u043b\u043e\u0432", ",", "\u043d\u0430", "\u043a\u043e\u0442\u043e\u0440\u044b\u0445", "\u0431\u043e\u043b\u044c\u0448\u0435", "2", "\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c", "?"]}, "query_toks": {"en": ["select", "id", "from", "tv_channel", "group", "by", "country", "having", "count", "(", "*", ")", ">", "2", ";"], "ru": ["select", "id", "from", "tv_channel", "group", "by", "country", "having", "count", "(", "*", ")", ">", "2", ";"]}, "query_toks_no_values": {"en": ["select", "id", "from", "tv_channel", "group", "by", "country", "having", "count", "(", "*", ")", ">", "2", ";"], "ru": ["select", "id", "from", "tv_channel", "group", "by", "country", "having", "count", "(", "*", ")", ">", "2", ";"]}, "masked_query": "SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2;", "question_pauq": {"ru": "\u041a\u0430\u043a\u0438\u0435 id \u0443 \u0432\u0441\u0435\u0445 \u0442\u0435\u043b\u0435\u043a\u0430\u043d\u0430\u043b\u043e\u0432, \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0431\u043e\u043b\u044c\u0448\u0435 2 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c?"}, "question": "What are the ids of all tv channels that have more than 2 TV channels?", "kb_id": "tvshow"}, {"id": "D_0644", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  '\u0424\u0435\u0434\u043e\u0440 \u0411\u043e\u043d\u0434\u0430\u0440\u0447\u0443\u043a';"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 1, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 25, false], null]]]], "where": [[false, 2, [0, [0, 21, false], null], "\"Ben Jones\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 1, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 25, false], null]]]], "where": [[false, 2, [0, [0, 21, false], null], "\"\u0424\u0435\u0434\u043e\u0440 \u0411\u043e\u043d\u0434\u0430\u0440\u0447\u0443\u043a\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}}, "question_toks": {"en": ["find", "the", "id", "of", "tv", "channels", "that", "do", "not", "play", "any", "cartoon", "directed", "by", "Ben", "Jones", "."], "ru": ["\u043d\u0430\u0439\u0442\u0438", "id", "\u0442\u0435\u043b\u0435\u043a\u0430\u043d\u0430\u043b\u043e\u0432", ",", "\u043d\u0430", "\u043a\u043e\u0442\u043e\u0440\u044b\u0445", "\u043d\u0435", "\u0432\u043e\u0441\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u044f\u0442\u0441\u044f", "\u043c\u0443\u043b\u044c\u0442\u0444\u0438\u043b\u044c\u043c\u044b", "\u0424\u0435\u0434\u043e\u0440\u0430", "\u0411\u043e\u043d\u0434\u0430\u0440\u0447\u0443\u043a\u0430", "."]}, "query_toks": {"en": ["select", "id", "from", "tv_channel", "except", "select", "channel", "from", "cartoon", "where", "directed_by", "=", "\"Ben Jones\"", ";"], "ru": ["select", "id", "from", "tv_channel", "except", "select", "channel", "from", "cartoon", "where", "directed_by", "=", "\"\u0424\u0435\u0434\u043e\u0440 \u0411\u043e\u043d\u0434\u0430\u0440\u0447\u0443\u043a\"", ";"]}, "query_toks_no_values": {"en": ["select", "id", "from", "tv_channel", "except", "select", "channel", "from", "cartoon", "where", "directed_by", "=", "value", ";"], "ru": ["select", "id", "from", "tv_channel", "except", "select", "channel", "from", "cartoon", "where", "directed_by", "=", "value", ";"]}, "masked_query": "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones';", "question_pauq": {"ru": "\u043d\u0430\u0439\u0442\u0438 id \u0442\u0435\u043b\u0435\u043a\u0430\u043d\u0430\u043b\u043e\u0432, \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043d\u0435 \u0432\u043e\u0441\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u044f\u0442\u0441\u044f \u043c\u0443\u043b\u044c\u0442\u0444\u0438\u043b\u044c\u043c\u044b \u0424\u0435\u0434\u043e\u0440\u0430 \u0411\u043e\u043d\u0434\u0430\u0440\u0447\u0443\u043a\u0430."}, "question": "find the id of tv channels that do not play any cartoon directed by Ben Jones.", "kb_id": "tvshow"}, {"id": "D_0645", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  '\u0424\u0435\u0434\u043e\u0440 \u0411\u043e\u043d\u0434\u0430\u0440\u0447\u0443\u043a';"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 1, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 25, false], null]]]], "where": [[false, 2, [0, [0, 21, false], null], "\"Ben Jones\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 1, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 25, false], null]]]], "where": [[false, 2, [0, [0, 21, false], null], "\"\u0424\u0435\u0434\u043e\u0440 \u0411\u043e\u043d\u0434\u0430\u0440\u0447\u0443\u043a\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}}, "question_toks": {"en": ["What", "are", "the", "ids", "of", "the", "TV", "channels", "that", "do", "not", "have", "any", "cartoons", "directed", "by", "Ben", "Jones", "?"], "ru": ["\u041a\u0430\u043a\u0438\u0435", "id", "\u0442\u0435\u043b\u0435\u043a\u0430\u043d\u0430\u043b\u043e\u0432", ",", "\u043d\u0430", "\u043a\u043e\u0442\u043e\u0440\u044b\u0445", "\u043d\u0435\u0442", "\u043c\u0443\u043b\u044c\u0442\u0444\u0438\u043b\u044c\u043c\u043e\u0432", "\u0424\u0435\u0434\u043e\u0440\u0430", "\u0411\u043e\u043d\u0434\u0430\u0440\u0447\u0443\u043a\u0430", "?"]}, "query_toks": {"en": ["select", "id", "from", "tv_channel", "except", "select", "channel", "from", "cartoon", "where", "directed_by", "=", "\"Ben Jones\"", ";"], "ru": ["select", "id", "from", "tv_channel", "except", "select", "channel", "from", "cartoon", "where", "directed_by", "=", "\"\u0424\u0435\u0434\u043e\u0440 \u0411\u043e\u043d\u0434\u0430\u0440\u0447\u0443\u043a\"", ";"]}, "query_toks_no_values": {"en": ["select", "id", "from", "tv_channel", "except", "select", "channel", "from", "cartoon", "where", "directed_by", "=", "value", ";"], "ru": ["select", "id", "from", "tv_channel", "except", "select", "channel", "from", "cartoon", "where", "directed_by", "=", "value", ";"]}, "masked_query": "SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones';", "question_pauq": {"ru": "\u041a\u0430\u043a\u0438\u0435 id \u0442\u0435\u043b\u0435\u043a\u0430\u043d\u0430\u043b\u043e\u0432, \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043d\u0435\u0442 \u043c\u0443\u043b\u044c\u0442\u0444\u0438\u043b\u044c\u043c\u043e\u0432 \u0424\u0435\u0434\u043e\u0440\u0430 \u0411\u043e\u043d\u0434\u0430\u0440\u0447\u0443\u043a\u0430?"}, "question": "What are the ids of the TV channels that do not have any cartoons directed by Ben Jones?", "kb_id": "tvshow"}, {"id": "D_0646", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  '\u0424\u0435\u0434\u043e\u0440 \u0411\u043e\u043d\u0434\u0430\u0440\u0447\u0443\u043a');"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [[true, 8, [0, [0, 1, false], null], {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 25, false], null]]]], "where": [[false, 2, [0, [0, 21, false], null], "\"Ben Jones\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [[true, 8, [0, [0, 1, false], null], {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 25, false], null]]]], "where": [[false, 2, [0, [0, 21, false], null], "\"\u0424\u0435\u0434\u043e\u0440 \u0411\u043e\u043d\u0434\u0430\u0440\u0447\u0443\u043a\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["find", "the", "package", "option", "of", "the", "tv", "channel", "that", "do", "not", "have", "any", "cartoon", "directed", "by", "Ben", "Jones", "."], "ru": ["\u043d\u0430\u0439\u0434\u0438\u0442\u0435", "\u0432\u0430\u0440\u0438\u0430\u043d\u0442", "\u043f\u0430\u043a\u0435\u0442\u0430", "\u0442\u0435\u043b\u0435\u043a\u0430\u043d\u0430\u043b\u043e\u0432", ",", "\u0432", "\u043a\u043e\u0442\u043e\u0440\u043e\u043c", "\u043d\u0435\u0442", "\u043d\u0438", "\u043e\u0434\u043d\u043e\u0433\u043e", "\u043c\u0443\u043b\u044c\u0442\u0444\u0438\u043b\u044c\u043c\u0430", "\u0424\u0435\u0434\u043e\u0440\u0430", "\u0411\u043e\u043d\u0434\u0430\u0440\u0447\u0443\u043a\u0430", "."]}, "query_toks": {"en": ["select", "package_option", "from", "tv_channel", "where", "id", "not", "in", "(", "select", "channel", "from", "cartoon", "where", "directed_by", "=", "\"Ben Jones\"", ")", ";"], "ru": ["select", "package_option", "from", "tv_channel", "where", "id", "not", "in", "(", "select", "channel", "from", "cartoon", "where", "directed_by", "=", "\"\u0424\u0435\u0434\u043e\u0440 \u0411\u043e\u043d\u0434\u0430\u0440\u0447\u0443\u043a\"", ")", ";"]}, "query_toks_no_values": {"en": ["select", "package_option", "from", "tv_channel", "where", "id", "not", "in", "(", "select", "channel", "from", "cartoon", "where", "directed_by", "=", "value", ")", ";"], "ru": ["select", "package_option", "from", "tv_channel", "where", "id", "not", "in", "(", "select", "channel", "from", "cartoon", "where", "directed_by", "=", "value", ")", ";"]}, "masked_query": "SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones');", "question_pauq": {"ru": "\u043d\u0430\u0439\u0434\u0438\u0442\u0435 \u0432\u0430\u0440\u0438\u0430\u043d\u0442 \u043f\u0430\u043a\u0435\u0442\u0430 \u0442\u0435\u043b\u0435\u043a\u0430\u043d\u0430\u043b\u043e\u0432, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u043d\u0435\u0442 \u043d\u0438 \u043e\u0434\u043d\u043e\u0433\u043e \u043c\u0443\u043b\u044c\u0442\u0444\u0438\u043b\u044c\u043c\u0430 \u0424\u0435\u0434\u043e\u0440\u0430 \u0411\u043e\u043d\u0434\u0430\u0440\u0447\u0443\u043a\u0430."}, "question": "find the package option of the tv channel that do not have any cartoon directed by Ben Jones.", "kb_id": "tvshow"}, {"id": "D_0647", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  '\u0424\u0435\u0434\u043e\u0440 \u0411\u043e\u043d\u0434\u0430\u0440\u0447\u0443\u043a');"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [[true, 8, [0, [0, 1, false], null], {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 25, false], null]]]], "where": [[false, 2, [0, [0, 21, false], null], "\"Ben Jones\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [[true, 8, [0, [0, 1, false], null], {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 25, false], null]]]], "where": [[false, 2, [0, [0, 21, false], null], "\"\u0424\u0435\u0434\u043e\u0440 \u0411\u043e\u043d\u0434\u0430\u0440\u0447\u0443\u043a\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "the", "package", "options", "of", "all", "tv", "channels", "that", "are", "not", "playing", "any", "cartoons", "directed", "by", "Ben", "Jones", "?"], "ru": ["\u041a\u0430\u043a\u0438\u0435", "\u0435\u0441\u0442\u044c", "\u0432\u0430\u0440\u0438\u0430\u043d\u0442\u044b", "\u043f\u0430\u043a\u0435\u0442\u043e\u0432", "\u0442\u0435\u043b\u0435\u043a\u0430\u043d\u0430\u043b\u043e\u0432", ",", "\u043d\u0430", "\u043a\u043e\u0442\u043e\u0440\u044b\u0445", "\u043d\u0435", "\u0432\u043e\u0441\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u044f\u0442\u0441\u044f", "\u043c\u0443\u043b\u044c\u0442\u0444\u0438\u043b\u044c\u043c\u044b", "\u0424\u0435\u0434\u043e\u0440\u0430", "\u0411\u043e\u043d\u0434\u0430\u0440\u0447\u0443\u043a\u0430", "?"]}, "query_toks": {"en": ["select", "package_option", "from", "tv_channel", "where", "id", "not", "in", "(", "select", "channel", "from", "cartoon", "where", "directed_by", "=", "\"Ben Jones\"", ")", ";"], "ru": ["select", "package_option", "from", "tv_channel", "where", "id", "not", "in", "(", "select", "channel", "from", "cartoon", "where", "directed_by", "=", "\"\u0424\u0435\u0434\u043e\u0440 \u0411\u043e\u043d\u0434\u0430\u0440\u0447\u0443\u043a\"", ")", ";"]}, "query_toks_no_values": {"en": ["select", "package_option", "from", "tv_channel", "where", "id", "not", "in", "(", "select", "channel", "from", "cartoon", "where", "directed_by", "=", "value", ")", ";"], "ru": ["select", "package_option", "from", "tv_channel", "where", "id", "not", "in", "(", "select", "channel", "from", "cartoon", "where", "directed_by", "=", "value", ")", ";"]}, "masked_query": "SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones');", "question_pauq": {"ru": "\u041a\u0430\u043a\u0438\u0435 \u0435\u0441\u0442\u044c \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u044b \u043f\u0430\u043a\u0435\u0442\u043e\u0432 \u0442\u0435\u043b\u0435\u043a\u0430\u043d\u0430\u043b\u043e\u0432, \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043d\u0435 \u0432\u043e\u0441\u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u044f\u0442\u0441\u044f \u043c\u0443\u043b\u044c\u0442\u0444\u0438\u043b\u044c\u043c\u044b \u0424\u0435\u0434\u043e\u0440\u0430 \u0411\u043e\u043d\u0434\u0430\u0440\u0447\u0443\u043a\u0430?"}, "question": "What are the package options of all tv channels that are not playing any cartoons directed by Ben Jones?", "kb_id": "tvshow"}, {"id": "D_0648", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT count(*) FROM poker_player;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["How", "many", "poker", "players", "are", "there", "?"], "ru": ["\u0421\u043a\u043e\u043b\u044c\u043a\u043e", "\u0432", "\u043f\u043e\u043a\u0435\u0440\u0435", "\u0438\u0433\u0440\u043e\u043a\u043e\u0432", "?"]}, "query_toks": {"en": ["select", "count", "(", "*", ")", "from", "poker_player", ";"], "ru": ["select", "count", "(", "*", ")", "from", "poker_player", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "*", ")", "from", "poker_player", ";"], "ru": ["select", "count", "(", "*", ")", "from", "poker_player", ";"]}, "masked_query": "SELECT count(*) FROM poker_player;", "question_pauq": {"ru": "\u0421\u043a\u043e\u043b\u044c\u043a\u043e \u0432 \u043f\u043e\u043a\u0435\u0440\u0435 \u0438\u0433\u0440\u043e\u043a\u043e\u0432?"}, "question": "How many poker players are there?", "kb_id": "poker_player"}, {"id": "D_0649", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT count(*) FROM poker_player;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Count", "the", "number", "of", "poker", "players", "."], "ru": ["\u041f\u043e\u0434\u0441\u0447\u0438\u0442\u0430\u0439\u0442\u0435", "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e", "\u0438\u0433\u0440\u043e\u043a\u043e\u0432", "\u0432", "\u043f\u043e\u043a\u0435\u0440", "."]}, "query_toks": {"en": ["select", "count", "(", "*", ")", "from", "poker_player", ";"], "ru": ["select", "count", "(", "*", ")", "from", "poker_player", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "*", ")", "from", "poker_player", ";"], "ru": ["select", "count", "(", "*", ")", "from", "poker_player", ";"]}, "masked_query": "SELECT count(*) FROM poker_player;", "question_pauq": {"ru": "\u041f\u043e\u0434\u0441\u0447\u0438\u0442\u0430\u0439\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0438\u0433\u0440\u043e\u043a\u043e\u0432 \u0432 \u043f\u043e\u043a\u0435\u0440."}, "question": "Count the number of poker players.", "kb_id": "poker_player"}, {"id": "D_0650", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 6, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 6, false], null]]], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 6, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 6, false], null]]], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["List", "the", "earnings", "of", "poker", "players", "in", "descending", "order", "."], "ru": ["\u041f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0438\u0442\u0435", "\u0437\u0430\u0440\u0430\u0431\u043e\u0442\u043a\u0438", "\u0438\u0433\u0440\u043e\u043a\u043e\u0432", "\u0432", "\u043f\u043e\u043a\u0435\u0440", "\u0432", "\u043f\u043e\u0440\u044f\u0434\u043a\u0435", "\u0443\u0431\u044b\u0432\u0430\u043d\u0438\u044f", "."]}, "query_toks": {"en": ["select", "earnings", "from", "poker_player", "order", "by", "earnings", "desc", ";"], "ru": ["select", "earnings", "from", "poker_player", "order", "by", "earnings", "desc", ";"]}, "query_toks_no_values": {"en": ["select", "earnings", "from", "poker_player", "order", "by", "earnings", "desc", ";"], "ru": ["select", "earnings", "from", "poker_player", "order", "by", "earnings", "desc", ";"]}, "masked_query": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC;", "question_pauq": {"ru": "\u041f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0438\u0442\u0435 \u0437\u0430\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0438\u0433\u0440\u043e\u043a\u043e\u0432 \u0432 \u043f\u043e\u043a\u0435\u0440 \u0432 \u043f\u043e\u0440\u044f\u0434\u043a\u0435 \u0443\u0431\u044b\u0432\u0430\u043d\u0438\u044f."}, "question": "List the earnings of poker players in descending order.", "kb_id": "poker_player"}, {"id": "D_0651", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 6, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 6, false], null]]], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 6, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 6, false], null]]], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "the", "earnings", "of", "poker", "players", ",", "ordered", "descending", "by", "value", "?"], "ru": ["\u041a\u0430\u043a\u043e\u0432\u044b", "\u0434\u043e\u0445\u043e\u0434\u044b", "\u0438\u0433\u0440\u043e\u043a\u043e\u0432", "\u0432", "\u043f\u043e\u043a\u0435\u0440", ",", "\u043e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435", "\u043f\u043e", "\u0443\u0431\u044b\u0432\u0430\u043d\u0438\u044e", "\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f", "?"]}, "query_toks": {"en": ["select", "earnings", "from", "poker_player", "order", "by", "earnings", "desc", ";"], "ru": ["select", "earnings", "from", "poker_player", "order", "by", "earnings", "desc", ";"]}, "query_toks_no_values": {"en": ["select", "earnings", "from", "poker_player", "order", "by", "earnings", "desc", ";"], "ru": ["select", "earnings", "from", "poker_player", "order", "by", "earnings", "desc", ";"]}, "masked_query": "SELECT Earnings FROM poker_player ORDER BY Earnings DESC;", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0432\u044b \u0434\u043e\u0445\u043e\u0434\u044b \u0438\u0433\u0440\u043e\u043a\u043e\u0432 \u0432 \u043f\u043e\u043a\u0435\u0440, \u043e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u043f\u043e \u0443\u0431\u044b\u0432\u0430\u043d\u0438\u044e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f?"}, "question": "What are the earnings of poker players, ordered descending by value?", "kb_id": "poker_player"}, {"id": "D_0652", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 3, false], null]], [0, [0, [0, 4, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 3, false], null]], [0, [0, [0, 4, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["List", "the", "final", "tables", "made", "and", "the", "best", "finishes", "of", "poker", "players", "."], "ru": ["\u0421\u043e\u0441\u0442\u0430\u0432\u044c", "\u0441\u043f\u0438\u0441\u043e\u043a", "\u0441\u043e\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0445", "\u0444\u0438\u043d\u0430\u043b\u044c\u043d\u044b\u0445", "\u0441\u0442\u043e\u043b\u043e\u0432", "\u0438", "\u043b\u0443\u0447\u0448\u0438\u0445", "\u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432", "\u0438\u0433\u0440\u043e\u043a\u043e\u0432", "\u0432", "\u043f\u043e\u043a\u0435\u0440", "."]}, "query_toks": {"en": ["select", "final_table_made", ",", "best_finish", "from", "poker_player", ";"], "ru": ["select", "final_table_made", ",", "best_finish", "from", "poker_player", ";"]}, "query_toks_no_values": {"en": ["select", "final_table_made", ",", "best_finish", "from", "poker_player", ";"], "ru": ["select", "final_table_made", ",", "best_finish", "from", "poker_player", ";"]}, "masked_query": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player;", "question_pauq": {"ru": "\u0421\u043e\u0441\u0442\u0430\u0432\u044c \u0441\u043f\u0438\u0441\u043e\u043a \u0441\u043e\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0445 \u0444\u0438\u043d\u0430\u043b\u044c\u043d\u044b\u0445 \u0441\u0442\u043e\u043b\u043e\u0432 \u0438 \u043b\u0443\u0447\u0448\u0438\u0445 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u0432 \u0438\u0433\u0440\u043e\u043a\u043e\u0432 \u0432 \u043f\u043e\u043a\u0435\u0440."}, "question": "List the final tables made and the best finishes of poker players.", "kb_id": "poker_player"}, {"id": "D_0653", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 3, false], null]], [0, [0, [0, 4, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 3, false], null]], [0, [0, [0, 4, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "the", "final", "tables", "made", "and", "best", "finishes", "for", "all", "poker", "players", "?"], "ru": ["\u041a\u0430\u043a\u043e\u0432\u044b", "\u0444\u0438\u043d\u0430\u043b\u044c\u043d\u044b\u0435", "\u0441\u0442\u043e\u043b\u044b", "\u0438", "\u043b\u0443\u0447\u0448\u0438\u0435", "\u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b", "\u0434\u043b\u044f", "\u0432\u0441\u0435\u0445", "\u0438\u0433\u0440\u043e\u043a\u043e\u0432", "\u0432", "\u043f\u043e\u043a\u0435\u0440", "?"]}, "query_toks": {"en": ["select", "final_table_made", ",", "best_finish", "from", "poker_player", ";"], "ru": ["select", "final_table_made", ",", "best_finish", "from", "poker_player", ";"]}, "query_toks_no_values": {"en": ["select", "final_table_made", ",", "best_finish", "from", "poker_player", ";"], "ru": ["select", "final_table_made", ",", "best_finish", "from", "poker_player", ";"]}, "masked_query": "SELECT Final_Table_Made ,  Best_Finish FROM poker_player;", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0432\u044b \u0444\u0438\u043d\u0430\u043b\u044c\u043d\u044b\u0435 \u0441\u0442\u043e\u043b\u044b \u0438 \u043b\u0443\u0447\u0448\u0438\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0434\u043b\u044f \u0432\u0441\u0435\u0445 \u0438\u0433\u0440\u043e\u043a\u043e\u0432 \u0432 \u043f\u043e\u043a\u0435\u0440?"}, "question": "What are the final tables made and best finishes for all poker players?", "kb_id": "poker_player"}, {"id": "D_0654", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT avg(Earnings) FROM poker_player;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[5, [0, [0, 6, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[5, [0, [0, 6, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "average", "earnings", "of", "poker", "players", "?"], "ru": ["\u041a\u0430\u043a\u043e\u0432", "\u0441\u0440\u0435\u0434\u043d\u0438\u0439", "\u0437\u0430\u0440\u0430\u0431\u043e\u0442\u043e\u043a", "\u0438\u0433\u0440\u043e\u043a\u043e\u0432", "\u0432", "\u043f\u043e\u043a\u0435\u0440", "?"]}, "query_toks": {"en": ["select", "avg", "(", "earnings", ")", "from", "poker_player", ";"], "ru": ["select", "avg", "(", "earnings", ")", "from", "poker_player", ";"]}, "query_toks_no_values": {"en": ["select", "avg", "(", "earnings", ")", "from", "poker_player", ";"], "ru": ["select", "avg", "(", "earnings", ")", "from", "poker_player", ";"]}, "masked_query": "SELECT avg(Earnings) FROM poker_player;", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0432 \u0441\u0440\u0435\u0434\u043d\u0438\u0439 \u0437\u0430\u0440\u0430\u0431\u043e\u0442\u043e\u043a \u0438\u0433\u0440\u043e\u043a\u043e\u0432 \u0432 \u043f\u043e\u043a\u0435\u0440?"}, "question": "What is the average earnings of poker players?", "kb_id": "poker_player"}, {"id": "D_0655", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT avg(Earnings) FROM poker_player;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[5, [0, [0, 6, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[5, [0, [0, 6, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Return", "the", "average", "earnings", "across", "all", "poker", "players", "."], "ru": ["\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c", "\u0441\u0440\u0435\u0434\u043d\u0438\u0439", "\u0437\u0430\u0440\u0430\u0431\u043e\u0442\u043e\u043a", "\u043f\u043e", "\u0432\u0441\u0435\u043c", "\u0438\u0433\u0440\u043e\u043a\u0430\u043c", "\u0432", "\u043f\u043e\u043a\u0435\u0440", "."]}, "query_toks": {"en": ["select", "avg", "(", "earnings", ")", "from", "poker_player", ";"], "ru": ["select", "avg", "(", "earnings", ")", "from", "poker_player", ";"]}, "query_toks_no_values": {"en": ["select", "avg", "(", "earnings", ")", "from", "poker_player", ";"], "ru": ["select", "avg", "(", "earnings", ")", "from", "poker_player", ";"]}, "masked_query": "SELECT avg(Earnings) FROM poker_player;", "question_pauq": {"ru": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0441\u0440\u0435\u0434\u043d\u0438\u0439 \u0437\u0430\u0440\u0430\u0431\u043e\u0442\u043e\u043a \u043f\u043e \u0432\u0441\u0435\u043c \u0438\u0433\u0440\u043e\u043a\u0430\u043c \u0432 \u043f\u043e\u043a\u0435\u0440."}, "question": "Return the average earnings across all poker players.", "kb_id": "poker_player"}, {"id": "D_0656", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 5, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 6, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 5, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 6, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "money", "rank", "of", "the", "poker", "player", "with", "the", "highest", "earnings", "?"], "ru": ["\u041a\u0430\u043a\u043e\u0439", "\u0434\u0435\u043d\u0435\u0436\u043d\u044b\u0439", "\u0440\u0430\u043d\u0433", "\u0443", "\u0438\u0433\u0440\u043e\u043a\u0430", "\u0432", "\u043f\u043e\u043a\u0435\u0440", "\u0441", "\u0441\u0430\u043c\u044b\u043c", "\u0432\u044b\u0441\u043e\u043a\u0438\u043c", "\u0437\u0430\u0440\u0430\u0431\u043e\u0442\u043a\u043e\u043c", "?"]}, "query_toks": {"en": ["select", "money_rank", "from", "poker_player", "order", "by", "earnings", "desc", "limit", "1", ";"], "ru": ["select", "money_rank", "from", "poker_player", "order", "by", "earnings", "desc", "limit", "1", ";"]}, "query_toks_no_values": {"en": ["select", "money_rank", "from", "poker_player", "order", "by", "earnings", "desc", "limit", "1", ";"], "ru": ["select", "money_rank", "from", "poker_player", "order", "by", "earnings", "desc", "limit", "1", ";"]}, "masked_query": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1;", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0439 \u0434\u0435\u043d\u0435\u0436\u043d\u044b\u0439 \u0440\u0430\u043d\u0433 \u0443 \u0438\u0433\u0440\u043e\u043a\u0430 \u0432 \u043f\u043e\u043a\u0435\u0440 \u0441 \u0441\u0430\u043c\u044b\u043c \u0432\u044b\u0441\u043e\u043a\u0438\u043c \u0437\u0430\u0440\u0430\u0431\u043e\u0442\u043a\u043e\u043c?"}, "question": "What is the money rank of the poker player with the highest earnings?", "kb_id": "poker_player"}, {"id": "D_0657", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 5, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 6, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 5, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 6, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Return", "the", "money", "rank", "of", "the", "player", "with", "the", "greatest", "earnings", "."], "ru": ["\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c", "\u0434\u0435\u043d\u0435\u0436\u043d\u044b\u0439", "\u0440\u0430\u043d\u0433", "\u0438\u0433\u0440\u043e\u043a\u0430", "\u0441", "\u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0438\u043c", "\u0437\u0430\u0440\u0430\u0431\u043e\u0442\u043a\u043e\u043c", "."]}, "query_toks": {"en": ["select", "money_rank", "from", "poker_player", "order", "by", "earnings", "desc", "limit", "1", ";"], "ru": ["select", "money_rank", "from", "poker_player", "order", "by", "earnings", "desc", "limit", "1", ";"]}, "query_toks_no_values": {"en": ["select", "money_rank", "from", "poker_player", "order", "by", "earnings", "desc", "limit", "1", ";"], "ru": ["select", "money_rank", "from", "poker_player", "order", "by", "earnings", "desc", "limit", "1", ";"]}, "masked_query": "SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1;", "question_pauq": {"ru": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0434\u0435\u043d\u0435\u0436\u043d\u044b\u0439 \u0440\u0430\u043d\u0433 \u0438\u0433\u0440\u043e\u043a\u0430 \u0441 \u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0438\u043c \u0437\u0430\u0440\u0430\u0431\u043e\u0442\u043a\u043e\u043c."}, "question": "Return the money rank of the player with the greatest earnings.", "kb_id": "poker_player"}, {"id": "D_0658", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[1, [0, [0, 3, false], null]]]], "where": [[false, 4, [0, [0, 6, false], null], 200000.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[1, [0, [0, 3, false], null]]]], "where": [[false, 4, [0, [0, 6, false], null], 200000.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "maximum", "number", "of", "final", "tables", "made", "among", "poker", "players", "with", "earnings", "less", "than", "200000", "?"], "ru": ["\u041a\u0430\u043a\u043e\u0432\u043e", "\u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435", "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e", "\u0444\u0438\u043d\u0430\u043b\u044c\u043d\u044b\u0445", "\u0441\u0442\u043e\u043b\u043e\u0432", "\u0441\u0440\u0435\u0434\u0438", "\u0438\u0433\u0440\u043e\u043a\u043e\u0432", "\u0432", "\u043f\u043e\u043a\u0435\u0440", "\u0441", "\u0437\u0430\u0440\u0430\u0431\u043e\u0442\u043a\u043e\u043c", "\u043c\u0435\u043d\u0435\u0435", "200000", "?"]}, "query_toks": {"en": ["select", "max", "(", "final_table_made", ")", "from", "poker_player", "where", "earnings", "<", "200000", ";"], "ru": ["select", "max", "(", "final_table_made", ")", "from", "poker_player", "where", "earnings", "<", "200000", ";"]}, "query_toks_no_values": {"en": ["select", "max", "(", "final_table_made", ")", "from", "poker_player", "where", "earnings", "<", "200000", ";"], "ru": ["select", "max", "(", "final_table_made", ")", "from", "poker_player", "where", "earnings", "<", "200000", ";"]}, "masked_query": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000;", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0432\u043e \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0444\u0438\u043d\u0430\u043b\u044c\u043d\u044b\u0445 \u0441\u0442\u043e\u043b\u043e\u0432 \u0441\u0440\u0435\u0434\u0438 \u0438\u0433\u0440\u043e\u043a\u043e\u0432 \u0432 \u043f\u043e\u043a\u0435\u0440 \u0441 \u0437\u0430\u0440\u0430\u0431\u043e\u0442\u043a\u043e\u043c \u043c\u0435\u043d\u0435\u0435 200000?"}, "question": "What is the maximum number of final tables made among poker players with earnings less than 200000?", "kb_id": "poker_player"}, {"id": "D_0659", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[1, [0, [0, 3, false], null]]]], "where": [[false, 4, [0, [0, 6, false], null], 200000.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[1, [0, [0, 3, false], null]]]], "where": [[false, 4, [0, [0, 6, false], null], 200000.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Return", "the", "maximum", "final", "tables", "made", "across", "all", "poker", "players", "who", "have", "earnings", "below", "200000", "."], "ru": ["\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c", "\u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435", "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e", "\u0444\u0438\u043d\u0430\u043b\u044c\u043d\u044b\u0445", "\u0441\u0442\u043e\u043b\u043e\u0432", ",", "\u0441\u0434\u0435\u043b\u0430\u043d\u043d\u043e\u0435", "\u0432\u0441\u0435\u043c\u0438", "\u0438\u0433\u0440\u043e\u043a\u0430\u043c\u0438", "\u0432", "\u043f\u043e\u043a\u0435\u0440", ",", "\u0447\u0435\u0439", "\u0437\u0430\u0440\u0430\u0431\u043e\u0442\u043e\u043a", "\u043d\u0438\u0436\u0435", "200000", "."]}, "query_toks": {"en": ["select", "max", "(", "final_table_made", ")", "from", "poker_player", "where", "earnings", "<", "200000", ";"], "ru": ["select", "max", "(", "final_table_made", ")", "from", "poker_player", "where", "earnings", "<", "200000", ";"]}, "query_toks_no_values": {"en": ["select", "max", "(", "final_table_made", ")", "from", "poker_player", "where", "earnings", "<", "200000", ";"], "ru": ["select", "max", "(", "final_table_made", ")", "from", "poker_player", "where", "earnings", "<", "200000", ";"]}, "masked_query": "SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000;", "question_pauq": {"ru": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0444\u0438\u043d\u0430\u043b\u044c\u043d\u044b\u0445 \u0441\u0442\u043e\u043b\u043e\u0432, \u0441\u0434\u0435\u043b\u0430\u043d\u043d\u043e\u0435 \u0432\u0441\u0435\u043c\u0438 \u0438\u0433\u0440\u043e\u043a\u0430\u043c\u0438 \u0432 \u043f\u043e\u043a\u0435\u0440, \u0447\u0435\u0439 \u0437\u0430\u0440\u0430\u0431\u043e\u0442\u043e\u043a \u043d\u0438\u0436\u0435 200000."}, "question": "Return the maximum final tables made across all poker players who have earnings below 200000.", "kb_id": "poker_player"}, {"id": "D_0660", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 7, false], null], [0, 2, false], null]]}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 7, false], null], [0, 2, false], null]]}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "the", "names", "of", "poker", "players", "?"], "ru": ["\u041a\u0430\u043a", "\u0437\u043e\u0432\u0443\u0442", "\u0438\u0433\u0440\u043e\u043a\u043e\u0432", "\u0432", "\u043f\u043e\u043a\u0435\u0440", "?"]}, "query_toks": {"en": ["select", "t1.name", "from", "people", "as", "t1", "join", "poker_player", "as", "t2", "on", "t1.people_id", "=", "t2.people_id", ";"], "ru": ["select", "t1.name", "from", "people", "as", "t1", "join", "poker_player", "as", "t2", "on", "t1.people_id", "=", "t2.people_id", ";"]}, "query_toks_no_values": {"en": ["select", "t1.name", "from", "people", "as", "t1", "join", "poker_player", "as", "t2", "on", "t1.people_id", "=", "t2.people_id", ";"], "ru": ["select", "t1.name", "from", "people", "as", "t1", "join", "poker_player", "as", "t2", "on", "t1.people_id", "=", "t2.people_id", ";"]}, "masked_query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID;", "question_pauq": {"ru": "\u041a\u0430\u043a \u0437\u043e\u0432\u0443\u0442 \u0438\u0433\u0440\u043e\u043a\u043e\u0432 \u0432 \u043f\u043e\u043a\u0435\u0440?"}, "question": "What are the names of poker players?", "kb_id": "poker_player"}, {"id": "D_0661", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 7, false], null], [0, 2, false], null]]}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 7, false], null], [0, 2, false], null]]}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Return", "the", "names", "of", "all", "the", "poker", "players", "."], "ru": ["\u0423\u043a\u0430\u0437\u0430\u0442\u044c", "\u0438\u043c\u0435\u043d\u0430", "\u0432\u0441\u0435\u0445", "\u0438\u0433\u0440\u043e\u043a\u043e\u0432", "\u0432", "\u043f\u043e\u043a\u0435\u0440", "."]}, "query_toks": {"en": ["select", "t1.name", "from", "people", "as", "t1", "join", "poker_player", "as", "t2", "on", "t1.people_id", "=", "t2.people_id", ";"], "ru": ["select", "t1.name", "from", "people", "as", "t1", "join", "poker_player", "as", "t2", "on", "t1.people_id", "=", "t2.people_id", ";"]}, "query_toks_no_values": {"en": ["select", "t1.name", "from", "people", "as", "t1", "join", "poker_player", "as", "t2", "on", "t1.people_id", "=", "t2.people_id", ";"], "ru": ["select", "t1.name", "from", "people", "as", "t1", "join", "poker_player", "as", "t2", "on", "t1.people_id", "=", "t2.people_id", ";"]}, "masked_query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID;", "question_pauq": {"ru": "\u0423\u043a\u0430\u0437\u0430\u0442\u044c \u0438\u043c\u0435\u043d\u0430 \u0432\u0441\u0435\u0445 \u0438\u0433\u0440\u043e\u043a\u043e\u0432 \u0432 \u043f\u043e\u043a\u0435\u0440."}, "question": "Return the names of all the poker players.", "kb_id": "poker_player"}, {"id": "D_0662", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 7, false], null], [0, 2, false], null]]}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [[false, 3, [0, [0, 6, false], null], 300000.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 7, false], null], [0, 2, false], null]]}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [[false, 3, [0, [0, 6, false], null], 300000.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "the", "names", "of", "poker", "players", "whose", "earnings", "is", "higher", "than", "300000", "?"], "ru": ["\u041a\u0430\u043a", "\u0437\u043e\u0432\u0443\u0442", "\u0438\u0433\u0440\u043e\u043a\u043e\u0432", "\u0432", "\u043f\u043e\u043a\u0435\u0440", ",", "\u0447\u0435\u0439", "\u0437\u0430\u0440\u0430\u0431\u043e\u0442\u043e\u043a", "\u043f\u0440\u0435\u0432\u044b\u0448\u0430\u0435\u0442", "300000", "?"]}, "query_toks": {"en": ["select", "t1.name", "from", "people", "as", "t1", "join", "poker_player", "as", "t2", "on", "t1.people_id", "=", "t2.people_id", "where", "t2.earnings", ">", "300000", ";"], "ru": ["select", "t1.name", "from", "people", "as", "t1", "join", "poker_player", "as", "t2", "on", "t1.people_id", "=", "t2.people_id", "where", "t2.earnings", ">", "300000", ";"]}, "query_toks_no_values": {"en": ["select", "t1.name", "from", "people", "as", "t1", "join", "poker_player", "as", "t2", "on", "t1.people_id", "=", "t2.people_id", "where", "t2.earnings", ">", "300000", ";"], "ru": ["select", "t1.name", "from", "people", "as", "t1", "join", "poker_player", "as", "t2", "on", "t1.people_id", "=", "t2.people_id", "where", "t2.earnings", ">", "300000", ";"]}, "masked_query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000;", "question_pauq": {"ru": "\u041a\u0430\u043a \u0437\u043e\u0432\u0443\u0442 \u0438\u0433\u0440\u043e\u043a\u043e\u0432 \u0432 \u043f\u043e\u043a\u0435\u0440, \u0447\u0435\u0439 \u0437\u0430\u0440\u0430\u0431\u043e\u0442\u043e\u043a \u043f\u0440\u0435\u0432\u044b\u0448\u0430\u0435\u0442 300000?"}, "question": "What are the names of poker players whose earnings is higher than 300000?", "kb_id": "poker_player"}, {"id": "D_0663", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 7, false], null], [0, 2, false], null]]}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [[false, 3, [0, [0, 6, false], null], 300000.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 7, false], null], [0, 2, false], null]]}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [[false, 3, [0, [0, 6, false], null], 300000.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Give", "the", "names", "of", "poker", "players", "who", "have", "earnings", "above", "300000", "."], "ru": ["\u041d\u0430\u0437\u043e\u0432\u0438\u0442\u0435", "\u0438\u043c\u0435\u043d\u0430", "\u0438\u0433\u0440\u043e\u043a\u043e\u0432", "\u0432", "\u043f\u043e\u043a\u0435\u0440", ",", "\u0447\u0435\u0439", "\u0437\u0430\u0440\u0430\u0431\u043e\u0442\u043e\u043a", "\u043f\u0440\u0435\u0432\u044b\u0448\u0430\u0435\u0442", "300000", "."]}, "query_toks": {"en": ["select", "t1.name", "from", "people", "as", "t1", "join", "poker_player", "as", "t2", "on", "t1.people_id", "=", "t2.people_id", "where", "t2.earnings", ">", "300000", ";"], "ru": ["select", "t1.name", "from", "people", "as", "t1", "join", "poker_player", "as", "t2", "on", "t1.people_id", "=", "t2.people_id", "where", "t2.earnings", ">", "300000", ";"]}, "query_toks_no_values": {"en": ["select", "t1.name", "from", "people", "as", "t1", "join", "poker_player", "as", "t2", "on", "t1.people_id", "=", "t2.people_id", "where", "t2.earnings", ">", "300000", ";"], "ru": ["select", "t1.name", "from", "people", "as", "t1", "join", "poker_player", "as", "t2", "on", "t1.people_id", "=", "t2.people_id", "where", "t2.earnings", ">", "300000", ";"]}, "masked_query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000;", "question_pauq": {"ru": "\u041d\u0430\u0437\u043e\u0432\u0438\u0442\u0435 \u0438\u043c\u0435\u043d\u0430 \u0438\u0433\u0440\u043e\u043a\u043e\u0432 \u0432 \u043f\u043e\u043a\u0435\u0440, \u0447\u0435\u0439 \u0437\u0430\u0440\u0430\u0431\u043e\u0442\u043e\u043a \u043f\u0440\u0435\u0432\u044b\u0448\u0430\u0435\u0442 300000."}, "question": "Give the names of poker players who have earnings above 300000.", "kb_id": "poker_player"}, {"id": "D_0664", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 7, false], null], [0, 2, false], null]]}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["asc", [[0, [0, 3, false], null]]], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 7, false], null], [0, 2, false], null]]}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["asc", [[0, [0, 3, false], null]]], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["List", "the", "names", "of", "poker", "players", "ordered", "by", "the", "final", "tables", "made", "in", "ascending", "order", "."], "ru": ["\u041f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0438\u0442\u0435", "\u0438\u043c\u0435\u043d\u0430", "\u0438\u0433\u0440\u043e\u043a\u043e\u0432", "\u0432", "\u043f\u043e\u043a\u0435\u0440", "\u0432", "\u043f\u043e\u0440\u044f\u0434\u043a\u0435", "\u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430\u043d\u0438\u044f", "\u0444\u0438\u043d\u0430\u043b\u044c\u043d\u044b\u0445", "\u0441\u0442\u043e\u043b\u043e\u0432", "."]}, "query_toks": {"en": ["select", "t1.name", "from", "people", "as", "t1", "join", "poker_player", "as", "t2", "on", "t1.people_id", "=", "t2.people_id", "order", "by", "t2.final_table_made", ";"], "ru": ["select", "t1.name", "from", "people", "as", "t1", "join", "poker_player", "as", "t2", "on", "t1.people_id", "=", "t2.people_id", "order", "by", "t2.final_table_made", ";"]}, "query_toks_no_values": {"en": ["select", "t1.name", "from", "people", "as", "t1", "join", "poker_player", "as", "t2", "on", "t1.people_id", "=", "t2.people_id", "order", "by", "t2.final_table_made", ";"], "ru": ["select", "t1.name", "from", "people", "as", "t1", "join", "poker_player", "as", "t2", "on", "t1.people_id", "=", "t2.people_id", "order", "by", "t2.final_table_made", ";"]}, "masked_query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made;", "question_pauq": {"ru": "\u041f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0438\u0442\u0435 \u0438\u043c\u0435\u043d\u0430 \u0438\u0433\u0440\u043e\u043a\u043e\u0432 \u0432 \u043f\u043e\u043a\u0435\u0440 \u0432 \u043f\u043e\u0440\u044f\u0434\u043a\u0435 \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430\u043d\u0438\u044f \u0444\u0438\u043d\u0430\u043b\u044c\u043d\u044b\u0445 \u0441\u0442\u043e\u043b\u043e\u0432."}, "question": "List the names of poker players ordered by the final tables made in ascending order.", "kb_id": "poker_player"}, {"id": "D_0665", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 7, false], null], [0, 2, false], null]]}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["asc", [[0, [0, 3, false], null]]], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 7, false], null], [0, 2, false], null]]}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["asc", [[0, [0, 3, false], null]]], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "the", "names", "of", "poker", "players", ",", "ordered", "ascending", "by", "the", "number", "of", "final", "tables", "they", "have", "made", "?"], "ru": ["\u041a\u0430\u043a", "\u0437\u043e\u0432\u0443\u0442\u0441\u044f", "\u0438\u0433\u0440\u043e\u043a\u0438", "\u0432", "\u043f\u043e\u043a\u0435\u0440", "\u0432", "\u043f\u043e\u0440\u044f\u0434\u043a\u0435", "\u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430\u043d\u0438\u044f", "\u043f\u043e", "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0443", "\u043f\u0440\u043e\u0432\u0435\u0434\u0435\u043d\u043d\u044b\u0445", "\u0438\u043c\u0438", "\u0444\u0438\u043d\u0430\u043b\u044c\u043d\u044b\u0445", "\u0441\u0442\u043e\u043b\u043e\u0432", "?"]}, "query_toks": {"en": ["select", "t1.name", "from", "people", "as", "t1", "join", "poker_player", "as", "t2", "on", "t1.people_id", "=", "t2.people_id", "order", "by", "t2.final_table_made", ";"], "ru": ["select", "t1.name", "from", "people", "as", "t1", "join", "poker_player", "as", "t2", "on", "t1.people_id", "=", "t2.people_id", "order", "by", "t2.final_table_made", ";"]}, "query_toks_no_values": {"en": ["select", "t1.name", "from", "people", "as", "t1", "join", "poker_player", "as", "t2", "on", "t1.people_id", "=", "t2.people_id", "order", "by", "t2.final_table_made", ";"], "ru": ["select", "t1.name", "from", "people", "as", "t1", "join", "poker_player", "as", "t2", "on", "t1.people_id", "=", "t2.people_id", "order", "by", "t2.final_table_made", ";"]}, "masked_query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made;", "question_pauq": {"ru": "\u041a\u0430\u043a \u0437\u043e\u0432\u0443\u0442\u0441\u044f \u0438\u0433\u0440\u043e\u043a\u0438 \u0432 \u043f\u043e\u043a\u0435\u0440 \u0432 \u043f\u043e\u0440\u044f\u0434\u043a\u0435 \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430\u043d\u0438\u044f \u043f\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0443 \u043f\u0440\u043e\u0432\u0435\u0434\u0435\u043d\u043d\u044b\u0445 \u0438\u043c\u0438 \u0444\u0438\u043d\u0430\u043b\u044c\u043d\u044b\u0445 \u0441\u0442\u043e\u043b\u043e\u0432?"}, "question": "What are the names of poker players, ordered ascending by the number of final tables they have made?", "kb_id": "poker_player"}, {"id": "D_0666", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 7, false], null], [0, 2, false], null]]}, "select": [false, [[0, [0, [0, 10, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["asc", [[0, [0, 6, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 7, false], null], [0, 2, false], null]]}, "select": [false, [[0, [0, [0, 10, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["asc", [[0, [0, 6, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "birth", "date", "of", "the", "poker", "player", "with", "the", "lowest", "earnings", "?"], "ru": ["\u041a\u0430\u043a\u0430\u044f", "\u0434\u0430\u0442\u0430", "\u0440\u043e\u0436\u0434\u0435\u043d\u0438\u044f", "\u0438\u0433\u0440\u043e\u043a\u0430", "\u0432", "\u043f\u043e\u043a\u0435\u0440", "\u0441", "\u0441\u0430\u043c\u044b\u043c", "\u043d\u0438\u0437\u043a\u0438\u043c", "\u0434\u043e\u0445\u043e\u0434\u043e\u043c", "?"]}, "query_toks": {"en": ["select", "t1.birth_date", "from", "people", "as", "t1", "join", "poker_player", "as", "t2", "on", "t1.people_id", "=", "t2.people_id", "order", "by", "t2.earnings", "asc", "limit", "1", ";"], "ru": ["select", "t1.birth_date", "from", "people", "as", "t1", "join", "poker_player", "as", "t2", "on", "t1.people_id", "=", "t2.people_id", "order", "by", "t2.earnings", "asc", "limit", "1", ";"]}, "query_toks_no_values": {"en": ["select", "t1.birth_date", "from", "people", "as", "t1", "join", "poker_player", "as", "t2", "on", "t1.people_id", "=", "t2.people_id", "order", "by", "t2.earnings", "asc", "limit", "1", ";"], "ru": ["select", "t1.birth_date", "from", "people", "as", "t1", "join", "poker_player", "as", "t2", "on", "t1.people_id", "=", "t2.people_id", "order", "by", "t2.earnings", "asc", "limit", "1", ";"]}, "masked_query": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1;", "question_pauq": {"ru": "\u041a\u0430\u043a\u0430\u044f \u0434\u0430\u0442\u0430 \u0440\u043e\u0436\u0434\u0435\u043d\u0438\u044f \u0438\u0433\u0440\u043e\u043a\u0430 \u0432 \u043f\u043e\u043a\u0435\u0440 \u0441 \u0441\u0430\u043c\u044b\u043c \u043d\u0438\u0437\u043a\u0438\u043c \u0434\u043e\u0445\u043e\u0434\u043e\u043c?"}, "question": "What is the birth date of the poker player with the lowest earnings?", "kb_id": "poker_player"}, {"id": "D_0667", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 7, false], null], [0, 2, false], null]]}, "select": [false, [[0, [0, [0, 10, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["asc", [[0, [0, 6, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 7, false], null], [0, 2, false], null]]}, "select": [false, [[0, [0, [0, 10, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["asc", [[0, [0, 6, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Return", "the", "birth", "date", "of", "the", "poker", "player", "with", "the", "lowest", "earnings", "."], "ru": ["\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c", "\u0434\u0430\u0442\u0443", "\u0440\u043e\u0436\u0434\u0435\u043d\u0438\u044f", "\u0438\u0433\u0440\u043e\u043a\u0430", "\u0432", "\u043f\u043e\u043a\u0435\u0440", "\u0441", "\u043d\u0430\u0438\u043c\u0435\u043d\u044c\u0448\u0438\u043c", "\u0437\u0430\u0440\u0430\u0431\u043e\u0442\u043a\u043e\u043c", "."]}, "query_toks": {"en": ["select", "t1.birth_date", "from", "people", "as", "t1", "join", "poker_player", "as", "t2", "on", "t1.people_id", "=", "t2.people_id", "order", "by", "t2.earnings", "asc", "limit", "1", ";"], "ru": ["select", "t1.birth_date", "from", "people", "as", "t1", "join", "poker_player", "as", "t2", "on", "t1.people_id", "=", "t2.people_id", "order", "by", "t2.earnings", "asc", "limit", "1", ";"]}, "query_toks_no_values": {"en": ["select", "t1.birth_date", "from", "people", "as", "t1", "join", "poker_player", "as", "t2", "on", "t1.people_id", "=", "t2.people_id", "order", "by", "t2.earnings", "asc", "limit", "1", ";"], "ru": ["select", "t1.birth_date", "from", "people", "as", "t1", "join", "poker_player", "as", "t2", "on", "t1.people_id", "=", "t2.people_id", "order", "by", "t2.earnings", "asc", "limit", "1", ";"]}, "masked_query": "SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1;", "question_pauq": {"ru": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0434\u0430\u0442\u0443 \u0440\u043e\u0436\u0434\u0435\u043d\u0438\u044f \u0438\u0433\u0440\u043e\u043a\u0430 \u0432 \u043f\u043e\u043a\u0435\u0440 \u0441 \u043d\u0430\u0438\u043c\u0435\u043d\u044c\u0448\u0438\u043c \u0437\u0430\u0440\u0430\u0431\u043e\u0442\u043a\u043e\u043c."}, "question": "Return the birth date of the poker player with the lowest earnings.", "kb_id": "poker_player"}, {"id": "D_0668", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 7, false], null], [0, 2, false], null]]}, "select": [false, [[0, [0, [0, 5, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 11, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 7, false], null], [0, 2, false], null]]}, "select": [false, [[0, [0, [0, 5, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 11, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "money", "rank", "of", "the", "tallest", "poker", "player", "?"], "ru": ["\u041a\u0430\u043a\u043e\u0439", "\u0434\u0435\u043d\u0435\u0436\u043d\u044b\u0439", "\u0440\u0430\u043d\u0433", "\u0443", "\u0441\u0430\u043c\u043e\u0433\u043e", "\u0432\u044b\u0441\u043e\u043a\u043e\u0433\u043e", "\u0438\u0433\u0440\u043e\u043a\u0430", "\u0432", "\u043f\u043e\u043a\u0435\u0440", "?"]}, "query_toks": {"en": ["select", "t2.money_rank", "from", "people", "as", "t1", "join", "poker_player", "as", "t2", "on", "t1.people_id", "=", "t2.people_id", "order", "by", "t1.height", "desc", "limit", "1", ";"], "ru": ["select", "t2.money_rank", "from", "people", "as", "t1", "join", "poker_player", "as", "t2", "on", "t1.people_id", "=", "t2.people_id", "order", "by", "t1.height", "desc", "limit", "1", ";"]}, "query_toks_no_values": {"en": ["select", "t2.money_rank", "from", "people", "as", "t1", "join", "poker_player", "as", "t2", "on", "t1.people_id", "=", "t2.people_id", "order", "by", "t1.height", "desc", "limit", "1", ";"], "ru": ["select", "t2.money_rank", "from", "people", "as", "t1", "join", "poker_player", "as", "t2", "on", "t1.people_id", "=", "t2.people_id", "order", "by", "t1.height", "desc", "limit", "1", ";"]}, "masked_query": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1;", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0439 \u0434\u0435\u043d\u0435\u0436\u043d\u044b\u0439 \u0440\u0430\u043d\u0433 \u0443 \u0441\u0430\u043c\u043e\u0433\u043e \u0432\u044b\u0441\u043e\u043a\u043e\u0433\u043e \u0438\u0433\u0440\u043e\u043a\u0430 \u0432 \u043f\u043e\u043a\u0435\u0440?"}, "question": "What is the money rank of the tallest poker player?", "kb_id": "poker_player"}, {"id": "D_0669", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 7, false], null], [0, 2, false], null]]}, "select": [false, [[0, [0, [0, 5, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 11, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 7, false], null], [0, 2, false], null]]}, "select": [false, [[0, [0, [0, 5, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 11, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Return", "the", "money", "rank", "of", "the", "poker", "player", "with", "the", "greatest", "height", "."], "ru": ["\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c", "\u0434\u0435\u043d\u0435\u0436\u043d\u044b\u0439", "\u0440\u0430\u043d\u0433", "\u0438\u0433\u0440\u043e\u043a\u0430", "\u0432", "\u043f\u043e\u043a\u0435\u0440", "\u0441", "\u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0438\u043c", "\u0440\u043e\u0441\u0442\u043e\u043c", "."]}, "query_toks": {"en": ["select", "t2.money_rank", "from", "people", "as", "t1", "join", "poker_player", "as", "t2", "on", "t1.people_id", "=", "t2.people_id", "order", "by", "t1.height", "desc", "limit", "1", ";"], "ru": ["select", "t2.money_rank", "from", "people", "as", "t1", "join", "poker_player", "as", "t2", "on", "t1.people_id", "=", "t2.people_id", "order", "by", "t1.height", "desc", "limit", "1", ";"]}, "query_toks_no_values": {"en": ["select", "t2.money_rank", "from", "people", "as", "t1", "join", "poker_player", "as", "t2", "on", "t1.people_id", "=", "t2.people_id", "order", "by", "t1.height", "desc", "limit", "1", ";"], "ru": ["select", "t2.money_rank", "from", "people", "as", "t1", "join", "poker_player", "as", "t2", "on", "t1.people_id", "=", "t2.people_id", "order", "by", "t1.height", "desc", "limit", "1", ";"]}, "masked_query": "SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1;", "question_pauq": {"ru": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0434\u0435\u043d\u0435\u0436\u043d\u044b\u0439 \u0440\u0430\u043d\u0433 \u0438\u0433\u0440\u043e\u043a\u0430 \u0432 \u043f\u043e\u043a\u0435\u0440 \u0441 \u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0438\u043c \u0440\u043e\u0441\u0442\u043e\u043c."}, "question": "Return the money rank of the poker player with the greatest height.", "kb_id": "poker_player"}, {"id": "D_0670", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 7, false], null], [0, 2, false], null]]}, "select": [false, [[5, [0, [0, 6, false], null]]]], "where": [[false, 3, [0, [0, 11, false], null], 200.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 7, false], null], [0, 2, false], null]]}, "select": [false, [[5, [0, [0, 6, false], null]]]], "where": [[false, 3, [0, [0, 11, false], null], 200.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "average", "earnings", "of", "poker", "players", "with", "height", "higher", "than", "200", "?"], "ru": ["\u041a\u0430\u043a\u043e\u0432", "\u0441\u0440\u0435\u0434\u043d\u0438\u0439", "\u0437\u0430\u0440\u0430\u0431\u043e\u0442\u043e\u043a", "\u0438\u0433\u0440\u043e\u043a\u043e\u0432", "\u0432", "\u043f\u043e\u043a\u0435\u0440", "\u0440\u043e\u0441\u0442\u043e\u043c", "\u0432\u044b\u0448\u0435", "200", "?"]}, "query_toks": {"en": ["select", "avg", "(", "t2.earnings", ")", "from", "people", "as", "t1", "join", "poker_player", "as", "t2", "on", "t1.people_id", "=", "t2.people_id", "where", "t1.height", ">", "200", ";"], "ru": ["select", "avg", "(", "t2.earnings", ")", "from", "people", "as", "t1", "join", "poker_player", "as", "t2", "on", "t1.people_id", "=", "t2.people_id", "where", "t1.height", ">", "200", ";"]}, "query_toks_no_values": {"en": ["select", "avg", "(", "t2.earnings", ")", "from", "people", "as", "t1", "join", "poker_player", "as", "t2", "on", "t1.people_id", "=", "t2.people_id", "where", "t1.height", ">", "200", ";"], "ru": ["select", "avg", "(", "t2.earnings", ")", "from", "people", "as", "t1", "join", "poker_player", "as", "t2", "on", "t1.people_id", "=", "t2.people_id", "where", "t1.height", ">", "200", ";"]}, "masked_query": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200;", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0432 \u0441\u0440\u0435\u0434\u043d\u0438\u0439 \u0437\u0430\u0440\u0430\u0431\u043e\u0442\u043e\u043a \u0438\u0433\u0440\u043e\u043a\u043e\u0432 \u0432 \u043f\u043e\u043a\u0435\u0440 \u0440\u043e\u0441\u0442\u043e\u043c \u0432\u044b\u0448\u0435 200?"}, "question": "What is the average earnings of poker players with height higher than 200?", "kb_id": "poker_player"}, {"id": "D_0671", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 7, false], null], [0, 2, false], null]]}, "select": [false, [[5, [0, [0, 6, false], null]]]], "where": [[false, 3, [0, [0, 11, false], null], 200.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 7, false], null], [0, 2, false], null]]}, "select": [false, [[5, [0, [0, 6, false], null]]]], "where": [[false, 3, [0, [0, 11, false], null], 200.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Give", "average", "earnings", "of", "poker", "players", "who", "are", "taller", "than", "200", "."], "ru": ["\u041f\u0440\u0438\u0432\u0435\u0434\u0438\u0442\u0435", "\u0441\u0440\u0435\u0434\u043d\u0438\u0439", "\u0437\u0430\u0440\u0430\u0431\u043e\u0442\u043e\u043a", "\u0438\u0433\u0440\u043e\u043a\u043e\u0432", "\u0432", "\u043f\u043e\u043a\u0435\u0440", "\u043a\u043e\u0442\u043e\u0440\u044b\u0435", "\u0440\u043e\u0441\u0442\u043e\u043c", "\u0432\u044b\u0448\u0435", "200", "."]}, "query_toks": {"en": ["select", "avg", "(", "t2.earnings", ")", "from", "people", "as", "t1", "join", "poker_player", "as", "t2", "on", "t1.people_id", "=", "t2.people_id", "where", "t1.height", ">", "200", ";"], "ru": ["select", "avg", "(", "t2.earnings", ")", "from", "people", "as", "t1", "join", "poker_player", "as", "t2", "on", "t1.people_id", "=", "t2.people_id", "where", "t1.height", ">", "200", ";"]}, "query_toks_no_values": {"en": ["select", "avg", "(", "t2.earnings", ")", "from", "people", "as", "t1", "join", "poker_player", "as", "t2", "on", "t1.people_id", "=", "t2.people_id", "where", "t1.height", ">", "200", ";"], "ru": ["select", "avg", "(", "t2.earnings", ")", "from", "people", "as", "t1", "join", "poker_player", "as", "t2", "on", "t1.people_id", "=", "t2.people_id", "where", "t1.height", ">", "200", ";"]}, "masked_query": "SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200;", "question_pauq": {"ru": "\u041f\u0440\u0438\u0432\u0435\u0434\u0438\u0442\u0435 \u0441\u0440\u0435\u0434\u043d\u0438\u0439 \u0437\u0430\u0440\u0430\u0431\u043e\u0442\u043e\u043a \u0438\u0433\u0440\u043e\u043a\u043e\u0432 \u0432 \u043f\u043e\u043a\u0435\u0440 \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0440\u043e\u0441\u0442\u043e\u043c \u0432\u044b\u0448\u0435 200."}, "question": "Give average earnings of poker players who are taller than 200.", "kb_id": "poker_player"}, {"id": "D_0672", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 7, false], null], [0, 2, false], null]]}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 6, false], null]]], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 7, false], null], [0, 2, false], null]]}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 6, false], null]]], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "the", "names", "of", "poker", "players", "in", "descending", "order", "of", "earnings", "?"], "ru": ["\u041a\u0430\u043a", "\u0437\u043e\u0432\u0443\u0442", "\u0438\u0433\u0440\u043e\u043a\u043e\u0432", "\u0432", "\u043f\u043e\u043a\u0435\u0440", "\u0432", "\u043f\u043e\u0440\u044f\u0434\u043a\u0435", "\u0443\u0431\u044b\u0432\u0430\u043d\u0438\u044f", "\u0438\u0445", "\u0434\u043e\u0445\u043e\u0434\u043e\u0432", "?"]}, "query_toks": {"en": ["select", "t1.name", "from", "people", "as", "t1", "join", "poker_player", "as", "t2", "on", "t1.people_id", "=", "t2.people_id", "order", "by", "t2.earnings", "desc", ";"], "ru": ["select", "t1.name", "from", "people", "as", "t1", "join", "poker_player", "as", "t2", "on", "t1.people_id", "=", "t2.people_id", "order", "by", "t2.earnings", "desc", ";"]}, "query_toks_no_values": {"en": ["select", "t1.name", "from", "people", "as", "t1", "join", "poker_player", "as", "t2", "on", "t1.people_id", "=", "t2.people_id", "order", "by", "t2.earnings", "desc", ";"], "ru": ["select", "t1.name", "from", "people", "as", "t1", "join", "poker_player", "as", "t2", "on", "t1.people_id", "=", "t2.people_id", "order", "by", "t2.earnings", "desc", ";"]}, "masked_query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC;", "question_pauq": {"ru": "\u041a\u0430\u043a \u0437\u043e\u0432\u0443\u0442 \u0438\u0433\u0440\u043e\u043a\u043e\u0432 \u0432 \u043f\u043e\u043a\u0435\u0440 \u0432 \u043f\u043e\u0440\u044f\u0434\u043a\u0435 \u0443\u0431\u044b\u0432\u0430\u043d\u0438\u044f \u0438\u0445 \u0434\u043e\u0445\u043e\u0434\u043e\u0432?"}, "question": "What are the names of poker players in descending order of earnings?", "kb_id": "poker_player"}, {"id": "D_0673", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 7, false], null], [0, 2, false], null]]}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 6, false], null]]], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 7, false], null], [0, 2, false], null]]}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 6, false], null]]], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Return", "the", "names", "of", "poker", "players", "sorted", "by", "their", "earnings", "descending", "."], "ru": ["\u041f\u043e\u043a\u0430\u0436\u0438", "\u0438\u043c\u0435\u043d\u0430", "\u0438\u0433\u0440\u043e\u043a\u043e\u0432", "\u0432", "\u043f\u043e\u043a\u0435\u0440", ",", "\u043e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435", "\u043f\u043e", "\u0443\u0431\u044b\u0432\u0430\u043d\u0438\u044e", "\u0438\u0445", "\u0437\u0430\u0440\u0430\u0431\u043e\u0442\u043a\u0430", "."]}, "query_toks": {"en": ["select", "t1.name", "from", "people", "as", "t1", "join", "poker_player", "as", "t2", "on", "t1.people_id", "=", "t2.people_id", "order", "by", "t2.earnings", "desc", ";"], "ru": ["select", "t1.name", "from", "people", "as", "t1", "join", "poker_player", "as", "t2", "on", "t1.people_id", "=", "t2.people_id", "order", "by", "t2.earnings", "desc", ";"]}, "query_toks_no_values": {"en": ["select", "t1.name", "from", "people", "as", "t1", "join", "poker_player", "as", "t2", "on", "t1.people_id", "=", "t2.people_id", "order", "by", "t2.earnings", "desc", ";"], "ru": ["select", "t1.name", "from", "people", "as", "t1", "join", "poker_player", "as", "t2", "on", "t1.people_id", "=", "t2.people_id", "order", "by", "t2.earnings", "desc", ";"]}, "masked_query": "SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC;", "question_pauq": {"ru": "\u041f\u043e\u043a\u0430\u0436\u0438 \u0438\u043c\u0435\u043d\u0430 \u0438\u0433\u0440\u043e\u043a\u043e\u0432 \u0432 \u043f\u043e\u043a\u0435\u0440, \u043e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u043f\u043e \u0443\u0431\u044b\u0432\u0430\u043d\u0438\u044e \u0438\u0445 \u0437\u0430\u0440\u0430\u0431\u043e\u0442\u043a\u0430."}, "question": "Return the names of poker players sorted by their earnings descending.", "kb_id": "poker_player"}, {"id": "D_0674", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 8, false], null]], [3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [[0, 8, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 8, false], null]], [3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [[0, 8, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "different", "nationalities", "of", "people", "and", "the", "corresponding", "number", "of", "people", "from", "each", "nation", "?"], "ru": ["\u041a\u0430\u043a\u043e\u0432\u044b", "\u0440\u0430\u0437\u043d\u044b\u0435", "\u043d\u0430\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u0438", "\u043b\u044e\u0434\u0435\u0439", "\u0438", "\u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0435\u0435", "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e", "\u043b\u044e\u0434\u0435\u0439", "\u043e\u0442", "\u043a\u0430\u0436\u0434\u043e\u0439", "\u043d\u0430\u0446\u0438\u0438", "?"]}, "query_toks": {"en": ["select", "nationality", ",", "count", "(", "*", ")", "from", "people", "group", "by", "nationality", ";"], "ru": ["select", "nationality", ",", "count", "(", "*", ")", "from", "people", "group", "by", "nationality", ";"]}, "query_toks_no_values": {"en": ["select", "nationality", ",", "count", "(", "*", ")", "from", "people", "group", "by", "nationality", ";"], "ru": ["select", "nationality", ",", "count", "(", "*", ")", "from", "people", "group", "by", "nationality", ";"]}, "masked_query": "SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality;", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0432\u044b \u0440\u0430\u0437\u043d\u044b\u0435 \u043d\u0430\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u043b\u044e\u0434\u0435\u0439 \u0438 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043b\u044e\u0434\u0435\u0439 \u043e\u0442 \u043a\u0430\u0436\u0434\u043e\u0439 \u043d\u0430\u0446\u0438\u0438?"}, "question": "What are different nationalities of people and the corresponding number of people from each nation?", "kb_id": "poker_player"}, {"id": "D_0675", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 8, false], null]], [3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [[0, 8, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 8, false], null]], [3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [[0, 8, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["How", "many", "people", "are", "there", "of", "each", "nationality", "?"], "ru": ["\u0421\u043a\u043e\u043b\u044c\u043a\u043e", "\u043b\u044e\u0434\u0435\u0439", "\u043a\u0430\u0436\u0434\u043e\u0439", "\u043d\u0430\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u0438", "?"]}, "query_toks": {"en": ["select", "nationality", ",", "count", "(", "*", ")", "from", "people", "group", "by", "nationality", ";"], "ru": ["select", "nationality", ",", "count", "(", "*", ")", "from", "people", "group", "by", "nationality", ";"]}, "query_toks_no_values": {"en": ["select", "nationality", ",", "count", "(", "*", ")", "from", "people", "group", "by", "nationality", ";"], "ru": ["select", "nationality", ",", "count", "(", "*", ")", "from", "people", "group", "by", "nationality", ";"]}, "masked_query": "SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality;", "question_pauq": {"ru": "\u0421\u043a\u043e\u043b\u044c\u043a\u043e \u043b\u044e\u0434\u0435\u0439 \u043a\u0430\u0436\u0434\u043e\u0439 \u043d\u0430\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u0438?"}, "question": "How many people are there of each nationality?", "kb_id": "poker_player"}, {"id": "D_0676", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 8, false], null]]]], "where": [], "groupBy": [[0, 8, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 8, false], null]]]], "where": [], "groupBy": [[0, 8, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "most", "common", "nationality", "of", "people", "?"], "ru": ["\u041a\u0430\u043a\u0430\u044f", "\u043d\u0430\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u044c", "\u0443", "\u043b\u044e\u0434\u0435\u0439", "\u0441\u0430\u043c\u0430\u044f", "\u0440\u0430\u0441\u043f\u0440\u043e\u0441\u0442\u0440\u0430\u043d\u0435\u043d\u043d\u0430\u044f", "?"]}, "query_toks": {"en": ["select", "nationality", "from", "people", "group", "by", "nationality", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"], "ru": ["select", "nationality", "from", "people", "group", "by", "nationality", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"]}, "query_toks_no_values": {"en": ["select", "nationality", "from", "people", "group", "by", "nationality", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"], "ru": ["select", "nationality", "from", "people", "group", "by", "nationality", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"]}, "masked_query": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1;", "question_pauq": {"ru": "\u041a\u0430\u043a\u0430\u044f \u043d\u0430\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0443 \u043b\u044e\u0434\u0435\u0439 \u0441\u0430\u043c\u0430\u044f \u0440\u0430\u0441\u043f\u0440\u043e\u0441\u0442\u0440\u0430\u043d\u0435\u043d\u043d\u0430\u044f?"}, "question": "What is the most common nationality of people?", "kb_id": "poker_player"}, {"id": "D_0677", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 8, false], null]]]], "where": [], "groupBy": [[0, 8, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 8, false], null]]]], "where": [], "groupBy": [[0, 8, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Give", "the", "nationality", "that", "is", "most", "common", "across", "all", "people", "."], "ru": ["\u0423\u043a\u0430\u0436\u0438\u0442\u0435", "\u043d\u0430\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u044c", ",", "\u043a\u043e\u0442\u043e\u0440\u0430\u044f", "\u043d\u0430\u0438\u0431\u043e\u043b\u0435\u0435", "\u0445\u0430\u0440\u0430\u043a\u0442\u0435\u0440\u043d\u0430", "\u0434\u043b\u044f", "\u0432\u0441\u0435\u0445", "\u043b\u044e\u0434\u0435\u0439", "."]}, "query_toks": {"en": ["select", "nationality", "from", "people", "group", "by", "nationality", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"], "ru": ["select", "nationality", "from", "people", "group", "by", "nationality", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"]}, "query_toks_no_values": {"en": ["select", "nationality", "from", "people", "group", "by", "nationality", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"], "ru": ["select", "nationality", "from", "people", "group", "by", "nationality", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"]}, "masked_query": "SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1;", "question_pauq": {"ru": "\u0423\u043a\u0430\u0436\u0438\u0442\u0435 \u043d\u0430\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u044c, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u0445\u0430\u0440\u0430\u043a\u0442\u0435\u0440\u043d\u0430 \u0434\u043b\u044f \u0432\u0441\u0435\u0445 \u043b\u044e\u0434\u0435\u0439."}, "question": "Give the nationality that is most common across all people.", "kb_id": "poker_player"}, {"id": "D_0678", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 8, false], null]]]], "where": [], "groupBy": [[0, 8, false]], "having": [[false, 5, [0, [3, 0, false], null], 2.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 8, false], null]]]], "where": [], "groupBy": [[0, 8, false]], "having": [[false, 5, [0, [3, 0, false], null], 2.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "the", "nationalities", "that", "are", "shared", "by", "at", "least", "two", "people", "?"], "ru": ["\u041a\u0430\u043a\u0438\u0435", "\u043d\u0430\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u0438", "\u0440\u0430\u0437\u0434\u0435\u043b\u044f\u044e\u0442", "\u043a\u0430\u043a", "\u043c\u0438\u043d\u0438\u043c\u0443\u043c", "\u0434\u0432\u0430", "\u0447\u0435\u043b\u043e\u0432\u0435\u043a\u0430", "?"]}, "query_toks": {"en": ["select", "nationality", "from", "people", "group", "by", "nationality", "having", "count", "(", "*", ")", ">=", "2", ";"], "ru": ["select", "nationality", "from", "people", "group", "by", "nationality", "having", "count", "(", "*", ")", ">=", "2", ";"]}, "query_toks_no_values": {"en": ["select", "nationality", "from", "people", "group", "by", "nationality", "having", "count", "(", "*", ")", ">=", "2", ";"], "ru": ["select", "nationality", "from", "people", "group", "by", "nationality", "having", "count", "(", "*", ")", ">=", "2", ";"]}, "masked_query": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2;", "question_pauq": {"ru": "\u041a\u0430\u043a\u0438\u0435 \u043d\u0430\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u0440\u0430\u0437\u0434\u0435\u043b\u044f\u044e\u0442 \u043a\u0430\u043a \u043c\u0438\u043d\u0438\u043c\u0443\u043c \u0434\u0432\u0430 \u0447\u0435\u043b\u043e\u0432\u0435\u043a\u0430?"}, "question": "What are the nationalities that are shared by at least two people?", "kb_id": "poker_player"}, {"id": "D_0679", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 8, false], null]]]], "where": [], "groupBy": [[0, 8, false]], "having": [[false, 5, [0, [3, 0, false], null], 2.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 8, false], null]]]], "where": [], "groupBy": [[0, 8, false]], "having": [[false, 5, [0, [3, 0, false], null], 2.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Return", "the", "nationalities", "for", "which", "there", "are", "two", "or", "more", "people", "."], "ru": ["\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c", "\u043d\u0430\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u0438", ",", "\u043a", "\u043a\u043e\u0442\u043e\u0440\u044b\u043c", "\u043f\u0440\u0438\u043d\u0430\u0434\u043b\u0435\u0436\u0430\u0442", "\u0434\u0432\u0430", "\u0438", "\u0431\u043e\u043b\u0435\u0435", "\u0447\u0435\u043b\u043e\u0432\u0435\u043a\u0430", "."]}, "query_toks": {"en": ["select", "nationality", "from", "people", "group", "by", "nationality", "having", "count", "(", "*", ")", ">=", "2", ";"], "ru": ["select", "nationality", "from", "people", "group", "by", "nationality", "having", "count", "(", "*", ")", ">=", "2", ";"]}, "query_toks_no_values": {"en": ["select", "nationality", "from", "people", "group", "by", "nationality", "having", "count", "(", "*", ")", ">=", "2", ";"], "ru": ["select", "nationality", "from", "people", "group", "by", "nationality", "having", "count", "(", "*", ")", ">=", "2", ";"]}, "masked_query": "SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2;", "question_pauq": {"ru": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u043d\u0430\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u0438, \u043a \u043a\u043e\u0442\u043e\u0440\u044b\u043c \u043f\u0440\u0438\u043d\u0430\u0434\u043b\u0435\u0436\u0430\u0442 \u0434\u0432\u0430 \u0438 \u0431\u043e\u043b\u0435\u0435 \u0447\u0435\u043b\u043e\u0432\u0435\u043a\u0430."}, "question": "Return the nationalities for which there are two or more people.", "kb_id": "poker_player"}, {"id": "D_0680", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 9, false], null]], [0, [0, [0, 10, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["asc", [[0, [0, 9, false], null]]], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 9, false], null]], [0, [0, [0, 10, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["asc", [[0, [0, 9, false], null]]], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["List", "the", "names", "and", "birth", "dates", "of", "people", "in", "ascending", "alphabetical", "order", "of", "name", "."], "ru": ["\u041f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0438\u0442\u0435", "\u0438\u043c\u0435\u043d\u0430", "\u0438", "\u0434\u0430\u0442\u044b", "\u0440\u043e\u0436\u0434\u0435\u043d\u0438\u044f", "\u043b\u044e\u0434\u0435\u0439", "\u0432", "\u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430\u044e\u0449\u0435\u043c", "\u0430\u043b\u0444\u0430\u0432\u0438\u0442\u043d\u043e\u043c", "\u043f\u043e\u0440\u044f\u0434\u043a\u0435", "\u0438\u043c\u0435\u043d", "."]}, "query_toks": {"en": ["select", "name", ",", "birth_date", "from", "people", "order", "by", "name", "asc", ";"], "ru": ["select", "name", ",", "birth_date", "from", "people", "order", "by", "name", "asc", ";"]}, "query_toks_no_values": {"en": ["select", "name", ",", "birth_date", "from", "people", "order", "by", "name", "asc", ";"], "ru": ["select", "name", ",", "birth_date", "from", "people", "order", "by", "name", "asc", ";"]}, "masked_query": "SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC;", "question_pauq": {"ru": "\u041f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0438\u0442\u0435 \u0438\u043c\u0435\u043d\u0430 \u0438 \u0434\u0430\u0442\u044b \u0440\u043e\u0436\u0434\u0435\u043d\u0438\u044f \u043b\u044e\u0434\u0435\u0439 \u0432 \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430\u044e\u0449\u0435\u043c \u0430\u043b\u0444\u0430\u0432\u0438\u0442\u043d\u043e\u043c \u043f\u043e\u0440\u044f\u0434\u043a\u0435 \u0438\u043c\u0435\u043d."}, "question": "List the names and birth dates of people in ascending alphabetical order of name.", "kb_id": "poker_player"}, {"id": "D_0681", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 9, false], null]], [0, [0, [0, 10, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["asc", [[0, [0, 9, false], null]]], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 9, false], null]], [0, [0, [0, 10, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["asc", [[0, [0, 9, false], null]]], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "the", "names", "and", "birth", "dates", "of", "people", ",", "ordered", "by", "their", "names", "in", "alphabetical", "order", "?"], "ru": ["\u041a\u0430\u043a\u043e\u0432\u044b", "\u0438\u043c\u0435\u043d\u0430", "\u0438", "\u0434\u0430\u0442\u044b", "\u0440\u043e\u0436\u0434\u0435\u043d\u0438\u044f", "\u043b\u044e\u0434\u0435\u0439", ",", "\u043e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435", "\u043f\u043e", "\u0438\u043c\u0435\u043d\u0430\u043c", "\u0432", "\u0430\u043b\u0444\u0430\u0432\u0438\u0442\u043d\u043e\u043c", "\u043f\u043e\u0440\u044f\u0434\u043a\u0435", "?"]}, "query_toks": {"en": ["select", "name", ",", "birth_date", "from", "people", "order", "by", "name", "asc", ";"], "ru": ["select", "name", ",", "birth_date", "from", "people", "order", "by", "name", "asc", ";"]}, "query_toks_no_values": {"en": ["select", "name", ",", "birth_date", "from", "people", "order", "by", "name", "asc", ";"], "ru": ["select", "name", ",", "birth_date", "from", "people", "order", "by", "name", "asc", ";"]}, "masked_query": "SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC;", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0432\u044b \u0438\u043c\u0435\u043d\u0430 \u0438 \u0434\u0430\u0442\u044b \u0440\u043e\u0436\u0434\u0435\u043d\u0438\u044f \u043b\u044e\u0434\u0435\u0439, \u043e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u043f\u043e \u0438\u043c\u0435\u043d\u0430\u043c \u0432 \u0430\u043b\u0444\u0430\u0432\u0438\u0442\u043d\u043e\u043c \u043f\u043e\u0440\u044f\u0434\u043a\u0435?"}, "question": "What are the names and birth dates of people, ordered by their names in alphabetical order?", "kb_id": "poker_player"}, {"id": "D_0682", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT Name FROM people WHERE Nationality != \"\u0423\u043a\u0440\u0430\u0438\u043d\u0430\";"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [[false, 7, [0, [0, 8, false], null], "\"Russia\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [[false, 7, [0, [0, 8, false], null], "\"\u0423\u043a\u0440\u0430\u0438\u043d\u0430\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Show", "names", "of", "people", "whose", "nationality", "is", "not", "``", "Russia", "''", "."], "ru": ["\u041f\u043e\u043a\u0430\u0436\u0438\u0442\u0435", "\u0438\u043c\u0435\u043d\u0430", "\u043b\u044e\u0434\u0435\u0439", ",", "\u043d\u0430\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u044c", "\u043a\u043e\u0442\u043e\u0440\u044b\u0445", "\u043d\u0435", "\u00ab", "\u0423\u043a\u0440\u0430\u0438\u043d\u0430", "\u00bb", "."]}, "query_toks": {"en": ["select", "name", "from", "people", "where", "nationality", "!=", "\"Russia\"", ";"], "ru": ["select", "name", "from", "people", "where", "nationality", "!=", "\"\u0423\u043a\u0440\u0430\u0438\u043d\u0430\"", ";"]}, "query_toks_no_values": {"en": ["select", "name", "from", "people", "where", "nationality", "!=", "value", ";"], "ru": ["select", "name", "from", "people", "where", "nationality", "!=", "value", ";"]}, "masked_query": "SELECT Name FROM people WHERE Nationality != \"Russia\";", "question_pauq": {"ru": "\u041f\u043e\u043a\u0430\u0436\u0438\u0442\u0435 \u0438\u043c\u0435\u043d\u0430 \u043b\u044e\u0434\u0435\u0439, \u043d\u0430\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043d\u0435 \u00ab\u0423\u043a\u0440\u0430\u0438\u043d\u0430\u00bb."}, "question": "Show names of people whose nationality is not \"Russia\".", "kb_id": "poker_player"}, {"id": "D_0683", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT Name FROM people WHERE Nationality != \"\u0423\u043a\u0440\u0430\u0438\u043d\u0430\";"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [[false, 7, [0, [0, 8, false], null], "\"Russia\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [[false, 7, [0, [0, 8, false], null], "\"\u0423\u043a\u0440\u0430\u0438\u043d\u0430\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "the", "names", "of", "people", "who", "are", "not", "from", "Russia", "?"], "ru": ["\u041a\u0430\u043a", "\u0437\u043e\u0432\u0443\u0442", "\u043b\u044e\u0434\u0435\u0439", "\u043d\u0435", "\u0438\u0437", "\u0423\u043a\u0440\u0430\u0438\u043d\u044b", "?"]}, "query_toks": {"en": ["select", "name", "from", "people", "where", "nationality", "!=", "\"Russia\"", ";"], "ru": ["select", "name", "from", "people", "where", "nationality", "!=", "\"\u0423\u043a\u0440\u0430\u0438\u043d\u0430\"", ";"]}, "query_toks_no_values": {"en": ["select", "name", "from", "people", "where", "nationality", "!=", "value", ";"], "ru": ["select", "name", "from", "people", "where", "nationality", "!=", "value", ";"]}, "masked_query": "SELECT Name FROM people WHERE Nationality != \"Russia\";", "question_pauq": {"ru": "\u041a\u0430\u043a \u0437\u043e\u0432\u0443\u0442 \u043b\u044e\u0434\u0435\u0439 \u043d\u0435 \u0438\u0437 \u0423\u043a\u0440\u0430\u0438\u043d\u044b?"}, "question": "What are the names of people who are not from Russia?", "kb_id": "poker_player"}, {"id": "D_0684", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player);"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [[true, 8, [0, [0, 7, false], null], {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [[true, 8, [0, [0, 7, false], null], {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["List", "the", "names", "of", "people", "that", "are", "not", "poker", "players", "."], "ru": ["\u041f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0438\u0442\u0435", "\u0438\u043c\u0435\u043d\u0430", "\u043b\u044e\u0434\u0435\u0439", ",", "\u043d\u0435", "\u0438\u0433\u0440\u0430\u044e\u0449\u0438\u0445", "\u0432", "\u043f\u043e\u043a\u0435\u0440", "."]}, "query_toks": {"en": ["select", "name", "from", "people", "where", "people_id", "not", "in", "(", "select", "people_id", "from", "poker_player", ")", ";"], "ru": ["select", "name", "from", "people", "where", "people_id", "not", "in", "(", "select", "people_id", "from", "poker_player", ")", ";"]}, "query_toks_no_values": {"en": ["select", "name", "from", "people", "where", "people_id", "not", "in", "(", "select", "people_id", "from", "poker_player", ")", ";"], "ru": ["select", "name", "from", "people", "where", "people_id", "not", "in", "(", "select", "people_id", "from", "poker_player", ")", ";"]}, "masked_query": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player);", "question_pauq": {"ru": "\u041f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0438\u0442\u0435 \u0438\u043c\u0435\u043d\u0430 \u043b\u044e\u0434\u0435\u0439, \u043d\u0435 \u0438\u0433\u0440\u0430\u044e\u0449\u0438\u0445 \u0432 \u043f\u043e\u043a\u0435\u0440."}, "question": "List the names of people that are not poker players.", "kb_id": "poker_player"}, {"id": "D_0685", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player);"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [[true, 8, [0, [0, 7, false], null], {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [[true, 8, [0, [0, 7, false], null], {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "the", "names", "of", "people", "who", "do", "not", "play", "poker", "?"], "ru": ["\u041a\u0430\u043a", "\u0437\u043e\u0432\u0443\u0442", "\u043b\u044e\u0434\u0435\u0439", ",", "\u043a\u043e\u0442\u043e\u0440\u044b\u0435", "\u043d\u0435", "\u0438\u0433\u0440\u0430\u044e\u0442", "\u0432", "\u043f\u043e\u043a\u0435\u0440", "?"]}, "query_toks": {"en": ["select", "name", "from", "people", "where", "people_id", "not", "in", "(", "select", "people_id", "from", "poker_player", ")", ";"], "ru": ["select", "name", "from", "people", "where", "people_id", "not", "in", "(", "select", "people_id", "from", "poker_player", ")", ";"]}, "query_toks_no_values": {"en": ["select", "name", "from", "people", "where", "people_id", "not", "in", "(", "select", "people_id", "from", "poker_player", ")", ";"], "ru": ["select", "name", "from", "people", "where", "people_id", "not", "in", "(", "select", "people_id", "from", "poker_player", ")", ";"]}, "masked_query": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player);", "question_pauq": {"ru": "\u041a\u0430\u043a \u0437\u043e\u0432\u0443\u0442 \u043b\u044e\u0434\u0435\u0439, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0435 \u0438\u0433\u0440\u0430\u044e\u0442 \u0432 \u043f\u043e\u043a\u0435\u0440?"}, "question": "What are the names of people who do not play poker?", "kb_id": "poker_player"}, {"id": "D_0686", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT count(DISTINCT Nationality) FROM people;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[3, [0, [0, 8, true], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[3, [0, [0, 8, true], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["How", "many", "distinct", "nationalities", "are", "there", "?"], "ru": ["\u0421\u043a\u043e\u043b\u044c\u043a\u043e", "\u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442", "\u0440\u0430\u0437\u043d\u044b\u0445", "\u043d\u0430\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u0435\u0439", "?"]}, "query_toks": {"en": ["select", "count", "(", "distinct", "nationality", ")", "from", "people", ";"], "ru": ["select", "count", "(", "distinct", "nationality", ")", "from", "people", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "distinct", "nationality", ")", "from", "people", ";"], "ru": ["select", "count", "(", "distinct", "nationality", ")", "from", "people", ";"]}, "masked_query": "SELECT count(DISTINCT Nationality) FROM people;", "question_pauq": {"ru": "\u0421\u043a\u043e\u043b\u044c\u043a\u043e \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442 \u0440\u0430\u0437\u043d\u044b\u0445 \u043d\u0430\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u0435\u0439?"}, "question": "How many distinct nationalities are there?", "kb_id": "poker_player"}, {"id": "D_0687", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT count(DISTINCT Nationality) FROM people;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[3, [0, [0, 8, true], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[3, [0, [0, 8, true], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Count", "the", "number", "of", "different", "nationalities", "."], "ru": ["\u041f\u043e\u0434\u0441\u0447\u0438\u0442\u0430\u0439", "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e", "\u0440\u0430\u0437\u043d\u044b\u0445", "\u043d\u0430\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u0435\u0439", "."]}, "query_toks": {"en": ["select", "count", "(", "distinct", "nationality", ")", "from", "people", ";"], "ru": ["select", "count", "(", "distinct", "nationality", ")", "from", "people", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "distinct", "nationality", ")", "from", "people", ";"], "ru": ["select", "count", "(", "distinct", "nationality", ")", "from", "people", ";"]}, "masked_query": "SELECT count(DISTINCT Nationality) FROM people;", "question_pauq": {"ru": "\u041f\u043e\u0434\u0441\u0447\u0438\u0442\u0430\u0439 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0440\u0430\u0437\u043d\u044b\u0445 \u043d\u0430\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u0435\u0439."}, "question": "Count the number of different nationalities.", "kb_id": "poker_player"}, {"id": "D_0688", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT count(*) FROM area_code_state;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["How", "many", "states", "are", "there", "?"], "ru": ["\u0421\u043a\u043e\u043b\u044c\u043a\u043e", "\u0442\u0430\u043c", "\u0448\u0442\u0430\u0442\u043e\u0432", "?"]}, "query_toks": {"en": ["select", "count", "(", "*", ")", "from", "area_code_state", ";"], "ru": ["select", "count", "(", "*", ")", "from", "area_code_state", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "*", ")", "from", "area_code_state", ";"], "ru": ["select", "count", "(", "*", ")", "from", "area_code_state", ";"]}, "masked_query": "SELECT count(*) FROM area_code_state;", "question_pauq": {"ru": "\u0421\u043a\u043e\u043b\u044c\u043a\u043e \u0442\u0430\u043c \u0448\u0442\u0430\u0442\u043e\u0432?"}, "question": "How many states are there?", "kb_id": "voter_1"}, {"id": "D_0689", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT contestant_number ,  contestant_name FROM contestants ORDER BY contestant_name DESC;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 3, false], null]], [0, [0, [0, 4, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 4, false], null]]], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 3, false], null]], [0, [0, [0, 4, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 4, false], null]]], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["List", "the", "contestant", "numbers", "and", "names", ",", "ordered", "by", "contestant", "name", "descending", "."], "ru": ["\u041f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0438\u0442\u044c", "\u043d\u043e\u043c\u0435\u0440\u0430", "\u0438", "\u0438\u043c\u0435\u043d\u0430", "\u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u043e\u0432", "\u0432", "\u043f\u043e\u0440\u044f\u0434\u043a\u0435", "\u0443\u0431\u044b\u0432\u0430\u043d\u0438\u044f", "\u0438\u043c\u0435\u043d", "\u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u043e\u0432", "."]}, "query_toks": {"en": ["select", "contestant_number", ",", "contestant_name", "from", "contestants", "order", "by", "contestant_name", "desc", ";"], "ru": ["select", "contestant_number", ",", "contestant_name", "from", "contestants", "order", "by", "contestant_name", "desc", ";"]}, "query_toks_no_values": {"en": ["select", "contestant_number", ",", "contestant_name", "from", "contestants", "order", "by", "contestant_name", "desc", ";"], "ru": ["select", "contestant_number", ",", "contestant_name", "from", "contestants", "order", "by", "contestant_name", "desc", ";"]}, "masked_query": "SELECT contestant_number ,  contestant_name FROM contestants ORDER BY contestant_name DESC;", "question_pauq": {"ru": "\u041f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0438\u0442\u044c \u043d\u043e\u043c\u0435\u0440\u0430 \u0438 \u0438\u043c\u0435\u043d\u0430 \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u043e\u0432 \u0432 \u043f\u043e\u0440\u044f\u0434\u043a\u0435 \u0443\u0431\u044b\u0432\u0430\u043d\u0438\u044f \u0438\u043c\u0435\u043d \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u043e\u0432."}, "question": "List the contestant numbers and names, ordered by contestant name descending.", "kb_id": "voter_1"}, {"id": "D_0690", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT vote_id ,  phone_number ,  state FROM votes;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 5, false], null]], [0, [0, [0, 6, false], null]], [0, [0, [0, 7, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 5, false], null]], [0, [0, [0, 6, false], null]], [0, [0, [0, 7, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["List", "the", "vote", "ids", ",", "phone", "numbers", "and", "states", "of", "all", "votes", "."], "ru": ["\u041f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0438\u0442\u0435", "id", "\u0433\u043e\u043b\u043e\u0441\u043e\u0432", ",", "\u043d\u043e\u043c\u0435\u0440\u0430", "\u0442\u0435\u043b\u0435\u0444\u043e\u043d\u043e\u0432", "\u0438", "\u0448\u0442\u0430\u0442\u044b", "\u0432\u0441\u0435\u0445", "\u0433\u043e\u043b\u043e\u0441\u043e\u0432", "."]}, "query_toks": {"en": ["select", "vote_id", ",", "phone_number", ",", "state", "from", "votes", ";"], "ru": ["select", "vote_id", ",", "phone_number", ",", "state", "from", "votes", ";"]}, "query_toks_no_values": {"en": ["select", "vote_id", ",", "phone_number", ",", "state", "from", "votes", ";"], "ru": ["select", "vote_id", ",", "phone_number", ",", "state", "from", "votes", ";"]}, "masked_query": "SELECT vote_id ,  phone_number ,  state FROM votes;", "question_pauq": {"ru": "\u041f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0438\u0442\u0435 id \u0433\u043e\u043b\u043e\u0441\u043e\u0432, \u043d\u043e\u043c\u0435\u0440\u0430 \u0442\u0435\u043b\u0435\u0444\u043e\u043d\u043e\u0432 \u0438 \u0448\u0442\u0430\u0442\u044b \u0432\u0441\u0435\u0445 \u0433\u043e\u043b\u043e\u0441\u043e\u0432."}, "question": "List the vote ids, phone numbers and states of all votes.", "kb_id": "voter_1"}, {"id": "D_0691", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT max(area_code) ,  min(area_code) FROM area_code_state;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[1, [0, [0, 1, false], null]], [2, [0, [0, 1, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[1, [0, [0, 1, false], null]], [2, [0, [0, 1, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "the", "maximum", "and", "minimum", "values", "of", "area", "codes", "?"], "ru": ["\u041a\u0430\u043a\u043e\u0432\u044b", "\u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0435", "\u0438", "\u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0435", "\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f", "\u043a\u043e\u0434\u043e\u0432", "\u0433\u043e\u0440\u043e\u0434\u043e\u0432", "?"]}, "query_toks": {"en": ["select", "max", "(", "area_code", ")", ",", "min", "(", "area_code", ")", "from", "area_code_state", ";"], "ru": ["select", "max", "(", "area_code", ")", ",", "min", "(", "area_code", ")", "from", "area_code_state", ";"]}, "query_toks_no_values": {"en": ["select", "max", "(", "area_code", ")", ",", "min", "(", "area_code", ")", "from", "area_code_state", ";"], "ru": ["select", "max", "(", "area_code", ")", ",", "min", "(", "area_code", ")", "from", "area_code_state", ";"]}, "masked_query": "SELECT max(area_code) ,  min(area_code) FROM area_code_state;", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0432\u044b \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0435 \u0438 \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043a\u043e\u0434\u043e\u0432 \u0433\u043e\u0440\u043e\u0434\u043e\u0432?"}, "question": "What are the maximum and minimum values of area codes?", "kb_id": "voter_1"}, {"id": "D_0692", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT max(created) FROM votes WHERE state  =  'CA';"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[1, [0, [0, 9, false], null]]]], "where": [[false, 2, [0, [0, 7, false], null], "\"CA\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[1, [0, [0, 9, false], null]]]], "where": [[false, 2, [0, [0, 7, false], null], "\"CA\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "last", "date", "created", "of", "votes", "from", "the", "state", "'CA", "'", "?"], "ru": ["\u041a\u0430\u043a\u043e\u0432\u0430", "\u043f\u043e\u0441\u043b\u0435\u0434\u043d\u044f\u044f", "\u0434\u0430\u0442\u0430", "\u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f", "\u0433\u043e\u043b\u043e\u0441\u043e\u0432", "\u043e\u0442", "\u0448\u0442\u0430\u0442\u0430", "\u00ab", "CA", "\u00bb", "?"]}, "query_toks": {"en": ["select", "max", "(", "created", ")", "from", "votes", "where", "state", "=", "\"CA\"", ";"], "ru": ["select", "max", "(", "created", ")", "from", "votes", "where", "state", "=", "\"CA\"", ";"]}, "query_toks_no_values": {"en": ["select", "max", "(", "created", ")", "from", "votes", "where", "state", "=", "value", ";"], "ru": ["select", "max", "(", "created", ")", "from", "votes", "where", "state", "=", "value", ";"]}, "masked_query": "SELECT max(created) FROM votes WHERE state  =  'CA';", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0432\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u044f\u044f \u0434\u0430\u0442\u0430 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0433\u043e\u043b\u043e\u0441\u043e\u0432 \u043e\u0442 \u0448\u0442\u0430\u0442\u0430 \u00abCA\u00bb?"}, "question": "What is last date created of votes from the state 'CA'?", "kb_id": "voter_1"}, {"id": "D_0693", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT contestant_name FROM contestants WHERE contestant_name != '\u041f\u0430\u0432\u0435\u043b \u041d\u0435\u0441\u0442\u0435\u0440\u043e\u0432';"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 4, false], null]]]], "where": [[false, 7, [0, [0, 4, false], null], "\"Jessie Alloway\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 4, false], null]]]], "where": [[false, 7, [0, [0, 4, false], null], "\"\u041f\u0430\u0432\u0435\u043b \u041d\u0435\u0441\u0442\u0435\u0440\u043e\u0432\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "the", "names", "of", "the", "contestants", "whose", "names", "are", "not", "'Jessie", "Alloway", "'"], "ru": ["\u041a\u0430\u043a", "\u0437\u043e\u0432\u0443\u0442", "\u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u043e\u0432", ",", "\u0447\u044c\u0438", "\u0438\u043c\u0435\u043d\u0430", "\u043d\u0435", "\u00ab", "\u041f\u0430\u0432\u0435\u043b", "\u041d\u0435\u0441\u0442\u0435\u0440\u043e\u0432", "\u00bb", "?"]}, "query_toks": {"en": ["select", "contestant_name", "from", "contestants", "where", "contestant_name", "!=", "\"Jessie Alloway\"", ";"], "ru": ["select", "contestant_name", "from", "contestants", "where", "contestant_name", "!=", "\"\u041f\u0430\u0432\u0435\u043b \u041d\u0435\u0441\u0442\u0435\u0440\u043e\u0432\"", ";"]}, "query_toks_no_values": {"en": ["select", "contestant_name", "from", "contestants", "where", "contestant_name", "!=", "value", ";"], "ru": ["select", "contestant_name", "from", "contestants", "where", "contestant_name", "!=", "value", ";"]}, "masked_query": "SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway';", "question_pauq": {"ru": "\u041a\u0430\u043a \u0437\u043e\u0432\u0443\u0442 \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u043e\u0432, \u0447\u044c\u0438 \u0438\u043c\u0435\u043d\u0430 \u043d\u0435 \u00ab\u041f\u0430\u0432\u0435\u043b \u041d\u0435\u0441\u0442\u0435\u0440\u043e\u0432\u00bb?"}, "question": "What are the names of the contestants whose names are not 'Jessie Alloway'", "kb_id": "voter_1"}, {"id": "D_0694", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT DISTINCT state ,  created FROM votes;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [true, [[0, [0, [0, 7, false], null]], [0, [0, [0, 9, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [true, [[0, [0, [0, 7, false], null]], [0, [0, [0, 9, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "the", "distinct", "states", "and", "create", "time", "of", "all", "votes", "?"], "ru": ["\u041a\u0430\u043a\u043e\u0432\u044b", "\u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0435", "\u0448\u0442\u0430\u0442\u044b", "\u0438", "\u0432\u0440\u0435\u043c\u044f", "\u043e\u0444\u043e\u0440\u043c\u043b\u0435\u043d\u0438\u044f", "\u0432\u0441\u0435\u0445", "\u0433\u043e\u043b\u043e\u0441\u043e\u0432", "?"]}, "query_toks": {"en": ["select", "distinct", "state", ",", "created", "from", "votes", ";"], "ru": ["select", "distinct", "state", ",", "created", "from", "votes", ";"]}, "query_toks_no_values": {"en": ["select", "distinct", "state", ",", "created", "from", "votes", ";"], "ru": ["select", "distinct", "state", ",", "created", "from", "votes", ";"]}, "masked_query": "SELECT DISTINCT state ,  created FROM votes;", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0432\u044b \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0435 \u0448\u0442\u0430\u0442\u044b \u0438 \u0432\u0440\u0435\u043c\u044f \u043e\u0444\u043e\u0440\u043c\u043b\u0435\u043d\u0438\u044f \u0432\u0441\u0435\u0445 \u0433\u043e\u043b\u043e\u0441\u043e\u0432?"}, "question": "What are the distinct states and create time of all votes?", "kb_id": "voter_1"}, {"id": "D_0695", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number HAVING count(*)  >=  2;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 3, false], null], [0, 8, false], null]]}, "select": [false, [[0, [0, [0, 3, false], null]], [0, [0, [0, 4, false], null]]]], "where": [], "groupBy": [[0, 3, false]], "having": [[false, 5, [0, [3, 0, false], null], 2.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 3, false], null], [0, 8, false], null]]}, "select": [false, [[0, [0, [0, 3, false], null]], [0, [0, [0, 4, false], null]]]], "where": [], "groupBy": [[0, 3, false]], "having": [[false, 5, [0, [3, 0, false], null], 2.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "the", "contestant", "numbers", "and", "names", "of", "the", "contestants", "who", "had", "at", "least", "two", "votes", "?"], "ru": ["\u041a\u0430\u043a\u043e\u0432\u044b", "\u043d\u043e\u043c\u0435\u0440\u0430", "\u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u043e\u0432", "\u0438", "\u0438\u043c\u0435\u043d\u0430", "\u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u043e\u0432", ",", "\u043d\u0430\u0431\u0440\u0430\u0432\u0448\u0438\u0445", "\u043d\u0435", "\u043c\u0435\u043d\u0435\u0435", "\u0434\u0432\u0443\u0445", "\u0433\u043e\u043b\u043e\u0441\u043e\u0432", "?"]}, "query_toks": {"en": ["select", "t1.contestant_number", ",", "t1.contestant_name", "from", "contestants", "as", "t1", "join", "votes", "as", "t2", "on", "t1.contestant_number", "=", "t2.contestant_number", "group", "by", "t1.contestant_number", "having", "count", "(", "*", ")", ">=", "2", ";"], "ru": ["select", "t1.contestant_number", ",", "t1.contestant_name", "from", "contestants", "as", "t1", "join", "votes", "as", "t2", "on", "t1.contestant_number", "=", "t2.contestant_number", "group", "by", "t1.contestant_number", "having", "count", "(", "*", ")", ">=", "2", ";"]}, "query_toks_no_values": {"en": ["select", "t1.contestant_number", ",", "t1.contestant_name", "from", "contestants", "as", "t1", "join", "votes", "as", "t2", "on", "t1.contestant_number", "=", "t2.contestant_number", "group", "by", "t1.contestant_number", "having", "count", "(", "*", ")", ">=", "2", ";"], "ru": ["select", "t1.contestant_number", ",", "t1.contestant_name", "from", "contestants", "as", "t1", "join", "votes", "as", "t2", "on", "t1.contestant_number", "=", "t2.contestant_number", "group", "by", "t1.contestant_number", "having", "count", "(", "*", ")", ">=", "2", ";"]}, "masked_query": "SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number HAVING count(*)  >=  2;", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0432\u044b \u043d\u043e\u043c\u0435\u0440\u0430 \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u043e\u0432 \u0438 \u0438\u043c\u0435\u043d\u0430 \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u043e\u0432, \u043d\u0430\u0431\u0440\u0430\u0432\u0448\u0438\u0445 \u043d\u0435 \u043c\u0435\u043d\u0435\u0435 \u0434\u0432\u0443\u0445 \u0433\u043e\u043b\u043e\u0441\u043e\u0432?"}, "question": "What are the contestant numbers and names of the contestants who had at least two votes?", "kb_id": "voter_1"}, {"id": "D_0696", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number ORDER BY count(*) ASC LIMIT 1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 3, false], null], [0, 8, false], null]]}, "select": [false, [[0, [0, [0, 3, false], null]], [0, [0, [0, 4, false], null]]]], "where": [], "groupBy": [[0, 3, false]], "having": [], "orderBy": ["asc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 3, false], null], [0, 8, false], null]]}, "select": [false, [[0, [0, [0, 3, false], null]], [0, [0, [0, 4, false], null]]]], "where": [], "groupBy": [[0, 3, false]], "having": [], "orderBy": ["asc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Of", "all", "the", "contestants", "who", "got", "voted", ",", "what", "is", "the", "contestant", "number", "and", "name", "of", "the", "contestant", "who", "got", "least", "votes", "?"], "ru": ["\u0418\u0437", "\u0432\u0441\u0435\u0445", "\u043f\u0440\u043e\u0433\u043e\u043b\u043e\u0441\u043e\u0432\u0430\u0432\u0448\u0438\u0445", "\u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u043e\u0432", ",", "\u043a\u0430\u043a\u043e\u0432", "\u043d\u043e\u043c\u0435\u0440", "\u0438", "\u0438\u043c\u044f", "\u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0430", ",", "\u043d\u0430\u0431\u0440\u0430\u0432\u0448\u0435\u0433\u043e", "\u043d\u0430\u0438\u043c\u0435\u043d\u044c\u0448\u0435\u0435", "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e", "\u0433\u043e\u043b\u043e\u0441\u043e\u0432", "?"]}, "query_toks": {"en": ["select", "t1.contestant_number", ",", "t1.contestant_name", "from", "contestants", "as", "t1", "join", "votes", "as", "t2", "on", "t1.contestant_number", "=", "t2.contestant_number", "group", "by", "t1.contestant_number", "order", "by", "count", "(", "*", ")", "asc", "limit", "1", ";"], "ru": ["select", "t1.contestant_number", ",", "t1.contestant_name", "from", "contestants", "as", "t1", "join", "votes", "as", "t2", "on", "t1.contestant_number", "=", "t2.contestant_number", "group", "by", "t1.contestant_number", "order", "by", "count", "(", "*", ")", "asc", "limit", "1", ";"]}, "query_toks_no_values": {"en": ["select", "t1.contestant_number", ",", "t1.contestant_name", "from", "contestants", "as", "t1", "join", "votes", "as", "t2", "on", "t1.contestant_number", "=", "t2.contestant_number", "group", "by", "t1.contestant_number", "order", "by", "count", "(", "*", ")", "asc", "limit", "1", ";"], "ru": ["select", "t1.contestant_number", ",", "t1.contestant_name", "from", "contestants", "as", "t1", "join", "votes", "as", "t2", "on", "t1.contestant_number", "=", "t2.contestant_number", "group", "by", "t1.contestant_number", "order", "by", "count", "(", "*", ")", "asc", "limit", "1", ";"]}, "masked_query": "SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number ORDER BY count(*) ASC LIMIT 1;", "question_pauq": {"ru": "\u0418\u0437 \u0432\u0441\u0435\u0445 \u043f\u0440\u043e\u0433\u043e\u043b\u043e\u0441\u043e\u0432\u0430\u0432\u0448\u0438\u0445 \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u043e\u0432, \u043a\u0430\u043a\u043e\u0432 \u043d\u043e\u043c\u0435\u0440 \u0438 \u0438\u043c\u044f \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0430, \u043d\u0430\u0431\u0440\u0430\u0432\u0448\u0435\u0433\u043e \u043d\u0430\u0438\u043c\u0435\u043d\u044c\u0448\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0433\u043e\u043b\u043e\u0441\u043e\u0432?"}, "question": "Of all the contestants who got voted, what is the contestant number and name of the contestant who got least votes?", "kb_id": "voter_1"}, {"id": "D_0697", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT count(*) FROM votes WHERE state  =  'NY' OR state  =  'CA';"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 7, false], null], "\"NY\"", null], "or", [false, 2, [0, [0, 7, false], null], "\"CA\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 7, false], null], "\"NY\"", null], "or", [false, 2, [0, [0, 7, false], null], "\"CA\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "the", "number", "of", "votes", "from", "state", "'NY", "'", "or", "'CA", "'", "?"], "ru": ["\u041a\u0430\u043a\u043e\u0432\u043e", "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e", "\u0433\u043e\u043b\u043e\u0441\u043e\u0432", "\u043e\u0442", "\u0448\u0442\u0430\u0442\u0430", "\u041d\u044c\u044e-\u0419\u043e\u0440\u043a", "\u0438\u043b\u0438", "\u041a\u0430\u043b\u0438\u0444\u043e\u0440\u043d\u0438\u044f", "?"]}, "query_toks": {"en": ["select", "count", "(", "*", ")", "from", "votes", "where", "state", "=", "\"NY\"", "or", "state", "=", "\"CA\"", ";"], "ru": ["select", "count", "(", "*", ")", "from", "votes", "where", "state", "=", "\"NY\"", "or", "state", "=", "\"CA\"", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "*", ")", "from", "votes", "where", "state", "=", "value", "or", "state", "=", "value", ";"], "ru": ["select", "count", "(", "*", ")", "from", "votes", "where", "state", "=", "value", "or", "state", "=", "value", ";"]}, "masked_query": "SELECT count(*) FROM votes WHERE state  =  'NY' OR state  =  'CA';", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0432\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0433\u043e\u043b\u043e\u0441\u043e\u0432 \u043e\u0442 \u0448\u0442\u0430\u0442\u0430 \u041d\u044c\u044e-\u0419\u043e\u0440\u043a \u0438\u043b\u0438 \u041a\u0430\u043b\u0438\u0444\u043e\u0440\u043d\u0438\u044f?"}, "question": "What are the number of votes from state 'NY' or 'CA'?", "kb_id": "voter_1"}, {"id": "D_0698", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT count(*) FROM contestants WHERE contestant_number NOT IN ( SELECT contestant_number FROM votes );"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[true, 8, [0, [0, 3, false], null], {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 8, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[true, 8, [0, [0, 3, false], null], {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 8, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["How", "many", "contestants", "did", "not", "get", "voted", "?"], "ru": ["\u0421\u043a\u043e\u043b\u044c\u043a\u043e", "\u043a\u043e\u043d\u043a\u0443\u0440\u0441\u0430\u043d\u0442\u043e\u0432", "\u043d\u0435", "\u043f\u0440\u043e\u0433\u043e\u043b\u043e\u0441\u043e\u0432\u0430\u043b\u0438", "?"]}, "query_toks": {"en": ["select", "count", "(", "*", ")", "from", "contestants", "where", "contestant_number", "not", "in", "(", "select", "contestant_number", "from", "votes", ")", ";"], "ru": ["select", "count", "(", "*", ")", "from", "contestants", "where", "contestant_number", "not", "in", "(", "select", "contestant_number", "from", "votes", ")", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "*", ")", "from", "contestants", "where", "contestant_number", "not", "in", "(", "select", "contestant_number", "from", "votes", ")", ";"], "ru": ["select", "count", "(", "*", ")", "from", "contestants", "where", "contestant_number", "not", "in", "(", "select", "contestant_number", "from", "votes", ")", ";"]}, "masked_query": "SELECT count(*) FROM contestants WHERE contestant_number NOT IN ( SELECT contestant_number FROM votes );", "question_pauq": {"ru": "\u0421\u043a\u043e\u043b\u044c\u043a\u043e \u043a\u043e\u043d\u043a\u0443\u0440\u0441\u0430\u043d\u0442\u043e\u0432 \u043d\u0435 \u043f\u0440\u043e\u0433\u043e\u043b\u043e\u0441\u043e\u0432\u0430\u043b\u0438?"}, "question": "How many contestants did not get voted?", "kb_id": "voter_1"}, {"id": "D_0699", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T1.area_code FROM area_code_state AS T1 JOIN votes AS T2 ON T1.state  =  T2.state GROUP BY T1.area_code ORDER BY count(*) DESC LIMIT 1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 2, false], null], [0, 7, false], null]]}, "select": [false, [[0, [0, [0, 1, false], null]]]], "where": [], "groupBy": [[0, 1, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 2, false], null], [0, 7, false], null]]}, "select": [false, [[0, [0, [0, 1, false], null]]]], "where": [], "groupBy": [[0, 1, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "area", "code", "in", "which", "the", "most", "voters", "voted", "?"], "ru": ["\u041a\u0430\u043a\u043e\u0432", "\u043a\u043e\u0434", "\u0433\u043e\u0440\u043e\u0434\u0430", ",", "\u0432", "\u043a\u043e\u0442\u043e\u0440\u043e\u043c", "\u043f\u0440\u043e\u0433\u043e\u043b\u043e\u0441\u043e\u0432\u0430\u043b\u043e", "\u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0435\u0435", "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e", "\u0438\u0437\u0431\u0438\u0440\u0430\u0442\u0435\u043b\u0435\u0439", "?"]}, "query_toks": {"en": ["select", "t1.area_code", "from", "area_code_state", "as", "t1", "join", "votes", "as", "t2", "on", "t1.state", "=", "t2.state", "group", "by", "t1.area_code", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"], "ru": ["select", "t1.area_code", "from", "area_code_state", "as", "t1", "join", "votes", "as", "t2", "on", "t1.state", "=", "t2.state", "group", "by", "t1.area_code", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"]}, "query_toks_no_values": {"en": ["select", "t1.area_code", "from", "area_code_state", "as", "t1", "join", "votes", "as", "t2", "on", "t1.state", "=", "t2.state", "group", "by", "t1.area_code", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"], "ru": ["select", "t1.area_code", "from", "area_code_state", "as", "t1", "join", "votes", "as", "t2", "on", "t1.state", "=", "t2.state", "group", "by", "t1.area_code", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"]}, "masked_query": "SELECT T1.area_code FROM area_code_state AS T1 JOIN votes AS T2 ON T1.state  =  T2.state GROUP BY T1.area_code ORDER BY count(*) DESC LIMIT 1;", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0432 \u043a\u043e\u0434 \u0433\u043e\u0440\u043e\u0434\u0430, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u043f\u0440\u043e\u0433\u043e\u043b\u043e\u0441\u043e\u0432\u0430\u043b\u043e \u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0438\u0437\u0431\u0438\u0440\u0430\u0442\u0435\u043b\u0435\u0439?"}, "question": "What is the area code in which the most voters voted?", "kb_id": "voter_1"}, {"id": "D_0700", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T2.created ,  T2.state ,  T2.phone_number FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number WHERE T1.contestant_name  =  '\u041c\u0430\u0442\u0432\u0435\u0439 \u0413\u043e\u043d\u0447\u0430\u0440\u043e\u0432';"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 3, false], null], [0, 8, false], null]]}, "select": [false, [[0, [0, [0, 9, false], null]], [0, [0, [0, 7, false], null]], [0, [0, [0, 6, false], null]]]], "where": [[false, 2, [0, [0, 4, false], null], "\"Tabatha Gehling\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 3, false], null], [0, 8, false], null]]}, "select": [false, [[0, [0, [0, 9, false], null]], [0, [0, [0, 7, false], null]], [0, [0, [0, 6, false], null]]]], "where": [[false, 2, [0, [0, 4, false], null], "\"\u041c\u0430\u0442\u0432\u0435\u0439 \u0413\u043e\u043d\u0447\u0430\u0440\u043e\u0432\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "the", "create", "dates", ",", "states", ",", "and", "phone", "numbers", "of", "the", "votes", "that", "were", "for", "the", "contestant", "named", "'Tabatha", "Gehling", "'", "?"], "ru": ["\u041a\u0430\u043a\u043e\u0432\u044b", "\u0434\u0430\u0442\u044b", "\u043e\u0444\u043e\u0440\u043c\u043b\u0435\u043d\u0438\u044f", ",", "\u0448\u0442\u0430\u0442\u044b", "\u0438", "\u043d\u043e\u043c\u0435\u0440\u0430", "\u0442\u0435\u043b\u0435\u0444\u043e\u043d\u043e\u0432", "\u043f\u0440\u0438", "\u0433\u043e\u043b\u043e\u0441\u043e\u0432\u0430\u043d\u0438\u0438", "\u0437\u0430", "\u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0430", "\u043f\u043e", "\u0438\u043c\u0435\u043d\u0438", "\u041c\u0430\u0442\u0432\u0435\u0439", "\u0413\u043e\u043d\u0447\u0430\u0440\u043e\u0432", "?"]}, "query_toks": {"en": ["select", "t2.created", ",", "t2.state", ",", "t2.phone_number", "from", "contestants", "as", "t1", "join", "votes", "as", "t2", "on", "t1.contestant_number", "=", "t2.contestant_number", "where", "t1.contestant_name", "=", "\"Tabatha Gehling\"", ";"], "ru": ["select", "t2.created", ",", "t2.state", ",", "t2.phone_number", "from", "contestants", "as", "t1", "join", "votes", "as", "t2", "on", "t1.contestant_number", "=", "t2.contestant_number", "where", "t1.contestant_name", "=", "\"\u041c\u0430\u0442\u0432\u0435\u0439 \u0413\u043e\u043d\u0447\u0430\u0440\u043e\u0432\"", ";"]}, "query_toks_no_values": {"en": ["select", "t2.created", ",", "t2.state", ",", "t2.phone_number", "from", "contestants", "as", "t1", "join", "votes", "as", "t2", "on", "t1.contestant_number", "=", "t2.contestant_number", "where", "t1.contestant_name", "=", "value", ";"], "ru": ["select", "t2.created", ",", "t2.state", ",", "t2.phone_number", "from", "contestants", "as", "t1", "join", "votes", "as", "t2", "on", "t1.contestant_number", "=", "t2.contestant_number", "where", "t1.contestant_name", "=", "value", ";"]}, "masked_query": "SELECT T2.created ,  T2.state ,  T2.phone_number FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number WHERE T1.contestant_name  =  'Tabatha Gehling';", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0432\u044b \u0434\u0430\u0442\u044b \u043e\u0444\u043e\u0440\u043c\u043b\u0435\u043d\u0438\u044f, \u0448\u0442\u0430\u0442\u044b \u0438 \u043d\u043e\u043c\u0435\u0440\u0430 \u0442\u0435\u043b\u0435\u0444\u043e\u043d\u043e\u0432 \u043f\u0440\u0438 \u0433\u043e\u043b\u043e\u0441\u043e\u0432\u0430\u043d\u0438\u0438 \u0437\u0430 \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u0430 \u043f\u043e \u0438\u043c\u0435\u043d\u0438 \u041c\u0430\u0442\u0432\u0435\u0439 \u0413\u043e\u043d\u0447\u0430\u0440\u043e\u0432?"}, "question": "What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'?", "kb_id": "voter_1"}, {"id": "D_0701", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  '\u041c\u0430\u0442\u0432\u0435\u0439 \u0413\u043e\u043d\u0447\u0430\u0440\u043e\u0432' INTERSECT SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  '\u0410\u0440\u0438\u043d\u0430 \u0424\u0438\u043b\u0438\u043f\u043f\u043e\u0432\u0430';"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1], ["table_unit", 2], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 3, false], null], [0, 8, false], null], "and", [false, 2, [0, [0, 7, false], null], [0, 2, false], null]]}, "select": [false, [[0, [0, [0, 1, false], null]]]], "where": [[false, 2, [0, [0, 4, false], null], "\"Tabatha Gehling\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": {"from": {"table_units": [["table_unit", 1], ["table_unit", 2], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 3, false], null], [0, 8, false], null], "and", [false, 2, [0, [0, 7, false], null], [0, 2, false], null]]}, "select": [false, [[0, [0, [0, 1, false], null]]]], "where": [[false, 2, [0, [0, 4, false], null], "\"Alana Bregman\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1], ["table_unit", 2], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 3, false], null], [0, 8, false], null], "and", [false, 2, [0, [0, 7, false], null], [0, 2, false], null]]}, "select": [false, [[0, [0, [0, 1, false], null]]]], "where": [[false, 2, [0, [0, 4, false], null], "\"\u041c\u0430\u0442\u0432\u0435\u0439 \u0413\u043e\u043d\u0447\u0430\u0440\u043e\u0432\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": {"from": {"table_units": [["table_unit", 1], ["table_unit", 2], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 3, false], null], [0, 8, false], null], "and", [false, 2, [0, [0, 7, false], null], [0, 2, false], null]]}, "select": [false, [[0, [0, [0, 1, false], null]]]], "where": [[false, 2, [0, [0, 4, false], null], "\"\u0410\u0440\u0438\u043d\u0430 \u0424\u0438\u043b\u0438\u043f\u043f\u043e\u0432\u0430\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "union": null, "except": null}}, "question_toks": {"en": ["List", "the", "area", "codes", "in", "which", "voters", "voted", "both", "for", "the", "contestant", "'Tabatha", "Gehling", "'", "and", "the", "contestant", "'Alana", "Bregman", "'", "."], "ru": ["\u041f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0438\u0442\u0435", "\u043a\u043e\u0434\u044b", "\u0433\u043e\u0440\u043e\u0434\u043e\u0432", ",", "\u0432", "\u043a\u043e\u0442\u043e\u0440\u044b\u0445", "\u0438\u0437\u0431\u0438\u0440\u0430\u0442\u0435\u043b\u0438", "\u0433\u043e\u043b\u043e\u0441\u043e\u0432\u0430\u043b\u0438", "\u043a\u0430\u043a", "\u0437\u0430", "\u043a\u0430\u043d\u0434\u0438\u0434\u0430\u0442\u0443\u0440\u0443", "\u00ab", "\u041c\u0430\u0442\u0432\u0435\u0439", "\u0413\u043e\u043d\u0447\u0430\u0440\u043e\u0432", "\u00bb", ",", "\u0442\u0430\u043a", "\u0438", "\u0437\u0430", "\u043a\u0430\u043d\u0434\u0438\u0434\u0430\u0442\u0443\u0440\u0443", "\u00ab", "\u0410\u0440\u0438\u043d\u0430", "\u0424\u0438\u043b\u0438\u043f\u043f\u043e\u0432\u0430", "\u00bb", "."]}, "query_toks": {"en": ["select", "t3.area_code", "from", "contestants", "as", "t1", "join", "votes", "as", "t2", "on", "t1.contestant_number", "=", "t2.contestant_number", "join", "area_code_state", "as", "t3", "on", "t2.state", "=", "t3.state", "where", "t1.contestant_name", "=", "\"Tabatha Gehling\"", "intersect", "select", "t3.area_code", "from", "contestants", "as", "t1", "join", "votes", "as", "t2", "on", "t1.contestant_number", "=", "t2.contestant_number", "join", "area_code_state", "as", "t3", "on", "t2.state", "=", "t3.state", "where", "t1.contestant_name", "=", "\"Alana Bregman\"", ";"], "ru": ["select", "t3.area_code", "from", "contestants", "as", "t1", "join", "votes", "as", "t2", "on", "t1.contestant_number", "=", "t2.contestant_number", "join", "area_code_state", "as", "t3", "on", "t2.state", "=", "t3.state", "where", "t1.contestant_name", "=", "\"\u041c\u0430\u0442\u0432\u0435\u0439 \u0413\u043e\u043d\u0447\u0430\u0440\u043e\u0432\"", "intersect", "select", "t3.area_code", "from", "contestants", "as", "t1", "join", "votes", "as", "t2", "on", "t1.contestant_number", "=", "t2.contestant_number", "join", "area_code_state", "as", "t3", "on", "t2.state", "=", "t3.state", "where", "t1.contestant_name", "=", "\"\u0410\u0440\u0438\u043d\u0430 \u0424\u0438\u043b\u0438\u043f\u043f\u043e\u0432\u0430\"", ";"]}, "query_toks_no_values": {"en": ["select", "t3.area_code", "from", "contestants", "as", "t1", "join", "votes", "as", "t2", "on", "t1.contestant_number", "=", "t2.contestant_number", "join", "area_code_state", "as", "t3", "on", "t2.state", "=", "t3.state", "where", "t1.contestant_name", "=", "value", "intersect", "select", "t3.area_code", "from", "contestants", "as", "t1", "join", "votes", "as", "t2", "on", "t1.contestant_number", "=", "t2.contestant_number", "join", "area_code_state", "as", "t3", "on", "t2.state", "=", "t3.state", "where", "t1.contestant_name", "=", "value", ";"], "ru": ["select", "t3.area_code", "from", "contestants", "as", "t1", "join", "votes", "as", "t2", "on", "t1.contestant_number", "=", "t2.contestant_number", "join", "area_code_state", "as", "t3", "on", "t2.state", "=", "t3.state", "where", "t1.contestant_name", "=", "value", "intersect", "select", "t3.area_code", "from", "contestants", "as", "t1", "join", "votes", "as", "t2", "on", "t1.contestant_number", "=", "t2.contestant_number", "join", "area_code_state", "as", "t3", "on", "t2.state", "=", "t3.state", "where", "t1.contestant_name", "=", "value", ";"]}, "masked_query": "SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Tabatha Gehling' INTERSECT SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Alana Bregman';", "question_pauq": {"ru": "\u041f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0438\u0442\u0435 \u043a\u043e\u0434\u044b \u0433\u043e\u0440\u043e\u0434\u043e\u0432, \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0438\u0437\u0431\u0438\u0440\u0430\u0442\u0435\u043b\u0438 \u0433\u043e\u043b\u043e\u0441\u043e\u0432\u0430\u043b\u0438 \u043a\u0430\u043a \u0437\u0430 \u043a\u0430\u043d\u0434\u0438\u0434\u0430\u0442\u0443\u0440\u0443 \u00ab\u041c\u0430\u0442\u0432\u0435\u0439 \u0413\u043e\u043d\u0447\u0430\u0440\u043e\u0432\u00bb, \u0442\u0430\u043a \u0438 \u0437\u0430 \u043a\u0430\u043d\u0434\u0438\u0434\u0430\u0442\u0443\u0440\u0443 \u00ab\u0410\u0440\u0438\u043d\u0430 \u0424\u0438\u043b\u0438\u043f\u043f\u043e\u0432\u0430\u00bb."}, "question": "List the area codes in which voters voted both for the contestant 'Tabatha Gehling' and the contestant 'Alana Bregman'.", "kb_id": "voter_1"}, {"id": "D_0702", "source": "spider-dev", "type": "dev", "query": {"ru": "select contestant_name from contestants where contestant_name like \"%\u043e\u0432%\";"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 4, false], null]]]], "where": [[false, 9, [0, [0, 4, false], null], "\"%al%\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 4, false], null]]]], "where": [[false, 9, [0, [0, 4, false], null], "\"%\u043e\u0432%\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Return", "the", "names", "of", "the", "contestants", "whose", "names", "contain", "the", "substring", "'Al", "'", "."], "ru": ["\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c", "\u0438\u043c\u0435\u043d\u0430", "\u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u043e\u0432", ",", "\u0438\u043c\u0435\u043d\u0430", "\u043a\u043e\u0442\u043e\u0440\u044b\u0445", "\u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442", "\u043f\u043e\u0434\u0441\u0442\u0440\u043e\u043a\u0443", "\u00ab", "\u043e\u0432", "\u00bb", "."]}, "query_toks": {"en": ["select", "contestant_name", "from", "contestants", "where", "contestant_name", "like", "\"%al%\"", ";"], "ru": ["select", "contestant_name", "from", "contestants", "where", "contestant_name", "like", "\"%\u043e\u0432%\"", ";"]}, "query_toks_no_values": {"en": ["select", "contestant_name", "from", "contestants", "where", "contestant_name", "like", "value", ";"], "ru": ["select", "contestant_name", "from", "contestants", "where", "contestant_name", "like", "value", ";"]}, "masked_query": "select contestant_name from contestants where contestant_name like \"%al%\";", "question_pauq": {"ru": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0438\u043c\u0435\u043d\u0430 \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u043e\u0432, \u0438\u043c\u0435\u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442 \u043f\u043e\u0434\u0441\u0442\u0440\u043e\u043a\u0443 \u00ab\u043e\u0432\u00bb."}, "question": "Return the names of the contestants whose names contain the substring 'Al' .", "kb_id": "voter_1"}, {"id": "D_0703", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT Name FROM country WHERE IndepYear  >  1950;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[4, [0, [0, 14, false], null]], [5, [0, [0, 12, false], null]]]], "where": [[false, 2, [0, [0, 10, false], null], "\"North America\"", null], "and", [false, 3, [0, [0, 12, false], null], 3000.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [[false, 3, [0, [0, 13, false], null], 1950.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "the", "names", "of", "all", "the", "countries", "that", "became", "independent", "after", "1950", "?"], "ru": ["What", "is", "the", "total", "population", "and", "average", "area", "of", "countries", "in", "the", "continent", "of", "North", "America", "whose", "area", "is", "bigger", "than", "3000", "?"]}, "query_toks": {"en": ["select", "sum", "(", "population", ")", ",", "avg", "(", "surfacearea", ")", "from", "country", "where", "continent", "=", "\"North America\"", "and", "surfacearea", ">", "3000", ";"], "ru": ["select", "name", "from", "country", "where", "indepyear", ">", "1950", ";"]}, "query_toks_no_values": {"en": ["select", "sum", "(", "population", ")", ",", "avg", "(", "surfacearea", ")", "from", "country", "where", "continent", "=", "value", "and", "surfacearea", ">", "3000", ";"], "ru": ["select", "name", "from", "country", "where", "indepyear", ">", "1950", ";"]}, "masked_query": "select sum(population) , avg(surfacearea) from country where continent = \"North America\" and surfacearea > 3000;", "question_pauq": {"ru": "What is the total population and average area of countries in the continent of North America whose area is bigger than 3000 ?"}, "question": "What are the names of all the countries that became independent after 1950?", "kb_id": "world_1"}, {"id": "D_0704", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT Name FROM country WHERE IndepYear  >  1950;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[4, [0, [0, 14, false], null]], [5, [0, [0, 12, false], null]]]], "where": [[false, 2, [0, [0, 10, false], null], "\"North America\"", null], "and", [false, 3, [0, [0, 12, false], null], 3000.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [[false, 3, [0, [0, 13, false], null], 1950.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Give", "the", "names", "of", "the", "nations", "that", "were", "founded", "after", "1950", "."], "ru": ["Give", "the", "total", "population", "and", "average", "surface", "area", "corresponding", "to", "countries", "in", "North", "America", "that", "have", "a", "surface", "area", "greater", "than", "3000", "."]}, "query_toks": {"en": ["select", "sum", "(", "population", ")", ",", "avg", "(", "surfacearea", ")", "from", "country", "where", "continent", "=", "\"North America\"", "and", "surfacearea", ">", "3000", ";"], "ru": ["select", "name", "from", "country", "where", "indepyear", ">", "1950", ";"]}, "query_toks_no_values": {"en": ["select", "sum", "(", "population", ")", ",", "avg", "(", "surfacearea", ")", "from", "country", "where", "continent", "=", "value", "and", "surfacearea", ">", "3000", ";"], "ru": ["select", "name", "from", "country", "where", "indepyear", ">", "1950", ";"]}, "masked_query": "select sum(population) , avg(surfacearea) from country where continent = \"North America\" and surfacearea > 3000;", "question_pauq": {"ru": "Give the total population and average surface area corresponding to countries in North America that have a surface area greater than 3000 ."}, "question": "Give the names of the nations that were founded after 1950.", "kb_id": "world_1"}, {"id": "D_0705", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT count(*) FROM country WHERE GovernmentForm  =  \"\u0410\u0431\u0441\u043e\u043b\u044e\u0442\u043d\u0430\u044f \u043c\u043e\u043d\u0430\u0440\u0445\u0438\u044f\";"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 19, false], null], "\"Republic\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 19, false], null], "\"\u0410\u0431\u0441\u043e\u043b\u044e\u0442\u043d\u0430\u044f \u043c\u043e\u043d\u0430\u0440\u0445\u0438\u044f\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["How", "many", "countries", "have", "a", "republic", "as", "their", "form", "of", "government", "?"], "ru": ["\u0412", "\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445", "\u0441\u0442\u0440\u0430\u043d\u0430\u0445", "\u0444\u043e\u0440\u043c\u0430", "\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f", "\u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f", "\u0430\u0431\u0441\u043e\u043b\u044e\u0442\u043d\u043e\u0439", "\u043c\u043e\u043d\u0430\u0440\u0445\u0438\u0435\u0439", "?"]}, "query_toks": {"en": ["select", "count", "(", "*", ")", "from", "country", "where", "governmentform", "=", "\"Republic\"", ";"], "ru": ["select", "count", "(", "*", ")", "from", "country", "where", "governmentform", "=", "\"\u0410\u0431\u0441\u043e\u043b\u044e\u0442\u043d\u0430\u044f \u043c\u043e\u043d\u0430\u0440\u0445\u0438\u044f\"", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "*", ")", "from", "country", "where", "governmentform", "=", "value", ";"], "ru": ["select", "count", "(", "*", ")", "from", "country", "where", "governmentform", "=", "value", ";"]}, "masked_query": "SELECT count(*) FROM country WHERE GovernmentForm  =  \"Republic\";", "question_pauq": {"ru": "\u0412 \u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0441\u0442\u0440\u0430\u043d\u0430\u0445 \u0444\u043e\u0440\u043c\u0430 \u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0430\u0431\u0441\u043e\u043b\u044e\u0442\u043d\u043e\u0439 \u043c\u043e\u043d\u0430\u0440\u0445\u0438\u0435\u0439?"}, "question": "How many countries have a republic as their form of government?", "kb_id": "world_1"}, {"id": "D_0706", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT count(*) FROM country WHERE GovernmentForm  =  \"\u0410\u0431\u0441\u043e\u043b\u044e\u0442\u043d\u0430\u044f \u043c\u043e\u043d\u0430\u0440\u0445\u0438\u044f\";"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 19, false], null], "\"Republic\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 19, false], null], "\"\u0410\u0431\u0441\u043e\u043b\u044e\u0442\u043d\u0430\u044f \u043c\u043e\u043d\u0430\u0440\u0445\u0438\u044f\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["How", "many", "countries", "have", "governments", "that", "are", "republics", "?"], "ru": ["\u0412", "\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445", "\u0441\u0442\u0440\u0430\u043d\u0430\u0445", "\u0435\u0441\u0442\u044c", "\u0430\u0431\u0441\u043e\u043b\u044e\u0442\u043d\u044b\u0435", "\u043c\u043e\u043d\u0430\u0440\u0445\u0438\u0447\u0435\u0441\u043a\u0438\u0435", "\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044c\u0441\u0442\u0432\u0430", "?"]}, "query_toks": {"en": ["select", "count", "(", "*", ")", "from", "country", "where", "governmentform", "=", "\"Republic\"", ";"], "ru": ["select", "count", "(", "*", ")", "from", "country", "where", "governmentform", "=", "\"\u0410\u0431\u0441\u043e\u043b\u044e\u0442\u043d\u0430\u044f \u043c\u043e\u043d\u0430\u0440\u0445\u0438\u044f\"", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "*", ")", "from", "country", "where", "governmentform", "=", "value", ";"], "ru": ["select", "count", "(", "*", ")", "from", "country", "where", "governmentform", "=", "value", ";"]}, "masked_query": "SELECT count(*) FROM country WHERE GovernmentForm  =  \"Republic\";", "question_pauq": {"ru": "\u0412 \u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0441\u0442\u0440\u0430\u043d\u0430\u0445 \u0435\u0441\u0442\u044c \u0430\u0431\u0441\u043e\u043b\u044e\u0442\u043d\u044b\u0435 \u043c\u043e\u043d\u0430\u0440\u0445\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044c\u0441\u0442\u0432\u0430?"}, "question": "How many countries have governments that are republics?", "kb_id": "world_1"}, {"id": "D_0707", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT sum(SurfaceArea) FROM country WHERE Region  =  \"\u0421\u0440\u0435\u0434\u0438\u0437\u0435\u043c\u044c\u0435\";"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[4, [0, [0, 12, false], null]]]], "where": [[false, 2, [0, [0, 11, false], null], "\"Caribbean\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[4, [0, [0, 12, false], null]]]], "where": [[false, 2, [0, [0, 11, false], null], "\"\u0421\u0440\u0435\u0434\u0438\u0437\u0435\u043c\u044c\u0435\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "total", "surface", "area", "of", "the", "countries", "in", "the", "Caribbean", "region", "?"], "ru": ["\u041a\u0430\u043a\u043e\u0432\u0430", "\u043e\u0431\u0449\u0430\u044f", "\u043f\u043b\u043e\u0449\u0430\u0434\u044c", "\u0441\u0442\u0440\u0430\u043d", "\u0421\u0440\u0435\u0434\u0438\u0437\u0435\u043c\u043d\u043e\u0433\u043e", "\u0440\u0435\u0433\u0438\u043e\u043d\u0430", "?"]}, "query_toks": {"en": ["select", "sum", "(", "surfacearea", ")", "from", "country", "where", "region", "=", "\"Caribbean\"", ";"], "ru": ["select", "sum", "(", "surfacearea", ")", "from", "country", "where", "region", "=", "\"\u0421\u0440\u0435\u0434\u0438\u0437\u0435\u043c\u044c\u0435\"", ";"]}, "query_toks_no_values": {"en": ["select", "sum", "(", "surfacearea", ")", "from", "country", "where", "region", "=", "value", ";"], "ru": ["select", "sum", "(", "surfacearea", ")", "from", "country", "where", "region", "=", "value", ";"]}, "masked_query": "SELECT sum(SurfaceArea) FROM country WHERE Region  =  \"Caribbean\";", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0432\u0430 \u043e\u0431\u0449\u0430\u044f \u043f\u043b\u043e\u0449\u0430\u0434\u044c \u0441\u0442\u0440\u0430\u043d \u0421\u0440\u0435\u0434\u0438\u0437\u0435\u043c\u043d\u043e\u0433\u043e \u0440\u0435\u0433\u0438\u043e\u043d\u0430?"}, "question": "What is the total surface area of the countries in the Caribbean region?", "kb_id": "world_1"}, {"id": "D_0708", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT sum(SurfaceArea) FROM country WHERE Region  =  \"\u0421\u0440\u0435\u0434\u0438\u0437\u0435\u043c\u044c\u0435\";"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[4, [0, [0, 12, false], null]]]], "where": [[false, 2, [0, [0, 11, false], null], "\"Caribbean\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[4, [0, [0, 12, false], null]]]], "where": [[false, 2, [0, [0, 11, false], null], "\"\u0421\u0440\u0435\u0434\u0438\u0437\u0435\u043c\u044c\u0435\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["How", "much", "surface", "area", "do", "the", "countires", "in", "the", "Carribean", "cover", "together", "?"], "ru": ["\u041a\u0430\u043a\u0443\u044e", "\u043f\u043b\u043e\u0449\u0430\u0434\u044c", "\u043f\u043e\u043a\u0440\u044b\u0432\u0430\u044e\u0442", "\u0432\u043c\u0435\u0441\u0442\u0435", "\u0441\u0442\u0440\u0430\u043d\u044b", "\u0421\u0440\u0435\u0434\u0438\u0437\u0435\u043c\u043d\u043e\u0433\u043e", "\u0431\u0430\u0441\u0441\u0435\u0439\u043d\u0430", "?"]}, "query_toks": {"en": ["select", "sum", "(", "surfacearea", ")", "from", "country", "where", "region", "=", "\"Caribbean\"", ";"], "ru": ["select", "sum", "(", "surfacearea", ")", "from", "country", "where", "region", "=", "\"\u0421\u0440\u0435\u0434\u0438\u0437\u0435\u043c\u044c\u0435\"", ";"]}, "query_toks_no_values": {"en": ["select", "sum", "(", "surfacearea", ")", "from", "country", "where", "region", "=", "value", ";"], "ru": ["select", "sum", "(", "surfacearea", ")", "from", "country", "where", "region", "=", "value", ";"]}, "masked_query": "SELECT sum(SurfaceArea) FROM country WHERE Region  =  \"Caribbean\";", "question_pauq": {"ru": "\u041a\u0430\u043a\u0443\u044e \u043f\u043b\u043e\u0449\u0430\u0434\u044c \u043f\u043e\u043a\u0440\u044b\u0432\u0430\u044e\u0442 \u0432\u043c\u0435\u0441\u0442\u0435 \u0441\u0442\u0440\u0430\u043d\u044b \u0421\u0440\u0435\u0434\u0438\u0437\u0435\u043c\u043d\u043e\u0433\u043e \u0431\u0430\u0441\u0441\u0435\u0439\u043d\u0430?"}, "question": "How much surface area do the countires in the Carribean cover together?", "kb_id": "world_1"}, {"id": "D_0709", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT Continent FROM country WHERE Name  =  \"\u0412\u0430\u043a\u0430\u043d\u0434\u0430\";"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 10, false], null]]]], "where": [[false, 2, [0, [0, 9, false], null], "\"Anguilla\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 10, false], null]]]], "where": [[false, 2, [0, [0, 9, false], null], "\"\u0412\u0430\u043a\u0430\u043d\u0434\u0430\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Which", "continent", "is", "Anguilla", "in", "?"], "ru": ["\u041d\u0430", "\u043a\u0430\u043a\u043e\u043c", "\u043a\u043e\u043d\u0442\u0438\u043d\u0435\u043d\u0442\u0435", "\u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f", "\u0412\u0430\u043a\u0430\u043d\u0434\u0430", "?"]}, "query_toks": {"en": ["select", "continent", "from", "country", "where", "name", "=", "\"Anguilla\"", ";"], "ru": ["select", "continent", "from", "country", "where", "name", "=", "\"\u0412\u0430\u043a\u0430\u043d\u0434\u0430\"", ";"]}, "query_toks_no_values": {"en": ["select", "continent", "from", "country", "where", "name", "=", "value", ";"], "ru": ["select", "continent", "from", "country", "where", "name", "=", "value", ";"]}, "masked_query": "SELECT Continent FROM country WHERE Name  =  \"Anguilla\";", "question_pauq": {"ru": "\u041d\u0430 \u043a\u0430\u043a\u043e\u043c \u043a\u043e\u043d\u0442\u0438\u043d\u0435\u043d\u0442\u0435 \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u0412\u0430\u043a\u0430\u043d\u0434\u0430?"}, "question": "Which continent is Anguilla in?", "kb_id": "world_1"}, {"id": "D_0710", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT Continent FROM country WHERE Name  =  \"\u0412\u0430\u043a\u0430\u043d\u0434\u0430\";"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 10, false], null]]]], "where": [[false, 2, [0, [0, 9, false], null], "\"Anguilla\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 10, false], null]]]], "where": [[false, 2, [0, [0, 9, false], null], "\"\u0412\u0430\u043a\u0430\u043d\u0434\u0430\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "continent", "name", "which", "Anguilla", "belongs", "to", "?"], "ru": ["\u041a\u0430\u043a", "\u043d\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f", "\u043a\u043e\u043d\u0442\u0438\u043d\u0435\u043d\u0442", ",", "\u043a", "\u043a\u043e\u0442\u043e\u0440\u043e\u043c\u0443", "\u043f\u0440\u0438\u043d\u0430\u0434\u043b\u0435\u0436\u0438\u0442", "\u0412\u0430\u043a\u0430\u043d\u0434\u0430", "?"]}, "query_toks": {"en": ["select", "continent", "from", "country", "where", "name", "=", "\"Anguilla\"", ";"], "ru": ["select", "continent", "from", "country", "where", "name", "=", "\"\u0412\u0430\u043a\u0430\u043d\u0434\u0430\"", ";"]}, "query_toks_no_values": {"en": ["select", "continent", "from", "country", "where", "name", "=", "value", ";"], "ru": ["select", "continent", "from", "country", "where", "name", "=", "value", ";"]}, "masked_query": "SELECT Continent FROM country WHERE Name  =  \"Anguilla\";", "question_pauq": {"ru": "\u041a\u0430\u043a \u043d\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u043a\u043e\u043d\u0442\u0438\u043d\u0435\u043d\u0442, \u043a \u043a\u043e\u0442\u043e\u0440\u043e\u043c\u0443 \u043f\u0440\u0438\u043d\u0430\u0434\u043b\u0435\u0436\u0438\u0442 \u0412\u0430\u043a\u0430\u043d\u0434\u0430?"}, "question": "What is the continent name which Anguilla belongs to?", "kb_id": "world_1"}, {"id": "D_0711", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  \"\u0421\u0430\u0439\u043b\u0435\u043d\u0442 \u0425\u0438\u043b\u043b\";"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 3, false], null]]}, "select": [false, [[0, [0, [0, 11, false], null]]]], "where": [[false, 2, [0, [0, 2, false], null], "\"Kabul\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 3, false], null]]}, "select": [false, [[0, [0, [0, 11, false], null]]]], "where": [[false, 2, [0, [0, 2, false], null], "\"\u0421\u0430\u0439\u043b\u0435\u043d\u0442 \u0425\u0438\u043b\u043b\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Which", "region", "is", "the", "city", "Kabul", "located", "in", "?"], "ru": ["\u0412", "\u043a\u0430\u043a\u043e\u043c", "\u0440\u0435\u0433\u0438\u043e\u043d\u0435", "\u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f", "\u0433\u043e\u0440\u043e\u0434", "\u0421\u0430\u0439\u043b\u0435\u043d\u0442", "\u0425\u0438\u043b\u043b", "?"]}, "query_toks": {"en": ["select", "region", "from", "country", "as", "t1", "join", "city", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t2.name", "=", "\"Kabul\"", ";"], "ru": ["select", "region", "from", "country", "as", "t1", "join", "city", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t2.name", "=", "\"\u0421\u0430\u0439\u043b\u0435\u043d\u0442 \u0425\u0438\u043b\u043b\"", ";"]}, "query_toks_no_values": {"en": ["select", "region", "from", "country", "as", "t1", "join", "city", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t2.name", "=", "value", ";"], "ru": ["select", "region", "from", "country", "as", "t1", "join", "city", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t2.name", "=", "value", ";"]}, "masked_query": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  \"Kabul\";", "question_pauq": {"ru": "\u0412 \u043a\u0430\u043a\u043e\u043c \u0440\u0435\u0433\u0438\u043e\u043d\u0435 \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u0433\u043e\u0440\u043e\u0434 \u0421\u0430\u0439\u043b\u0435\u043d\u0442 \u0425\u0438\u043b\u043b?"}, "question": "Which region is the city Kabul located in?", "kb_id": "world_1"}, {"id": "D_0712", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  \"\u0421\u0430\u0439\u043b\u0435\u043d\u0442 \u0425\u0438\u043b\u043b\";"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 3, false], null]]}, "select": [false, [[0, [0, [0, 11, false], null]]]], "where": [[false, 2, [0, [0, 2, false], null], "\"Kabul\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 3, false], null]]}, "select": [false, [[0, [0, [0, 11, false], null]]]], "where": [[false, 2, [0, [0, 2, false], null], "\"\u0421\u0430\u0439\u043b\u0435\u043d\u0442 \u0425\u0438\u043b\u043b\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "region", "is", "Kabul", "in", "?"], "ru": ["\u0412", "\u043a\u0430\u043a\u043e\u043c", "\u0440\u0435\u0433\u0438\u043e\u043d\u0435", "\u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f", "\u0421\u0430\u0439\u043b\u0435\u043d\u0442", "\u0425\u0438\u043b\u043b", "?"]}, "query_toks": {"en": ["select", "region", "from", "country", "as", "t1", "join", "city", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t2.name", "=", "\"Kabul\"", ";"], "ru": ["select", "region", "from", "country", "as", "t1", "join", "city", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t2.name", "=", "\"\u0421\u0430\u0439\u043b\u0435\u043d\u0442 \u0425\u0438\u043b\u043b\"", ";"]}, "query_toks_no_values": {"en": ["select", "region", "from", "country", "as", "t1", "join", "city", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t2.name", "=", "value", ";"], "ru": ["select", "region", "from", "country", "as", "t1", "join", "city", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t2.name", "=", "value", ";"]}, "masked_query": "SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  \"Kabul\";", "question_pauq": {"ru": "\u0412 \u043a\u0430\u043a\u043e\u043c \u0440\u0435\u0433\u0438\u043e\u043d\u0435 \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u0421\u0430\u0439\u043b\u0435\u043d\u0442 \u0425\u0438\u043b\u043b?"}, "question": "What region is Kabul in?", "kb_id": "world_1"}, {"id": "D_0713", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"\u0412\u0430\u043a\u0430\u043d\u0434\u0430\" ORDER BY Percentage DESC LIMIT 1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 23, false], null]]}, "select": [false, [[0, [0, [0, 24, false], null]]]], "where": [[false, 2, [0, [0, 9, false], null], "\"Aruba\"", null]], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 26, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 23, false], null]]}, "select": [false, [[0, [0, [0, 24, false], null]]]], "where": [[false, 2, [0, [0, 9, false], null], "\"\u0412\u0430\u043a\u0430\u043d\u0434\u0430\"", null]], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 26, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Which", "language", "is", "the", "most", "popular", "in", "Aruba", "?"], "ru": ["\u041a\u0430\u043a\u043e\u0439", "\u044f\u0437\u044b\u043a", "\u043d\u0430\u0438\u0431\u043e\u043b\u0435\u0435", "\u043f\u043e\u043f\u0443\u043b\u044f\u0440\u0435\u043d", "\u0432", "\u0412\u0430\u043a\u0430\u043d\u0434\u0435", "?"]}, "query_toks": {"en": ["select", "t2.language", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t1.name", "=", "\"Aruba\"", "order", "by", "percentage", "desc", "limit", "1", ";"], "ru": ["select", "t2.language", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t1.name", "=", "\"\u0412\u0430\u043a\u0430\u043d\u0434\u0430\"", "order", "by", "percentage", "desc", "limit", "1", ";"]}, "query_toks_no_values": {"en": ["select", "t2.language", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t1.name", "=", "value", "order", "by", "percentage", "desc", "limit", "1", ";"], "ru": ["select", "t2.language", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t1.name", "=", "value", "order", "by", "percentage", "desc", "limit", "1", ";"]}, "masked_query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\" ORDER BY Percentage DESC LIMIT 1;", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0439 \u044f\u0437\u044b\u043a \u043d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u043f\u043e\u043f\u0443\u043b\u044f\u0440\u0435\u043d \u0432 \u0412\u0430\u043a\u0430\u043d\u0434\u0435?"}, "question": "Which language is the most popular in Aruba?", "kb_id": "world_1"}, {"id": "D_0714", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"\u0412\u0430\u043a\u0430\u043d\u0434\u0430\" ORDER BY Percentage DESC LIMIT 1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 23, false], null]]}, "select": [false, [[0, [0, [0, 24, false], null]]]], "where": [[false, 2, [0, [0, 9, false], null], "\"Aruba\"", null]], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 26, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 23, false], null]]}, "select": [false, [[0, [0, [0, 24, false], null]]]], "where": [[false, 2, [0, [0, 9, false], null], "\"\u0412\u0430\u043a\u0430\u043d\u0434\u0430\"", null]], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 26, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "language", "is", "predominantly", "spoken", "in", "Aruba", "?"], "ru": ["\u041d\u0430", "\u043a\u0430\u043a\u043e\u043c", "\u044f\u0437\u044b\u043a\u0435", "\u043f\u0440\u0435\u0438\u043c\u0443\u0449\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u043e", "\u0433\u043e\u0432\u043e\u0440\u044f\u0442", "\u0432", "\u0412\u0430\u043a\u0430\u043d\u0434\u0435", "?"]}, "query_toks": {"en": ["select", "t2.language", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t1.name", "=", "\"Aruba\"", "order", "by", "percentage", "desc", "limit", "1", ";"], "ru": ["select", "t2.language", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t1.name", "=", "\"\u0412\u0430\u043a\u0430\u043d\u0434\u0430\"", "order", "by", "percentage", "desc", "limit", "1", ";"]}, "query_toks_no_values": {"en": ["select", "t2.language", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t1.name", "=", "value", "order", "by", "percentage", "desc", "limit", "1", ";"], "ru": ["select", "t2.language", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t1.name", "=", "value", "order", "by", "percentage", "desc", "limit", "1", ";"]}, "masked_query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\" ORDER BY Percentage DESC LIMIT 1;", "question_pauq": {"ru": "\u041d\u0430 \u043a\u0430\u043a\u043e\u043c \u044f\u0437\u044b\u043a\u0435 \u043f\u0440\u0435\u0438\u043c\u0443\u0449\u0435\u0441\u0442\u0432\u0435\u043d\u043d\u043e \u0433\u043e\u0432\u043e\u0440\u044f\u0442 \u0432 \u0412\u0430\u043a\u0430\u043d\u0434\u0435?"}, "question": "What language is predominantly spoken in Aruba?", "kb_id": "world_1"}, {"id": "D_0715", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  \"\u0412\u0430\u043a\u0430\u043d\u0434\u0430\";"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 14, false], null]], [0, [0, [0, 15, false], null]]]], "where": [[false, 2, [0, [0, 9, false], null], "\"Brazil\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 14, false], null]], [0, [0, [0, 15, false], null]]]], "where": [[false, 2, [0, [0, 9, false], null], "\"\u0412\u0430\u043a\u0430\u043d\u0434\u0430\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "the", "population", "and", "life", "expectancies", "in", "Brazil", "?"], "ru": ["\u041a\u0430\u043a\u043e\u0432\u0430", "\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u043e\u0441\u0442\u044c", "\u043d\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u044f", "\u0438", "\u043e\u0436\u0438\u0434\u0430\u0435\u043c\u0430\u044f", "\u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c", "\u0436\u0438\u0437\u043d\u0438", "\u0432", "\u0412\u0430\u043a\u0430\u043d\u0434\u0435", "?"]}, "query_toks": {"en": ["select", "population", ",", "lifeexpectancy", "from", "country", "where", "name", "=", "\"Brazil\"", ";"], "ru": ["select", "population", ",", "lifeexpectancy", "from", "country", "where", "name", "=", "\"\u0412\u0430\u043a\u0430\u043d\u0434\u0430\"", ";"]}, "query_toks_no_values": {"en": ["select", "population", ",", "lifeexpectancy", "from", "country", "where", "name", "=", "value", ";"], "ru": ["select", "population", ",", "lifeexpectancy", "from", "country", "where", "name", "=", "value", ";"]}, "masked_query": "SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  \"Brazil\";", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0432\u0430 \u0447\u0438\u0441\u043b\u0435\u043d\u043d\u043e\u0441\u0442\u044c \u043d\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u044f \u0438 \u043e\u0436\u0438\u0434\u0430\u0435\u043c\u0430\u044f \u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0436\u0438\u0437\u043d\u0438 \u0432 \u0412\u0430\u043a\u0430\u043d\u0434\u0435?"}, "question": "What are the population and life expectancies in Brazil?", "kb_id": "world_1"}, {"id": "D_0716", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  \"\u0412\u0430\u043a\u0430\u043d\u0434\u0430\";"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 14, false], null]], [0, [0, [0, 15, false], null]]]], "where": [[false, 2, [0, [0, 9, false], null], "\"Brazil\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 14, false], null]], [0, [0, [0, 15, false], null]]]], "where": [[false, 2, [0, [0, 9, false], null], "\"\u0412\u0430\u043a\u0430\u043d\u0434\u0430\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Give", "me", "Brazil", "\u2019", "s", "population", "and", "life", "expectancies", "."], "ru": ["\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c", "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e", "\u043d\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u044f", "\u0412\u0430\u043a\u0430\u043d\u0434\u044b", "\u0438", "\u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c", "\u0436\u0438\u0437\u043d\u0438", "."]}, "query_toks": {"en": ["select", "population", ",", "lifeexpectancy", "from", "country", "where", "name", "=", "\"Brazil\"", ";"], "ru": ["select", "population", ",", "lifeexpectancy", "from", "country", "where", "name", "=", "\"\u0412\u0430\u043a\u0430\u043d\u0434\u0430\"", ";"]}, "query_toks_no_values": {"en": ["select", "population", ",", "lifeexpectancy", "from", "country", "where", "name", "=", "value", ";"], "ru": ["select", "population", ",", "lifeexpectancy", "from", "country", "where", "name", "=", "value", ";"]}, "masked_query": "SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  \"Brazil\";", "question_pauq": {"ru": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043d\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u044f \u0412\u0430\u043a\u0430\u043d\u0434\u044b \u0438 \u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0436\u0438\u0437\u043d\u0438."}, "question": "Give me Brazil\u2019s population and life expectancies.", "kb_id": "world_1"}, {"id": "D_0717", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT Population ,  Region FROM country WHERE Name  =  \"\u0412\u0430\u043b\u044c\u0432\u0435\u0440\u0434\u0435\";"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 14, false], null]], [0, [0, [0, 11, false], null]]]], "where": [[false, 2, [0, [0, 9, false], null], "\"Angola\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 14, false], null]], [0, [0, [0, 11, false], null]]]], "where": [[false, 2, [0, [0, 9, false], null], "\"\u0412\u0430\u043b\u044c\u0432\u0435\u0440\u0434\u0435\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "the", "region", "and", "population", "of", "Angola", "?"], "ru": ["\u041a", "\u043a\u0430\u043a\u043e\u043c\u0443", "\u0440\u0435\u0433\u0438\u043e\u043d\u0443", "\u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0441\u044f", "\u0412\u0430\u043b\u044c\u0432\u0435\u0440\u0434\u0435", "\u0438", "\u043a\u0430\u043a\u043e\u0435", "\u0432", "\u043d\u0435\u0439", "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e", "\u043d\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u044f", "?"]}, "query_toks": {"en": ["select", "population", ",", "region", "from", "country", "where", "name", "=", "\"Angola\"", ";"], "ru": ["select", "population", ",", "region", "from", "country", "where", "name", "=", "\"\u0412\u0430\u043b\u044c\u0432\u0435\u0440\u0434\u0435\"", ";"]}, "query_toks_no_values": {"en": ["select", "population", ",", "region", "from", "country", "where", "name", "=", "value", ";"], "ru": ["select", "population", ",", "region", "from", "country", "where", "name", "=", "value", ";"]}, "masked_query": "SELECT Population ,  Region FROM country WHERE Name  =  \"Angola\";", "question_pauq": {"ru": "\u041a \u043a\u0430\u043a\u043e\u043c\u0443 \u0440\u0435\u0433\u0438\u043e\u043d\u0443 \u043e\u0442\u043d\u043e\u0441\u0438\u0442\u0441\u044f \u0412\u0430\u043b\u044c\u0432\u0435\u0440\u0434\u0435 \u0438 \u043a\u0430\u043a\u043e\u0435 \u0432 \u043d\u0435\u0439 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043d\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u044f?"}, "question": "What are the region and population of Angola?", "kb_id": "world_1"}, {"id": "D_0718", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT Population ,  Region FROM country WHERE Name  =  \"\u0412\u0430\u043b\u044c\u0432\u0435\u0440\u0434\u0435\";"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 14, false], null]], [0, [0, [0, 11, false], null]]]], "where": [[false, 2, [0, [0, 9, false], null], "\"Angola\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 14, false], null]], [0, [0, [0, 11, false], null]]]], "where": [[false, 2, [0, [0, 9, false], null], "\"\u0412\u0430\u043b\u044c\u0432\u0435\u0440\u0434\u0435\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "region", "does", "Angola", "belong", "to", "and", "what", "is", "its", "population", "?"], "ru": ["\u041a", "\u043a\u0430\u043a\u043e\u043c\u0443", "\u0440\u0435\u0433\u0438\u043e\u043d\u0443", "\u043f\u0440\u0438\u043d\u0430\u0434\u043b\u0435\u0436\u0438\u0442", "\u0412\u0430\u043b\u044c\u0432\u0435\u0440\u0434\u0435", "\u0438", "\u043a\u0430\u043a\u043e\u0432\u043e", "\u0435\u0435", "\u043d\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u0435", "?"]}, "query_toks": {"en": ["select", "population", ",", "region", "from", "country", "where", "name", "=", "\"Angola\"", ";"], "ru": ["select", "population", ",", "region", "from", "country", "where", "name", "=", "\"\u0412\u0430\u043b\u044c\u0432\u0435\u0440\u0434\u0435\"", ";"]}, "query_toks_no_values": {"en": ["select", "population", ",", "region", "from", "country", "where", "name", "=", "value", ";"], "ru": ["select", "population", ",", "region", "from", "country", "where", "name", "=", "value", ";"]}, "masked_query": "SELECT Population ,  Region FROM country WHERE Name  =  \"Angola\";", "question_pauq": {"ru": "\u041a \u043a\u0430\u043a\u043e\u043c\u0443 \u0440\u0435\u0433\u0438\u043e\u043d\u0443 \u043f\u0440\u0438\u043d\u0430\u0434\u043b\u0435\u0436\u0438\u0442 \u0412\u0430\u043b\u044c\u0432\u0435\u0440\u0434\u0435 \u0438 \u043a\u0430\u043a\u043e\u0432\u043e \u0435\u0435 \u043d\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u0435?"}, "question": "What region does Angola belong to and what is its population?", "kb_id": "world_1"}, {"id": "D_0719", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT avg(LifeExpectancy) FROM country WHERE Region  =  \"\u0421\u0440\u0435\u0434\u0438\u0437\u0435\u043c\u044c\u0435\";"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[5, [0, [0, 15, false], null]]]], "where": [[false, 2, [0, [0, 11, false], null], "\"Central Africa\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[5, [0, [0, 15, false], null]]]], "where": [[false, 2, [0, [0, 11, false], null], "\"\u0421\u0440\u0435\u0434\u0438\u0437\u0435\u043c\u044c\u0435\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "average", "expected", "life", "expectancy", "for", "countries", "in", "the", "region", "of", "Central", "Africa", "?"], "ru": ["\u041a\u0430\u043a\u043e\u0432\u0430", "\u0441\u0440\u0435\u0434\u043d\u044f\u044f", "\u043e\u0436\u0438\u0434\u0430\u0435\u043c\u0430\u044f", "\u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c", "\u0436\u0438\u0437\u043d\u0438", "\u0432", "\u0441\u0442\u0440\u0430\u043d\u0430\u0445", "\u0440\u0435\u0433\u0438\u043e\u043d\u0430", "\u0421\u0440\u0435\u0434\u0438\u0437\u0435\u043c\u044c\u0435", "?"]}, "query_toks": {"en": ["select", "avg", "(", "lifeexpectancy", ")", "from", "country", "where", "region", "=", "\"Central Africa\"", ";"], "ru": ["select", "avg", "(", "lifeexpectancy", ")", "from", "country", "where", "region", "=", "\"\u0421\u0440\u0435\u0434\u0438\u0437\u0435\u043c\u044c\u0435\"", ";"]}, "query_toks_no_values": {"en": ["select", "avg", "(", "lifeexpectancy", ")", "from", "country", "where", "region", "=", "value", ";"], "ru": ["select", "avg", "(", "lifeexpectancy", ")", "from", "country", "where", "region", "=", "value", ";"]}, "masked_query": "SELECT avg(LifeExpectancy) FROM country WHERE Region  =  \"Central Africa\";", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0432\u0430 \u0441\u0440\u0435\u0434\u043d\u044f\u044f \u043e\u0436\u0438\u0434\u0430\u0435\u043c\u0430\u044f \u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0436\u0438\u0437\u043d\u0438 \u0432 \u0441\u0442\u0440\u0430\u043d\u0430\u0445 \u0440\u0435\u0433\u0438\u043e\u043d\u0430 \u0421\u0440\u0435\u0434\u0438\u0437\u0435\u043c\u044c\u0435?"}, "question": "What is the average expected life expectancy for countries in the region of Central Africa?", "kb_id": "world_1"}, {"id": "D_0720", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT avg(LifeExpectancy) FROM country WHERE Region  =  \"\u0421\u0440\u0435\u0434\u0438\u0437\u0435\u043c\u044c\u0435\";"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[5, [0, [0, 15, false], null]]]], "where": [[false, 2, [0, [0, 11, false], null], "\"Central Africa\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[5, [0, [0, 15, false], null]]]], "where": [[false, 2, [0, [0, 11, false], null], "\"\u0421\u0440\u0435\u0434\u0438\u0437\u0435\u043c\u044c\u0435\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["How", "long", "is", "the", "people", "\u2019", "s", "average", "life", "expectancy", "in", "Central", "Africa", "?"], "ru": ["\u041a\u0430\u043a\u0430\u044f", "\u0441\u0440\u0435\u0434\u043d\u044f\u044f", "\u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c", "\u0436\u0438\u0437\u043d\u0438", "\u0432", "\u0421\u0440\u0435\u0434\u0438\u0437\u0435\u043c\u044c\u0435", "?"]}, "query_toks": {"en": ["select", "avg", "(", "lifeexpectancy", ")", "from", "country", "where", "region", "=", "\"Central Africa\"", ";"], "ru": ["select", "avg", "(", "lifeexpectancy", ")", "from", "country", "where", "region", "=", "\"\u0421\u0440\u0435\u0434\u0438\u0437\u0435\u043c\u044c\u0435\"", ";"]}, "query_toks_no_values": {"en": ["select", "avg", "(", "lifeexpectancy", ")", "from", "country", "where", "region", "=", "value", ";"], "ru": ["select", "avg", "(", "lifeexpectancy", ")", "from", "country", "where", "region", "=", "value", ";"]}, "masked_query": "SELECT avg(LifeExpectancy) FROM country WHERE Region  =  \"Central Africa\";", "question_pauq": {"ru": "\u041a\u0430\u043a\u0430\u044f \u0441\u0440\u0435\u0434\u043d\u044f\u044f \u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0436\u0438\u0437\u043d\u0438 \u0432 \u0421\u0440\u0435\u0434\u0438\u0437\u0435\u043c\u044c\u0435?"}, "question": "How long is the people\u2019s average life expectancy in Central Africa?", "kb_id": "world_1"}, {"id": "D_0721", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT Name FROM country WHERE Continent  =  \"\u0410\u0442\u043b\u0430\u043d\u0442\u0438\u0434\u0430\" ORDER BY LifeExpectancy LIMIT 1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [[false, 2, [0, [0, 10, false], null], "\"Asia\"", null]], "groupBy": [], "having": [], "orderBy": ["asc", [[0, [0, 15, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [[false, 2, [0, [0, 10, false], null], "\"\u0410\u0442\u043b\u0430\u043d\u0442\u0438\u0434\u0430\"", null]], "groupBy": [], "having": [], "orderBy": ["asc", [[0, [0, 15, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "name", "of", "country", "that", "has", "the", "shortest", "life", "expectancy", "in", "Asia", "?"], "ru": ["\u041a\u0430\u043a", "\u043d\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f", "\u0441\u0442\u0440\u0430\u043d\u0430", "\u0441", "\u0441\u0430\u043c\u043e\u0439", "\u043a\u043e\u0440\u043e\u0442\u043a\u043e\u0439", "\u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c\u044e", "\u0436\u0438\u0437\u043d\u0438", "\u0432", "\u0410\u0442\u043b\u0430\u043d\u0442\u0438\u0434\u0435", "?"]}, "query_toks": {"en": ["select", "name", "from", "country", "where", "continent", "=", "\"Asia\"", "order", "by", "lifeexpectancy", "limit", "1", ";"], "ru": ["select", "name", "from", "country", "where", "continent", "=", "\"\u0410\u0442\u043b\u0430\u043d\u0442\u0438\u0434\u0430\"", "order", "by", "lifeexpectancy", "limit", "1", ";"]}, "query_toks_no_values": {"en": ["select", "name", "from", "country", "where", "continent", "=", "value", "order", "by", "lifeexpectancy", "limit", "1", ";"], "ru": ["select", "name", "from", "country", "where", "continent", "=", "value", "order", "by", "lifeexpectancy", "limit", "1", ";"]}, "masked_query": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1;", "question_pauq": {"ru": "\u041a\u0430\u043a \u043d\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0441\u0442\u0440\u0430\u043d\u0430 \u0441 \u0441\u0430\u043c\u043e\u0439 \u043a\u043e\u0440\u043e\u0442\u043a\u043e\u0439 \u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c\u044e \u0436\u0438\u0437\u043d\u0438 \u0432 \u0410\u0442\u043b\u0430\u043d\u0442\u0438\u0434\u0435?"}, "question": "What is the name of country that has the shortest life expectancy in Asia?", "kb_id": "world_1"}, {"id": "D_0722", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT Name FROM country WHERE Continent  =  \"\u0410\u0442\u043b\u0430\u043d\u0442\u0438\u0434\u0430\" ORDER BY LifeExpectancy LIMIT 1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [[false, 2, [0, [0, 10, false], null], "\"Asia\"", null]], "groupBy": [], "having": [], "orderBy": ["asc", [[0, [0, 15, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [[false, 2, [0, [0, 10, false], null], "\"\u0410\u0442\u043b\u0430\u043d\u0442\u0438\u0434\u0430\"", null]], "groupBy": [], "having": [], "orderBy": ["asc", [[0, [0, 15, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Give", "the", "name", "of", "the", "country", "in", "Asia", "with", "the", "lowest", "life", "expectancy", "."], "ru": ["\u041d\u0430\u0437\u043e\u0432\u0438\u0442\u0435", "\u0441\u0442\u0440\u0430\u043d\u0443", "\u0432", "\u0410\u0442\u043b\u0430\u043d\u0442\u0438\u0434\u0435", "\u0441", "\u0441\u0430\u043c\u043e\u0439", "\u043d\u0438\u0437\u043a\u043e\u0439", "\u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c\u044e", "\u0436\u0438\u0437\u043d\u0438", "."]}, "query_toks": {"en": ["select", "name", "from", "country", "where", "continent", "=", "\"Asia\"", "order", "by", "lifeexpectancy", "limit", "1", ";"], "ru": ["select", "name", "from", "country", "where", "continent", "=", "\"\u0410\u0442\u043b\u0430\u043d\u0442\u0438\u0434\u0430\"", "order", "by", "lifeexpectancy", "limit", "1", ";"]}, "query_toks_no_values": {"en": ["select", "name", "from", "country", "where", "continent", "=", "value", "order", "by", "lifeexpectancy", "limit", "1", ";"], "ru": ["select", "name", "from", "country", "where", "continent", "=", "value", "order", "by", "lifeexpectancy", "limit", "1", ";"]}, "masked_query": "SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1;", "question_pauq": {"ru": "\u041d\u0430\u0437\u043e\u0432\u0438\u0442\u0435 \u0441\u0442\u0440\u0430\u043d\u0443 \u0432 \u0410\u0442\u043b\u0430\u043d\u0442\u0438\u0434\u0435 \u0441 \u0441\u0430\u043c\u043e\u0439 \u043d\u0438\u0437\u043a\u043e\u0439 \u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c\u044e \u0436\u0438\u0437\u043d\u0438."}, "question": "Give the name of the country in Asia with the lowest life expectancy.", "kb_id": "world_1"}, {"id": "D_0723", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"\u0410\u0442\u043b\u0430\u043d\u0442\u0438\u0434\u0430\";"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[4, [0, [0, 14, false], null]], [1, [0, [0, 16, false], null]]]], "where": [[false, 2, [0, [0, 10, false], null], "\"Asia\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[4, [0, [0, 14, false], null]], [1, [0, [0, 16, false], null]]]], "where": [[false, 2, [0, [0, 10, false], null], "\"\u0410\u0442\u043b\u0430\u043d\u0442\u0438\u0434\u0430\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "total", "population", "and", "maximum", "GNP", "in", "Asia", "?"], "ru": ["\u041a\u0430\u043a\u043e\u0432\u0430", "\u043e\u0431\u0449\u0430\u044f", "\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u043e\u0441\u0442\u044c", "\u043d\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u044f", "\u0438", "\u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439", "\u0412\u041d\u041f", "\u0432", "\u0410\u0442\u043b\u0430\u043d\u0442\u0438\u0434\u0435", "?"]}, "query_toks": {"en": ["select", "sum", "(", "population", ")", ",", "max", "(", "gnp", ")", "from", "country", "where", "continent", "=", "\"Asia\"", ";"], "ru": ["select", "sum", "(", "population", ")", ",", "max", "(", "gnp", ")", "from", "country", "where", "continent", "=", "\"\u0410\u0442\u043b\u0430\u043d\u0442\u0438\u0434\u0430\"", ";"]}, "query_toks_no_values": {"en": ["select", "sum", "(", "population", ")", ",", "max", "(", "gnp", ")", "from", "country", "where", "continent", "=", "value", ";"], "ru": ["select", "sum", "(", "population", ")", ",", "max", "(", "gnp", ")", "from", "country", "where", "continent", "=", "value", ";"]}, "masked_query": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\";", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0432\u0430 \u043e\u0431\u0449\u0430\u044f \u0447\u0438\u0441\u043b\u0435\u043d\u043d\u043e\u0441\u0442\u044c \u043d\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u044f \u0438 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u0412\u041d\u041f \u0432 \u0410\u0442\u043b\u0430\u043d\u0442\u0438\u0434\u0435?"}, "question": "What is the total population and maximum GNP in Asia?", "kb_id": "world_1"}, {"id": "D_0724", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"\u0410\u0442\u043b\u0430\u043d\u0442\u0438\u0434\u0430\";"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[4, [0, [0, 14, false], null]], [1, [0, [0, 16, false], null]]]], "where": [[false, 2, [0, [0, 10, false], null], "\"Asia\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[4, [0, [0, 14, false], null]], [1, [0, [0, 16, false], null]]]], "where": [[false, 2, [0, [0, 10, false], null], "\"\u0410\u0442\u043b\u0430\u043d\u0442\u0438\u0434\u0430\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["How", "many", "people", "live", "in", "Asia", ",", "and", "what", "is", "the", "largest", "GNP", "among", "them", "?"], "ru": ["\u0421\u043a\u043e\u043b\u044c\u043a\u043e", "\u043b\u044e\u0434\u0435\u0439", "\u0436\u0438\u0432\u0435\u0442", "\u0432", "\u0410\u0442\u043b\u0430\u043d\u0442\u0438\u0434\u0435", "\u0438", "\u043a\u0430\u043a\u043e\u0439", "\u0443", "\u043d\u0438\u0445", "\u0441\u0430\u043c\u044b\u0439", "\u0431\u043e\u043b\u044c\u0448\u043e\u0439", "\u0412\u041d\u041f", "?"]}, "query_toks": {"en": ["select", "sum", "(", "population", ")", ",", "max", "(", "gnp", ")", "from", "country", "where", "continent", "=", "\"Asia\"", ";"], "ru": ["select", "sum", "(", "population", ")", ",", "max", "(", "gnp", ")", "from", "country", "where", "continent", "=", "\"\u0410\u0442\u043b\u0430\u043d\u0442\u0438\u0434\u0430\"", ";"]}, "query_toks_no_values": {"en": ["select", "sum", "(", "population", ")", ",", "max", "(", "gnp", ")", "from", "country", "where", "continent", "=", "value", ";"], "ru": ["select", "sum", "(", "population", ")", ",", "max", "(", "gnp", ")", "from", "country", "where", "continent", "=", "value", ";"]}, "masked_query": "SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\";", "question_pauq": {"ru": "\u0421\u043a\u043e\u043b\u044c\u043a\u043e \u043b\u044e\u0434\u0435\u0439 \u0436\u0438\u0432\u0435\u0442 \u0432 \u0410\u0442\u043b\u0430\u043d\u0442\u0438\u0434\u0435 \u0438 \u043a\u0430\u043a\u043e\u0439 \u0443 \u043d\u0438\u0445 \u0441\u0430\u043c\u044b\u0439 \u0431\u043e\u043b\u044c\u0448\u043e\u0439 \u0412\u041d\u041f?"}, "question": "How many people live in Asia, and what is the largest GNP among them?", "kb_id": "world_1"}, {"id": "D_0725", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  \"\u0410\u0442\u043b\u0430\u043d\u0442\u0438\u0434\u0430\" AND GovernmentForm  =  \"\u0410\u0431\u0441\u043e\u043b\u044e\u0442\u043d\u0430\u044f \u043c\u043e\u043d\u0430\u0440\u0445\u0438\u044f\";"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[5, [0, [0, 15, false], null]]]], "where": [[false, 2, [0, [0, 10, false], null], "\"Africa\"", null], "and", [false, 2, [0, [0, 19, false], null], "\"Republic\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[5, [0, [0, 15, false], null]]]], "where": [[false, 2, [0, [0, 10, false], null], "\"\u0410\u0442\u043b\u0430\u043d\u0442\u0438\u0434\u0430\"", null], "and", [false, 2, [0, [0, 19, false], null], "\"\u0410\u0431\u0441\u043e\u043b\u044e\u0442\u043d\u0430\u044f \u043c\u043e\u043d\u0430\u0440\u0445\u0438\u044f\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "average", "life", "expectancy", "in", "African", "countries", "that", "are", "republics", "?"], "ru": ["\u041a\u0430\u043a\u043e\u0432\u0430", "\u0441\u0440\u0435\u0434\u043d\u044f\u044f", "\u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c", "\u0436\u0438\u0437\u043d\u0438", "\u0432", "\u0430\u0431\u0441\u043e\u043b\u044e\u0442\u043d\u044b\u0445", "\u043c\u043e\u043d\u0430\u0440\u0445\u0438\u044f\u0445", "\u0410\u0442\u043b\u0430\u043d\u0442\u0438\u0434\u044b", "?"]}, "query_toks": {"en": ["select", "avg", "(", "lifeexpectancy", ")", "from", "country", "where", "continent", "=", "\"Africa\"", "and", "governmentform", "=", "\"Republic\"", ";"], "ru": ["select", "avg", "(", "lifeexpectancy", ")", "from", "country", "where", "continent", "=", "\"\u0410\u0442\u043b\u0430\u043d\u0442\u0438\u0434\u0430\"", "and", "governmentform", "=", "\"\u0410\u0431\u0441\u043e\u043b\u044e\u0442\u043d\u0430\u044f \u043c\u043e\u043d\u0430\u0440\u0445\u0438\u044f\"", ";"]}, "query_toks_no_values": {"en": ["select", "avg", "(", "lifeexpectancy", ")", "from", "country", "where", "continent", "=", "value", "and", "governmentform", "=", "value", ";"], "ru": ["select", "avg", "(", "lifeexpectancy", ")", "from", "country", "where", "continent", "=", "value", "and", "governmentform", "=", "value", ";"]}, "masked_query": "SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  \"Africa\" AND GovernmentForm  =  \"Republic\";", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0432\u0430 \u0441\u0440\u0435\u0434\u043d\u044f\u044f \u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0436\u0438\u0437\u043d\u0438 \u0432 \u0430\u0431\u0441\u043e\u043b\u044e\u0442\u043d\u044b\u0445 \u043c\u043e\u043d\u0430\u0440\u0445\u0438\u044f\u0445 \u0410\u0442\u043b\u0430\u043d\u0442\u0438\u0434\u044b?"}, "question": "What is the average life expectancy in African countries that are republics?", "kb_id": "world_1"}, {"id": "D_0726", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  \"\u0410\u0442\u043b\u0430\u043d\u0442\u0438\u0434\u0430\" AND GovernmentForm  =  \"\u0410\u0431\u0441\u043e\u043b\u044e\u0442\u043d\u0430\u044f \u043c\u043e\u043d\u0430\u0440\u0445\u0438\u044f\";"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[5, [0, [0, 15, false], null]]]], "where": [[false, 2, [0, [0, 10, false], null], "\"Africa\"", null], "and", [false, 2, [0, [0, 19, false], null], "\"Republic\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[5, [0, [0, 15, false], null]]]], "where": [[false, 2, [0, [0, 10, false], null], "\"\u0410\u0442\u043b\u0430\u043d\u0442\u0438\u0434\u0430\"", null], "and", [false, 2, [0, [0, 19, false], null], "\"\u0410\u0431\u0441\u043e\u043b\u044e\u0442\u043d\u0430\u044f \u043c\u043e\u043d\u0430\u0440\u0445\u0438\u044f\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Give", "the", "average", "life", "expectancy", "for", "countries", "in", "Africa", "which", "are", "republics", "?"], "ru": ["\u041f\u0440\u0438\u0432\u0435\u0434\u0438", "\u0441\u0440\u0435\u0434\u043d\u044e\u044e", "\u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c", "\u0436\u0438\u0437\u043d\u0438", "\u0432", "\u0441\u0442\u0440\u0430\u043d\u0430\u0445", "\u0410\u0442\u043b\u0430\u043d\u0442\u0438\u0434\u044b", ",", "\u043a\u043e\u0442\u043e\u0440\u044b\u0435", "\u044f\u0432\u043b\u044f\u044e\u0442\u0441\u044f", "\u0430\u0431\u0441\u043e\u043b\u044e\u0442\u043d\u044b\u043c\u0438", "\u043c\u043e\u043d\u0430\u0440\u0445\u0438\u044f\u043c\u0438"]}, "query_toks": {"en": ["select", "avg", "(", "lifeexpectancy", ")", "from", "country", "where", "continent", "=", "\"Africa\"", "and", "governmentform", "=", "\"Republic\"", ";"], "ru": ["select", "avg", "(", "lifeexpectancy", ")", "from", "country", "where", "continent", "=", "\"\u0410\u0442\u043b\u0430\u043d\u0442\u0438\u0434\u0430\"", "and", "governmentform", "=", "\"\u0410\u0431\u0441\u043e\u043b\u044e\u0442\u043d\u0430\u044f \u043c\u043e\u043d\u0430\u0440\u0445\u0438\u044f\"", ";"]}, "query_toks_no_values": {"en": ["select", "avg", "(", "lifeexpectancy", ")", "from", "country", "where", "continent", "=", "value", "and", "governmentform", "=", "value", ";"], "ru": ["select", "avg", "(", "lifeexpectancy", ")", "from", "country", "where", "continent", "=", "value", "and", "governmentform", "=", "value", ";"]}, "masked_query": "SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  \"Africa\" AND GovernmentForm  =  \"Republic\";", "question_pauq": {"ru": "\u041f\u0440\u0438\u0432\u0435\u0434\u0438 \u0441\u0440\u0435\u0434\u043d\u044e\u044e \u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0436\u0438\u0437\u043d\u0438 \u0432 \u0441\u0442\u0440\u0430\u043d\u0430\u0445 \u0410\u0442\u043b\u0430\u043d\u0442\u0438\u0434\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u044f\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u0430\u0431\u0441\u043e\u043b\u044e\u0442\u043d\u044b\u043c\u0438 \u043c\u043e\u043d\u0430\u0440\u0445\u0438\u044f\u043c\u0438"}, "question": "Give the average life expectancy for countries in Africa which are republics?", "kb_id": "world_1"}, {"id": "D_0727", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT sum(SurfaceArea) FROM country WHERE Continent  =  \"\u0410\u0442\u043b\u0430\u043d\u0442\u0438\u0434\u0430\" OR Continent  =  \"\u0413\u0438\u043f\u0435\u0440\u0431\u043e\u0440\u0435\u044f\";"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[4, [0, [0, 12, false], null]]]], "where": [[false, 2, [0, [0, 10, false], null], "\"Asia\"", null], "or", [false, 2, [0, [0, 10, false], null], "\"Europe\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[4, [0, [0, 12, false], null]]]], "where": [[false, 2, [0, [0, 10, false], null], "\"\u0410\u0442\u043b\u0430\u043d\u0442\u0438\u0434\u0430\"", null], "or", [false, 2, [0, [0, 10, false], null], "\"\u0413\u0438\u043f\u0435\u0440\u0431\u043e\u0440\u0435\u044f\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "total", "surface", "area", "of", "the", "continents", "Asia", "and", "Europe", "?"], "ru": ["\u041a\u0430\u043a\u043e\u0432\u0430", "\u043e\u0431\u0449\u0430\u044f", "\u043f\u043b\u043e\u0449\u0430\u0434\u044c", "\u043a\u043e\u043d\u0442\u0438\u043d\u0435\u043d\u0442\u043e\u0432", "\u0410\u0442\u043b\u0430\u043d\u0442\u0438\u0434\u0430", "\u0438", "\u0413\u0438\u043f\u0435\u0440\u0431\u043e\u0440\u0435\u044f", "?"]}, "query_toks": {"en": ["select", "sum", "(", "surfacearea", ")", "from", "country", "where", "continent", "=", "\"Asia\"", "or", "continent", "=", "\"Europe\"", ";"], "ru": ["select", "sum", "(", "surfacearea", ")", "from", "country", "where", "continent", "=", "\"\u0410\u0442\u043b\u0430\u043d\u0442\u0438\u0434\u0430\"", "or", "continent", "=", "\"\u0413\u0438\u043f\u0435\u0440\u0431\u043e\u0440\u0435\u044f\"", ";"]}, "query_toks_no_values": {"en": ["select", "sum", "(", "surfacearea", ")", "from", "country", "where", "continent", "=", "value", "or", "continent", "=", "value", ";"], "ru": ["select", "sum", "(", "surfacearea", ")", "from", "country", "where", "continent", "=", "value", "or", "continent", "=", "value", ";"]}, "masked_query": "SELECT sum(SurfaceArea) FROM country WHERE Continent  =  \"Asia\" OR Continent  =  \"Europe\";", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0432\u0430 \u043e\u0431\u0449\u0430\u044f \u043f\u043b\u043e\u0449\u0430\u0434\u044c \u043a\u043e\u043d\u0442\u0438\u043d\u0435\u043d\u0442\u043e\u0432 \u0410\u0442\u043b\u0430\u043d\u0442\u0438\u0434\u0430 \u0438 \u0413\u0438\u043f\u0435\u0440\u0431\u043e\u0440\u0435\u044f?"}, "question": "What is the total surface area of the continents Asia and Europe?", "kb_id": "world_1"}, {"id": "D_0728", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT sum(SurfaceArea) FROM country WHERE Continent  =  \"\u0410\u0442\u043b\u0430\u043d\u0442\u0438\u0434\u0430\" OR Continent  =  \"\u0413\u0438\u043f\u0435\u0440\u0431\u043e\u0440\u0435\u044f\";"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[4, [0, [0, 12, false], null]]]], "where": [[false, 2, [0, [0, 10, false], null], "\"Asia\"", null], "or", [false, 2, [0, [0, 10, false], null], "\"Europe\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[4, [0, [0, 12, false], null]]]], "where": [[false, 2, [0, [0, 10, false], null], "\"\u0410\u0442\u043b\u0430\u043d\u0442\u0438\u0434\u0430\"", null], "or", [false, 2, [0, [0, 10, false], null], "\"\u0413\u0438\u043f\u0435\u0440\u0431\u043e\u0440\u0435\u044f\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Give", "the", "total", "surface", "area", "covered", "by", "countries", "in", "Asia", "or", "Europe", "."], "ru": ["\u0423\u043a\u0430\u0436\u0438\u0442\u0435", "\u043e\u0431\u0449\u0443\u044e", "\u043f\u043b\u043e\u0449\u0430\u0434\u044c", ",", "\u043f\u043e\u043a\u0440\u044b\u0442\u0443\u044e", "\u0441\u0442\u0440\u0430\u043d\u0430\u043c\u0438", "\u0410\u0442\u043b\u0430\u043d\u0442\u0438\u0434\u044b", "\u0438\u043b\u0438", "\u0413\u0438\u043f\u0435\u0440\u0431\u043e\u0440\u0435\u0438", "."]}, "query_toks": {"en": ["select", "sum", "(", "surfacearea", ")", "from", "country", "where", "continent", "=", "\"Asia\"", "or", "continent", "=", "\"Europe\"", ";"], "ru": ["select", "sum", "(", "surfacearea", ")", "from", "country", "where", "continent", "=", "\"\u0410\u0442\u043b\u0430\u043d\u0442\u0438\u0434\u0430\"", "or", "continent", "=", "\"\u0413\u0438\u043f\u0435\u0440\u0431\u043e\u0440\u0435\u044f\"", ";"]}, "query_toks_no_values": {"en": ["select", "sum", "(", "surfacearea", ")", "from", "country", "where", "continent", "=", "value", "or", "continent", "=", "value", ";"], "ru": ["select", "sum", "(", "surfacearea", ")", "from", "country", "where", "continent", "=", "value", "or", "continent", "=", "value", ";"]}, "masked_query": "SELECT sum(SurfaceArea) FROM country WHERE Continent  =  \"Asia\" OR Continent  =  \"Europe\";", "question_pauq": {"ru": "\u0423\u043a\u0430\u0436\u0438\u0442\u0435 \u043e\u0431\u0449\u0443\u044e \u043f\u043b\u043e\u0449\u0430\u0434\u044c, \u043f\u043e\u043a\u0440\u044b\u0442\u0443\u044e \u0441\u0442\u0440\u0430\u043d\u0430\u043c\u0438 \u0410\u0442\u043b\u0430\u043d\u0442\u0438\u0434\u044b \u0438\u043b\u0438 \u0413\u0438\u043f\u0435\u0440\u0431\u043e\u0440\u0435\u0438."}, "question": "Give the total surface area covered by countries in Asia or Europe.", "kb_id": "world_1"}, {"id": "D_0729", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT sum(Population) FROM city WHERE District  =  \"\u041e\u0434\u0438\u043d\u0446\u043e\u0432\u0441\u043a\u0438\u0439\";"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[4, [0, [0, 5, false], null]]]], "where": [[false, 2, [0, [0, 4, false], null], "\"Gelderland\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[4, [0, [0, 5, false], null]]]], "where": [[false, 2, [0, [0, 4, false], null], "\"\u041e\u0434\u0438\u043d\u0446\u043e\u0432\u0441\u043a\u0438\u0439\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["How", "many", "people", "live", "in", "Gelderland", "district", "?"], "ru": ["\u0421\u043a\u043e\u043b\u044c\u043a\u043e", "\u0447\u0435\u043b\u043e\u0432\u0435\u043a", "\u043f\u0440\u043e\u0436\u0438\u0432\u0430\u0435\u0442", "\u0432", "\u0440\u0430\u0439\u043e\u043d\u0435", "\u041e\u0434\u0438\u043d\u0446\u043e\u0432\u0441\u043a\u0438\u0439", "?"]}, "query_toks": {"en": ["select", "sum", "(", "population", ")", "from", "city", "where", "district", "=", "\"Gelderland\"", ";"], "ru": ["select", "sum", "(", "population", ")", "from", "city", "where", "district", "=", "\"\u041e\u0434\u0438\u043d\u0446\u043e\u0432\u0441\u043a\u0438\u0439\"", ";"]}, "query_toks_no_values": {"en": ["select", "sum", "(", "population", ")", "from", "city", "where", "district", "=", "value", ";"], "ru": ["select", "sum", "(", "population", ")", "from", "city", "where", "district", "=", "value", ";"]}, "masked_query": "SELECT sum(Population) FROM city WHERE District  =  \"Gelderland\";", "question_pauq": {"ru": "\u0421\u043a\u043e\u043b\u044c\u043a\u043e \u0447\u0435\u043b\u043e\u0432\u0435\u043a \u043f\u0440\u043e\u0436\u0438\u0432\u0430\u0435\u0442 \u0432 \u0440\u0430\u0439\u043e\u043d\u0435 \u041e\u0434\u0438\u043d\u0446\u043e\u0432\u0441\u043a\u0438\u0439?"}, "question": "How many people live in Gelderland district?", "kb_id": "world_1"}, {"id": "D_0730", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT sum(Population) FROM city WHERE District  =  \"\u041e\u0434\u0438\u043d\u0446\u043e\u0432\u0441\u043a\u0438\u0439\";"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[4, [0, [0, 5, false], null]]]], "where": [[false, 2, [0, [0, 4, false], null], "\"Gelderland\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[4, [0, [0, 5, false], null]]]], "where": [[false, 2, [0, [0, 4, false], null], "\"\u041e\u0434\u0438\u043d\u0446\u043e\u0432\u0441\u043a\u0438\u0439\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "total", "population", "of", "Gelderland", "district", "?"], "ru": ["\u041a\u0430\u043a\u043e\u0432\u0430", "\u043e\u0431\u0449\u0430\u044f", "\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u043e\u0441\u0442\u044c", "\u043d\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u044f", "\u041e\u0434\u0438\u043d\u0446\u043e\u0432\u0441\u043a\u043e\u0433\u043e", "\u0440\u0430\u0439\u043e\u043d\u0430", "?"]}, "query_toks": {"en": ["select", "sum", "(", "population", ")", "from", "city", "where", "district", "=", "\"Gelderland\"", ";"], "ru": ["select", "sum", "(", "population", ")", "from", "city", "where", "district", "=", "\"\u041e\u0434\u0438\u043d\u0446\u043e\u0432\u0441\u043a\u0438\u0439\"", ";"]}, "query_toks_no_values": {"en": ["select", "sum", "(", "population", ")", "from", "city", "where", "district", "=", "value", ";"], "ru": ["select", "sum", "(", "population", ")", "from", "city", "where", "district", "=", "value", ";"]}, "masked_query": "SELECT sum(Population) FROM city WHERE District  =  \"Gelderland\";", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0432\u0430 \u043e\u0431\u0449\u0430\u044f \u0447\u0438\u0441\u043b\u0435\u043d\u043d\u043e\u0441\u0442\u044c \u043d\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u044f \u041e\u0434\u0438\u043d\u0446\u043e\u0432\u0441\u043a\u043e\u0433\u043e \u0440\u0430\u0439\u043e\u043d\u0430?"}, "question": "What is the total population of Gelderland district?", "kb_id": "world_1"}, {"id": "D_0731", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \"\u0421\u043c\u0435\u0448\u0430\u043d\u043d\u0430\u044f \u0440\u0435\u0441\u043f\u0443\u0431\u043b\u0438\u043a\u0430\";"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[5, [0, [0, 16, false], null]], [4, [0, [0, 14, false], null]]]], "where": [[false, 2, [0, [0, 19, false], null], "\"US Territory\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[5, [0, [0, 16, false], null]], [4, [0, [0, 14, false], null]]]], "where": [[false, 2, [0, [0, 19, false], null], "\"\u0421\u043c\u0435\u0448\u0430\u043d\u043d\u0430\u044f \u0440\u0435\u0441\u043f\u0443\u0431\u043b\u0438\u043a\u0430\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "average", "GNP", "and", "total", "population", "in", "all", "nations", "whose", "government", "is", "US", "territory", "?"], "ru": ["\u041a\u0430\u043a\u043e\u0432", "\u0441\u0440\u0435\u0434\u043d\u0438\u0439", "\u0412\u041d\u041f", "\u0438", "\u043e\u0431\u0449\u0430\u044f", "\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u043e\u0441\u0442\u044c", "\u043d\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u044f", "\u0432\u043e", "\u0432\u0441\u0435\u0445", "\u0441\u0442\u0440\u0430\u043d\u0430\u0445", ",", "\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044c\u0441\u0442\u0432\u043e", "\u043a\u043e\u0442\u043e\u0440\u044b\u0445", "\u0441\u043c\u0435\u0448\u0430\u043d\u043d\u0430\u044f", "\u0440\u0435\u0441\u043f\u0443\u0431\u043b\u0438\u043a\u0430", "?"]}, "query_toks": {"en": ["select", "avg", "(", "gnp", ")", ",", "sum", "(", "population", ")", "from", "country", "where", "governmentform", "=", "\"US Territory\"", ";"], "ru": ["select", "avg", "(", "gnp", ")", ",", "sum", "(", "population", ")", "from", "country", "where", "governmentform", "=", "\"\u0421\u043c\u0435\u0448\u0430\u043d\u043d\u0430\u044f \u0440\u0435\u0441\u043f\u0443\u0431\u043b\u0438\u043a\u0430\"", ";"]}, "query_toks_no_values": {"en": ["select", "avg", "(", "gnp", ")", ",", "sum", "(", "population", ")", "from", "country", "where", "governmentform", "=", "value", ";"], "ru": ["select", "avg", "(", "gnp", ")", ",", "sum", "(", "population", ")", "from", "country", "where", "governmentform", "=", "value", ";"]}, "masked_query": "SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \"US Territory\";", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0432 \u0441\u0440\u0435\u0434\u043d\u0438\u0439 \u0412\u041d\u041f \u0438 \u043e\u0431\u0449\u0430\u044f \u0447\u0438\u0441\u043b\u0435\u043d\u043d\u043e\u0441\u0442\u044c \u043d\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u044f \u0432\u043e \u0432\u0441\u0435\u0445 \u0441\u0442\u0440\u0430\u043d\u0430\u0445, \u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044c\u0441\u0442\u0432\u043e \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0441\u043c\u0435\u0448\u0430\u043d\u043d\u0430\u044f \u0440\u0435\u0441\u043f\u0443\u0431\u043b\u0438\u043a\u0430?"}, "question": "What is the average GNP and total population in all nations whose government is US territory?", "kb_id": "world_1"}, {"id": "D_0732", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \"\u0421\u043c\u0435\u0448\u0430\u043d\u043d\u0430\u044f \u0440\u0435\u0441\u043f\u0443\u0431\u043b\u0438\u043a\u0430\";"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[5, [0, [0, 16, false], null]], [4, [0, [0, 14, false], null]]]], "where": [[false, 2, [0, [0, 19, false], null], "\"US Territory\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[5, [0, [0, 16, false], null]], [4, [0, [0, 14, false], null]]]], "where": [[false, 2, [0, [0, 19, false], null], "\"\u0421\u043c\u0435\u0448\u0430\u043d\u043d\u0430\u044f \u0440\u0435\u0441\u043f\u0443\u0431\u043b\u0438\u043a\u0430\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Give", "the", "mean", "GNP", "and", "total", "population", "of", "nations", "which", "are", "considered", "US", "territory", "."], "ru": ["\u0423\u043a\u0430\u0436\u0438\u0442\u0435", "\u0441\u0440\u0435\u0434\u043d\u0438\u0439", "\u0412\u041d\u041f", "\u0438", "\u043e\u0431\u0449\u0443\u044e", "\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u043e\u0441\u0442\u044c", "\u043d\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u044f", "\u0441\u0442\u0440\u0430\u043d", ",", "\u0441\u0447\u0438\u0442\u0430\u044e\u0449\u0438\u0445\u0441\u044f", "\u0441\u043c\u0435\u0448\u0430\u043d\u043d\u043e\u0439", "\u0440\u0435\u0441\u043f\u0443\u0431\u043b\u0438\u043a\u043e\u0439", "."]}, "query_toks": {"en": ["select", "avg", "(", "gnp", ")", ",", "sum", "(", "population", ")", "from", "country", "where", "governmentform", "=", "\"US Territory\"", ";"], "ru": ["select", "avg", "(", "gnp", ")", ",", "sum", "(", "population", ")", "from", "country", "where", "governmentform", "=", "\"\u0421\u043c\u0435\u0448\u0430\u043d\u043d\u0430\u044f \u0440\u0435\u0441\u043f\u0443\u0431\u043b\u0438\u043a\u0430\"", ";"]}, "query_toks_no_values": {"en": ["select", "avg", "(", "gnp", ")", ",", "sum", "(", "population", ")", "from", "country", "where", "governmentform", "=", "value", ";"], "ru": ["select", "avg", "(", "gnp", ")", ",", "sum", "(", "population", ")", "from", "country", "where", "governmentform", "=", "value", ";"]}, "masked_query": "SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \"US Territory\";", "question_pauq": {"ru": "\u0423\u043a\u0430\u0436\u0438\u0442\u0435 \u0441\u0440\u0435\u0434\u043d\u0438\u0439 \u0412\u041d\u041f \u0438 \u043e\u0431\u0449\u0443\u044e \u0447\u0438\u0441\u043b\u0435\u043d\u043d\u043e\u0441\u0442\u044c \u043d\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u044f \u0441\u0442\u0440\u0430\u043d, \u0441\u0447\u0438\u0442\u0430\u044e\u0449\u0438\u0445\u0441\u044f \u0441\u043c\u0435\u0448\u0430\u043d\u043d\u043e\u0439 \u0440\u0435\u0441\u043f\u0443\u0431\u043b\u0438\u043a\u043e\u0439."}, "question": "Give the mean GNP and total population of nations which are considered US territory.", "kb_id": "world_1"}, {"id": "D_0733", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 3]], "conds": []}, "select": [false, [[3, [0, [0, 24, true], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 3]], "conds": []}, "select": [false, [[3, [0, [0, 24, true], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["How", "many", "unique", "languages", "are", "spoken", "in", "the", "world", "?"], "ru": ["\u041d\u0430", "\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445", "\u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0445", "\u044f\u0437\u044b\u043a\u0430\u0445", "\u0433\u043e\u0432\u043e\u0440\u044f\u0442", "\u0432", "\u043c\u0438\u0440\u0435", "?"]}, "query_toks": {"en": ["select", "count", "(", "distinct", "language", ")", "from", "countrylanguage", ";"], "ru": ["select", "count", "(", "distinct", "language", ")", "from", "countrylanguage", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "distinct", "language", ")", "from", "countrylanguage", ";"], "ru": ["select", "count", "(", "distinct", "language", ")", "from", "countrylanguage", ";"]}, "masked_query": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage;", "question_pauq": {"ru": "\u041d\u0430 \u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0445 \u044f\u0437\u044b\u043a\u0430\u0445 \u0433\u043e\u0432\u043e\u0440\u044f\u0442 \u0432 \u043c\u0438\u0440\u0435?"}, "question": "How many unique languages are spoken in the world?", "kb_id": "world_1"}, {"id": "D_0734", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 3]], "conds": []}, "select": [false, [[3, [0, [0, 24, true], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 3]], "conds": []}, "select": [false, [[3, [0, [0, 24, true], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "number", "of", "distinct", "languages", "used", "around", "the", "world", "?"], "ru": ["\u041a\u0430\u043a\u043e\u0435", "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e", "\u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445", "\u044f\u0437\u044b\u043a\u043e\u0432", "\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f", "\u0432", "\u043c\u0438\u0440\u0435", "?"]}, "query_toks": {"en": ["select", "count", "(", "distinct", "language", ")", "from", "countrylanguage", ";"], "ru": ["select", "count", "(", "distinct", "language", ")", "from", "countrylanguage", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "distinct", "language", ")", "from", "countrylanguage", ";"], "ru": ["select", "count", "(", "distinct", "language", ")", "from", "countrylanguage", ";"]}, "masked_query": "SELECT count(DISTINCT LANGUAGE) FROM countrylanguage;", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u044f\u0437\u044b\u043a\u043e\u0432 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0432 \u043c\u0438\u0440\u0435?"}, "question": "What is the number of distinct languages used around the world?", "kb_id": "world_1"}, {"id": "D_0735", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"\u0413\u0438\u043f\u0435\u0440\u0431\u043e\u0440\u0435\u044f\";"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[3, [0, [0, 19, true], null]]]], "where": [[false, 2, [0, [0, 10, false], null], "\"Africa\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[3, [0, [0, 19, true], null]]]], "where": [[false, 2, [0, [0, 10, false], null], "\"\u0413\u0438\u043f\u0435\u0440\u0431\u043e\u0440\u0435\u044f\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["How", "many", "type", "of", "governments", "are", "in", "Africa", "?"], "ru": ["\u0421\u043a\u043e\u043b\u044c\u043a\u043e", "\u0442\u0438\u043f\u043e\u0432", "\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044c\u0441\u0442\u0432", "\u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442", "\u0432", "\u0413\u0438\u043f\u0435\u0440\u0431\u043e\u0440\u0435\u0435", "?"]}, "query_toks": {"en": ["select", "count", "(", "distinct", "governmentform", ")", "from", "country", "where", "continent", "=", "\"Africa\"", ";"], "ru": ["select", "count", "(", "distinct", "governmentform", ")", "from", "country", "where", "continent", "=", "\"\u0413\u0438\u043f\u0435\u0440\u0431\u043e\u0440\u0435\u044f\"", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "distinct", "governmentform", ")", "from", "country", "where", "continent", "=", "value", ";"], "ru": ["select", "count", "(", "distinct", "governmentform", ")", "from", "country", "where", "continent", "=", "value", ";"]}, "masked_query": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\";", "question_pauq": {"ru": "\u0421\u043a\u043e\u043b\u044c\u043a\u043e \u0442\u0438\u043f\u043e\u0432 \u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044c\u0441\u0442\u0432 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442 \u0432 \u0413\u0438\u043f\u0435\u0440\u0431\u043e\u0440\u0435\u0435?"}, "question": "How many type of governments are in Africa?", "kb_id": "world_1"}, {"id": "D_0736", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"\u0413\u0438\u043f\u0435\u0440\u0431\u043e\u0440\u0435\u044f\";"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[3, [0, [0, 19, true], null]]]], "where": [[false, 2, [0, [0, 10, false], null], "\"Africa\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[3, [0, [0, 19, true], null]]]], "where": [[false, 2, [0, [0, 10, false], null], "\"\u0413\u0438\u043f\u0435\u0440\u0431\u043e\u0440\u0435\u044f\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["How", "many", "different", "forms", "of", "governments", "are", "there", "in", "Africa", "?"], "ru": ["\u0421\u043a\u043e\u043b\u044c\u043a\u043e", "\u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445", "\u0444\u043e\u0440\u043c", "\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f", "\u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442", "\u0432", "\u0413\u0438\u043f\u0435\u0440\u0431\u043e\u0440\u0435\u0435", "?"]}, "query_toks": {"en": ["select", "count", "(", "distinct", "governmentform", ")", "from", "country", "where", "continent", "=", "\"Africa\"", ";"], "ru": ["select", "count", "(", "distinct", "governmentform", ")", "from", "country", "where", "continent", "=", "\"\u0413\u0438\u043f\u0435\u0440\u0431\u043e\u0440\u0435\u044f\"", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "distinct", "governmentform", ")", "from", "country", "where", "continent", "=", "value", ";"], "ru": ["select", "count", "(", "distinct", "governmentform", ")", "from", "country", "where", "continent", "=", "value", ";"]}, "masked_query": "SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\";", "question_pauq": {"ru": "\u0421\u043a\u043e\u043b\u044c\u043a\u043e \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u0444\u043e\u0440\u043c \u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442 \u0432 \u0413\u0438\u043f\u0435\u0440\u0431\u043e\u0440\u0435\u0435?"}, "question": "How many different forms of governments are there in Africa?", "kb_id": "world_1"}, {"id": "D_0737", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"\u0412\u0430\u043a\u0430\u043d\u0434\u0430\";"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 23, false], null]]}, "select": [false, [[3, [0, [0, 24, false], null]]]], "where": [[false, 2, [0, [0, 9, false], null], "\"Aruba\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 23, false], null]]}, "select": [false, [[3, [0, [0, 24, false], null]]]], "where": [[false, 2, [0, [0, 9, false], null], "\"\u0412\u0430\u043a\u0430\u043d\u0434\u0430\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "total", "number", "of", "languages", "used", "in", "Aruba", "?"], "ru": ["\u041a\u0430\u043a\u043e\u0435", "\u043e\u0431\u0449\u0435\u0435", "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e", "\u044f\u0437\u044b\u043a\u043e\u0432", "\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f", "\u0432", "\u0412\u0430\u043a\u0430\u043d\u0434\u0435", "?"]}, "query_toks": {"en": ["select", "count", "(", "t2.language", ")", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t1.name", "=", "\"Aruba\"", ";"], "ru": ["select", "count", "(", "t2.language", ")", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t1.name", "=", "\"\u0412\u0430\u043a\u0430\u043d\u0434\u0430\"", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "t2.language", ")", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t1.name", "=", "value", ";"], "ru": ["select", "count", "(", "t2.language", ")", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t1.name", "=", "value", ";"]}, "masked_query": "SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\";", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0435 \u043e\u0431\u0449\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u044f\u0437\u044b\u043a\u043e\u0432 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0432 \u0412\u0430\u043a\u0430\u043d\u0434\u0435?"}, "question": "What is the total number of languages used in Aruba?", "kb_id": "world_1"}, {"id": "D_0738", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"\u0412\u0430\u043a\u0430\u043d\u0434\u0430\";"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 23, false], null]]}, "select": [false, [[3, [0, [0, 24, false], null]]]], "where": [[false, 2, [0, [0, 9, false], null], "\"Aruba\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 23, false], null]]}, "select": [false, [[3, [0, [0, 24, false], null]]]], "where": [[false, 2, [0, [0, 9, false], null], "\"\u0412\u0430\u043a\u0430\u043d\u0434\u0430\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["How", "many", "languages", "are", "spoken", "in", "Aruba", "?"], "ru": ["\u041d\u0430", "\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445", "\u044f\u0437\u044b\u043a\u0430\u0445", "\u0433\u043e\u0432\u043e\u0440\u044f\u0442", "\u0432", "\u0412\u0430\u043a\u0430\u043d\u0434\u0435", "?"]}, "query_toks": {"en": ["select", "count", "(", "t2.language", ")", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t1.name", "=", "\"Aruba\"", ";"], "ru": ["select", "count", "(", "t2.language", ")", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t1.name", "=", "\"\u0412\u0430\u043a\u0430\u043d\u0434\u0430\"", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "t2.language", ")", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t1.name", "=", "value", ";"], "ru": ["select", "count", "(", "t2.language", ")", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t1.name", "=", "value", ";"]}, "masked_query": "SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\";", "question_pauq": {"ru": "\u041d\u0430 \u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u044f\u0437\u044b\u043a\u0430\u0445 \u0433\u043e\u0432\u043e\u0440\u044f\u0442 \u0432 \u0412\u0430\u043a\u0430\u043d\u0434\u0435?"}, "question": "How many languages are spoken in Aruba?", "kb_id": "world_1"}, {"id": "D_0739", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"\u041d\u043e\u0440\u0434\u0445\u0435\u0439\u043c\" AND IsOfficial  =  \"T\";"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 23, false], null]]}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 9, false], null], "\"Afghanistan\"", null], "and", [false, 2, [0, [0, 25, false], null], "\"T\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 23, false], null]]}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 9, false], null], "\"\u041d\u043e\u0440\u0434\u0445\u0435\u0439\u043c\"", null], "and", [false, 2, [0, [0, 25, false], null], "\"T\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["How", "many", "official", "languages", "does", "Afghanistan", "have", "?"], "ru": ["\u0421\u043a\u043e\u043b\u044c\u043a\u043e", "\u043e\u0444\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0445", "\u044f\u0437\u044b\u043a\u043e\u0432", "\u0432", "\u041d\u043e\u0440\u0434\u0445\u0435\u0439\u043c\u0435", "?"]}, "query_toks": {"en": ["select", "count", "(", "*", ")", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t1.name", "=", "\"Afghanistan\"", "and", "isofficial", "=", "\"T\"", ";"], "ru": ["select", "count", "(", "*", ")", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t1.name", "=", "\"\u041d\u043e\u0440\u0434\u0445\u0435\u0439\u043c\"", "and", "isofficial", "=", "\"T\"", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "*", ")", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t1.name", "=", "value", "and", "isofficial", "=", "value", ";"], "ru": ["select", "count", "(", "*", ")", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t1.name", "=", "value", "and", "isofficial", "=", "value", ";"]}, "masked_query": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\";", "question_pauq": {"ru": "\u0421\u043a\u043e\u043b\u044c\u043a\u043e \u043e\u0444\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u044f\u0437\u044b\u043a\u043e\u0432 \u0432 \u041d\u043e\u0440\u0434\u0445\u0435\u0439\u043c\u0435?"}, "question": "How many official languages does Afghanistan have?", "kb_id": "world_1"}, {"id": "D_0740", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"\u041d\u043e\u0440\u0434\u0445\u0435\u0439\u043c\" AND IsOfficial  =  \"T\";"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 23, false], null]]}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 9, false], null], "\"Afghanistan\"", null], "and", [false, 2, [0, [0, 25, false], null], "\"T\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 23, false], null]]}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 9, false], null], "\"\u041d\u043e\u0440\u0434\u0445\u0435\u0439\u043c\"", null], "and", [false, 2, [0, [0, 25, false], null], "\"T\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["How", "many", "official", "languages", "are", "spoken", "in", "Afghanistan", "?"], "ru": ["\u041d\u0430", "\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445", "\u043e\u0444\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0445", "\u044f\u0437\u044b\u043a\u0430\u0445", "\u0433\u043e\u0432\u043e\u0440\u044f\u0442", "\u0432", "\u041d\u043e\u0440\u0434\u0445\u0435\u0439\u043c\u0435", "?"]}, "query_toks": {"en": ["select", "count", "(", "*", ")", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t1.name", "=", "\"Afghanistan\"", "and", "isofficial", "=", "\"T\"", ";"], "ru": ["select", "count", "(", "*", ")", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t1.name", "=", "\"\u041d\u043e\u0440\u0434\u0445\u0435\u0439\u043c\"", "and", "isofficial", "=", "\"T\"", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "*", ")", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t1.name", "=", "value", "and", "isofficial", "=", "value", ";"], "ru": ["select", "count", "(", "*", ")", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t1.name", "=", "value", "and", "isofficial", "=", "value", ";"]}, "masked_query": "SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\";", "question_pauq": {"ru": "\u041d\u0430 \u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u043e\u0444\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u044f\u0437\u044b\u043a\u0430\u0445 \u0433\u043e\u0432\u043e\u0440\u044f\u0442 \u0432 \u041d\u043e\u0440\u0434\u0445\u0435\u0439\u043c\u0435?"}, "question": "How many official languages are spoken in Afghanistan?", "kb_id": "world_1"}, {"id": "D_0741", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 23, false], null]]}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [], "groupBy": [[0, 9, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 23, false], null]]}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [], "groupBy": [[0, 9, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "name", "of", "the", "country", "that", "speaks", "the", "largest", "number", "of", "languages", "?"], "ru": ["\u041a\u0430\u043a", "\u043d\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f", "\u0441\u0442\u0440\u0430\u043d\u0430", ",", "\u0433\u043e\u0432\u043e\u0440\u044f\u0449\u0430\u044f", "\u043d\u0430", "\u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0435\u043c", "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0435", "\u044f\u0437\u044b\u043a\u043e\u0432", "?"]}, "query_toks": {"en": ["select", "t1.name", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "group", "by", "t1.name", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"], "ru": ["select", "t1.name", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "group", "by", "t1.name", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"]}, "query_toks_no_values": {"en": ["select", "t1.name", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "group", "by", "t1.name", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"], "ru": ["select", "t1.name", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "group", "by", "t1.name", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"]}, "masked_query": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1;", "question_pauq": {"ru": "\u041a\u0430\u043a \u043d\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0441\u0442\u0440\u0430\u043d\u0430, \u0433\u043e\u0432\u043e\u0440\u044f\u0449\u0430\u044f \u043d\u0430 \u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0435\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0435 \u044f\u0437\u044b\u043a\u043e\u0432?"}, "question": "What is name of the country that speaks the largest number of languages?", "kb_id": "world_1"}, {"id": "D_0742", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 23, false], null]]}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [], "groupBy": [[0, 9, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 23, false], null]]}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [], "groupBy": [[0, 9, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Give", "the", "name", "of", "the", "nation", "that", "uses", "the", "greatest", "amount", "of", "languages", "."], "ru": ["\u0423\u043a\u0430\u0436\u0438", "\u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435", "\u043d\u0430\u0446\u0438\u0438", ",", "\u043a\u043e\u0442\u043e\u0440\u0430\u044f", "\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442", "\u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0435\u0435", "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e", "\u044f\u0437\u044b\u043a\u043e\u0432", "."]}, "query_toks": {"en": ["select", "t1.name", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "group", "by", "t1.name", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"], "ru": ["select", "t1.name", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "group", "by", "t1.name", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"]}, "query_toks_no_values": {"en": ["select", "t1.name", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "group", "by", "t1.name", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"], "ru": ["select", "t1.name", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "group", "by", "t1.name", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"]}, "masked_query": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1;", "question_pauq": {"ru": "\u0423\u043a\u0430\u0436\u0438 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043d\u0430\u0446\u0438\u0438, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u044f\u0437\u044b\u043a\u043e\u0432."}, "question": "Give the name of the nation that uses the greatest amount of languages.", "kb_id": "world_1"}, {"id": "D_0743", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 23, false], null]]}, "select": [false, [[0, [0, [0, 10, false], null]]]], "where": [], "groupBy": [[0, 10, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 23, false], null]]}, "select": [false, [[0, [0, [0, 10, false], null]]]], "where": [], "groupBy": [[0, 10, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Which", "continent", "has", "the", "most", "diverse", "languages", "?"], "ru": ["\u041d\u0430", "\u043a\u0430\u043a\u043e\u043c", "\u043a\u043e\u043d\u0442\u0438\u043d\u0435\u043d\u0442\u0435", "\u0441\u0430\u043c\u044b\u0435", "\u0440\u0430\u0437\u043d\u044b\u0435", "\u044f\u0437\u044b\u043a\u0438", "?"]}, "query_toks": {"en": ["select", "t1.continent", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "group", "by", "t1.continent", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"], "ru": ["select", "t1.continent", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "group", "by", "t1.continent", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"]}, "query_toks_no_values": {"en": ["select", "t1.continent", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "group", "by", "t1.continent", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"], "ru": ["select", "t1.continent", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "group", "by", "t1.continent", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"]}, "masked_query": "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1;", "question_pauq": {"ru": "\u041d\u0430 \u043a\u0430\u043a\u043e\u043c \u043a\u043e\u043d\u0442\u0438\u043d\u0435\u043d\u0442\u0435 \u0441\u0430\u043c\u044b\u0435 \u0440\u0430\u0437\u043d\u044b\u0435 \u044f\u0437\u044b\u043a\u0438?"}, "question": "Which continent has the most diverse languages?", "kb_id": "world_1"}, {"id": "D_0744", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 23, false], null]]}, "select": [false, [[0, [0, [0, 10, false], null]]]], "where": [], "groupBy": [[0, 10, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 23, false], null]]}, "select": [false, [[0, [0, [0, 10, false], null]]]], "where": [], "groupBy": [[0, 10, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Which", "continent", "speaks", "the", "most", "languages", "?"], "ru": ["\u041d\u0430", "\u043a\u0430\u043a\u043e\u043c", "\u043a\u043e\u043d\u0442\u0438\u043d\u0435\u043d\u0442\u0435", "\u0431\u043e\u043b\u044c\u0448\u0435", "\u0432\u0441\u0435\u0433\u043e", "\u044f\u0437\u044b\u043a\u043e\u0432", "?"]}, "query_toks": {"en": ["select", "t1.continent", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "group", "by", "t1.continent", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"], "ru": ["select", "t1.continent", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "group", "by", "t1.continent", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"]}, "query_toks_no_values": {"en": ["select", "t1.continent", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "group", "by", "t1.continent", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"], "ru": ["select", "t1.continent", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "group", "by", "t1.continent", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"]}, "masked_query": "SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1;", "question_pauq": {"ru": "\u041d\u0430 \u043a\u0430\u043a\u043e\u043c \u043a\u043e\u043d\u0442\u0438\u043d\u0435\u043d\u0442\u0435 \u0431\u043e\u043b\u044c\u0448\u0435 \u0432\u0441\u0435\u0433\u043e \u044f\u0437\u044b\u043a\u043e\u0432?"}, "question": "Which continent speaks the most languages?", "kb_id": "world_1"}, {"id": "D_0745", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"\u0412\u0430\u043a\u0430\u043d\u0434\u0438\u0439\u0441\u043a\u0438\u0439\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"\u041d\u043e\u0440\u0434\u043e\u0432\u0441\u043a\u0438\u0439\");"}, "sql": {"en": {"from": {"table_units": [["sql", {"from": {"table_units": [["table_unit", 2], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 23, false], null]]}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [[false, 2, [0, [0, 24, false], null], "\"English\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": {"from": {"table_units": [["table_unit", 2], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 23, false], null]]}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [[false, 2, [0, [0, 24, false], null], "\"Dutch\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "union": null, "except": null}]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["sql", {"from": {"table_units": [["table_unit", 2], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 23, false], null]]}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [[false, 2, [0, [0, 24, false], null], "\"\u0412\u0430\u043a\u0430\u043d\u0434\u0438\u0439\u0441\u043a\u0438\u0439\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": {"from": {"table_units": [["table_unit", 2], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 23, false], null]]}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [[false, 2, [0, [0, 24, false], null], "\"\u041d\u043e\u0440\u0434\u043e\u0432\u0441\u043a\u0438\u0439\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "union": null, "except": null}]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["How", "many", "countries", "speak", "both", "English", "and", "Dutch", "?"], "ru": ["\u0421\u043a\u043e\u043b\u044c\u043a\u043e", "\u0441\u0442\u0440\u0430\u043d", "\u0433\u043e\u0432\u043e\u0440\u044f\u0442", "\u043d\u0430", "\u0432\u0430\u043a\u0430\u043d\u0434\u0438\u0439\u0441\u043a\u043e\u043c", "\u0438", "\u043d\u043e\u0440\u0434\u043e\u0432\u0441\u043a\u043e\u043c", "\u044f\u0437\u044b\u043a\u0430\u0445", "?"]}, "query_toks": {"en": ["select", "count", "(", "*", ")", "from", "(", "select", "t1.name", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t2.language", "=", "\"English\"", "intersect", "select", "t1.name", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t2.language", "=", "\"Dutch\"", ")", ";"], "ru": ["select", "count", "(", "*", ")", "from", "(", "select", "t1.name", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t2.language", "=", "\"\u0412\u0430\u043a\u0430\u043d\u0434\u0438\u0439\u0441\u043a\u0438\u0439\"", "intersect", "select", "t1.name", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t2.language", "=", "\"\u041d\u043e\u0440\u0434\u043e\u0432\u0441\u043a\u0438\u0439\"", ")", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "*", ")", "from", "(", "select", "t1.name", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t2.language", "=", "value", "intersect", "select", "t1.name", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t2.language", "=", "value", ")", ";"], "ru": ["select", "count", "(", "*", ")", "from", "(", "select", "t1.name", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t2.language", "=", "value", "intersect", "select", "t1.name", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t2.language", "=", "value", ")", ";"]}, "masked_query": "SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\");", "question_pauq": {"ru": "\u0421\u043a\u043e\u043b\u044c\u043a\u043e \u0441\u0442\u0440\u0430\u043d \u0433\u043e\u0432\u043e\u0440\u044f\u0442 \u043d\u0430 \u0432\u0430\u043a\u0430\u043d\u0434\u0438\u0439\u0441\u043a\u043e\u043c \u0438 \u043d\u043e\u0440\u0434\u043e\u0432\u0441\u043a\u043e\u043c \u044f\u0437\u044b\u043a\u0430\u0445?"}, "question": "How many countries speak both English and Dutch?", "kb_id": "world_1"}, {"id": "D_0746", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"\u0412\u0430\u043a\u0430\u043d\u0434\u0438\u0439\u0441\u043a\u0438\u0439\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"\u041d\u043e\u0440\u0434\u043e\u0432\u0441\u043a\u0438\u0439\");"}, "sql": {"en": {"from": {"table_units": [["sql", {"from": {"table_units": [["table_unit", 2], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 23, false], null]]}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [[false, 2, [0, [0, 24, false], null], "\"English\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": {"from": {"table_units": [["table_unit", 2], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 23, false], null]]}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [[false, 2, [0, [0, 24, false], null], "\"Dutch\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "union": null, "except": null}]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["sql", {"from": {"table_units": [["table_unit", 2], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 23, false], null]]}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [[false, 2, [0, [0, 24, false], null], "\"\u0412\u0430\u043a\u0430\u043d\u0434\u0438\u0439\u0441\u043a\u0438\u0439\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": {"from": {"table_units": [["table_unit", 2], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 23, false], null]]}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [[false, 2, [0, [0, 24, false], null], "\"\u041d\u043e\u0440\u0434\u043e\u0432\u0441\u043a\u0438\u0439\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "union": null, "except": null}]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "number", "of", "nations", "that", "use", "English", "and", "Dutch", "?"], "ru": ["\u0421\u043a\u043e\u043b\u044c\u043a\u043e", "\u0441\u0442\u0440\u0430\u043d", "\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442", "\u0432\u0430\u043a\u0430\u043d\u0434\u0438\u0439\u0441\u043a\u0438\u0439", "\u0438", "\u043d\u043e\u0440\u0434\u043e\u0432\u0441\u043a\u0438\u0439", "\u044f\u0437\u044b\u043a\u0438", "?"]}, "query_toks": {"en": ["select", "count", "(", "*", ")", "from", "(", "select", "t1.name", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t2.language", "=", "\"English\"", "intersect", "select", "t1.name", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t2.language", "=", "\"Dutch\"", ")", ";"], "ru": ["select", "count", "(", "*", ")", "from", "(", "select", "t1.name", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t2.language", "=", "\"\u0412\u0430\u043a\u0430\u043d\u0434\u0438\u0439\u0441\u043a\u0438\u0439\"", "intersect", "select", "t1.name", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t2.language", "=", "\"\u041d\u043e\u0440\u0434\u043e\u0432\u0441\u043a\u0438\u0439\"", ")", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "*", ")", "from", "(", "select", "t1.name", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t2.language", "=", "value", "intersect", "select", "t1.name", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t2.language", "=", "value", ")", ";"], "ru": ["select", "count", "(", "*", ")", "from", "(", "select", "t1.name", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t2.language", "=", "value", "intersect", "select", "t1.name", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t2.language", "=", "value", ")", ";"]}, "masked_query": "SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\");", "question_pauq": {"ru": "\u0421\u043a\u043e\u043b\u044c\u043a\u043e \u0441\u0442\u0440\u0430\u043d \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442 \u0432\u0430\u043a\u0430\u043d\u0434\u0438\u0439\u0441\u043a\u0438\u0439 \u0438 \u043d\u043e\u0440\u0434\u043e\u0432\u0441\u043a\u0438\u0439 \u044f\u0437\u044b\u043a\u0438?"}, "question": "What is the number of nations that use English and Dutch?", "kb_id": "world_1"}, {"id": "D_0747", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"\u0412\u0430\u043a\u0430\u043d\u0434\u0438\u0439\u0441\u043a\u0438\u0439\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"\u0414\u0436\u0435\u043d\u043e\u0448\u0438\";"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 23, false], null]]}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [[false, 2, [0, [0, 24, false], null], "\"English\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": {"from": {"table_units": [["table_unit", 2], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 23, false], null]]}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [[false, 2, [0, [0, 24, false], null], "\"French\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 23, false], null]]}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [[false, 2, [0, [0, 24, false], null], "\"\u0412\u0430\u043a\u0430\u043d\u0434\u0438\u0439\u0441\u043a\u0438\u0439\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": {"from": {"table_units": [["table_unit", 2], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 23, false], null]]}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [[false, 2, [0, [0, 24, false], null], "\"\u0414\u0436\u0435\u043d\u043e\u0448\u0438\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "the", "names", "of", "nations", "speak", "both", "English", "and", "French", "?"], "ru": ["\u041a\u0430\u043a", "\u043d\u0430\u0437\u044b\u0432\u0430\u044e\u0442\u0441\u044f", "\u043d\u0430\u0440\u043e\u0434\u044b", ",", "\u0433\u043e\u0432\u043e\u0440\u044f\u0449\u0438\u0435", "\u043d\u0430", "\u0432\u0430\u043a\u0430\u043d\u0434\u0438\u0439\u0441\u043a\u043e\u043c", "\u0438", "\u0434\u0436\u0435\u043d\u043e\u0448\u0438", "\u044f\u0437\u044b\u043a\u0430\u0445", "?"]}, "query_toks": {"en": ["select", "t1.name", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t2.language", "=", "\"English\"", "intersect", "select", "t1.name", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t2.language", "=", "\"French\"", ";"], "ru": ["select", "t1.name", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t2.language", "=", "\"\u0412\u0430\u043a\u0430\u043d\u0434\u0438\u0439\u0441\u043a\u0438\u0439\"", "intersect", "select", "t1.name", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t2.language", "=", "\"\u0414\u0436\u0435\u043d\u043e\u0448\u0438\"", ";"]}, "query_toks_no_values": {"en": ["select", "t1.name", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t2.language", "=", "value", "intersect", "select", "t1.name", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t2.language", "=", "value", ";"], "ru": ["select", "t1.name", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t2.language", "=", "value", "intersect", "select", "t1.name", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t2.language", "=", "value", ";"]}, "masked_query": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\";", "question_pauq": {"ru": "\u041a\u0430\u043a \u043d\u0430\u0437\u044b\u0432\u0430\u044e\u0442\u0441\u044f \u043d\u0430\u0440\u043e\u0434\u044b, \u0433\u043e\u0432\u043e\u0440\u044f\u0449\u0438\u0435 \u043d\u0430 \u0432\u0430\u043a\u0430\u043d\u0434\u0438\u0439\u0441\u043a\u043e\u043c \u0438 \u0434\u0436\u0435\u043d\u043e\u0448\u0438 \u044f\u0437\u044b\u043a\u0430\u0445?"}, "question": "What are the names of nations speak both English and French?", "kb_id": "world_1"}, {"id": "D_0748", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"\u0412\u0430\u043a\u0430\u043d\u0434\u0438\u0439\u0441\u043a\u0438\u0439\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"\u0414\u0436\u0435\u043d\u043e\u0448\u0438\";"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 23, false], null]]}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [[false, 2, [0, [0, 24, false], null], "\"English\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": {"from": {"table_units": [["table_unit", 2], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 23, false], null]]}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [[false, 2, [0, [0, 24, false], null], "\"French\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 23, false], null]]}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [[false, 2, [0, [0, 24, false], null], "\"\u0412\u0430\u043a\u0430\u043d\u0434\u0438\u0439\u0441\u043a\u0438\u0439\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": {"from": {"table_units": [["table_unit", 2], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 23, false], null]]}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [[false, 2, [0, [0, 24, false], null], "\"\u0414\u0436\u0435\u043d\u043e\u0448\u0438\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "union": null, "except": null}}, "question_toks": {"en": ["Give", "the", "names", "of", "nations", "that", "speak", "both", "English", "and", "French", "."], "ru": ["\u041d\u0430\u0437\u043e\u0432\u0438\u0442\u0435", "\u0441\u0442\u0440\u0430\u043d\u044b", ",", "\u0433\u043e\u0432\u043e\u0440\u044f\u0449\u0438\u0435", "\u043d\u0430", "\u0432\u0430\u043a\u0430\u043d\u0434\u0438\u0439\u0441\u043a\u043e\u043c", "\u0438", "\u0434\u0436\u0435\u043d\u043e\u0448\u0438", "\u044f\u0437\u044b\u043a\u0430\u0445", "."]}, "query_toks": {"en": ["select", "t1.name", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t2.language", "=", "\"English\"", "intersect", "select", "t1.name", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t2.language", "=", "\"French\"", ";"], "ru": ["select", "t1.name", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t2.language", "=", "\"\u0412\u0430\u043a\u0430\u043d\u0434\u0438\u0439\u0441\u043a\u0438\u0439\"", "intersect", "select", "t1.name", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t2.language", "=", "\"\u0414\u0436\u0435\u043d\u043e\u0448\u0438\"", ";"]}, "query_toks_no_values": {"en": ["select", "t1.name", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t2.language", "=", "value", "intersect", "select", "t1.name", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t2.language", "=", "value", ";"], "ru": ["select", "t1.name", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t2.language", "=", "value", "intersect", "select", "t1.name", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t2.language", "=", "value", ";"]}, "masked_query": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\";", "question_pauq": {"ru": "\u041d\u0430\u0437\u043e\u0432\u0438\u0442\u0435 \u0441\u0442\u0440\u0430\u043d\u044b, \u0433\u043e\u0432\u043e\u0440\u044f\u0449\u0438\u0435 \u043d\u0430 \u0432\u0430\u043a\u0430\u043d\u0434\u0438\u0439\u0441\u043a\u043e\u043c \u0438 \u0434\u0436\u0435\u043d\u043e\u0448\u0438 \u044f\u0437\u044b\u043a\u0430\u0445."}, "question": "Give the names of nations that speak both English and French.", "kb_id": "world_1"}, {"id": "D_0749", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"\u0412\u0430\u043a\u0430\u043d\u0434\u0438\u0439\u0441\u043a\u0438\u0439\" AND T2.IsOfficial  =  \"T\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"\u0414\u0436\u0435\u043d\u043e\u0448\u0438\" AND T2.IsOfficial  =  \"T\";"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 23, false], null]]}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [[false, 2, [0, [0, 24, false], null], "\"English\"", null], "and", [false, 2, [0, [0, 25, false], null], "\"T\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": {"from": {"table_units": [["table_unit", 2], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 23, false], null]]}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [[false, 2, [0, [0, 24, false], null], "\"French\"", null], "and", [false, 2, [0, [0, 25, false], null], "\"T\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 23, false], null]]}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [[false, 2, [0, [0, 24, false], null], "\"\u0412\u0430\u043a\u0430\u043d\u0434\u0438\u0439\u0441\u043a\u0438\u0439\"", null], "and", [false, 2, [0, [0, 25, false], null], "\"T\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": {"from": {"table_units": [["table_unit", 2], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 23, false], null]]}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [[false, 2, [0, [0, 24, false], null], "\"\u0414\u0436\u0435\u043d\u043e\u0448\u0438\"", null], "and", [false, 2, [0, [0, 25, false], null], "\"T\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "the", "names", "of", "nations", "where", "both", "English", "and", "French", "are", "official", "languages", "?"], "ru": ["\u041a\u0430\u043a", "\u043d\u0430\u0437\u044b\u0432\u0430\u044e\u0442\u0441\u044f", "\u0441\u0442\u0440\u0430\u043d\u044b", ",", "\u0432", "\u043a\u043e\u0442\u043e\u0440\u044b\u0445", "\u0432\u0430\u043a\u0430\u043d\u0434\u0438\u0439\u0441\u043a\u0438\u0439", "\u0438", "\u0434\u0436\u0435\u043d\u043e\u0448\u0438", "\u044f\u0432\u043b\u044f\u044e\u0442\u0441\u044f", "\u043e\u0444\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u043c\u0438", "\u044f\u0437\u044b\u043a\u0430\u043c\u0438", "?"]}, "query_toks": {"en": ["select", "t1.name", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t2.language", "=", "\"English\"", "and", "t2.isofficial", "=", "\"T\"", "intersect", "select", "t1.name", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t2.language", "=", "\"French\"", "and", "t2.isofficial", "=", "\"T\"", ";"], "ru": ["select", "t1.name", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t2.language", "=", "\"\u0412\u0430\u043a\u0430\u043d\u0434\u0438\u0439\u0441\u043a\u0438\u0439\"", "and", "t2.isofficial", "=", "\"T\"", "intersect", "select", "t1.name", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t2.language", "=", "\"\u0414\u0436\u0435\u043d\u043e\u0448\u0438\"", "and", "t2.isofficial", "=", "\"T\"", ";"]}, "query_toks_no_values": {"en": ["select", "t1.name", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t2.language", "=", "value", "and", "t2.isofficial", "=", "value", "intersect", "select", "t1.name", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t2.language", "=", "value", "and", "t2.isofficial", "=", "value", ";"], "ru": ["select", "t1.name", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t2.language", "=", "value", "and", "t2.isofficial", "=", "value", "intersect", "select", "t1.name", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t2.language", "=", "value", "and", "t2.isofficial", "=", "value", ";"]}, "masked_query": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\" AND T2.IsOfficial  =  \"T\";", "question_pauq": {"ru": "\u041a\u0430\u043a \u043d\u0430\u0437\u044b\u0432\u0430\u044e\u0442\u0441\u044f \u0441\u0442\u0440\u0430\u043d\u044b, \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0432\u0430\u043a\u0430\u043d\u0434\u0438\u0439\u0441\u043a\u0438\u0439 \u0438 \u0434\u0436\u0435\u043d\u043e\u0448\u0438 \u044f\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u043e\u0444\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u043c\u0438 \u044f\u0437\u044b\u043a\u0430\u043c\u0438?"}, "question": "What are the names of nations where both English and French are official languages?", "kb_id": "world_1"}, {"id": "D_0750", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"\u0412\u0430\u043a\u0430\u043d\u0434\u0438\u0439\u0441\u043a\u0438\u0439\" AND T2.IsOfficial  =  \"T\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"\u0414\u0436\u0435\u043d\u043e\u0448\u0438\" AND T2.IsOfficial  =  \"T\";"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 23, false], null]]}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [[false, 2, [0, [0, 24, false], null], "\"English\"", null], "and", [false, 2, [0, [0, 25, false], null], "\"T\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": {"from": {"table_units": [["table_unit", 2], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 23, false], null]]}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [[false, 2, [0, [0, 24, false], null], "\"French\"", null], "and", [false, 2, [0, [0, 25, false], null], "\"T\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 23, false], null]]}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [[false, 2, [0, [0, 24, false], null], "\"\u0412\u0430\u043a\u0430\u043d\u0434\u0438\u0439\u0441\u043a\u0438\u0439\"", null], "and", [false, 2, [0, [0, 25, false], null], "\"T\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": {"from": {"table_units": [["table_unit", 2], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 23, false], null]]}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [[false, 2, [0, [0, 24, false], null], "\"\u0414\u0436\u0435\u043d\u043e\u0448\u0438\"", null], "and", [false, 2, [0, [0, 25, false], null], "\"T\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "union": null, "except": null}}, "question_toks": {"en": ["Give", "the", "names", "of", "countries", "with", "English", "and", "French", "as", "official", "languages", "."], "ru": ["\u041d\u0430\u0437\u043e\u0432\u0438\u0442\u0435", "\u0441\u0442\u0440\u0430\u043d\u044b", ",", "\u043e\u0444\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u043c\u0438", "\u044f\u0437\u044b\u043a\u0430\u043c\u0438", "\u043a\u043e\u0442\u043e\u0440\u044b\u0445", "\u044f\u0432\u043b\u044f\u044e\u0442\u0441\u044f", "\u0432\u0430\u043a\u0430\u043d\u0434\u0438\u0439\u0441\u043a\u0438\u0439", "\u0438", "\u0434\u0436\u0435\u043d\u043e\u0448\u0438", "."]}, "query_toks": {"en": ["select", "t1.name", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t2.language", "=", "\"English\"", "and", "t2.isofficial", "=", "\"T\"", "intersect", "select", "t1.name", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t2.language", "=", "\"French\"", "and", "t2.isofficial", "=", "\"T\"", ";"], "ru": ["select", "t1.name", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t2.language", "=", "\"\u0412\u0430\u043a\u0430\u043d\u0434\u0438\u0439\u0441\u043a\u0438\u0439\"", "and", "t2.isofficial", "=", "\"T\"", "intersect", "select", "t1.name", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t2.language", "=", "\"\u0414\u0436\u0435\u043d\u043e\u0448\u0438\"", "and", "t2.isofficial", "=", "\"T\"", ";"]}, "query_toks_no_values": {"en": ["select", "t1.name", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t2.language", "=", "value", "and", "t2.isofficial", "=", "value", "intersect", "select", "t1.name", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t2.language", "=", "value", "and", "t2.isofficial", "=", "value", ";"], "ru": ["select", "t1.name", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t2.language", "=", "value", "and", "t2.isofficial", "=", "value", "intersect", "select", "t1.name", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t2.language", "=", "value", "and", "t2.isofficial", "=", "value", ";"]}, "masked_query": "SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\" AND T2.IsOfficial  =  \"T\";", "question_pauq": {"ru": "\u041d\u0430\u0437\u043e\u0432\u0438\u0442\u0435 \u0441\u0442\u0440\u0430\u043d\u044b, \u043e\u0444\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u043c\u0438 \u044f\u0437\u044b\u043a\u0430\u043c\u0438 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u044f\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u0432\u0430\u043a\u0430\u043d\u0434\u0438\u0439\u0441\u043a\u0438\u0439 \u0438 \u0434\u0436\u0435\u043d\u043e\u0448\u0438."}, "question": "Give the names of countries with English and French as official languages.", "kb_id": "world_1"}, {"id": "D_0751", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"\u041a\u043b\u0438\u043d\u0433\u043e\u043d\u0441\u043a\u0438\u0439\";"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 23, false], null]]}, "select": [false, [[3, [0, [0, 10, true], null]]]], "where": [[false, 2, [0, [0, 24, false], null], "\"Chinese\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 23, false], null]]}, "select": [false, [[3, [0, [0, 10, true], null]]]], "where": [[false, 2, [0, [0, 24, false], null], "\"\u041a\u043b\u0438\u043d\u0433\u043e\u043d\u0441\u043a\u0438\u0439\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "number", "of", "distinct", "continents", "where", "Chinese", "is", "spoken", "?"], "ru": ["\u041d\u0430", "\u043a\u0430\u043a\u043e\u043c", "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0435", "\u0440\u0430\u0437\u043d\u044b\u0445", "\u043a\u043e\u043d\u0442\u0438\u043d\u0435\u043d\u0442\u043e\u0432", "\u0433\u043e\u0432\u043e\u0440\u044f\u0442", "\u043f\u043e-\u043a\u043b\u0438\u043d\u0433\u043e\u043d\u0441\u043a\u0438", "?"]}, "query_toks": {"en": ["select", "count", "(", "distinct", "continent", ")", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t2.language", "=", "\"Chinese\"", ";"], "ru": ["select", "count", "(", "distinct", "continent", ")", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t2.language", "=", "\"\u041a\u043b\u0438\u043d\u0433\u043e\u043d\u0441\u043a\u0438\u0439\"", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "distinct", "continent", ")", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t2.language", "=", "value", ";"], "ru": ["select", "count", "(", "distinct", "continent", ")", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t2.language", "=", "value", ";"]}, "masked_query": "SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Chinese\";", "question_pauq": {"ru": "\u041d\u0430 \u043a\u0430\u043a\u043e\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0435 \u0440\u0430\u0437\u043d\u044b\u0445 \u043a\u043e\u043d\u0442\u0438\u043d\u0435\u043d\u0442\u043e\u0432 \u0433\u043e\u0432\u043e\u0440\u044f\u0442 \u043f\u043e-\u043a\u043b\u0438\u043d\u0433\u043e\u043d\u0441\u043a\u0438?"}, "question": "What is the number of distinct continents where Chinese is spoken?", "kb_id": "world_1"}, {"id": "D_0752", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"\u041a\u043b\u0438\u043d\u0433\u043e\u043d\u0441\u043a\u0438\u0439\";"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 23, false], null]]}, "select": [false, [[3, [0, [0, 10, true], null]]]], "where": [[false, 2, [0, [0, 24, false], null], "\"Chinese\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 23, false], null]]}, "select": [false, [[3, [0, [0, 10, true], null]]]], "where": [[false, 2, [0, [0, 24, false], null], "\"\u041a\u043b\u0438\u043d\u0433\u043e\u043d\u0441\u043a\u0438\u0439\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["How", "many", "continents", "speak", "Chinese", "?"], "ru": ["\u041d\u0430", "\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445", "\u043a\u043e\u043d\u0442\u0438\u043d\u0435\u043d\u0442\u0430\u0445", "\u0433\u043e\u0432\u043e\u0440\u044f\u0442", "\u043f\u043e-\u043a\u043b\u0438\u043d\u0433\u043e\u043d\u0441\u043a\u0438", "?"]}, "query_toks": {"en": ["select", "count", "(", "distinct", "continent", ")", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t2.language", "=", "\"Chinese\"", ";"], "ru": ["select", "count", "(", "distinct", "continent", ")", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t2.language", "=", "\"\u041a\u043b\u0438\u043d\u0433\u043e\u043d\u0441\u043a\u0438\u0439\"", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "distinct", "continent", ")", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t2.language", "=", "value", ";"], "ru": ["select", "count", "(", "distinct", "continent", ")", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t2.language", "=", "value", ";"]}, "masked_query": "SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Chinese\";", "question_pauq": {"ru": "\u041d\u0430 \u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u043a\u043e\u043d\u0442\u0438\u043d\u0435\u043d\u0442\u0430\u0445 \u0433\u043e\u0432\u043e\u0440\u044f\u0442 \u043f\u043e-\u043a\u043b\u0438\u043d\u0433\u043e\u043d\u0441\u043a\u0438?"}, "question": "How many continents speak Chinese?", "kb_id": "world_1"}, {"id": "D_0753", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"\u0412\u0430\u043a\u0430\u043d\u0434\u0438\u0439\u0441\u043a\u0438\u0439\" OR T2.Language  =  \"\u041d\u043e\u0440\u0434\u043e\u0432\u0441\u043a\u0438\u0439\";"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 23, false], null]]}, "select": [true, [[0, [0, [0, 11, false], null]]]], "where": [[false, 2, [0, [0, 24, false], null], "\"English\"", null], "or", [false, 2, [0, [0, 24, false], null], "\"Dutch\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 23, false], null]]}, "select": [true, [[0, [0, [0, 11, false], null]]]], "where": [[false, 2, [0, [0, 24, false], null], "\"\u0412\u0430\u043a\u0430\u043d\u0434\u0438\u0439\u0441\u043a\u0438\u0439\"", null], "or", [false, 2, [0, [0, 24, false], null], "\"\u041d\u043e\u0440\u0434\u043e\u0432\u0441\u043a\u0438\u0439\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "the", "regions", "that", "use", "English", "or", "Dutch", "?"], "ru": ["\u0412", "\u043a\u0430\u043a\u0438\u0445", "\u0440\u0435\u0433\u0438\u043e\u043d\u0430\u0445", "\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f", "\u0432\u0430\u043a\u0430\u043d\u0434\u0438\u0439\u0441\u043a\u0438\u0439", "\u0438\u043b\u0438", "\u043d\u043e\u0440\u0434\u043e\u0432\u0441\u043a\u0438\u0439", "\u044f\u0437\u044b\u043a", "?"]}, "query_toks": {"en": ["select", "distinct", "t1.region", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t2.language", "=", "\"English\"", "or", "t2.language", "=", "\"Dutch\"", ";"], "ru": ["select", "distinct", "t1.region", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t2.language", "=", "\"\u0412\u0430\u043a\u0430\u043d\u0434\u0438\u0439\u0441\u043a\u0438\u0439\"", "or", "t2.language", "=", "\"\u041d\u043e\u0440\u0434\u043e\u0432\u0441\u043a\u0438\u0439\"", ";"]}, "query_toks_no_values": {"en": ["select", "distinct", "t1.region", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t2.language", "=", "value", "or", "t2.language", "=", "value", ";"], "ru": ["select", "distinct", "t1.region", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t2.language", "=", "value", "or", "t2.language", "=", "value", ";"]}, "masked_query": "SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" OR T2.Language  =  \"Dutch\";", "question_pauq": {"ru": "\u0412 \u043a\u0430\u043a\u0438\u0445 \u0440\u0435\u0433\u0438\u043e\u043d\u0430\u0445 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0432\u0430\u043a\u0430\u043d\u0434\u0438\u0439\u0441\u043a\u0438\u0439 \u0438\u043b\u0438 \u043d\u043e\u0440\u0434\u043e\u0432\u0441\u043a\u0438\u0439 \u044f\u0437\u044b\u043a?"}, "question": "What are the regions that use English or Dutch?", "kb_id": "world_1"}, {"id": "D_0754", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"\u0412\u0430\u043a\u0430\u043d\u0434\u0438\u0439\u0441\u043a\u0438\u0439\" OR T2.Language  =  \"\u041d\u043e\u0440\u0434\u043e\u0432\u0441\u043a\u0438\u0439\";"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 23, false], null]]}, "select": [true, [[0, [0, [0, 11, false], null]]]], "where": [[false, 2, [0, [0, 24, false], null], "\"English\"", null], "or", [false, 2, [0, [0, 24, false], null], "\"Dutch\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 23, false], null]]}, "select": [true, [[0, [0, [0, 11, false], null]]]], "where": [[false, 2, [0, [0, 24, false], null], "\"\u0412\u0430\u043a\u0430\u043d\u0434\u0438\u0439\u0441\u043a\u0438\u0439\"", null], "or", [false, 2, [0, [0, 24, false], null], "\"\u041d\u043e\u0440\u0434\u043e\u0432\u0441\u043a\u0438\u0439\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Which", "regions", "speak", "Dutch", "or", "English", "?"], "ru": ["\u0412", "\u043a\u0430\u043a\u0438\u0445", "\u0440\u0435\u0433\u0438\u043e\u043d\u0430\u0445", "\u0433\u043e\u0432\u043e\u0440\u044f\u0442", "\u043d\u0430", "\u043d\u043e\u0440\u0434\u043e\u0432\u0441\u043a\u043e\u043c", "\u0438\u043b\u0438", "\u0432\u0430\u043a\u0430\u043d\u0434\u0438\u0439\u0441\u043a\u043e\u043c", "?"]}, "query_toks": {"en": ["select", "distinct", "t1.region", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t2.language", "=", "\"English\"", "or", "t2.language", "=", "\"Dutch\"", ";"], "ru": ["select", "distinct", "t1.region", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t2.language", "=", "\"\u0412\u0430\u043a\u0430\u043d\u0434\u0438\u0439\u0441\u043a\u0438\u0439\"", "or", "t2.language", "=", "\"\u041d\u043e\u0440\u0434\u043e\u0432\u0441\u043a\u0438\u0439\"", ";"]}, "query_toks_no_values": {"en": ["select", "distinct", "t1.region", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t2.language", "=", "value", "or", "t2.language", "=", "value", ";"], "ru": ["select", "distinct", "t1.region", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t2.language", "=", "value", "or", "t2.language", "=", "value", ";"]}, "masked_query": "SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" OR T2.Language  =  \"Dutch\";", "question_pauq": {"ru": "\u0412 \u043a\u0430\u043a\u0438\u0445 \u0440\u0435\u0433\u0438\u043e\u043d\u0430\u0445 \u0433\u043e\u0432\u043e\u0440\u044f\u0442 \u043d\u0430 \u043d\u043e\u0440\u0434\u043e\u0432\u0441\u043a\u043e\u043c \u0438\u043b\u0438 \u0432\u0430\u043a\u0430\u043d\u0434\u0438\u0439\u0441\u043a\u043e\u043c?"}, "question": "Which regions speak Dutch or English?", "kb_id": "world_1"}, {"id": "D_0755", "source": "spider-dev", "type": "dev", "query": {"ru": "select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"\u0412\u0430\u043a\u0430\u043d\u0434\u0438\u0439\u0441\u043a\u0438\u0439\" and isofficial  =  \"T\" union select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"\u041d\u043e\u0440\u0434\u043e\u0432\u0441\u043a\u0438\u0439\" and isofficial  =  \"T\";"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 23, false], null]]}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [[false, 2, [0, [0, 24, false], null], "\"English\"", null], "and", [false, 2, [0, [0, 25, false], null], "\"T\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": {"from": {"table_units": [["table_unit", 2], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 23, false], null]]}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [[false, 2, [0, [0, 24, false], null], "\"Dutch\"", null], "and", [false, 2, [0, [0, 25, false], null], "\"T\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 23, false], null]]}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [[false, 2, [0, [0, 24, false], null], "\"\u0412\u0430\u043a\u0430\u043d\u0434\u0438\u0439\u0441\u043a\u0438\u0439\"", null], "and", [false, 2, [0, [0, 25, false], null], "\"T\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": {"from": {"table_units": [["table_unit", 2], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 23, false], null]]}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [[false, 2, [0, [0, 24, false], null], "\"\u041d\u043e\u0440\u0434\u043e\u0432\u0441\u043a\u0438\u0439\"", null], "and", [false, 2, [0, [0, 25, false], null], "\"T\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "except": null}}, "question_toks": {"en": ["What", "are", "the", "countries", "where", "either", "English", "or", "Dutch", "is", "the", "official", "language", "?"], "ru": ["\u0412", "\u043a\u0430\u043a\u0438\u0445", "\u0441\u0442\u0440\u0430\u043d\u0430\u0445", "\u0432\u0430\u043a\u0430\u043d\u0434\u0438\u0439\u0441\u043a\u0438\u0439", "\u0438\u043b\u0438", "\u043d\u043e\u0440\u0434\u043e\u0432\u0441\u043a\u0438\u0439", "\u044f\u0437\u044b\u043a", "\u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f", "\u043e\u0444\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u043c", "\u044f\u0437\u044b\u043a\u043e\u043c", "?"]}, "query_toks": {"en": ["select", "t1.name", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t2.language", "=", "\"English\"", "and", "isofficial", "=", "\"T\"", "union", "select", "t1.name", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t2.language", "=", "\"Dutch\"", "and", "isofficial", "=", "\"T\"", ";"], "ru": ["select", "t1.name", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t2.language", "=", "\"\u0412\u0430\u043a\u0430\u043d\u0434\u0438\u0439\u0441\u043a\u0438\u0439\"", "and", "isofficial", "=", "\"T\"", "union", "select", "t1.name", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t2.language", "=", "\"\u041d\u043e\u0440\u0434\u043e\u0432\u0441\u043a\u0438\u0439\"", "and", "isofficial", "=", "\"T\"", ";"]}, "query_toks_no_values": {"en": ["select", "t1.name", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t2.language", "=", "value", "and", "isofficial", "=", "value", "union", "select", "t1.name", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t2.language", "=", "value", "and", "isofficial", "=", "value", ";"], "ru": ["select", "t1.name", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t2.language", "=", "value", "and", "isofficial", "=", "value", "union", "select", "t1.name", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t2.language", "=", "value", "and", "isofficial", "=", "value", ";"]}, "masked_query": "select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"English\" and isofficial  =  \"T\" union select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"Dutch\" and isofficial  =  \"T\";", "question_pauq": {"ru": "\u0412 \u043a\u0430\u043a\u0438\u0445 \u0441\u0442\u0440\u0430\u043d\u0430\u0445 \u0432\u0430\u043a\u0430\u043d\u0434\u0438\u0439\u0441\u043a\u0438\u0439 \u0438\u043b\u0438 \u043d\u043e\u0440\u0434\u043e\u0432\u0441\u043a\u0438\u0439 \u044f\u0437\u044b\u043a \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043e\u0444\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u043c \u044f\u0437\u044b\u043a\u043e\u043c?"}, "question": "What are the countries where either English or Dutch is the official language ?", "kb_id": "world_1"}, {"id": "D_0756", "source": "spider-dev", "type": "dev", "query": {"ru": "select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"\u0412\u0430\u043a\u0430\u043d\u0434\u0438\u0439\u0441\u043a\u0438\u0439\" and isofficial  =  \"T\" union select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"\u041d\u043e\u0440\u0434\u043e\u0432\u0441\u043a\u0438\u0439\" and isofficial  =  \"T\";"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 23, false], null]]}, "select": [false, [[0, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 24, false], null], "\"English\"", null], "and", [false, 2, [0, [0, 25, false], null], "\"T\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": {"from": {"table_units": [["table_unit", 2], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 23, false], null]]}, "select": [false, [[0, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 24, false], null], "\"Dutch\"", null], "and", [false, 2, [0, [0, 25, false], null], "\"T\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 23, false], null]]}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [[false, 2, [0, [0, 24, false], null], "\"\u0412\u0430\u043a\u0430\u043d\u0434\u0438\u0439\u0441\u043a\u0438\u0439\"", null], "and", [false, 2, [0, [0, 25, false], null], "\"T\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": {"from": {"table_units": [["table_unit", 2], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 23, false], null]]}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [[false, 2, [0, [0, 24, false], null], "\"\u041d\u043e\u0440\u0434\u043e\u0432\u0441\u043a\u0438\u0439\"", null], "and", [false, 2, [0, [0, 25, false], null], "\"T\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "except": null}}, "question_toks": {"en": ["Which", "countries", "have", "either", "English", "or", "Dutch", "as", "an", "official", "language", "?"], "ru": ["\u0412", "\u043a\u0430\u043a\u0438\u0445", "\u0441\u0442\u0440\u0430\u043d\u0430\u0445", "\u0432\u0430\u043a\u0430\u043d\u0434\u0438\u0439\u0441\u043a\u0438\u0439", "\u0438\u043b\u0438", "\u043d\u043e\u0440\u0434\u043e\u0432\u0441\u043a\u0438\u0439", "\u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f", "\u043e\u0444\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u043c", "\u044f\u0437\u044b\u043a\u043e\u043c", "?"]}, "query_toks": {"en": ["select", "*", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t2.language", "=", "\"English\"", "and", "isofficial", "=", "\"T\"", "union", "select", "*", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t2.language", "=", "\"Dutch\"", "and", "isofficial", "=", "\"T\"", ";"], "ru": ["select", "t1.name", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t2.language", "=", "\"\u0412\u0430\u043a\u0430\u043d\u0434\u0438\u0439\u0441\u043a\u0438\u0439\"", "and", "isofficial", "=", "\"T\"", "union", "select", "t1.name", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t2.language", "=", "\"\u041d\u043e\u0440\u0434\u043e\u0432\u0441\u043a\u0438\u0439\"", "and", "isofficial", "=", "\"T\"", ";"]}, "query_toks_no_values": {"en": ["select", "*", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t2.language", "=", "value", "and", "isofficial", "=", "value", "union", "select", "*", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t2.language", "=", "value", "and", "isofficial", "=", "value", ";"], "ru": ["select", "t1.name", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t2.language", "=", "value", "and", "isofficial", "=", "value", "union", "select", "t1.name", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t2.language", "=", "value", "and", "isofficial", "=", "value", ";"]}, "masked_query": "SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND IsOfficial  =  \"T\" UNION SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\" AND IsOfficial  =  \"T\";", "question_pauq": {"ru": "\u0412 \u043a\u0430\u043a\u0438\u0445 \u0441\u0442\u0440\u0430\u043d\u0430\u0445 \u0432\u0430\u043a\u0430\u043d\u0434\u0438\u0439\u0441\u043a\u0438\u0439 \u0438\u043b\u0438 \u043d\u043e\u0440\u0434\u043e\u0432\u0441\u043a\u0438\u0439 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043e\u0444\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u043c \u044f\u0437\u044b\u043a\u043e\u043c?"}, "question": "Which countries have either English or Dutch as an official language?", "kb_id": "world_1"}, {"id": "D_0757", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  \"\u0410\u0442\u043b\u0430\u043d\u0442\u0438\u0434\u0430\" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 23, false], null]]}, "select": [false, [[0, [0, [0, 24, false], null]]]], "where": [[false, 2, [0, [0, 10, false], null], "\"Asia\"", null]], "groupBy": [[0, 24, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 23, false], null]]}, "select": [false, [[0, [0, [0, 24, false], null]]]], "where": [[false, 2, [0, [0, 10, false], null], "\"\u0410\u0442\u043b\u0430\u043d\u0442\u0438\u0434\u0430\"", null]], "groupBy": [[0, 24, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Which", "language", "is", "the", "most", "popular", "on", "the", "Asian", "continent", "?"], "ru": ["\u041a\u0430\u043a\u043e\u0439", "\u044f\u0437\u044b\u043a", "\u0441\u0430\u043c\u044b\u0439", "\u043f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u044b\u0439", "\u043d\u0430", "\u043a\u043e\u043d\u0442\u0438\u043d\u0435\u043d\u0442\u0435", "\u0410\u0442\u043b\u0430\u043d\u0442\u0438\u0434\u044b", "?"]}, "query_toks": {"en": ["select", "t2.language", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t1.continent", "=", "\"Asia\"", "group", "by", "t2.language", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"], "ru": ["select", "t2.language", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t1.continent", "=", "\"\u0410\u0442\u043b\u0430\u043d\u0442\u0438\u0434\u0430\"", "group", "by", "t2.language", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"]}, "query_toks_no_values": {"en": ["select", "t2.language", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t1.continent", "=", "value", "group", "by", "t2.language", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"], "ru": ["select", "t2.language", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t1.continent", "=", "value", "group", "by", "t2.language", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"]}, "masked_query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  \"Asia\" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1;", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0439 \u044f\u0437\u044b\u043a \u0441\u0430\u043c\u044b\u0439 \u043f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u044b\u0439 \u043d\u0430 \u043a\u043e\u043d\u0442\u0438\u043d\u0435\u043d\u0442\u0435 \u0410\u0442\u043b\u0430\u043d\u0442\u0438\u0434\u044b?"}, "question": "Which language is the most popular on the Asian continent?", "kb_id": "world_1"}, {"id": "D_0758", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  \"\u0410\u0442\u043b\u0430\u043d\u0442\u0438\u0434\u0430\" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 23, false], null]]}, "select": [false, [[0, [0, [0, 24, false], null]]]], "where": [[false, 2, [0, [0, 10, false], null], "\"Asia\"", null]], "groupBy": [[0, 24, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 23, false], null]]}, "select": [false, [[0, [0, [0, 24, false], null]]]], "where": [[false, 2, [0, [0, 10, false], null], "\"\u0410\u0442\u043b\u0430\u043d\u0442\u0438\u0434\u0430\"", null]], "groupBy": [[0, 24, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "language", "that", "is", "used", "by", "the", "largest", "number", "of", "Asian", "nations", "?"], "ru": ["\u041a\u0430\u043a\u043e\u0439", "\u044f\u0437\u044b\u043a", "\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f", "\u0431\u043e\u043b\u044c\u0448\u0438\u043d\u0441\u0442\u0432\u043e\u043c", "\u043d\u0430\u0440\u043e\u0434\u043e\u0432", "\u0410\u0442\u043b\u0430\u043d\u0442\u0438\u0434\u044b", "?"]}, "query_toks": {"en": ["select", "t2.language", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t1.continent", "=", "\"Asia\"", "group", "by", "t2.language", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"], "ru": ["select", "t2.language", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t1.continent", "=", "\"\u0410\u0442\u043b\u0430\u043d\u0442\u0438\u0434\u0430\"", "group", "by", "t2.language", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"]}, "query_toks_no_values": {"en": ["select", "t2.language", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t1.continent", "=", "value", "group", "by", "t2.language", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"], "ru": ["select", "t2.language", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t1.continent", "=", "value", "group", "by", "t2.language", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"]}, "masked_query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  \"Asia\" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1;", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0439 \u044f\u0437\u044b\u043a \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0431\u043e\u043b\u044c\u0448\u0438\u043d\u0441\u0442\u0432\u043e\u043c \u043d\u0430\u0440\u043e\u0434\u043e\u0432 \u0410\u0442\u043b\u0430\u043d\u0442\u0438\u0434\u044b?"}, "question": "What is the language that is used by the largest number of Asian nations?", "kb_id": "world_1"}, {"id": "D_0759", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  \"\u0410\u0431\u0441\u043e\u043b\u044e\u0442\u043d\u0430\u044f \u043c\u043e\u043d\u0430\u0440\u0445\u0438\u044f\" GROUP BY T2.Language HAVING COUNT(*)  =  1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 23, false], null]]}, "select": [false, [[0, [0, [0, 24, false], null]]]], "where": [[false, 2, [0, [0, 19, false], null], "\"Republic\"", null]], "groupBy": [[0, 24, false]], "having": [[false, 2, [0, [3, 0, false], null], 1.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 23, false], null]]}, "select": [false, [[0, [0, [0, 24, false], null]]]], "where": [[false, 2, [0, [0, 19, false], null], "\"\u0410\u0431\u0441\u043e\u043b\u044e\u0442\u043d\u0430\u044f \u043c\u043e\u043d\u0430\u0440\u0445\u0438\u044f\"", null]], "groupBy": [[0, 24, false]], "having": [[false, 2, [0, [3, 0, false], null], 1.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Which", "languages", "are", "spoken", "by", "only", "one", "country", "in", "republic", "governments", "?"], "ru": ["\u041d\u0430", "\u043a\u0430\u043a\u0438\u0445", "\u044f\u0437\u044b\u043a\u0430\u0445", "\u0433\u043e\u0432\u043e\u0440\u0438\u0442", "\u0442\u043e\u043b\u044c\u043a\u043e", "\u043e\u0434\u043d\u0430", "\u0441\u0442\u0440\u0430\u043d\u0430", "\u0441", "\u0430\u0431\u0441\u043e\u043b\u044e\u0442\u043d\u043e\u0439", "\u043c\u043e\u043d\u0430\u0440\u0445\u0438\u0435\u0439", "?"]}, "query_toks": {"en": ["select", "t2.language", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t1.governmentform", "=", "\"Republic\"", "group", "by", "t2.language", "having", "count", "(", "*", ")", "=", "1", ";"], "ru": ["select", "t2.language", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t1.governmentform", "=", "\"\u0410\u0431\u0441\u043e\u043b\u044e\u0442\u043d\u0430\u044f \u043c\u043e\u043d\u0430\u0440\u0445\u0438\u044f\"", "group", "by", "t2.language", "having", "count", "(", "*", ")", "=", "1", ";"]}, "query_toks_no_values": {"en": ["select", "t2.language", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t1.governmentform", "=", "value", "group", "by", "t2.language", "having", "count", "(", "*", ")", "=", "1", ";"], "ru": ["select", "t2.language", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t1.governmentform", "=", "value", "group", "by", "t2.language", "having", "count", "(", "*", ")", "=", "1", ";"]}, "masked_query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  \"Republic\" GROUP BY T2.Language HAVING COUNT(*)  =  1;", "question_pauq": {"ru": "\u041d\u0430 \u043a\u0430\u043a\u0438\u0445 \u044f\u0437\u044b\u043a\u0430\u0445 \u0433\u043e\u0432\u043e\u0440\u0438\u0442 \u0442\u043e\u043b\u044c\u043a\u043e \u043e\u0434\u043d\u0430 \u0441\u0442\u0440\u0430\u043d\u0430 \u0441 \u0430\u0431\u0441\u043e\u043b\u044e\u0442\u043d\u043e\u0439 \u043c\u043e\u043d\u0430\u0440\u0445\u0438\u0435\u0439?"}, "question": "Which languages are spoken by only one country in republic governments?", "kb_id": "world_1"}, {"id": "D_0760", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  \"\u0410\u0431\u0441\u043e\u043b\u044e\u0442\u043d\u0430\u044f \u043c\u043e\u043d\u0430\u0440\u0445\u0438\u044f\" GROUP BY T2.Language HAVING COUNT(*)  =  1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 23, false], null]]}, "select": [false, [[0, [0, [0, 24, false], null]]]], "where": [[false, 2, [0, [0, 19, false], null], "\"Republic\"", null]], "groupBy": [[0, 24, false]], "having": [[false, 2, [0, [3, 0, false], null], 1.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 23, false], null]]}, "select": [false, [[0, [0, [0, 24, false], null]]]], "where": [[false, 2, [0, [0, 19, false], null], "\"\u0410\u0431\u0441\u043e\u043b\u044e\u0442\u043d\u0430\u044f \u043c\u043e\u043d\u0430\u0440\u0445\u0438\u044f\"", null]], "groupBy": [[0, 24, false]], "having": [[false, 2, [0, [3, 0, false], null], 1.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "languages", "are", "only", "used", "by", "a", "single", "country", "with", "a", "republic", "government", "?"], "ru": ["\u041a\u0430\u043a\u0438\u0435", "\u044f\u0437\u044b\u043a\u0438", "\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f", "\u0442\u043e\u043b\u044c\u043a\u043e", "\u0432", "\u043e\u0434\u043d\u043e\u0439", "\u0441\u0442\u0440\u0430\u043d\u0435", "\u0441", "\u0430\u0431\u0441\u043e\u043b\u044e\u0442\u043d\u044b\u043c", "\u043c\u043e\u043d\u0430\u0440\u0445\u0438\u0447\u0435\u0441\u043a\u0438\u043c", "\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044c\u0441\u0442\u0432\u043e\u043c", "?"]}, "query_toks": {"en": ["select", "t2.language", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t1.governmentform", "=", "\"Republic\"", "group", "by", "t2.language", "having", "count", "(", "*", ")", "=", "1", ";"], "ru": ["select", "t2.language", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t1.governmentform", "=", "\"\u0410\u0431\u0441\u043e\u043b\u044e\u0442\u043d\u0430\u044f \u043c\u043e\u043d\u0430\u0440\u0445\u0438\u044f\"", "group", "by", "t2.language", "having", "count", "(", "*", ")", "=", "1", ";"]}, "query_toks_no_values": {"en": ["select", "t2.language", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t1.governmentform", "=", "value", "group", "by", "t2.language", "having", "count", "(", "*", ")", "=", "1", ";"], "ru": ["select", "t2.language", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t1.governmentform", "=", "value", "group", "by", "t2.language", "having", "count", "(", "*", ")", "=", "1", ";"]}, "masked_query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  \"Republic\" GROUP BY T2.Language HAVING COUNT(*)  =  1;", "question_pauq": {"ru": "\u041a\u0430\u043a\u0438\u0435 \u044f\u0437\u044b\u043a\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f \u0442\u043e\u043b\u044c\u043a\u043e \u0432 \u043e\u0434\u043d\u043e\u0439 \u0441\u0442\u0440\u0430\u043d\u0435 \u0441 \u0430\u0431\u0441\u043e\u043b\u044e\u0442\u043d\u044b\u043c \u043c\u043e\u043d\u0430\u0440\u0445\u0438\u0447\u0435\u0441\u043a\u0438\u043c \u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044c\u0441\u0442\u0432\u043e\u043c?"}, "question": "What languages are only used by a single country with a republic government?", "kb_id": "world_1"}, {"id": "D_0761", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  \"\u0412\u0430\u043a\u0430\u043d\u0434\u0438\u0439\u0441\u043a\u0438\u0439\" ORDER BY T1.Population DESC LIMIT 1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 3, false], null], [0, 23, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]], [0, [0, [0, 5, false], null]]]], "where": [[false, 2, [0, [0, 24, false], null], "\"English\"", null]], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 5, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 3, false], null], [0, 23, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]], [0, [0, [0, 5, false], null]]]], "where": [[false, 2, [0, [0, 24, false], null], "\"\u0412\u0430\u043a\u0430\u043d\u0434\u0438\u0439\u0441\u043a\u0438\u0439\"", null]], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 5, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Find", "the", "city", "with", "the", "largest", "population", "that", "uses", "English", "."], "ru": ["\u041d\u0430\u0439\u0434\u0438\u0442\u0435", "\u0433\u043e\u0440\u043e\u0434", "\u0441", "\u0441\u0430\u043c\u044b\u043c", "\u0431\u043e\u043b\u044c\u0448\u0438\u043c", "\u043d\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u0435\u043c", ",", "\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0449\u0438\u043c", "\u0432\u0430\u043a\u0430\u043d\u0434\u0438\u0439\u0441\u043a\u0438\u0439", "\u044f\u0437\u044b\u043a", "."]}, "query_toks": {"en": ["select", "t1.name", ",", "t1.population", "from", "city", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.countrycode", "=", "t2.countrycode", "where", "t2.language", "=", "\"English\"", "order", "by", "t1.population", "desc", "limit", "1", ";"], "ru": ["select", "t1.name", ",", "t1.population", "from", "city", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.countrycode", "=", "t2.countrycode", "where", "t2.language", "=", "\"\u0412\u0430\u043a\u0430\u043d\u0434\u0438\u0439\u0441\u043a\u0438\u0439\"", "order", "by", "t1.population", "desc", "limit", "1", ";"]}, "query_toks_no_values": {"en": ["select", "t1.name", ",", "t1.population", "from", "city", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.countrycode", "=", "t2.countrycode", "where", "t2.language", "=", "value", "order", "by", "t1.population", "desc", "limit", "1", ";"], "ru": ["select", "t1.name", ",", "t1.population", "from", "city", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.countrycode", "=", "t2.countrycode", "where", "t2.language", "=", "value", "order", "by", "t1.population", "desc", "limit", "1", ";"]}, "masked_query": "SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  \"English\" ORDER BY T1.Population DESC LIMIT 1;", "question_pauq": {"ru": "\u041d\u0430\u0439\u0434\u0438\u0442\u0435 \u0433\u043e\u0440\u043e\u0434 \u0441 \u0441\u0430\u043c\u044b\u043c \u0431\u043e\u043b\u044c\u0448\u0438\u043c \u043d\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u0435\u043c, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0449\u0438\u043c \u0432\u0430\u043a\u0430\u043d\u0434\u0438\u0439\u0441\u043a\u0438\u0439 \u044f\u0437\u044b\u043a."}, "question": "Find the city with the largest population that uses English.", "kb_id": "world_1"}, {"id": "D_0762", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  \"\u0412\u0430\u043a\u0430\u043d\u0434\u0438\u0439\u0441\u043a\u0438\u0439\" ORDER BY T1.Population DESC LIMIT 1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 3, false], null], [0, 23, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]], [0, [0, [0, 5, false], null]]]], "where": [[false, 2, [0, [0, 24, false], null], "\"English\"", null]], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 5, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 3, false], null], [0, 23, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]], [0, [0, [0, 5, false], null]]]], "where": [[false, 2, [0, [0, 24, false], null], "\"\u0412\u0430\u043a\u0430\u043d\u0434\u0438\u0439\u0441\u043a\u0438\u0439\"", null]], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 5, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "most", "populace", "city", "that", "speaks", "English", "?"], "ru": ["\u0412", "\u043a\u0430\u043a\u043e\u043c", "\u0433\u043e\u0440\u043e\u0434\u0435", "\u0441", "\u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0438\u043c", "\u043d\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u0435\u043c", "\u0433\u043e\u0432\u043e\u0440\u044f\u0442", "\u043f\u043e-\u0432\u0430\u043a\u0430\u043d\u0434\u0438\u0439\u0441\u043a\u0438", "?"]}, "query_toks": {"en": ["select", "t1.name", ",", "t1.population", "from", "city", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.countrycode", "=", "t2.countrycode", "where", "t2.language", "=", "\"English\"", "order", "by", "t1.population", "desc", "limit", "1", ";"], "ru": ["select", "t1.name", ",", "t1.population", "from", "city", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.countrycode", "=", "t2.countrycode", "where", "t2.language", "=", "\"\u0412\u0430\u043a\u0430\u043d\u0434\u0438\u0439\u0441\u043a\u0438\u0439\"", "order", "by", "t1.population", "desc", "limit", "1", ";"]}, "query_toks_no_values": {"en": ["select", "t1.name", ",", "t1.population", "from", "city", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.countrycode", "=", "t2.countrycode", "where", "t2.language", "=", "value", "order", "by", "t1.population", "desc", "limit", "1", ";"], "ru": ["select", "t1.name", ",", "t1.population", "from", "city", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.countrycode", "=", "t2.countrycode", "where", "t2.language", "=", "value", "order", "by", "t1.population", "desc", "limit", "1", ";"]}, "masked_query": "SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  \"English\" ORDER BY T1.Population DESC LIMIT 1;", "question_pauq": {"ru": "\u0412 \u043a\u0430\u043a\u043e\u043c \u0433\u043e\u0440\u043e\u0434\u0435 \u0441 \u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0438\u043c \u043d\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u0435\u043c \u0433\u043e\u0432\u043e\u0440\u044f\u0442 \u043f\u043e-\u0432\u0430\u043a\u0430\u043d\u0434\u0438\u0439\u0441\u043a\u0438?"}, "question": "What is the most populace city that speaks English?", "kb_id": "world_1"}, {"id": "D_0763", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"\u0410\u0442\u043b\u0430\u043d\u0442\u0438\u0434\u0430\" ORDER BY SurfaceArea DESC LIMIT 1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 9, false], null]], [0, [0, [0, 14, false], null]], [0, [0, [0, 15, false], null]]]], "where": [[false, 2, [0, [0, 10, false], null], "\"Asia\"", null]], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 12, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 9, false], null]], [0, [0, [0, 14, false], null]], [0, [0, [0, 15, false], null]]]], "where": [[false, 2, [0, [0, 10, false], null], "\"\u0410\u0442\u043b\u0430\u043d\u0442\u0438\u0434\u0430\"", null]], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 12, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Find", "the", "name", ",", "population", "and", "expected", "life", "length", "of", "asian", "country", "with", "the", "largest", "area", "?"], "ru": ["\u041d\u0430\u0439\u0434\u0438\u0442\u0435", "\u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435", ",", "\u043d\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u0435", "\u0438", "\u043e\u0436\u0438\u0434\u0430\u0435\u043c\u0443\u044e", "\u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c", "\u0436\u0438\u0437\u043d\u0438", "\u0441\u0442\u0440\u0430\u043d\u044b", "\u0432", "\u0410\u0442\u043b\u0430\u043d\u0442\u0438\u0434\u0435", "\u0441", "\u0441\u0430\u043c\u043e\u0439", "\u0431\u043e\u043b\u044c\u0448\u043e\u0439", "\u043f\u043b\u043e\u0449\u0430\u0434\u044c\u044e", "?"]}, "query_toks": {"en": ["select", "name", ",", "population", ",", "lifeexpectancy", "from", "country", "where", "continent", "=", "\"Asia\"", "order", "by", "surfacearea", "desc", "limit", "1", ";"], "ru": ["select", "name", ",", "population", ",", "lifeexpectancy", "from", "country", "where", "continent", "=", "\"\u0410\u0442\u043b\u0430\u043d\u0442\u0438\u0434\u0430\"", "order", "by", "surfacearea", "desc", "limit", "1", ";"]}, "query_toks_no_values": {"en": ["select", "name", ",", "population", ",", "lifeexpectancy", "from", "country", "where", "continent", "=", "value", "order", "by", "surfacearea", "desc", "limit", "1", ";"], "ru": ["select", "name", ",", "population", ",", "lifeexpectancy", "from", "country", "where", "continent", "=", "value", "order", "by", "surfacearea", "desc", "limit", "1", ";"]}, "masked_query": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1;", "question_pauq": {"ru": "\u041d\u0430\u0439\u0434\u0438\u0442\u0435 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435, \u043d\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u0435 \u0438 \u043e\u0436\u0438\u0434\u0430\u0435\u043c\u0443\u044e \u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0436\u0438\u0437\u043d\u0438 \u0441\u0442\u0440\u0430\u043d\u044b \u0432 \u0410\u0442\u043b\u0430\u043d\u0442\u0438\u0434\u0435 \u0441 \u0441\u0430\u043c\u043e\u0439 \u0431\u043e\u043b\u044c\u0448\u043e\u0439 \u043f\u043b\u043e\u0449\u0430\u0434\u044c\u044e?"}, "question": "Find the name, population and expected life length of asian country with the largest area?", "kb_id": "world_1"}, {"id": "D_0764", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"\u0410\u0442\u043b\u0430\u043d\u0442\u0438\u0434\u0430\" ORDER BY SurfaceArea DESC LIMIT 1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 9, false], null]], [0, [0, [0, 14, false], null]], [0, [0, [0, 15, false], null]]]], "where": [[false, 2, [0, [0, 10, false], null], "\"Asia\"", null]], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 12, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 9, false], null]], [0, [0, [0, 14, false], null]], [0, [0, [0, 15, false], null]]]], "where": [[false, 2, [0, [0, 10, false], null], "\"\u0410\u0442\u043b\u0430\u043d\u0442\u0438\u0434\u0430\"", null]], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 12, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "the", "name", ",", "population", ",", "and", "life", "expectancy", "of", "the", "largest", "Asian", "country", "by", "land", "?"], "ru": ["\u041a\u0430\u043a\u043e\u0432\u043e", "\u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435", ",", "\u043d\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u0435", "\u0438", "\u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c", "\u0436\u0438\u0437\u043d\u0438", "\u0441\u0430\u043c\u043e\u0439", "\u0431\u043e\u043b\u044c\u0448\u043e\u0439", "\u043f\u043e", "\u0442\u0435\u0440\u0440\u0438\u0442\u043e\u0440\u0438\u0438", "\u0441\u0443\u0448\u0438", "\u0441\u0442\u0440\u0430\u043d\u044b", "\u0432", "\u0410\u0442\u043b\u0430\u043d\u0442\u0438\u0434\u0435", "?"]}, "query_toks": {"en": ["select", "name", ",", "population", ",", "lifeexpectancy", "from", "country", "where", "continent", "=", "\"Asia\"", "order", "by", "surfacearea", "desc", "limit", "1", ";"], "ru": ["select", "name", ",", "population", ",", "lifeexpectancy", "from", "country", "where", "continent", "=", "\"\u0410\u0442\u043b\u0430\u043d\u0442\u0438\u0434\u0430\"", "order", "by", "surfacearea", "desc", "limit", "1", ";"]}, "query_toks_no_values": {"en": ["select", "name", ",", "population", ",", "lifeexpectancy", "from", "country", "where", "continent", "=", "value", "order", "by", "surfacearea", "desc", "limit", "1", ";"], "ru": ["select", "name", ",", "population", ",", "lifeexpectancy", "from", "country", "where", "continent", "=", "value", "order", "by", "surfacearea", "desc", "limit", "1", ";"]}, "masked_query": "SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1;", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0432\u043e \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435, \u043d\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u0435 \u0438 \u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0436\u0438\u0437\u043d\u0438 \u0441\u0430\u043c\u043e\u0439 \u0431\u043e\u043b\u044c\u0448\u043e\u0439 \u043f\u043e \u0442\u0435\u0440\u0440\u0438\u0442\u043e\u0440\u0438\u0438 \u0441\u0443\u0448\u0438 \u0441\u0442\u0440\u0430\u043d\u044b \u0432 \u0410\u0442\u043b\u0430\u043d\u0442\u0438\u0434\u0435?"}, "question": "What are the name, population, and life expectancy of the largest Asian country by land?", "kb_id": "world_1"}, {"id": "D_0765", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"\u0412\u0430\u043a\u0430\u043d\u0434\u0438\u0439\u0441\u043a\u0438\u0439\" AND T2.IsOfficial  =  \"T\");"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[5, [0, [0, 15, false], null]]]], "where": [[true, 8, [0, [0, 9, false], null], {"from": {"table_units": [["table_unit", 2], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 23, false], null]]}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [[false, 2, [0, [0, 24, false], null], "\"English\"", null], "and", [false, 2, [0, [0, 25, false], null], "\"T\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[5, [0, [0, 15, false], null]]]], "where": [[true, 8, [0, [0, 9, false], null], {"from": {"table_units": [["table_unit", 2], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 23, false], null]]}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [[false, 2, [0, [0, 24, false], null], "\"\u0412\u0430\u043a\u0430\u043d\u0434\u0438\u0439\u0441\u043a\u0438\u0439\"", null], "and", [false, 2, [0, [0, 25, false], null], "\"T\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "average", "life", "expectancy", "in", "the", "countries", "where", "English", "is", "not", "the", "official", "language", "?"], "ru": ["\u041a\u0430\u043a\u043e\u0432\u0430", "\u0441\u0440\u0435\u0434\u043d\u044f\u044f", "\u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c", "\u0436\u0438\u0437\u043d\u0438", "\u0432", "\u0441\u0442\u0440\u0430\u043d\u0430\u0445", ",", "\u0433\u0434\u0435", "\u0432\u0430\u043a\u0430\u043d\u0434\u0438\u0439\u0441\u043a\u0438\u0439", "\u043d\u0435", "\u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f", "\u043e\u0444\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u043c", "\u044f\u0437\u044b\u043a\u043e\u043c", "?"]}, "query_toks": {"en": ["select", "avg", "(", "lifeexpectancy", ")", "from", "country", "where", "name", "not", "in", "(", "select", "t1.name", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t2.language", "=", "\"English\"", "and", "t2.isofficial", "=", "\"T\"", ")", ";"], "ru": ["select", "avg", "(", "lifeexpectancy", ")", "from", "country", "where", "name", "not", "in", "(", "select", "t1.name", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t2.language", "=", "\"\u0412\u0430\u043a\u0430\u043d\u0434\u0438\u0439\u0441\u043a\u0438\u0439\"", "and", "t2.isofficial", "=", "\"T\"", ")", ";"]}, "query_toks_no_values": {"en": ["select", "avg", "(", "lifeexpectancy", ")", "from", "country", "where", "name", "not", "in", "(", "select", "t1.name", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t2.language", "=", "value", "and", "t2.isofficial", "=", "value", ")", ";"], "ru": ["select", "avg", "(", "lifeexpectancy", ")", "from", "country", "where", "name", "not", "in", "(", "select", "t1.name", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t2.language", "=", "value", "and", "t2.isofficial", "=", "value", ")", ";"]}, "masked_query": "SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\");", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0432\u0430 \u0441\u0440\u0435\u0434\u043d\u044f\u044f \u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0436\u0438\u0437\u043d\u0438 \u0432 \u0441\u0442\u0440\u0430\u043d\u0430\u0445, \u0433\u0434\u0435 \u0432\u0430\u043a\u0430\u043d\u0434\u0438\u0439\u0441\u043a\u0438\u0439 \u043d\u0435 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043e\u0444\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u043c \u044f\u0437\u044b\u043a\u043e\u043c?"}, "question": "What is average life expectancy in the countries where English is not the official language?", "kb_id": "world_1"}, {"id": "D_0766", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"\u0412\u0430\u043a\u0430\u043d\u0434\u0438\u0439\u0441\u043a\u0438\u0439\" AND T2.IsOfficial  =  \"T\");"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[5, [0, [0, 15, false], null]]]], "where": [[true, 8, [0, [0, 9, false], null], {"from": {"table_units": [["table_unit", 2], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 23, false], null]]}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [[false, 2, [0, [0, 24, false], null], "\"English\"", null], "and", [false, 2, [0, [0, 25, false], null], "\"T\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[5, [0, [0, 15, false], null]]]], "where": [[true, 8, [0, [0, 9, false], null], {"from": {"table_units": [["table_unit", 2], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 23, false], null]]}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [[false, 2, [0, [0, 24, false], null], "\"\u0412\u0430\u043a\u0430\u043d\u0434\u0438\u0439\u0441\u043a\u0438\u0439\"", null], "and", [false, 2, [0, [0, 25, false], null], "\"T\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Give", "the", "mean", "life", "expectancy", "of", "countries", "in", "which", "English", "is", "not", "the", "official", "language", "."], "ru": ["\u041f\u0440\u0438\u0432\u0435\u0434\u0438\u0442\u0435", "\u0441\u0440\u0435\u0434\u043d\u044e\u044e", "\u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c", "\u0436\u0438\u0437\u043d\u0438", "\u0432", "\u0441\u0442\u0440\u0430\u043d\u0430\u0445", ",", "\u0432", "\u043a\u043e\u0442\u043e\u0440\u044b\u0445", "\u0432\u0430\u043a\u0430\u043d\u0434\u0438\u0439\u0441\u043a\u0438\u0439", "\u043d\u0435", "\u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f", "\u043e\u0444\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u043c", "\u044f\u0437\u044b\u043a\u043e\u043c", "."]}, "query_toks": {"en": ["select", "avg", "(", "lifeexpectancy", ")", "from", "country", "where", "name", "not", "in", "(", "select", "t1.name", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t2.language", "=", "\"English\"", "and", "t2.isofficial", "=", "\"T\"", ")", ";"], "ru": ["select", "avg", "(", "lifeexpectancy", ")", "from", "country", "where", "name", "not", "in", "(", "select", "t1.name", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t2.language", "=", "\"\u0412\u0430\u043a\u0430\u043d\u0434\u0438\u0439\u0441\u043a\u0438\u0439\"", "and", "t2.isofficial", "=", "\"T\"", ")", ";"]}, "query_toks_no_values": {"en": ["select", "avg", "(", "lifeexpectancy", ")", "from", "country", "where", "name", "not", "in", "(", "select", "t1.name", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t2.language", "=", "value", "and", "t2.isofficial", "=", "value", ")", ";"], "ru": ["select", "avg", "(", "lifeexpectancy", ")", "from", "country", "where", "name", "not", "in", "(", "select", "t1.name", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t2.language", "=", "value", "and", "t2.isofficial", "=", "value", ")", ";"]}, "masked_query": "SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\");", "question_pauq": {"ru": "\u041f\u0440\u0438\u0432\u0435\u0434\u0438\u0442\u0435 \u0441\u0440\u0435\u0434\u043d\u044e\u044e \u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0436\u0438\u0437\u043d\u0438 \u0432 \u0441\u0442\u0440\u0430\u043d\u0430\u0445, \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0432\u0430\u043a\u0430\u043d\u0434\u0438\u0439\u0441\u043a\u0438\u0439 \u043d\u0435 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043e\u0444\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u043c \u044f\u0437\u044b\u043a\u043e\u043c."}, "question": "Give the mean life expectancy of countries in which English is not the official language.", "kb_id": "world_1"}, {"id": "D_0767", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"\u0412\u0430\u043a\u0430\u043d\u0434\u0438\u0439\u0441\u043a\u0438\u0439\");"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[4, [0, [0, 14, false], null]]]], "where": [[true, 8, [0, [0, 9, false], null], {"from": {"table_units": [["table_unit", 2], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 23, false], null]]}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [[false, 2, [0, [0, 24, false], null], "\"English\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[4, [0, [0, 14, false], null]]]], "where": [[true, 8, [0, [0, 9, false], null], {"from": {"table_units": [["table_unit", 2], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 23, false], null]]}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [[false, 2, [0, [0, 24, false], null], "\"\u0412\u0430\u043a\u0430\u043d\u0434\u0438\u0439\u0441\u043a\u0438\u0439\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "total", "number", "of", "people", "living", "in", "the", "nations", "that", "do", "not", "use", "English", "?"], "ru": ["\u041a\u0430\u043a\u043e\u0432\u043e", "\u043e\u0431\u0449\u0435\u0435", "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e", "\u043b\u044e\u0434\u0435\u0439", ",", "\u043f\u0440\u043e\u0436\u0438\u0432\u0430\u044e\u0449\u0438\u0445", "\u0432", "\u0441\u0442\u0440\u0430\u043d\u0430\u0445", ",", "\u043d\u0435", "\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0449\u0438\u0445", "\u0432\u0430\u043a\u0430\u043d\u0434\u0438\u0439\u0441\u043a\u0438\u0439", "\u044f\u0437\u044b\u043a", "?"]}, "query_toks": {"en": ["select", "sum", "(", "population", ")", "from", "country", "where", "name", "not", "in", "(", "select", "t1.name", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t2.language", "=", "\"English\"", ")", ";"], "ru": ["select", "sum", "(", "population", ")", "from", "country", "where", "name", "not", "in", "(", "select", "t1.name", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t2.language", "=", "\"\u0412\u0430\u043a\u0430\u043d\u0434\u0438\u0439\u0441\u043a\u0438\u0439\"", ")", ";"]}, "query_toks_no_values": {"en": ["select", "sum", "(", "population", ")", "from", "country", "where", "name", "not", "in", "(", "select", "t1.name", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t2.language", "=", "value", ")", ";"], "ru": ["select", "sum", "(", "population", ")", "from", "country", "where", "name", "not", "in", "(", "select", "t1.name", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t2.language", "=", "value", ")", ";"]}, "masked_query": "SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\");", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0432\u043e \u043e\u0431\u0449\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043b\u044e\u0434\u0435\u0439, \u043f\u0440\u043e\u0436\u0438\u0432\u0430\u044e\u0449\u0438\u0445 \u0432 \u0441\u0442\u0440\u0430\u043d\u0430\u0445, \u043d\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0449\u0438\u0445 \u0432\u0430\u043a\u0430\u043d\u0434\u0438\u0439\u0441\u043a\u0438\u0439 \u044f\u0437\u044b\u043a?"}, "question": "What is the total number of people living in the nations that do not use English?", "kb_id": "world_1"}, {"id": "D_0768", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"\u0412\u0430\u043a\u0430\u043d\u0434\u0438\u0439\u0441\u043a\u0438\u0439\");"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[4, [0, [0, 14, false], null]]]], "where": [[true, 8, [0, [0, 9, false], null], {"from": {"table_units": [["table_unit", 2], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 23, false], null]]}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [[false, 2, [0, [0, 24, false], null], "\"English\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[4, [0, [0, 14, false], null]]]], "where": [[true, 8, [0, [0, 9, false], null], {"from": {"table_units": [["table_unit", 2], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 23, false], null]]}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [[false, 2, [0, [0, 24, false], null], "\"\u0412\u0430\u043a\u0430\u043d\u0434\u0438\u0439\u0441\u043a\u0438\u0439\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["How", "many", "people", "live", "in", "countries", "that", "do", "not", "speak", "English", "?"], "ru": ["\u0421\u043a\u043e\u043b\u044c\u043a\u043e", "\u043b\u044e\u0434\u0435\u0439", "\u0436\u0438\u0432\u0435\u0442", "\u0432", "\u0441\u0442\u0440\u0430\u043d\u0430\u0445", ",", "\u0433\u0434\u0435", "\u043d\u0435", "\u0433\u043e\u0432\u043e\u0440\u044f\u0442", "\u043f\u043e-\u0432\u0430\u043a\u0430\u043d\u0434\u0438\u0439\u0441\u043a\u0438", "?"]}, "query_toks": {"en": ["select", "sum", "(", "population", ")", "from", "country", "where", "name", "not", "in", "(", "select", "t1.name", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t2.language", "=", "\"English\"", ")", ";"], "ru": ["select", "sum", "(", "population", ")", "from", "country", "where", "name", "not", "in", "(", "select", "t1.name", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t2.language", "=", "\"\u0412\u0430\u043a\u0430\u043d\u0434\u0438\u0439\u0441\u043a\u0438\u0439\"", ")", ";"]}, "query_toks_no_values": {"en": ["select", "sum", "(", "population", ")", "from", "country", "where", "name", "not", "in", "(", "select", "t1.name", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t2.language", "=", "value", ")", ";"], "ru": ["select", "sum", "(", "population", ")", "from", "country", "where", "name", "not", "in", "(", "select", "t1.name", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t2.language", "=", "value", ")", ";"]}, "masked_query": "SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\");", "question_pauq": {"ru": "\u0421\u043a\u043e\u043b\u044c\u043a\u043e \u043b\u044e\u0434\u0435\u0439 \u0436\u0438\u0432\u0435\u0442 \u0432 \u0441\u0442\u0440\u0430\u043d\u0430\u0445, \u0433\u0434\u0435 \u043d\u0435 \u0433\u043e\u0432\u043e\u0440\u044f\u0442 \u043f\u043e-\u0432\u0430\u043a\u0430\u043d\u0434\u0438\u0439\u0441\u043a\u0438?"}, "question": "How many people live in countries that do not speak English?", "kb_id": "world_1"}, {"id": "D_0769", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  \"\u0410\u043d\u0433\u0435\u043b\u0430\" AND T2.IsOfficial  =  \"T\";"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 23, false], null]]}, "select": [false, [[0, [0, [0, 24, false], null]]]], "where": [[false, 2, [0, [0, 20, false], null], "\"Beatrix\"", null], "and", [false, 2, [0, [0, 25, false], null], "\"T\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 23, false], null]]}, "select": [false, [[0, [0, [0, 24, false], null]]]], "where": [[false, 2, [0, [0, 20, false], null], "\"\u0410\u043d\u0433\u0435\u043b\u0430\"", null], "and", [false, 2, [0, [0, 25, false], null], "\"T\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "official", "language", "spoken", "in", "the", "country", "whose", "head", "of", "state", "is", "Beatrix", "?"], "ru": ["\u041d\u0430", "\u043a\u0430\u043a\u043e\u043c", "\u043e\u0444\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u043c", "\u044f\u0437\u044b\u043a\u0435", "\u0433\u043e\u0432\u043e\u0440\u044f\u0442", "\u0432", "\u0441\u0442\u0440\u0430\u043d\u0435", ",", "\u0433\u043b\u0430\u0432\u043e\u0439", "\u0433\u043e\u0441\u0443\u0434\u0430\u0440\u0441\u0442\u0432\u0430", "\u043a\u043e\u0442\u043e\u0440\u043e\u0439", "\u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f", "\u0410\u043d\u0433\u0435\u043b\u0430", "?"]}, "query_toks": {"en": ["select", "t2.language", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t1.headofstate", "=", "\"Beatrix\"", "and", "t2.isofficial", "=", "\"T\"", ";"], "ru": ["select", "t2.language", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t1.headofstate", "=", "\"\u0410\u043d\u0433\u0435\u043b\u0430\"", "and", "t2.isofficial", "=", "\"T\"", ";"]}, "query_toks_no_values": {"en": ["select", "t2.language", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t1.headofstate", "=", "value", "and", "t2.isofficial", "=", "value", ";"], "ru": ["select", "t2.language", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t1.headofstate", "=", "value", "and", "t2.isofficial", "=", "value", ";"]}, "masked_query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  \"Beatrix\" AND T2.IsOfficial  =  \"T\";", "question_pauq": {"ru": "\u041d\u0430 \u043a\u0430\u043a\u043e\u043c \u043e\u0444\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u043c \u044f\u0437\u044b\u043a\u0435 \u0433\u043e\u0432\u043e\u0440\u044f\u0442 \u0432 \u0441\u0442\u0440\u0430\u043d\u0435, \u0433\u043b\u0430\u0432\u043e\u0439 \u0433\u043e\u0441\u0443\u0434\u0430\u0440\u0441\u0442\u0432\u0430 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0410\u043d\u0433\u0435\u043b\u0430?"}, "question": "What is the official language spoken in the country whose head of state is Beatrix?", "kb_id": "world_1"}, {"id": "D_0770", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  \"\u0410\u043d\u0433\u0435\u043b\u0430\" AND T2.IsOfficial  =  \"T\";"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 23, false], null]]}, "select": [false, [[0, [0, [0, 24, false], null]]]], "where": [[false, 2, [0, [0, 20, false], null], "\"Beatrix\"", null], "and", [false, 2, [0, [0, 25, false], null], "\"T\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 23, false], null]]}, "select": [false, [[0, [0, [0, 24, false], null]]]], "where": [[false, 2, [0, [0, 20, false], null], "\"\u0410\u043d\u0433\u0435\u043b\u0430\"", null], "and", [false, 2, [0, [0, 25, false], null], "\"T\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "official", "language", "used", "in", "the", "country", "the", "name", "of", "whose", "head", "of", "state", "is", "Beatrix", "."], "ru": ["\u041a\u0430\u043a\u043e\u0439", "\u043e\u0444\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0439", "\u044f\u0437\u044b\u043a", "\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f", "\u0432", "\u0441\u0442\u0440\u0430\u043d\u0435", ",", "\u0433\u043b\u0430\u0432\u0443", "\u0433\u043e\u0441\u0443\u0434\u0430\u0440\u0441\u0442\u0432\u0430", "\u043a\u043e\u0442\u043e\u0440\u043e\u0439", "\u0437\u043e\u0432\u0443\u0442", "\u0410\u043d\u0433\u0435\u043b\u0430", "?"]}, "query_toks": {"en": ["select", "t2.language", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t1.headofstate", "=", "\"Beatrix\"", "and", "t2.isofficial", "=", "\"T\"", ";"], "ru": ["select", "t2.language", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t1.headofstate", "=", "\"\u0410\u043d\u0433\u0435\u043b\u0430\"", "and", "t2.isofficial", "=", "\"T\"", ";"]}, "query_toks_no_values": {"en": ["select", "t2.language", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t1.headofstate", "=", "value", "and", "t2.isofficial", "=", "value", ";"], "ru": ["select", "t2.language", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "t1.headofstate", "=", "value", "and", "t2.isofficial", "=", "value", ";"]}, "masked_query": "SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  \"Beatrix\" AND T2.IsOfficial  =  \"T\";", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0439 \u043e\u0444\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0439 \u044f\u0437\u044b\u043a \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0432 \u0441\u0442\u0440\u0430\u043d\u0435, \u0433\u043b\u0430\u0432\u0443 \u0433\u043e\u0441\u0443\u0434\u0430\u0440\u0441\u0442\u0432\u0430 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u0437\u043e\u0432\u0443\u0442 \u0410\u043d\u0433\u0435\u043b\u0430?"}, "question": "What is the official language used in the country the name of whose head of state is Beatrix.", "kb_id": "world_1"}, {"id": "D_0771", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\";"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 23, false], null]]}, "select": [false, [[3, [0, [0, 24, true], null]]]], "where": [[false, 4, [0, [0, 13, false], null], 1930.0, null], "and", [false, 2, [0, [0, 25, false], null], "\"T\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 23, false], null]]}, "select": [false, [[3, [0, [0, 24, true], null]]]], "where": [[false, 4, [0, [0, 13, false], null], 1930.0, null], "and", [false, 2, [0, [0, 25, false], null], "\"T\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "total", "number", "of", "unique", "official", "languages", "spoken", "in", "the", "countries", "that", "are", "founded", "before", "1930", "?"], "ru": ["\u041a\u0430\u043a\u043e\u0432\u043e", "\u043e\u0431\u0449\u0435\u0435", "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e", "\u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0445", "\u043e\u0444\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0445", "\u044f\u0437\u044b\u043a\u043e\u0432", ",", "\u043d\u0430", "\u043a\u043e\u0442\u043e\u0440\u044b\u0445", "\u0433\u043e\u0432\u043e\u0440\u044f\u0442", "\u0432", "\u0441\u0442\u0440\u0430\u043d\u0430\u0445", ",", "\u043e\u0441\u043d\u043e\u0432\u0430\u043d\u043d\u044b\u0445", "\u0434\u043e", "1930", "\u0433\u043e\u0434\u0430", "?"]}, "query_toks": {"en": ["select", "count", "(", "distinct", "t2.language", ")", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "indepyear", "<", "1930", "and", "t2.isofficial", "=", "\"T\"", ";"], "ru": ["select", "count", "(", "distinct", "t2.language", ")", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "indepyear", "<", "1930", "and", "t2.isofficial", "=", "\"T\"", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "distinct", "t2.language", ")", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "indepyear", "<", "1930", "and", "t2.isofficial", "=", "value", ";"], "ru": ["select", "count", "(", "distinct", "t2.language", ")", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "indepyear", "<", "1930", "and", "t2.isofficial", "=", "value", ";"]}, "masked_query": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\";", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0432\u043e \u043e\u0431\u0449\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0445 \u043e\u0444\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u044f\u0437\u044b\u043a\u043e\u0432, \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0433\u043e\u0432\u043e\u0440\u044f\u0442 \u0432 \u0441\u0442\u0440\u0430\u043d\u0430\u0445, \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u0434\u043e 1930 \u0433\u043e\u0434\u0430?"}, "question": "What is the total number of unique official languages spoken in the countries that are founded before 1930?", "kb_id": "world_1"}, {"id": "D_0772", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\";"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 23, false], null]]}, "select": [false, [[3, [0, [0, 24, true], null]]]], "where": [[false, 4, [0, [0, 13, false], null], 1930.0, null], "and", [false, 2, [0, [0, 25, false], null], "\"T\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 23, false], null]]}, "select": [false, [[3, [0, [0, 24, true], null]]]], "where": [[false, 4, [0, [0, 13, false], null], 1930.0, null], "and", [false, 2, [0, [0, 25, false], null], "\"T\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["For", "the", "countries", "founded", "before", "1930", ",", "what", "is", "the", "total", "number", "of", "distinct", "official", "languages", "?"], "ru": ["\u041a\u0430\u043a\u043e\u0432\u043e", "\u043e\u0431\u0449\u0435\u0435", "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e", "\u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445", "\u043e\u0444\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0445", "\u044f\u0437\u044b\u043a\u043e\u0432", "\u0432", "\u0441\u0442\u0440\u0430\u043d\u0430\u0445", ",", "\u043e\u0441\u043d\u043e\u0432\u0430\u043d\u043d\u044b\u0445", "\u0434\u043e", "1930", "\u0433\u043e\u0434\u0430", "?"]}, "query_toks": {"en": ["select", "count", "(", "distinct", "t2.language", ")", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "indepyear", "<", "1930", "and", "t2.isofficial", "=", "\"T\"", ";"], "ru": ["select", "count", "(", "distinct", "t2.language", ")", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "indepyear", "<", "1930", "and", "t2.isofficial", "=", "\"T\"", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "distinct", "t2.language", ")", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "indepyear", "<", "1930", "and", "t2.isofficial", "=", "value", ";"], "ru": ["select", "count", "(", "distinct", "t2.language", ")", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "where", "indepyear", "<", "1930", "and", "t2.isofficial", "=", "value", ";"]}, "masked_query": "SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\";", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0432\u043e \u043e\u0431\u0449\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u043e\u0444\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0445 \u044f\u0437\u044b\u043a\u043e\u0432 \u0432 \u0441\u0442\u0440\u0430\u043d\u0430\u0445, \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u0434\u043e 1930 \u0433\u043e\u0434\u0430?"}, "question": "For the countries founded before 1930, what is the total number of distinct official languages?", "kb_id": "world_1"}, {"id": "D_0773", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  \"\u041b\u0435\u043c\u0443\u0440\u0438\u044f\");"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [[false, 3, [0, [0, 12, false], null], {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[2, [0, [0, 12, false], null]]]], "where": [[false, 2, [0, [0, 10, false], null], "\"Europe\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [[false, 3, [0, [0, 12, false], null], {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[2, [0, [0, 12, false], null]]]], "where": [[false, 2, [0, [0, 10, false], null], "\"\u041b\u0435\u043c\u0443\u0440\u0438\u044f\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "the", "countries", "that", "have", "greater", "surface", "area", "than", "any", "country", "in", "Europe", "?"], "ru": ["\u041a\u0430\u043a\u0438\u0435", "\u0441\u0442\u0440\u0430\u043d\u044b", "\u0438\u043c\u0435\u044e\u0442", "\u0431\u043e\u043b\u044c\u0448\u0443\u044e", "\u043f\u043b\u043e\u0449\u0430\u0434\u044c", ",", "\u0447\u0435\u043c", "\u043b\u044e\u0431\u0430\u044f", "\u0441\u0442\u0440\u0430\u043d\u0430", "\u0432", "\u041b\u0435\u043c\u0443\u0440\u0438\u0438", "?"]}, "query_toks": {"en": ["select", "name", "from", "country", "where", "surfacearea", ">", "(", "select", "min", "(", "surfacearea", ")", "from", "country", "where", "continent", "=", "\"Europe\"", ")", ";"], "ru": ["select", "name", "from", "country", "where", "surfacearea", ">", "(", "select", "min", "(", "surfacearea", ")", "from", "country", "where", "continent", "=", "\"\u041b\u0435\u043c\u0443\u0440\u0438\u044f\"", ")", ";"]}, "query_toks_no_values": {"en": ["select", "name", "from", "country", "where", "surfacearea", ">", "(", "select", "min", "(", "surfacearea", ")", "from", "country", "where", "continent", "=", "value", ")", ";"], "ru": ["select", "name", "from", "country", "where", "surfacearea", ">", "(", "select", "min", "(", "surfacearea", ")", "from", "country", "where", "continent", "=", "value", ")", ";"]}, "masked_query": "SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  \"Europe\");", "question_pauq": {"ru": "\u041a\u0430\u043a\u0438\u0435 \u0441\u0442\u0440\u0430\u043d\u044b \u0438\u043c\u0435\u044e\u0442 \u0431\u043e\u043b\u044c\u0448\u0443\u044e \u043f\u043b\u043e\u0449\u0430\u0434\u044c, \u0447\u0435\u043c \u043b\u044e\u0431\u0430\u044f \u0441\u0442\u0440\u0430\u043d\u0430 \u0432 \u041b\u0435\u043c\u0443\u0440\u0438\u0438?"}, "question": "What are the countries that have greater surface area than any country in Europe?", "kb_id": "world_1"}, {"id": "D_0774", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  \"\u041b\u0435\u043c\u0443\u0440\u0438\u044f\");"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [[false, 3, [0, [0, 12, false], null], {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[2, [0, [0, 12, false], null]]]], "where": [[false, 2, [0, [0, 10, false], null], "\"Europe\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [[false, 3, [0, [0, 12, false], null], {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[2, [0, [0, 12, false], null]]]], "where": [[false, 2, [0, [0, 10, false], null], "\"\u041b\u0435\u043c\u0443\u0440\u0438\u044f\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Which", "countries", "have", "greater", "area", "than", "that", "of", "any", "country", "in", "Europe", "?"], "ru": ["\u041a\u0430\u043a\u0438\u0435", "\u0441\u0442\u0440\u0430\u043d\u044b", "\u0438\u043c\u0435\u044e\u0442", "\u0431\u043e\u043b\u044c\u0448\u0443\u044e", "\u043f\u043b\u043e\u0449\u0430\u0434\u044c", ",", "\u0447\u0435\u043c", "\u0443", "\u043b\u044e\u0431\u043e\u0439", "\u0441\u0442\u0440\u0430\u043d\u044b", "\u041b\u0435\u043c\u0443\u0440\u0438\u0438", "?"]}, "query_toks": {"en": ["select", "name", "from", "country", "where", "surfacearea", ">", "(", "select", "min", "(", "surfacearea", ")", "from", "country", "where", "continent", "=", "\"Europe\"", ")", ";"], "ru": ["select", "name", "from", "country", "where", "surfacearea", ">", "(", "select", "min", "(", "surfacearea", ")", "from", "country", "where", "continent", "=", "\"\u041b\u0435\u043c\u0443\u0440\u0438\u044f\"", ")", ";"]}, "query_toks_no_values": {"en": ["select", "name", "from", "country", "where", "surfacearea", ">", "(", "select", "min", "(", "surfacearea", ")", "from", "country", "where", "continent", "=", "value", ")", ";"], "ru": ["select", "name", "from", "country", "where", "surfacearea", ">", "(", "select", "min", "(", "surfacearea", ")", "from", "country", "where", "continent", "=", "value", ")", ";"]}, "masked_query": "SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  \"Europe\");", "question_pauq": {"ru": "\u041a\u0430\u043a\u0438\u0435 \u0441\u0442\u0440\u0430\u043d\u044b \u0438\u043c\u0435\u044e\u0442 \u0431\u043e\u043b\u044c\u0448\u0443\u044e \u043f\u043b\u043e\u0449\u0430\u0434\u044c, \u0447\u0435\u043c \u0443 \u043b\u044e\u0431\u043e\u0439 \u0441\u0442\u0440\u0430\u043d\u044b \u041b\u0435\u043c\u0443\u0440\u0438\u0438?"}, "question": "Which countries have greater area than that of any country in Europe?", "kb_id": "world_1"}, {"id": "D_0775", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT Name FROM country WHERE Continent  =  \"\u0413\u0438\u043f\u0435\u0440\u0431\u043e\u0440\u0435\u044f\"  AND population  <  (SELECT max(population) FROM country WHERE Continent  =  \"\u0410\u0442\u043b\u0430\u043d\u0442\u0438\u0434\u0430\");"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [[false, 2, [0, [0, 10, false], null], "\"Africa\"", null], "and", [false, 4, [0, [0, 14, false], null], {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[1, [0, [0, 14, false], null]]]], "where": [[false, 2, [0, [0, 10, false], null], "\"Asia\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [[false, 2, [0, [0, 10, false], null], "\"\u0413\u0438\u043f\u0435\u0440\u0431\u043e\u0440\u0435\u044f\"", null], "and", [false, 4, [0, [0, 14, false], null], {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[1, [0, [0, 14, false], null]]]], "where": [[false, 2, [0, [0, 10, false], null], "\"\u0410\u0442\u043b\u0430\u043d\u0442\u0438\u0434\u0430\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "the", "African", "countries", "that", "have", "a", "population", "less", "than", "any", "country", "in", "Asia", "?"], "ru": ["\u0412", "\u043a\u0430\u043a\u0438\u0445", "\u0433\u0438\u043f\u0435\u0440\u0431\u043e\u0440\u0435\u0439\u0441\u043a\u0438\u0445", "\u0441\u0442\u0440\u0430\u043d\u0430\u0445", "\u043f\u0440\u043e\u0436\u0438\u0432\u0430\u0435\u0442", "\u043c\u0435\u043d\u044c\u0448\u0435", "\u043b\u044e\u0434\u0435\u0439", ",", "\u0447\u0435\u043c", "\u0432", "\u043b\u044e\u0431\u043e\u0439", "\u0441\u0442\u0440\u0430\u043d\u0435", "\u0410\u0442\u043b\u0430\u043d\u0442\u0438\u0434\u044b", "?"]}, "query_toks": {"en": ["select", "name", "from", "country", "where", "continent", "=", "\"Africa\"", "and", "population", "<", "(", "select", "max", "(", "population", ")", "from", "country", "where", "continent", "=", "\"Asia\"", ")", ";"], "ru": ["select", "name", "from", "country", "where", "continent", "=", "\"\u0413\u0438\u043f\u0435\u0440\u0431\u043e\u0440\u0435\u044f\"", "and", "population", "<", "(", "select", "max", "(", "population", ")", "from", "country", "where", "continent", "=", "\"\u0410\u0442\u043b\u0430\u043d\u0442\u0438\u0434\u0430\"", ")", ";"]}, "query_toks_no_values": {"en": ["select", "name", "from", "country", "where", "continent", "=", "value", "and", "population", "<", "(", "select", "max", "(", "population", ")", "from", "country", "where", "continent", "=", "value", ")", ";"], "ru": ["select", "name", "from", "country", "where", "continent", "=", "value", "and", "population", "<", "(", "select", "max", "(", "population", ")", "from", "country", "where", "continent", "=", "value", ")", ";"]}, "masked_query": "SELECT Name FROM country WHERE Continent  =  \"Africa\"  AND population  <  (SELECT max(population) FROM country WHERE Continent  =  \"Asia\");", "question_pauq": {"ru": "\u0412 \u043a\u0430\u043a\u0438\u0445 \u0433\u0438\u043f\u0435\u0440\u0431\u043e\u0440\u0435\u0439\u0441\u043a\u0438\u0445 \u0441\u0442\u0440\u0430\u043d\u0430\u0445 \u043f\u0440\u043e\u0436\u0438\u0432\u0430\u0435\u0442 \u043c\u0435\u043d\u044c\u0448\u0435 \u043b\u044e\u0434\u0435\u0439, \u0447\u0435\u043c \u0432 \u043b\u044e\u0431\u043e\u0439 \u0441\u0442\u0440\u0430\u043d\u0435 \u0410\u0442\u043b\u0430\u043d\u0442\u0438\u0434\u044b?"}, "question": "What are the African countries that have a  population less than any country in Asia?", "kb_id": "world_1"}, {"id": "D_0776", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT Name FROM country WHERE Continent  =  \"\u0413\u0438\u043f\u0435\u0440\u0431\u043e\u0440\u0435\u044f\"  AND population  <  (SELECT max(population) FROM country WHERE Continent  =  \"\u0410\u0442\u043b\u0430\u043d\u0442\u0438\u0434\u0430\");"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [[false, 2, [0, [0, 10, false], null], "\"Africa\"", null], "and", [false, 4, [0, [0, 14, false], null], {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[2, [0, [0, 14, false], null]]]], "where": [[false, 2, [0, [0, 10, false], null], "\"Asia\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [[false, 2, [0, [0, 10, false], null], "\"\u0413\u0438\u043f\u0435\u0440\u0431\u043e\u0440\u0435\u044f\"", null], "and", [false, 4, [0, [0, 14, false], null], {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[1, [0, [0, 14, false], null]]]], "where": [[false, 2, [0, [0, 10, false], null], "\"\u0410\u0442\u043b\u0430\u043d\u0442\u0438\u0434\u0430\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Which", "African", "countries", "have", "a", "smaller", "population", "than", "that", "of", "any", "country", "in", "Asia", "?"], "ru": ["\u0412", "\u043a\u0430\u043a\u0438\u0445", "\u0433\u0438\u043f\u0435\u0440\u0431\u043e\u0440\u0435\u0439\u0441\u043a\u0438\u0445", "\u0441\u0442\u0440\u0430\u043d\u0430\u0445", "\u043f\u0440\u043e\u0436\u0438\u0432\u0430\u0435\u0442", "\u043c\u0435\u043d\u044c\u0448\u0435", "\u043d\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u044f", ",", "\u0447\u0435\u043c", "\u0432", "\u043b\u044e\u0431\u043e\u0439", "\u0441\u0442\u0440\u0430\u043d\u0435", "\u0410\u0442\u043b\u0430\u043d\u0442\u0438\u0434\u044b", "?"]}, "query_toks": {"en": ["select", "name", "from", "country", "where", "continent", "=", "\"Africa\"", "and", "population", "<", "(", "select", "min", "(", "population", ")", "from", "country", "where", "continent", "=", "\"Asia\"", ")", ";"], "ru": ["select", "name", "from", "country", "where", "continent", "=", "\"\u0413\u0438\u043f\u0435\u0440\u0431\u043e\u0440\u0435\u044f\"", "and", "population", "<", "(", "select", "max", "(", "population", ")", "from", "country", "where", "continent", "=", "\"\u0410\u0442\u043b\u0430\u043d\u0442\u0438\u0434\u0430\"", ")", ";"]}, "query_toks_no_values": {"en": ["select", "name", "from", "country", "where", "continent", "=", "value", "and", "population", "<", "(", "select", "min", "(", "population", ")", "from", "country", "where", "continent", "=", "value", ")", ";"], "ru": ["select", "name", "from", "country", "where", "continent", "=", "value", "and", "population", "<", "(", "select", "max", "(", "population", ")", "from", "country", "where", "continent", "=", "value", ")", ";"]}, "masked_query": "SELECT Name FROM country WHERE Continent  =  \"Africa\"  AND population  <  (SELECT min(population) FROM country WHERE Continent  =  \"Asia\");", "question_pauq": {"ru": "\u0412 \u043a\u0430\u043a\u0438\u0445 \u0433\u0438\u043f\u0435\u0440\u0431\u043e\u0440\u0435\u0439\u0441\u043a\u0438\u0445 \u0441\u0442\u0440\u0430\u043d\u0430\u0445 \u043f\u0440\u043e\u0436\u0438\u0432\u0430\u0435\u0442 \u043c\u0435\u043d\u044c\u0448\u0435 \u043d\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u044f, \u0447\u0435\u043c \u0432 \u043b\u044e\u0431\u043e\u0439 \u0441\u0442\u0440\u0430\u043d\u0435 \u0410\u0442\u043b\u0430\u043d\u0442\u0438\u0434\u044b?"}, "question": "Which African countries have a smaller population than that of any country in Asia?", "kb_id": "world_1"}, {"id": "D_0777", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT Name FROM country WHERE Continent  =  \"\u0410\u0442\u043b\u0430\u043d\u0442\u0438\u0434\u0430\"  AND population  >  (SELECT max(population) FROM country WHERE Continent  =  \"\u0413\u0438\u043f\u0435\u0440\u0431\u043e\u0440\u0435\u044f\");"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [[false, 2, [0, [0, 10, false], null], "\"Asia\"", null], "and", [false, 3, [0, [0, 14, false], null], {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[1, [0, [0, 14, false], null]]]], "where": [[false, 2, [0, [0, 10, false], null], "\"Africa\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [[false, 2, [0, [0, 10, false], null], "\"\u0410\u0442\u043b\u0430\u043d\u0442\u0438\u0434\u0430\"", null], "and", [false, 3, [0, [0, 14, false], null], {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[1, [0, [0, 14, false], null]]]], "where": [[false, 2, [0, [0, 10, false], null], "\"\u0413\u0438\u043f\u0435\u0440\u0431\u043e\u0440\u0435\u044f\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Which", "Asian", "countries", "have", "a", "population", "that", "is", "larger", "than", "any", "country", "in", "Africa", "?"], "ru": ["\u041d\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u0435", "\u043a\u0430\u043a\u0438\u0445", "\u0441\u0442\u0440\u0430\u043d", "\u0410\u0442\u043b\u0430\u043d\u0442\u0438\u0434\u044b", "\u0431\u043e\u043b\u044c\u0448\u0435", ",", "\u0447\u0435\u043c", "\u0432", "\u043b\u044e\u0431\u043e\u0439", "\u0441\u0442\u0440\u0430\u043d\u0435", "\u0413\u0438\u043f\u0435\u0440\u0431\u043e\u0440\u0435\u0438", "?"]}, "query_toks": {"en": ["select", "name", "from", "country", "where", "continent", "=", "\"Asia\"", "and", "population", ">", "(", "select", "max", "(", "population", ")", "from", "country", "where", "continent", "=", "\"Africa\"", ")", ";"], "ru": ["select", "name", "from", "country", "where", "continent", "=", "\"\u0410\u0442\u043b\u0430\u043d\u0442\u0438\u0434\u0430\"", "and", "population", ">", "(", "select", "max", "(", "population", ")", "from", "country", "where", "continent", "=", "\"\u0413\u0438\u043f\u0435\u0440\u0431\u043e\u0440\u0435\u044f\"", ")", ";"]}, "query_toks_no_values": {"en": ["select", "name", "from", "country", "where", "continent", "=", "value", "and", "population", ">", "(", "select", "max", "(", "population", ")", "from", "country", "where", "continent", "=", "value", ")", ";"], "ru": ["select", "name", "from", "country", "where", "continent", "=", "value", "and", "population", ">", "(", "select", "max", "(", "population", ")", "from", "country", "where", "continent", "=", "value", ")", ";"]}, "masked_query": "SELECT Name FROM country WHERE Continent  =  \"Asia\"  AND population  >  (SELECT max(population) FROM country WHERE Continent  =  \"Africa\");", "question_pauq": {"ru": "\u041d\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u0435 \u043a\u0430\u043a\u0438\u0445 \u0441\u0442\u0440\u0430\u043d \u0410\u0442\u043b\u0430\u043d\u0442\u0438\u0434\u044b \u0431\u043e\u043b\u044c\u0448\u0435, \u0447\u0435\u043c \u0432 \u043b\u044e\u0431\u043e\u0439 \u0441\u0442\u0440\u0430\u043d\u0435 \u0413\u0438\u043f\u0435\u0440\u0431\u043e\u0440\u0435\u0438?"}, "question": "Which Asian countries have a population that is larger than any country in Africa?", "kb_id": "world_1"}, {"id": "D_0778", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT Name FROM country WHERE Continent  =  \"\u0410\u0442\u043b\u0430\u043d\u0442\u0438\u0434\u0430\"  AND population  >  (SELECT max(population) FROM country WHERE Continent  =  \"\u0413\u0438\u043f\u0435\u0440\u0431\u043e\u0440\u0435\u044f\");"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [[false, 2, [0, [0, 10, false], null], "\"Asia\"", null], "and", [false, 3, [0, [0, 14, false], null], {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[2, [0, [0, 14, false], null]]]], "where": [[false, 2, [0, [0, 10, false], null], "\"Africa\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [[false, 2, [0, [0, 10, false], null], "\"\u0410\u0442\u043b\u0430\u043d\u0442\u0438\u0434\u0430\"", null], "and", [false, 3, [0, [0, 14, false], null], {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[1, [0, [0, 14, false], null]]]], "where": [[false, 2, [0, [0, 10, false], null], "\"\u0413\u0438\u043f\u0435\u0440\u0431\u043e\u0440\u0435\u044f\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "the", "Asian", "countries", "which", "have", "a", "population", "larger", "than", "that", "of", "any", "country", "in", "Africa", "?"], "ru": ["\u0412", "\u043a\u0430\u043a\u0438\u0445", "\u0441\u0442\u0440\u0430\u043d\u0430\u0445", "\u0410\u0442\u043b\u0430\u043d\u0442\u0438\u0434\u044b", "\u043f\u0440\u043e\u0436\u0438\u0432\u0430\u0435\u0442", "\u0431\u043e\u043b\u044c\u0448\u0435", "\u043b\u044e\u0434\u0435\u0439", ",", "\u0447\u0435\u043c", "\u0432", "\u043b\u044e\u0431\u043e\u0439", "\u0434\u0440\u0443\u0433\u043e\u0439", "\u0441\u0442\u0440\u0430\u043d\u0435", "\u0413\u0438\u043f\u0435\u0440\u0431\u043e\u0440\u0435\u0438", "?"]}, "query_toks": {"en": ["select", "name", "from", "country", "where", "continent", "=", "\"Asia\"", "and", "population", ">", "(", "select", "min", "(", "population", ")", "from", "country", "where", "continent", "=", "\"Africa\"", ")", ";"], "ru": ["select", "name", "from", "country", "where", "continent", "=", "\"\u0410\u0442\u043b\u0430\u043d\u0442\u0438\u0434\u0430\"", "and", "population", ">", "(", "select", "max", "(", "population", ")", "from", "country", "where", "continent", "=", "\"\u0413\u0438\u043f\u0435\u0440\u0431\u043e\u0440\u0435\u044f\"", ")", ";"]}, "query_toks_no_values": {"en": ["select", "name", "from", "country", "where", "continent", "=", "value", "and", "population", ">", "(", "select", "min", "(", "population", ")", "from", "country", "where", "continent", "=", "value", ")", ";"], "ru": ["select", "name", "from", "country", "where", "continent", "=", "value", "and", "population", ">", "(", "select", "max", "(", "population", ")", "from", "country", "where", "continent", "=", "value", ")", ";"]}, "masked_query": "SELECT Name FROM country WHERE Continent  =  \"Asia\"  AND population  >  (SELECT min(population) FROM country WHERE Continent  =  \"Africa\");", "question_pauq": {"ru": "\u0412 \u043a\u0430\u043a\u0438\u0445 \u0441\u0442\u0440\u0430\u043d\u0430\u0445 \u0410\u0442\u043b\u0430\u043d\u0442\u0438\u0434\u044b \u043f\u0440\u043e\u0436\u0438\u0432\u0430\u0435\u0442 \u0431\u043e\u043b\u044c\u0448\u0435 \u043b\u044e\u0434\u0435\u0439, \u0447\u0435\u043c \u0432 \u043b\u044e\u0431\u043e\u0439 \u0434\u0440\u0443\u0433\u043e\u0439 \u0441\u0442\u0440\u0430\u043d\u0435 \u0413\u0438\u043f\u0435\u0440\u0431\u043e\u0440\u0435\u0438?"}, "question": "What are the Asian countries which have a population larger than that of any country in Africa?", "kb_id": "world_1"}, {"id": "D_0779", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"\u0412\u0430\u043a\u0430\u043d\u0434\u0438\u0439\u0441\u043a\u0438\u0439\";"}, "sql": {"en": {"from": {"table_units": [["table_unit", 3]], "conds": []}, "select": [false, [[0, [0, [0, 23, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": {"from": {"table_units": [["table_unit", 3]], "conds": []}, "select": [false, [[0, [0, [0, 23, false], null]]]], "where": [[false, 2, [0, [0, 24, false], null], "\"English\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "ru": {"from": {"table_units": [["table_unit", 3]], "conds": []}, "select": [false, [[0, [0, [0, 23, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": {"from": {"table_units": [["table_unit", 3]], "conds": []}, "select": [false, [[0, [0, [0, 23, false], null]]]], "where": [[false, 2, [0, [0, 24, false], null], "\"\u0412\u0430\u043a\u0430\u043d\u0434\u0438\u0439\u0441\u043a\u0438\u0439\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}}, "question_toks": {"en": ["What", "are", "the", "country", "codes", "for", "countries", "that", "do", "not", "speak", "English", "?"], "ru": ["\u041a\u0430\u043a\u0438\u0435", "\u043a\u043e\u0434\u044b", "\u0441\u0442\u0440\u0430\u043d", "\u0443", "\u0441\u0442\u0440\u0430\u043d", ",", "\u0432", "\u043a\u043e\u0442\u043e\u0440\u044b\u0445", "\u043d\u0435", "\u0433\u043e\u0432\u043e\u0440\u044f\u0442", "\u043f\u043e-\u0432\u0430\u043a\u0430\u043d\u0434\u0438\u0439\u0441\u043a\u0438", "?"]}, "query_toks": {"en": ["select", "countrycode", "from", "countrylanguage", "except", "select", "countrycode", "from", "countrylanguage", "where", "language", "=", "\"English\"", ";"], "ru": ["select", "countrycode", "from", "countrylanguage", "except", "select", "countrycode", "from", "countrylanguage", "where", "language", "=", "\"\u0412\u0430\u043a\u0430\u043d\u0434\u0438\u0439\u0441\u043a\u0438\u0439\"", ";"]}, "query_toks_no_values": {"en": ["select", "countrycode", "from", "countrylanguage", "except", "select", "countrycode", "from", "countrylanguage", "where", "language", "=", "value", ";"], "ru": ["select", "countrycode", "from", "countrylanguage", "except", "select", "countrycode", "from", "countrylanguage", "where", "language", "=", "value", ";"]}, "masked_query": "SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\";", "question_pauq": {"ru": "\u041a\u0430\u043a\u0438\u0435 \u043a\u043e\u0434\u044b \u0441\u0442\u0440\u0430\u043d \u0443 \u0441\u0442\u0440\u0430\u043d, \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043d\u0435 \u0433\u043e\u0432\u043e\u0440\u044f\u0442 \u043f\u043e-\u0432\u0430\u043a\u0430\u043d\u0434\u0438\u0439\u0441\u043a\u0438?"}, "question": "What are the country codes for countries that do not speak English?", "kb_id": "world_1"}, {"id": "D_0780", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"\u0412\u0430\u043a\u0430\u043d\u0434\u0438\u0439\u0441\u043a\u0438\u0439\";"}, "sql": {"en": {"from": {"table_units": [["table_unit", 3]], "conds": []}, "select": [false, [[0, [0, [0, 23, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": {"from": {"table_units": [["table_unit", 3]], "conds": []}, "select": [false, [[0, [0, [0, 23, false], null]]]], "where": [[false, 2, [0, [0, 24, false], null], "\"English\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "ru": {"from": {"table_units": [["table_unit", 3]], "conds": []}, "select": [false, [[0, [0, [0, 23, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": {"from": {"table_units": [["table_unit", 3]], "conds": []}, "select": [false, [[0, [0, [0, 23, false], null]]]], "where": [[false, 2, [0, [0, 24, false], null], "\"\u0412\u0430\u043a\u0430\u043d\u0434\u0438\u0439\u0441\u043a\u0438\u0439\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}}, "question_toks": {"en": ["Return", "the", "country", "codes", "for", "countries", "that", "do", "not", "speak", "English", "."], "ru": ["\u041f\u043e\u043a\u0430\u0436\u0438", "\u043a\u043e\u0434\u044b", "\u0441\u0442\u0440\u0430\u043d", "\u0434\u043b\u044f", "\u0441\u0442\u0440\u0430\u043d", ",", "\u0432", "\u043a\u043e\u0442\u043e\u0440\u044b\u0445", "\u043d\u0435", "\u0433\u043e\u0432\u043e\u0440\u044f\u0442", "\u043f\u043e-\u0432\u0430\u043a\u0430\u043d\u0434\u0438\u0439\u0441\u043a\u0438", "."]}, "query_toks": {"en": ["select", "countrycode", "from", "countrylanguage", "except", "select", "countrycode", "from", "countrylanguage", "where", "language", "=", "\"English\"", ";"], "ru": ["select", "countrycode", "from", "countrylanguage", "except", "select", "countrycode", "from", "countrylanguage", "where", "language", "=", "\"\u0412\u0430\u043a\u0430\u043d\u0434\u0438\u0439\u0441\u043a\u0438\u0439\"", ";"]}, "query_toks_no_values": {"en": ["select", "countrycode", "from", "countrylanguage", "except", "select", "countrycode", "from", "countrylanguage", "where", "language", "=", "value", ";"], "ru": ["select", "countrycode", "from", "countrylanguage", "except", "select", "countrycode", "from", "countrylanguage", "where", "language", "=", "value", ";"]}, "masked_query": "SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\";", "question_pauq": {"ru": "\u041f\u043e\u043a\u0430\u0436\u0438 \u043a\u043e\u0434\u044b \u0441\u0442\u0440\u0430\u043d \u0434\u043b\u044f \u0441\u0442\u0440\u0430\u043d, \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043d\u0435 \u0433\u043e\u0432\u043e\u0440\u044f\u0442 \u043f\u043e-\u0432\u0430\u043a\u0430\u043d\u0434\u0438\u0439\u0441\u043a\u0438."}, "question": "Return the country codes for countries that do not speak English.", "kb_id": "world_1"}, {"id": "D_0781", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != \"\u0412\u0430\u043a\u0430\u043d\u0434\u0438\u0439\u0441\u043a\u0438\u0439\";"}, "sql": {"en": {"from": {"table_units": [["table_unit", 3]], "conds": []}, "select": [true, [[0, [0, [0, 23, false], null]]]], "where": [[false, 7, [0, [0, 24, false], null], "\"English\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 3]], "conds": []}, "select": [true, [[0, [0, [0, 23, false], null]]]], "where": [[false, 7, [0, [0, 24, false], null], "\"\u0412\u0430\u043a\u0430\u043d\u0434\u0438\u0439\u0441\u043a\u0438\u0439\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "the", "country", "codes", "of", "countries", "where", "people", "use", "languages", "other", "than", "English", "?"], "ru": ["\u041a\u0430\u043a\u043e\u0432\u044b", "\u043a\u043e\u0434\u044b", "\u0441\u0442\u0440\u0430\u043d", ",", "\u0432", "\u043a\u043e\u0442\u043e\u0440\u044b\u0445", "\u043b\u044e\u0434\u0438", "\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442", "\u0434\u0440\u0443\u0433\u0438\u0435", "\u044f\u0437\u044b\u043a\u0438", ",", "\u043a\u0440\u043e\u043c\u0435", "\u0432\u0430\u043a\u0430\u043d\u0434\u0438\u0439\u0441\u043a\u043e\u0433\u043e", "?"]}, "query_toks": {"en": ["select", "distinct", "countrycode", "from", "countrylanguage", "where", "language", "!=", "\"English\"", ";"], "ru": ["select", "distinct", "countrycode", "from", "countrylanguage", "where", "language", "!=", "\"\u0412\u0430\u043a\u0430\u043d\u0434\u0438\u0439\u0441\u043a\u0438\u0439\"", ";"]}, "query_toks_no_values": {"en": ["select", "distinct", "countrycode", "from", "countrylanguage", "where", "language", "!=", "value", ";"], "ru": ["select", "distinct", "countrycode", "from", "countrylanguage", "where", "language", "!=", "value", ";"]}, "masked_query": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != \"English\";", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0432\u044b \u043a\u043e\u0434\u044b \u0441\u0442\u0440\u0430\u043d, \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043b\u044e\u0434\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442 \u0434\u0440\u0443\u0433\u0438\u0435 \u044f\u0437\u044b\u043a\u0438, \u043a\u0440\u043e\u043c\u0435 \u0432\u0430\u043a\u0430\u043d\u0434\u0438\u0439\u0441\u043a\u043e\u0433\u043e?"}, "question": "What are the country codes of countries where people use languages other than English?", "kb_id": "world_1"}, {"id": "D_0782", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != \"\u0412\u0430\u043a\u0430\u043d\u0434\u0438\u0439\u0441\u043a\u0438\u0439\";"}, "sql": {"en": {"from": {"table_units": [["table_unit", 3]], "conds": []}, "select": [true, [[0, [0, [0, 23, false], null]]]], "where": [[false, 7, [0, [0, 24, false], null], "\"English\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 3]], "conds": []}, "select": [true, [[0, [0, [0, 23, false], null]]]], "where": [[false, 7, [0, [0, 24, false], null], "\"\u0412\u0430\u043a\u0430\u043d\u0434\u0438\u0439\u0441\u043a\u0438\u0439\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Give", "the", "country", "codes", "for", "countries", "in", "which", "people", "speak", "langauges", "that", "are", "not", "English", "."], "ru": ["\u0423\u043a\u0430\u0436\u0438\u0442\u0435", "\u043a\u043e\u0434\u044b", "\u0441\u0442\u0440\u0430\u043d", "\u0434\u043b\u044f", "\u0441\u0442\u0440\u0430\u043d", ",", "\u0432", "\u043a\u043e\u0442\u043e\u0440\u044b\u0445", "\u043b\u044e\u0434\u0438", "\u0433\u043e\u0432\u043e\u0440\u044f\u0442", "\u043d\u0435", "\u043d\u0430", "\u0432\u0430\u043a\u0430\u043d\u0434\u0438\u0439\u0441\u043a\u043e\u043c", "\u044f\u0437\u044b\u043a\u0435", "."]}, "query_toks": {"en": ["select", "distinct", "countrycode", "from", "countrylanguage", "where", "language", "!=", "\"English\"", ";"], "ru": ["select", "distinct", "countrycode", "from", "countrylanguage", "where", "language", "!=", "\"\u0412\u0430\u043a\u0430\u043d\u0434\u0438\u0439\u0441\u043a\u0438\u0439\"", ";"]}, "query_toks_no_values": {"en": ["select", "distinct", "countrycode", "from", "countrylanguage", "where", "language", "!=", "value", ";"], "ru": ["select", "distinct", "countrycode", "from", "countrylanguage", "where", "language", "!=", "value", ";"]}, "masked_query": "SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != \"English\";", "question_pauq": {"ru": "\u0423\u043a\u0430\u0436\u0438\u0442\u0435 \u043a\u043e\u0434\u044b \u0441\u0442\u0440\u0430\u043d \u0434\u043b\u044f \u0441\u0442\u0440\u0430\u043d, \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043b\u044e\u0434\u0438 \u0433\u043e\u0432\u043e\u0440\u044f\u0442 \u043d\u0435 \u043d\u0430 \u0432\u0430\u043a\u0430\u043d\u0434\u0438\u0439\u0441\u043a\u043e\u043c \u044f\u0437\u044b\u043a\u0435."}, "question": "Give the country codes for countries in which people speak langauges that are not English.", "kb_id": "world_1"}, {"id": "D_0783", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT Code FROM country WHERE GovernmentForm != \"\u0410\u0431\u0441\u043e\u043b\u044e\u0442\u043d\u0430\u044f \u043c\u043e\u043d\u0430\u0440\u0445\u0438\u044f\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"\u0412\u0430\u043a\u0430\u043d\u0434\u0438\u0439\u0441\u043a\u0438\u0439\";"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 8, false], null]]]], "where": [[false, 7, [0, [0, 19, false], null], "\"Republic\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": {"from": {"table_units": [["table_unit", 3]], "conds": []}, "select": [false, [[0, [0, [0, 23, false], null]]]], "where": [[false, 2, [0, [0, 24, false], null], "\"English\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "ru": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 8, false], null]]]], "where": [[false, 7, [0, [0, 19, false], null], "\"\u0410\u0431\u0441\u043e\u043b\u044e\u0442\u043d\u0430\u044f \u043c\u043e\u043d\u0430\u0440\u0445\u0438\u044f\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": {"from": {"table_units": [["table_unit", 3]], "conds": []}, "select": [false, [[0, [0, [0, 23, false], null]]]], "where": [[false, 2, [0, [0, 24, false], null], "\"\u0412\u0430\u043a\u0430\u043d\u0434\u0438\u0439\u0441\u043a\u0438\u0439\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}}, "question_toks": {"en": ["What", "are", "the", "codes", "of", "the", "countries", "that", "do", "not", "speak", "English", "and", "whose", "government", "forms", "are", "not", "Republic", "?"], "ru": ["\u041a\u0430\u043a\u043e\u0432\u044b", "\u043a\u043e\u0434\u044b", "\u0441\u0442\u0440\u0430\u043d", ",", "\u043a\u043e\u0442\u043e\u0440\u044b\u0435", "\u043d\u0435", "\u0433\u043e\u0432\u043e\u0440\u044f\u0442", "\u043f\u043e-\u0432\u0430\u043a\u0430\u043d\u0434\u0438\u0439\u0441\u043a\u0438", "\u0438", "\u0447\u044c\u0438", "\u0433\u043e\u0441\u0443\u0434\u0430\u0440\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0435", "\u0444\u043e\u0440\u043c\u044b", "\u043d\u0435", "\u044f\u0432\u043b\u044f\u044e\u0442\u0441\u044f", "\u0430\u0431\u0441\u043e\u043b\u044e\u0442\u043d\u044b\u043c\u0438", "\u043c\u043e\u043d\u0430\u0440\u0445\u0438\u044f\u043c\u0438", "?"]}, "query_toks": {"en": ["select", "code", "from", "country", "where", "governmentform", "!=", "\"Republic\"", "except", "select", "countrycode", "from", "countrylanguage", "where", "language", "=", "\"English\"", ";"], "ru": ["select", "code", "from", "country", "where", "governmentform", "!=", "\"\u0410\u0431\u0441\u043e\u043b\u044e\u0442\u043d\u0430\u044f \u043c\u043e\u043d\u0430\u0440\u0445\u0438\u044f\"", "except", "select", "countrycode", "from", "countrylanguage", "where", "language", "=", "\"\u0412\u0430\u043a\u0430\u043d\u0434\u0438\u0439\u0441\u043a\u0438\u0439\"", ";"]}, "query_toks_no_values": {"en": ["select", "code", "from", "country", "where", "governmentform", "!=", "value", "except", "select", "countrycode", "from", "countrylanguage", "where", "language", "=", "value", ";"], "ru": ["select", "code", "from", "country", "where", "governmentform", "!=", "value", "except", "select", "countrycode", "from", "countrylanguage", "where", "language", "=", "value", ";"]}, "masked_query": "SELECT Code FROM country WHERE GovernmentForm != \"Republic\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\";", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0432\u044b \u043a\u043e\u0434\u044b \u0441\u0442\u0440\u0430\u043d, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0435 \u0433\u043e\u0432\u043e\u0440\u044f\u0442 \u043f\u043e-\u0432\u0430\u043a\u0430\u043d\u0434\u0438\u0439\u0441\u043a\u0438 \u0438 \u0447\u044c\u0438 \u0433\u043e\u0441\u0443\u0434\u0430\u0440\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0435 \u0444\u043e\u0440\u043c\u044b \u043d\u0435 \u044f\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u0430\u0431\u0441\u043e\u043b\u044e\u0442\u043d\u044b\u043c\u0438 \u043c\u043e\u043d\u0430\u0440\u0445\u0438\u044f\u043c\u0438?"}, "question": "What are the codes of the countries that do not speak English and whose government forms are not Republic?", "kb_id": "world_1"}, {"id": "D_0784", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT Code FROM country WHERE GovernmentForm != \"\u0410\u0431\u0441\u043e\u043b\u044e\u0442\u043d\u0430\u044f \u043c\u043e\u043d\u0430\u0440\u0445\u0438\u044f\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"\u0412\u0430\u043a\u0430\u043d\u0434\u0438\u0439\u0441\u043a\u0438\u0439\";"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 8, false], null]]]], "where": [[false, 7, [0, [0, 19, false], null], "\"Republic\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": {"from": {"table_units": [["table_unit", 3]], "conds": []}, "select": [false, [[0, [0, [0, 23, false], null]]]], "where": [[false, 2, [0, [0, 24, false], null], "\"English\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "ru": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 8, false], null]]]], "where": [[false, 7, [0, [0, 19, false], null], "\"\u0410\u0431\u0441\u043e\u043b\u044e\u0442\u043d\u0430\u044f \u043c\u043e\u043d\u0430\u0440\u0445\u0438\u044f\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": {"from": {"table_units": [["table_unit", 3]], "conds": []}, "select": [false, [[0, [0, [0, 23, false], null]]]], "where": [[false, 2, [0, [0, 24, false], null], "\"\u0412\u0430\u043a\u0430\u043d\u0434\u0438\u0439\u0441\u043a\u0438\u0439\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}}, "question_toks": {"en": ["Return", "the", "codes", "of", "countries", "that", "do", "not", "speak", "English", "and", "do", "not", "have", "Republics", "for", "governments", "."], "ru": ["\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c", "\u043a\u043e\u0434\u044b", "\u0441\u0442\u0440\u0430\u043d", ",", "\u0432", "\u043a\u043e\u0442\u043e\u0440\u044b\u0445", "\u043d\u0435", "\u0433\u043e\u0432\u043e\u0440\u044f\u0442", "\u043f\u043e-\u0432\u0430\u043a\u0430\u043d\u0434\u0438\u0439\u0441\u043a\u0438", "\u0438", "\u0447\u044c\u044f", "\u0444\u043e\u0440\u043c\u0430", "\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044c\u0441\u0442\u0432\u0430", "\u043d\u0435", "\u0430\u0431\u0441\u043e\u043b\u044e\u0442\u043d\u0430\u044f", "\u043c\u043e\u043d\u0430\u0440\u0445\u0438\u044f", "."]}, "query_toks": {"en": ["select", "code", "from", "country", "where", "governmentform", "!=", "\"Republic\"", "except", "select", "countrycode", "from", "countrylanguage", "where", "language", "=", "\"English\"", ";"], "ru": ["select", "code", "from", "country", "where", "governmentform", "!=", "\"\u0410\u0431\u0441\u043e\u043b\u044e\u0442\u043d\u0430\u044f \u043c\u043e\u043d\u0430\u0440\u0445\u0438\u044f\"", "except", "select", "countrycode", "from", "countrylanguage", "where", "language", "=", "\"\u0412\u0430\u043a\u0430\u043d\u0434\u0438\u0439\u0441\u043a\u0438\u0439\"", ";"]}, "query_toks_no_values": {"en": ["select", "code", "from", "country", "where", "governmentform", "!=", "value", "except", "select", "countrycode", "from", "countrylanguage", "where", "language", "=", "value", ";"], "ru": ["select", "code", "from", "country", "where", "governmentform", "!=", "value", "except", "select", "countrycode", "from", "countrylanguage", "where", "language", "=", "value", ";"]}, "masked_query": "SELECT Code FROM country WHERE GovernmentForm != \"Republic\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\";", "question_pauq": {"ru": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u043a\u043e\u0434\u044b \u0441\u0442\u0440\u0430\u043d, \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043d\u0435 \u0433\u043e\u0432\u043e\u0440\u044f\u0442 \u043f\u043e-\u0432\u0430\u043a\u0430\u043d\u0434\u0438\u0439\u0441\u043a\u0438 \u0438 \u0447\u044c\u044f \u0444\u043e\u0440\u043c\u0430 \u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044c\u0441\u0442\u0432\u0430 \u043d\u0435 \u0430\u0431\u0441\u043e\u043b\u044e\u0442\u043d\u0430\u044f \u043c\u043e\u043d\u0430\u0440\u0445\u0438\u044f."}, "question": "Return the codes of countries that do not speak English and do not have Republics for governments.", "kb_id": "world_1"}, {"id": "D_0785", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  '\u0413\u0438\u043f\u0435\u0440\u0431\u043e\u0440\u0435\u044f' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  '\u0412\u0430\u043a\u0430\u043d\u0434\u0438\u0439\u0441\u043a\u0438\u0439');"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 3, false], null], [0, 8, false], null]]}, "select": [true, [[0, [0, [0, 2, false], null]]]], "where": [[false, 2, [0, [0, 10, false], null], "\"Europe\"", null], "and", [true, 8, [0, [0, 9, false], null], {"from": {"table_units": [["table_unit", 2], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 23, false], null]]}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [[false, 2, [0, [0, 25, false], null], "\"T\"", null], "and", [false, 2, [0, [0, 24, false], null], "\"English\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 3, false], null], [0, 8, false], null]]}, "select": [true, [[0, [0, [0, 2, false], null]]]], "where": [[false, 2, [0, [0, 10, false], null], "\"\u0413\u0438\u043f\u0435\u0440\u0431\u043e\u0440\u0435\u044f\"", null], "and", [true, 8, [0, [0, 9, false], null], {"from": {"table_units": [["table_unit", 2], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 23, false], null]]}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [[false, 2, [0, [0, 25, false], null], "\"T\"", null], "and", [false, 2, [0, [0, 24, false], null], "\"\u0412\u0430\u043a\u0430\u043d\u0434\u0438\u0439\u0441\u043a\u0438\u0439\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Which", "cities", "are", "in", "European", "countries", "where", "English", "is", "not", "the", "official", "language", "?"], "ru": ["\u0412", "\u043a\u0430\u043a\u0438\u0445", "\u0433\u043e\u0440\u043e\u0434\u0430\u0445", "\u0433\u0438\u043f\u0435\u0440\u0431\u043e\u0440\u0435\u0439\u0441\u043a\u0438\u0445", "\u0441\u0442\u0440\u0430\u043d", "\u0432\u0430\u043a\u0430\u043d\u0434\u0438\u0439\u0441\u043a\u0438\u0439", "\u043d\u0435", "\u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f", "\u043e\u0444\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u043c", "\u044f\u0437\u044b\u043a\u043e\u043c", "?"]}, "query_toks": {"en": ["select", "distinct", "t2.name", "from", "country", "as", "t1", "join", "city", "as", "t2", "on", "t2.countrycode", "=", "t1.code", "where", "t1.continent", "=", "\"Europe\"", "and", "t1.name", "not", "in", "(", "select", "t3.name", "from", "country", "as", "t3", "join", "countrylanguage", "as", "t4", "on", "t3.code", "=", "t4.countrycode", "where", "t4.isofficial", "=", "\"T\"", "and", "t4.language", "=", "\"English\"", ")", ";"], "ru": ["select", "distinct", "t2.name", "from", "country", "as", "t1", "join", "city", "as", "t2", "on", "t2.countrycode", "=", "t1.code", "where", "t1.continent", "=", "\"\u0413\u0438\u043f\u0435\u0440\u0431\u043e\u0440\u0435\u044f\"", "and", "t1.name", "not", "in", "(", "select", "t3.name", "from", "country", "as", "t3", "join", "countrylanguage", "as", "t4", "on", "t3.code", "=", "t4.countrycode", "where", "t4.isofficial", "=", "\"T\"", "and", "t4.language", "=", "\"\u0412\u0430\u043a\u0430\u043d\u0434\u0438\u0439\u0441\u043a\u0438\u0439\"", ")", ";"]}, "query_toks_no_values": {"en": ["select", "distinct", "t2.name", "from", "country", "as", "t1", "join", "city", "as", "t2", "on", "t2.countrycode", "=", "t1.code", "where", "t1.continent", "=", "value", "and", "t1.name", "not", "in", "(", "select", "t3.name", "from", "country", "as", "t3", "join", "countrylanguage", "as", "t4", "on", "t3.code", "=", "t4.countrycode", "where", "t4.isofficial", "=", "value", "and", "t4.language", "=", "value", ")", ";"], "ru": ["select", "distinct", "t2.name", "from", "country", "as", "t1", "join", "city", "as", "t2", "on", "t2.countrycode", "=", "t1.code", "where", "t1.continent", "=", "value", "and", "t1.name", "not", "in", "(", "select", "t3.name", "from", "country", "as", "t3", "join", "countrylanguage", "as", "t4", "on", "t3.code", "=", "t4.countrycode", "where", "t4.isofficial", "=", "value", "and", "t4.language", "=", "value", ")", ";"]}, "masked_query": "SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English');", "question_pauq": {"ru": "\u0412 \u043a\u0430\u043a\u0438\u0445 \u0433\u043e\u0440\u043e\u0434\u0430\u0445 \u0433\u0438\u043f\u0435\u0440\u0431\u043e\u0440\u0435\u0439\u0441\u043a\u0438\u0445 \u0441\u0442\u0440\u0430\u043d \u0432\u0430\u043a\u0430\u043d\u0434\u0438\u0439\u0441\u043a\u0438\u0439 \u043d\u0435 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043e\u0444\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u043c \u044f\u0437\u044b\u043a\u043e\u043c?"}, "question": "Which cities are in European countries where English is not the official language?", "kb_id": "world_1"}, {"id": "D_0786", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  '\u0413\u0438\u043f\u0435\u0440\u0431\u043e\u0440\u0435\u044f' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  '\u0412\u0430\u043a\u0430\u043d\u0434\u0438\u0439\u0441\u043a\u0438\u0439');"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 3, false], null], [0, 8, false], null]]}, "select": [true, [[0, [0, [0, 2, false], null]]]], "where": [[false, 2, [0, [0, 10, false], null], "\"Europe\"", null], "and", [true, 8, [0, [0, 9, false], null], {"from": {"table_units": [["table_unit", 2], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 23, false], null]]}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [[false, 2, [0, [0, 25, false], null], "\"T\"", null], "and", [false, 2, [0, [0, 24, false], null], "\"English\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 3, false], null], [0, 8, false], null]]}, "select": [true, [[0, [0, [0, 2, false], null]]]], "where": [[false, 2, [0, [0, 10, false], null], "\"\u0413\u0438\u043f\u0435\u0440\u0431\u043e\u0440\u0435\u044f\"", null], "and", [true, 8, [0, [0, 9, false], null], {"from": {"table_units": [["table_unit", 2], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 23, false], null]]}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [[false, 2, [0, [0, 25, false], null], "\"T\"", null], "and", [false, 2, [0, [0, 24, false], null], "\"\u0412\u0430\u043a\u0430\u043d\u0434\u0438\u0439\u0441\u043a\u0438\u0439\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "the", "names", "of", "cities", "in", "Europe", "for", "which", "English", "is", "not", "the", "official", "language", "?"], "ru": ["\u041a\u0430\u043a", "\u043d\u0430\u0437\u044b\u0432\u0430\u044e\u0442\u0441\u044f", "\u0433\u043e\u0440\u043e\u0434\u0430", "\u0432", "\u0413\u0438\u043f\u0435\u0440\u0431\u043e\u0440\u0435\u0435", ",", "\u0434\u043b\u044f", "\u043a\u043e\u0442\u043e\u0440\u044b\u0445", "\u0432\u0430\u043a\u0430\u043d\u0434\u0438\u0439\u0441\u043a\u0438\u0439", "\u043d\u0435", "\u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f", "\u043e\u0444\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u043c", "\u044f\u0437\u044b\u043a\u043e\u043c", "?"]}, "query_toks": {"en": ["select", "distinct", "t2.name", "from", "country", "as", "t1", "join", "city", "as", "t2", "on", "t2.countrycode", "=", "t1.code", "where", "t1.continent", "=", "\"Europe\"", "and", "t1.name", "not", "in", "(", "select", "t3.name", "from", "country", "as", "t3", "join", "countrylanguage", "as", "t4", "on", "t3.code", "=", "t4.countrycode", "where", "t4.isofficial", "=", "\"T\"", "and", "t4.language", "=", "\"English\"", ")", ";"], "ru": ["select", "distinct", "t2.name", "from", "country", "as", "t1", "join", "city", "as", "t2", "on", "t2.countrycode", "=", "t1.code", "where", "t1.continent", "=", "\"\u0413\u0438\u043f\u0435\u0440\u0431\u043e\u0440\u0435\u044f\"", "and", "t1.name", "not", "in", "(", "select", "t3.name", "from", "country", "as", "t3", "join", "countrylanguage", "as", "t4", "on", "t3.code", "=", "t4.countrycode", "where", "t4.isofficial", "=", "\"T\"", "and", "t4.language", "=", "\"\u0412\u0430\u043a\u0430\u043d\u0434\u0438\u0439\u0441\u043a\u0438\u0439\"", ")", ";"]}, "query_toks_no_values": {"en": ["select", "distinct", "t2.name", "from", "country", "as", "t1", "join", "city", "as", "t2", "on", "t2.countrycode", "=", "t1.code", "where", "t1.continent", "=", "value", "and", "t1.name", "not", "in", "(", "select", "t3.name", "from", "country", "as", "t3", "join", "countrylanguage", "as", "t4", "on", "t3.code", "=", "t4.countrycode", "where", "t4.isofficial", "=", "value", "and", "t4.language", "=", "value", ")", ";"], "ru": ["select", "distinct", "t2.name", "from", "country", "as", "t1", "join", "city", "as", "t2", "on", "t2.countrycode", "=", "t1.code", "where", "t1.continent", "=", "value", "and", "t1.name", "not", "in", "(", "select", "t3.name", "from", "country", "as", "t3", "join", "countrylanguage", "as", "t4", "on", "t3.code", "=", "t4.countrycode", "where", "t4.isofficial", "=", "value", "and", "t4.language", "=", "value", ")", ";"]}, "masked_query": "SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English');", "question_pauq": {"ru": "\u041a\u0430\u043a \u043d\u0430\u0437\u044b\u0432\u0430\u044e\u0442\u0441\u044f \u0433\u043e\u0440\u043e\u0434\u0430 \u0432 \u0413\u0438\u043f\u0435\u0440\u0431\u043e\u0440\u0435\u0435, \u0434\u043b\u044f \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0432\u0430\u043a\u0430\u043d\u0434\u0438\u0439\u0441\u043a\u0438\u0439 \u043d\u0435 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043e\u0444\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u043c \u044f\u0437\u044b\u043a\u043e\u043c?"}, "question": "What are the names of cities in Europe for which English is not the official language?", "kb_id": "world_1"}, {"id": "D_0787", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT DISTINCT T3.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode JOIN city AS T3 ON T1.Code  =  T3.CountryCode WHERE T2.IsOfficial  =  'T' AND T2.Language  =  '\u041a\u043b\u0438\u043d\u0433\u043e\u043d\u0441\u043a\u0438\u0439' AND T1.Continent  =  \"\u0410\u0442\u043b\u0430\u043d\u0442\u0438\u0434\u0430\";"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2], ["table_unit", 3], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 23, false], null], "and", [false, 2, [0, [0, 8, false], null], [0, 3, false], null]]}, "select": [true, [[0, [0, [0, 2, false], null]]]], "where": [[false, 2, [0, [0, 25, false], null], "\"T\"", null], "and", [false, 2, [0, [0, 24, false], null], "\"Chinese\"", null], "and", [false, 2, [0, [0, 10, false], null], "\"Asia\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2], ["table_unit", 3], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 23, false], null], "and", [false, 2, [0, [0, 8, false], null], [0, 3, false], null]]}, "select": [true, [[0, [0, [0, 2, false], null]]]], "where": [[false, 2, [0, [0, 25, false], null], "\"T\"", null], "and", [false, 2, [0, [0, 24, false], null], "\"\u041a\u043b\u0438\u043d\u0433\u043e\u043d\u0441\u043a\u0438\u0439\"", null], "and", [false, 2, [0, [0, 10, false], null], "\"\u0410\u0442\u043b\u0430\u043d\u0442\u0438\u0434\u0430\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Which", "unique", "cities", "are", "in", "Asian", "countries", "where", "Chinese", "is", "the", "official", "language", "?"], "ru": ["\u041a\u0430\u043a\u0438\u0435", "\u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0435", "\u0433\u043e\u0440\u043e\u0434\u0430", "\u043d\u0430\u0445\u043e\u0434\u044f\u0442\u0441\u044f", "\u0432", "\u0441\u0442\u0440\u0430\u043d\u0430\u0445", "\u0410\u0442\u043b\u0430\u043d\u0442\u0438\u0434\u044b", ",", "\u0433\u0434\u0435", "\u043a\u043b\u0438\u043d\u0433\u043e\u043d\u0441\u043a\u0438\u0439", "\u044f\u0437\u044b\u043a", "\u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f", "\u043e\u0444\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u043c", "\u044f\u0437\u044b\u043a\u043e\u043c", "?"]}, "query_toks": {"en": ["select", "distinct", "t3.name", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "join", "city", "as", "t3", "on", "t1.code", "=", "t3.countrycode", "where", "t2.isofficial", "=", "\"T\"", "and", "t2.language", "=", "\"Chinese\"", "and", "t1.continent", "=", "\"Asia\"", ";"], "ru": ["select", "distinct", "t3.name", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "join", "city", "as", "t3", "on", "t1.code", "=", "t3.countrycode", "where", "t2.isofficial", "=", "\"T\"", "and", "t2.language", "=", "\"\u041a\u043b\u0438\u043d\u0433\u043e\u043d\u0441\u043a\u0438\u0439\"", "and", "t1.continent", "=", "\"\u0410\u0442\u043b\u0430\u043d\u0442\u0438\u0434\u0430\"", ";"]}, "query_toks_no_values": {"en": ["select", "distinct", "t3.name", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "join", "city", "as", "t3", "on", "t1.code", "=", "t3.countrycode", "where", "t2.isofficial", "=", "value", "and", "t2.language", "=", "value", "and", "t1.continent", "=", "value", ";"], "ru": ["select", "distinct", "t3.name", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "join", "city", "as", "t3", "on", "t1.code", "=", "t3.countrycode", "where", "t2.isofficial", "=", "value", "and", "t2.language", "=", "value", "and", "t1.continent", "=", "value", ";"]}, "masked_query": "select distinct t3.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode join city as t3 on t1.code  =  t3.countrycode where t2.isofficial  =  'T' and t2.language  =  'Chinese' and t1.continent  =  \"Asia\";", "question_pauq": {"ru": "\u041a\u0430\u043a\u0438\u0435 \u0443\u043d\u0438\u043a\u0430\u043b\u044c\u043d\u044b\u0435 \u0433\u043e\u0440\u043e\u0434\u0430 \u043d\u0430\u0445\u043e\u0434\u044f\u0442\u0441\u044f \u0432 \u0441\u0442\u0440\u0430\u043d\u0430\u0445 \u0410\u0442\u043b\u0430\u043d\u0442\u0438\u0434\u044b, \u0433\u0434\u0435 \u043a\u043b\u0438\u043d\u0433\u043e\u043d\u0441\u043a\u0438\u0439 \u044f\u0437\u044b\u043a \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043e\u0444\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u043c \u044f\u0437\u044b\u043a\u043e\u043c?"}, "question": "Which unique cities are in Asian countries where Chinese is the official language ?", "kb_id": "world_1"}, {"id": "D_0788", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT DISTINCT T3.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode JOIN city AS T3 ON T1.Code  =  T3.CountryCode WHERE T2.IsOfficial  =  'T' AND T2.Language  =  '\u041a\u043b\u0438\u043d\u0433\u043e\u043d\u0441\u043a\u0438\u0439' AND T1.Continent  =  \"\u0410\u0442\u043b\u0430\u043d\u0442\u0438\u0434\u0430\";"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2], ["table_unit", 3], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 23, false], null], "and", [false, 2, [0, [0, 8, false], null], [0, 3, false], null]]}, "select": [true, [[0, [0, [0, 2, false], null]]]], "where": [[false, 2, [0, [0, 25, false], null], "\"T\"", null], "and", [false, 2, [0, [0, 24, false], null], "\"Chinese\"", null], "and", [false, 2, [0, [0, 10, false], null], "\"Asia\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2], ["table_unit", 3], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 23, false], null], "and", [false, 2, [0, [0, 8, false], null], [0, 3, false], null]]}, "select": [true, [[0, [0, [0, 2, false], null]]]], "where": [[false, 2, [0, [0, 25, false], null], "\"T\"", null], "and", [false, 2, [0, [0, 24, false], null], "\"\u041a\u043b\u0438\u043d\u0433\u043e\u043d\u0441\u043a\u0438\u0439\"", null], "and", [false, 2, [0, [0, 10, false], null], "\"\u0410\u0442\u043b\u0430\u043d\u0442\u0438\u0434\u0430\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Return", "the", "different", "names", "of", "cities", "that", "are", "in", "Asia", "and", "for", "which", "Chinese", "is", "the", "official", "language", "."], "ru": ["\u0412\u0435\u0440\u043d\u0438\u0442\u0435", "\u0440\u0430\u0437\u043d\u044b\u0435", "\u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f", "\u0433\u043e\u0440\u043e\u0434\u043e\u0432", "\u0432", "\u0410\u0442\u043b\u0430\u043d\u0442\u0438\u0434\u0435", ",", "\u0434\u043b\u044f", "\u043a\u043e\u0442\u043e\u0440\u044b\u0445", "\u043a\u043b\u0438\u043d\u0433\u043e\u043d\u0441\u043a\u0438\u0439", "\u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f", "\u043e\u0444\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u043c", "\u044f\u0437\u044b\u043a\u043e\u043c", "."]}, "query_toks": {"en": ["select", "distinct", "t3.name", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "join", "city", "as", "t3", "on", "t1.code", "=", "t3.countrycode", "where", "t2.isofficial", "=", "\"T\"", "and", "t2.language", "=", "\"Chinese\"", "and", "t1.continent", "=", "\"Asia\"", ";"], "ru": ["select", "distinct", "t3.name", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "join", "city", "as", "t3", "on", "t1.code", "=", "t3.countrycode", "where", "t2.isofficial", "=", "\"T\"", "and", "t2.language", "=", "\"\u041a\u043b\u0438\u043d\u0433\u043e\u043d\u0441\u043a\u0438\u0439\"", "and", "t1.continent", "=", "\"\u0410\u0442\u043b\u0430\u043d\u0442\u0438\u0434\u0430\"", ";"]}, "query_toks_no_values": {"en": ["select", "distinct", "t3.name", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "join", "city", "as", "t3", "on", "t1.code", "=", "t3.countrycode", "where", "t2.isofficial", "=", "value", "and", "t2.language", "=", "value", "and", "t1.continent", "=", "value", ";"], "ru": ["select", "distinct", "t3.name", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "join", "city", "as", "t3", "on", "t1.code", "=", "t3.countrycode", "where", "t2.isofficial", "=", "value", "and", "t2.language", "=", "value", "and", "t1.continent", "=", "value", ";"]}, "masked_query": "SELECT DISTINCT T3.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode JOIN city AS T3 ON T1.Code  =  T3.CountryCode WHERE T2.IsOfficial  =  'T' AND T2.Language  =  'Chinese' AND T1.Continent  =  \"Asia\";", "question_pauq": {"ru": "\u0412\u0435\u0440\u043d\u0438\u0442\u0435 \u0440\u0430\u0437\u043d\u044b\u0435 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f \u0433\u043e\u0440\u043e\u0434\u043e\u0432 \u0432 \u0410\u0442\u043b\u0430\u043d\u0442\u0438\u0434\u0435, \u0434\u043b\u044f \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043a\u043b\u0438\u043d\u0433\u043e\u043d\u0441\u043a\u0438\u0439 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043e\u0444\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u043c \u044f\u0437\u044b\u043a\u043e\u043c."}, "question": "Return the different names of cities that are in Asia and for which Chinese is the official language.", "kb_id": "world_1"}, {"id": "D_0789", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 9, false], null]], [0, [0, [0, 12, false], null]], [0, [0, [0, 13, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["asc", [[0, [0, 14, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 9, false], null]], [0, [0, [0, 12, false], null]], [0, [0, [0, 13, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["asc", [[0, [0, 14, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "the", "name", ",", "independence", "year", ",", "and", "surface", "area", "of", "the", "country", "with", "the", "smallest", "population", "?"], "ru": ["\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435", ",", "\u0433\u043e\u0434", "\u043d\u0435\u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438", "\u0438", "\u043f\u043b\u043e\u0449\u0430\u0434\u044c", "\u0441\u0442\u0440\u0430\u043d\u044b", "\u0441", "\u043d\u0430\u0438\u043c\u0435\u043d\u044c\u0448\u0438\u043c", "\u043d\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u0435\u043c"]}, "query_toks": {"en": ["select", "name", ",", "surfacearea", ",", "indepyear", "from", "country", "order", "by", "population", "limit", "1", ";"], "ru": ["select", "name", ",", "surfacearea", ",", "indepyear", "from", "country", "order", "by", "population", "limit", "1", ";"]}, "query_toks_no_values": {"en": ["select", "name", ",", "surfacearea", ",", "indepyear", "from", "country", "order", "by", "population", "limit", "1", ";"], "ru": ["select", "name", ",", "surfacearea", ",", "indepyear", "from", "country", "order", "by", "population", "limit", "1", ";"]}, "masked_query": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1;", "question_pauq": {"ru": "\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435, \u0433\u043e\u0434 \u043d\u0435\u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u0438 \u043f\u043b\u043e\u0449\u0430\u0434\u044c \u0441\u0442\u0440\u0430\u043d\u044b \u0441 \u043d\u0430\u0438\u043c\u0435\u043d\u044c\u0448\u0438\u043c \u043d\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u0435\u043c"}, "question": "What are the name, independence year, and surface area of the country with the smallest population?", "kb_id": "world_1"}, {"id": "D_0790", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 9, false], null]], [0, [0, [0, 12, false], null]], [0, [0, [0, 13, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["asc", [[0, [0, 14, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 9, false], null]], [0, [0, [0, 12, false], null]], [0, [0, [0, 13, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["asc", [[0, [0, 14, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Give", "the", "name", ",", "year", "of", "independence", ",", "and", "surface", "area", "of", "the", "country", "that", "has", "the", "lowest", "population", "."], "ru": ["\u0423\u043a\u0430\u0436\u0438\u0442\u0435", "\u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435", ",", "\u0433\u043e\u0434", "\u043d\u0435\u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438", "\u0438", "\u043f\u043b\u043e\u0449\u0430\u0434\u044c", "\u0441\u0442\u0440\u0430\u043d\u044b", "\u0441", "\u043d\u0430\u0438\u043c\u0435\u043d\u044c\u0448\u0438\u043c", "\u043d\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u0435\u043c", "."]}, "query_toks": {"en": ["select", "name", ",", "surfacearea", ",", "indepyear", "from", "country", "order", "by", "population", "limit", "1", ";"], "ru": ["select", "name", ",", "surfacearea", ",", "indepyear", "from", "country", "order", "by", "population", "limit", "1", ";"]}, "query_toks_no_values": {"en": ["select", "name", ",", "surfacearea", ",", "indepyear", "from", "country", "order", "by", "population", "limit", "1", ";"], "ru": ["select", "name", ",", "surfacearea", ",", "indepyear", "from", "country", "order", "by", "population", "limit", "1", ";"]}, "masked_query": "SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1;", "question_pauq": {"ru": "\u0423\u043a\u0430\u0436\u0438\u0442\u0435 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435, \u0433\u043e\u0434 \u043d\u0435\u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u0438 \u043f\u043b\u043e\u0449\u0430\u0434\u044c \u0441\u0442\u0440\u0430\u043d\u044b \u0441 \u043d\u0430\u0438\u043c\u0435\u043d\u044c\u0448\u0438\u043c \u043d\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u0435\u043c."}, "question": "Give the name, year of independence, and surface area of the country that has the lowest population.", "kb_id": "world_1"}, {"id": "D_0791", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 9, false], null]], [0, [0, [0, 14, false], null]], [0, [0, [0, 20, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 12, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 9, false], null]], [0, [0, [0, 14, false], null]], [0, [0, [0, 20, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 12, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "the", "population", ",", "name", "and", "leader", "of", "the", "country", "with", "the", "largest", "area", "?"], "ru": ["\u041a\u0430\u043a\u043e\u0432\u043e", "\u043d\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u0435", ",", "\u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435", "\u0438", "\u043b\u0438\u0434\u0435\u0440", "\u0441\u0442\u0440\u0430\u043d\u044b", "\u0441", "\u0441\u0430\u043c\u043e\u0439", "\u0431\u043e\u043b\u044c\u0448\u043e\u0439", "\u043f\u043b\u043e\u0449\u0430\u0434\u044c\u044e", "?"]}, "query_toks": {"en": ["select", "name", ",", "population", ",", "headofstate", "from", "country", "order", "by", "surfacearea", "desc", "limit", "1", ";"], "ru": ["select", "name", ",", "population", ",", "headofstate", "from", "country", "order", "by", "surfacearea", "desc", "limit", "1", ";"]}, "query_toks_no_values": {"en": ["select", "name", ",", "population", ",", "headofstate", "from", "country", "order", "by", "surfacearea", "desc", "limit", "1", ";"], "ru": ["select", "name", ",", "population", ",", "headofstate", "from", "country", "order", "by", "surfacearea", "desc", "limit", "1", ";"]}, "masked_query": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1;", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0432\u043e \u043d\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u0435, \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u0438 \u043b\u0438\u0434\u0435\u0440 \u0441\u0442\u0440\u0430\u043d\u044b \u0441 \u0441\u0430\u043c\u043e\u0439 \u0431\u043e\u043b\u044c\u0448\u043e\u0439 \u043f\u043b\u043e\u0449\u0430\u0434\u044c\u044e?"}, "question": "What are the population, name and leader of the country with the largest area?", "kb_id": "world_1"}, {"id": "D_0792", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 9, false], null]], [0, [0, [0, 14, false], null]], [0, [0, [0, 20, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 12, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 9, false], null]], [0, [0, [0, 14, false], null]], [0, [0, [0, 20, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 12, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Give", "the", "name", ",", "population", ",", "and", "head", "of", "state", "for", "the", "country", "that", "has", "the", "largest", "area", "."], "ru": ["\u0423\u043a\u0430\u0436\u0438\u0442\u0435", "\u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435", ",", "\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u043e\u0441\u0442\u044c", "\u043d\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u044f", "\u0438", "\u0433\u043b\u0430\u0432\u0443", "\u0433\u043e\u0441\u0443\u0434\u0430\u0440\u0441\u0442\u0432\u0430", "\u0434\u043b\u044f", "\u0441\u0442\u0440\u0430\u043d\u044b", "\u0441", "\u0441\u0430\u043c\u043e\u0439", "\u0431\u043e\u043b\u044c\u0448\u043e\u0439", "\u043f\u043b\u043e\u0449\u0430\u0434\u044c\u044e", "."]}, "query_toks": {"en": ["select", "name", ",", "population", ",", "headofstate", "from", "country", "order", "by", "surfacearea", "desc", "limit", "1", ";"], "ru": ["select", "name", ",", "population", ",", "headofstate", "from", "country", "order", "by", "surfacearea", "desc", "limit", "1", ";"]}, "query_toks_no_values": {"en": ["select", "name", ",", "population", ",", "headofstate", "from", "country", "order", "by", "surfacearea", "desc", "limit", "1", ";"], "ru": ["select", "name", ",", "population", ",", "headofstate", "from", "country", "order", "by", "surfacearea", "desc", "limit", "1", ";"]}, "masked_query": "SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1;", "question_pauq": {"ru": "\u0423\u043a\u0430\u0436\u0438\u0442\u0435 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435, \u0447\u0438\u0441\u043b\u0435\u043d\u043d\u043e\u0441\u0442\u044c \u043d\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u044f \u0438 \u0433\u043b\u0430\u0432\u0443 \u0433\u043e\u0441\u0443\u0434\u0430\u0440\u0441\u0442\u0432\u0430 \u0434\u043b\u044f \u0441\u0442\u0440\u0430\u043d\u044b \u0441 \u0441\u0430\u043c\u043e\u0439 \u0431\u043e\u043b\u044c\u0448\u043e\u0439 \u043f\u043b\u043e\u0449\u0430\u0434\u044c\u044e."}, "question": "Give the name, population, and head of state for the country that has the largest area.", "kb_id": "world_1"}, {"id": "D_0793", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 23, false], null]]}, "select": [false, [[3, [0, [0, 24, false], null]], [0, [0, [0, 9, false], null]]]], "where": [], "groupBy": [[0, 9, false]], "having": [[false, 3, [0, [3, 0, false], null], 2.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 23, false], null]]}, "select": [false, [[3, [0, [0, 24, false], null]], [0, [0, [0, 9, false], null]]]], "where": [], "groupBy": [[0, 9, false]], "having": [[false, 3, [0, [3, 0, false], null], 2.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Return", "the", "country", "name", "and", "the", "numbers", "of", "languages", "spoken", "for", "each", "country", "that", "speaks", "at", "least", "3", "languages", "."], "ru": ["\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c", "\u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435", "\u0441\u0442\u0440\u0430\u043d\u044b", "\u0438", "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e", "\u044f\u0437\u044b\u043a\u043e\u0432", "\u0434\u043b\u044f", "\u043a\u0430\u0436\u0434\u043e\u0439", "\u0441\u0442\u0440\u0430\u043d\u044b", ",", "\u0432", "\u043a\u043e\u0442\u043e\u0440\u043e\u0439", "\u0433\u043e\u0432\u043e\u0440\u044f\u0442", "\u043a\u0430\u043a", "\u043c\u0438\u043d\u0438\u043c\u0443\u043c", "\u043d\u0430", "3", "\u044f\u0437\u044b\u043a\u0430\u0445", "."]}, "query_toks": {"en": ["select", "count", "(", "t2.language", ")", ",", "t1.name", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "group", "by", "t1.name", "having", "count", "(", "*", ")", ">", "2", ";"], "ru": ["select", "count", "(", "t2.language", ")", ",", "t1.name", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "group", "by", "t1.name", "having", "count", "(", "*", ")", ">", "2", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "t2.language", ")", ",", "t1.name", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "group", "by", "t1.name", "having", "count", "(", "*", ")", ">", "2", ";"], "ru": ["select", "count", "(", "t2.language", ")", ",", "t1.name", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "group", "by", "t1.name", "having", "count", "(", "*", ")", ">", "2", ";"]}, "masked_query": "SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2;", "question_pauq": {"ru": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u0441\u0442\u0440\u0430\u043d\u044b \u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u044f\u0437\u044b\u043a\u043e\u0432 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u0441\u0442\u0440\u0430\u043d\u044b, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u0433\u043e\u0432\u043e\u0440\u044f\u0442 \u043a\u0430\u043a \u043c\u0438\u043d\u0438\u043c\u0443\u043c \u043d\u0430 3 \u044f\u0437\u044b\u043a\u0430\u0445."}, "question": "Return the country name and the numbers of languages spoken for each country that speaks at least 3 languages.", "kb_id": "world_1"}, {"id": "D_0794", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 23, false], null]]}, "select": [false, [[3, [0, [0, 24, false], null]], [0, [0, [0, 9, false], null]]]], "where": [], "groupBy": [[0, 9, false]], "having": [[false, 3, [0, [3, 0, false], null], 2.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 23, false], null]]}, "select": [false, [[3, [0, [0, 24, false], null]], [0, [0, [0, 9, false], null]]]], "where": [], "groupBy": [[0, 9, false]], "having": [[false, 3, [0, [3, 0, false], null], 2.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "the", "names", "of", "countries", "that", "speak", "more", "than", "2", "languages", ",", "as", "well", "as", "how", "many", "languages", "they", "speak", "?"], "ru": ["\u041a\u0430\u043a", "\u043d\u0430\u0437\u044b\u0432\u0430\u044e\u0442\u0441\u044f", "\u0441\u0442\u0440\u0430\u043d\u044b", ",", "\u0432", "\u043a\u043e\u0442\u043e\u0440\u044b\u0445", "\u0433\u043e\u0432\u043e\u0440\u044f\u0442", "\u0431\u043e\u043b\u0435\u0435", "\u0447\u0435\u043c", "\u043d\u0430", "2", "\u044f\u0437\u044b\u043a\u0430\u0445", ",", "\u0430", "\u0442\u0430\u043a\u0436\u0435", "\u043d\u0430", "\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445", "\u044f\u0437\u044b\u043a\u0430\u0445", "\u043e\u043d\u0438", "\u0433\u043e\u0432\u043e\u0440\u044f\u0442", "?"]}, "query_toks": {"en": ["select", "count", "(", "t2.language", ")", ",", "t1.name", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "group", "by", "t1.name", "having", "count", "(", "*", ")", ">", "2", ";"], "ru": ["select", "count", "(", "t2.language", ")", ",", "t1.name", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "group", "by", "t1.name", "having", "count", "(", "*", ")", ">", "2", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "t2.language", ")", ",", "t1.name", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "group", "by", "t1.name", "having", "count", "(", "*", ")", ">", "2", ";"], "ru": ["select", "count", "(", "t2.language", ")", ",", "t1.name", "from", "country", "as", "t1", "join", "countrylanguage", "as", "t2", "on", "t1.code", "=", "t2.countrycode", "group", "by", "t1.name", "having", "count", "(", "*", ")", ">", "2", ";"]}, "masked_query": "SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2;", "question_pauq": {"ru": "\u041a\u0430\u043a \u043d\u0430\u0437\u044b\u0432\u0430\u044e\u0442\u0441\u044f \u0441\u0442\u0440\u0430\u043d\u044b, \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0433\u043e\u0432\u043e\u0440\u044f\u0442 \u0431\u043e\u043b\u0435\u0435 \u0447\u0435\u043c \u043d\u0430 2 \u044f\u0437\u044b\u043a\u0430\u0445, \u0430 \u0442\u0430\u043a\u0436\u0435 \u043d\u0430 \u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u044f\u0437\u044b\u043a\u0430\u0445 \u043e\u043d\u0438 \u0433\u043e\u0432\u043e\u0440\u044f\u0442?"}, "question": "What are the names of countries that speak more than 2 languages, as well as how many languages they speak?", "kb_id": "world_1"}, {"id": "D_0795", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT count(*) ,  District FROM city WHERE Population  >  (SELECT avg(Population) FROM city) GROUP BY District;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]], [0, [0, [0, 4, false], null]]]], "where": [[false, 3, [0, [0, 5, false], null], {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[5, [0, [0, 5, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [[0, 4, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]], [0, [0, [0, 4, false], null]]]], "where": [[false, 3, [0, [0, 5, false], null], {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[5, [0, [0, 5, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [[0, 4, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Find", "the", "number", "of", "cities", "in", "each", "district", "whose", "population", "is", "greater", "than", "the", "average", "population", "of", "cities", "?"], "ru": ["\u041d\u0430\u0439\u0434\u0438\u0442\u0435", "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e", "\u0433\u043e\u0440\u043e\u0434\u043e\u0432", "\u0432", "\u043a\u0430\u0436\u0434\u043e\u043c", "\u0440\u0430\u0439\u043e\u043d\u0435", ",", "\u043d\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u0435", "\u043a\u043e\u0442\u043e\u0440\u044b\u0445", "\u043f\u0440\u0435\u0432\u044b\u0448\u0430\u0435\u0442", "\u0441\u0440\u0435\u0434\u043d\u044e\u044e", "\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u043e\u0441\u0442\u044c", "\u043d\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u044f", "\u0433\u043e\u0440\u043e\u0434\u043e\u0432"]}, "query_toks": {"en": ["select", "count", "(", "*", ")", ",", "district", "from", "city", "where", "population", ">", "(", "select", "avg", "(", "population", ")", "from", "city", ")", "group", "by", "district", ";"], "ru": ["select", "count", "(", "*", ")", ",", "district", "from", "city", "where", "population", ">", "(", "select", "avg", "(", "population", ")", "from", "city", ")", "group", "by", "district", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "*", ")", ",", "district", "from", "city", "where", "population", ">", "(", "select", "avg", "(", "population", ")", "from", "city", ")", "group", "by", "district", ";"], "ru": ["select", "count", "(", "*", ")", ",", "district", "from", "city", "where", "population", ">", "(", "select", "avg", "(", "population", ")", "from", "city", ")", "group", "by", "district", ";"]}, "masked_query": "SELECT count(*) ,  District FROM city WHERE Population  >  (SELECT avg(Population) FROM city) GROUP BY District;", "question_pauq": {"ru": "\u041d\u0430\u0439\u0434\u0438\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0433\u043e\u0440\u043e\u0434\u043e\u0432 \u0432 \u043a\u0430\u0436\u0434\u043e\u043c \u0440\u0430\u0439\u043e\u043d\u0435, \u043d\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u0435 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043f\u0440\u0435\u0432\u044b\u0448\u0430\u0435\u0442 \u0441\u0440\u0435\u0434\u043d\u044e\u044e \u0447\u0438\u0441\u043b\u0435\u043d\u043d\u043e\u0441\u0442\u044c \u043d\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u044f \u0433\u043e\u0440\u043e\u0434\u043e\u0432"}, "question": "Find the number of cities in each district whose population is greater than the average population of cities?", "kb_id": "world_1"}, {"id": "D_0796", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT count(*) ,  District FROM city WHERE Population  >  (SELECT avg(Population) FROM city) GROUP BY District;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]], [0, [0, [0, 4, false], null]]]], "where": [[false, 3, [0, [0, 5, false], null], {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[5, [0, [0, 5, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [[0, 4, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]], [0, [0, [0, 4, false], null]]]], "where": [[false, 3, [0, [0, 5, false], null], {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[5, [0, [0, 5, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [[0, 4, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["How", "many", "cities", "in", "each", "district", "have", "a", "population", "that", "is", "above", "the", "average", "population", "across", "all", "cities", "?"], "ru": ["\u0421\u043a\u043e\u043b\u044c\u043a\u043e", "\u0433\u043e\u0440\u043e\u0434\u043e\u0432", "\u0432", "\u043a\u0430\u0436\u0434\u043e\u043c", "\u0440\u0430\u0439\u043e\u043d\u0435", "\u0438\u043c\u0435\u044e\u0442", "\u043d\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u0435", "\u0432\u044b\u0448\u0435", "\u0441\u0440\u0435\u0434\u043d\u0435\u0433\u043e", "\u043f\u043e", "\u0432\u0441\u0435\u043c", "\u0433\u043e\u0440\u043e\u0434\u0430\u043c", "?"]}, "query_toks": {"en": ["select", "count", "(", "*", ")", ",", "district", "from", "city", "where", "population", ">", "(", "select", "avg", "(", "population", ")", "from", "city", ")", "group", "by", "district", ";"], "ru": ["select", "count", "(", "*", ")", ",", "district", "from", "city", "where", "population", ">", "(", "select", "avg", "(", "population", ")", "from", "city", ")", "group", "by", "district", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "*", ")", ",", "district", "from", "city", "where", "population", ">", "(", "select", "avg", "(", "population", ")", "from", "city", ")", "group", "by", "district", ";"], "ru": ["select", "count", "(", "*", ")", ",", "district", "from", "city", "where", "population", ">", "(", "select", "avg", "(", "population", ")", "from", "city", ")", "group", "by", "district", ";"]}, "masked_query": "SELECT count(*) ,  District FROM city WHERE Population  >  (SELECT avg(Population) FROM city) GROUP BY District;", "question_pauq": {"ru": "\u0421\u043a\u043e\u043b\u044c\u043a\u043e \u0433\u043e\u0440\u043e\u0434\u043e\u0432 \u0432 \u043a\u0430\u0436\u0434\u043e\u043c \u0440\u0430\u0439\u043e\u043d\u0435 \u0438\u043c\u0435\u044e\u0442 \u043d\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u0435 \u0432\u044b\u0448\u0435 \u0441\u0440\u0435\u0434\u043d\u0435\u0433\u043e \u043f\u043e \u0432\u0441\u0435\u043c \u0433\u043e\u0440\u043e\u0434\u0430\u043c?"}, "question": "How many cities in each district have a population that is above the average population across all cities?", "kb_id": "world_1"}, {"id": "D_0797", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[4, [0, [0, 14, false], null]], [0, [0, [0, 19, false], null]]]], "where": [], "groupBy": [[0, 19, false]], "having": [[false, 3, [0, [5, 15, false], null], 72.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[4, [0, [0, 14, false], null]], [0, [0, [0, 19, false], null]]]], "where": [], "groupBy": [[0, 19, false]], "having": [[false, 3, [0, [5, 15, false], null], 72.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Find", "the", "government", "form", "name", "and", "total", "population", "for", "each", "government", "form", "whose", "average", "life", "expectancy", "is", "longer", "than", "72", "."], "ru": ["\u041d\u0430\u0439\u0434\u0438\u0442\u0435", "\u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435", "\u0444\u043e\u0440\u043c\u044b", "\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f", "\u0438", "\u043e\u0431\u0449\u0443\u044e", "\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u043e\u0441\u0442\u044c", "\u043d\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u044f", "\u0434\u043b\u044f", "\u043a\u0430\u0436\u0434\u043e\u0439", "\u0444\u043e\u0440\u043c\u044b", "\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f", ",", "\u0441\u0440\u0435\u0434\u043d\u044f\u044f", "\u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c", "\u0436\u0438\u0437\u043d\u0438", "\u043f\u0440\u0438", "\u043a\u043e\u0442\u043e\u0440\u043e\u0439", "\u043f\u0440\u0435\u0432\u044b\u0448\u0430\u0435\u0442", "72", "\u0433\u043e\u0434\u0430", "."]}, "query_toks": {"en": ["select", "sum", "(", "population", ")", ",", "governmentform", "from", "country", "group", "by", "governmentform", "having", "avg", "(", "lifeexpectancy", ")", ">", "72", ";"], "ru": ["select", "sum", "(", "population", ")", ",", "governmentform", "from", "country", "group", "by", "governmentform", "having", "avg", "(", "lifeexpectancy", ")", ">", "72", ";"]}, "query_toks_no_values": {"en": ["select", "sum", "(", "population", ")", ",", "governmentform", "from", "country", "group", "by", "governmentform", "having", "avg", "(", "lifeexpectancy", ")", ">", "72", ";"], "ru": ["select", "sum", "(", "population", ")", ",", "governmentform", "from", "country", "group", "by", "governmentform", "having", "avg", "(", "lifeexpectancy", ")", ">", "72", ";"]}, "masked_query": "SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72;", "question_pauq": {"ru": "\u041d\u0430\u0439\u0434\u0438\u0442\u0435 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u0444\u043e\u0440\u043c\u044b \u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0438 \u043e\u0431\u0449\u0443\u044e \u0447\u0438\u0441\u043b\u0435\u043d\u043d\u043e\u0441\u0442\u044c \u043d\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u0444\u043e\u0440\u043c\u044b \u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f, \u0441\u0440\u0435\u0434\u043d\u044f\u044f \u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0436\u0438\u0437\u043d\u0438 \u043f\u0440\u0438 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u043f\u0440\u0435\u0432\u044b\u0448\u0430\u0435\u0442 72 \u0433\u043e\u0434\u0430."}, "question": "Find the government form name and total population for each government form whose average life expectancy is longer than 72.", "kb_id": "world_1"}, {"id": "D_0798", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[4, [0, [0, 14, false], null]], [0, [0, [0, 19, false], null]]]], "where": [], "groupBy": [[0, 19, false]], "having": [[false, 3, [0, [5, 15, false], null], 72.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[4, [0, [0, 14, false], null]], [0, [0, [0, 19, false], null]]]], "where": [], "groupBy": [[0, 19, false]], "having": [[false, 3, [0, [5, 15, false], null], 72.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "the", "different", "government", "forms", "and", "what", "is", "the", "total", "population", "of", "each", "for", "government", "forms", "that", "have", "an", "average", "life", "expectancy", "greater", "than", "72", "?"], "ru": ["\u041a\u0430\u043a\u043e\u0432\u044b", "\u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0435", "\u0444\u043e\u0440\u043c\u044b", "\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f", "\u0438", "\u043a\u0430\u043a\u043e\u0432\u0430", "\u043e\u0431\u0449\u0430\u044f", "\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u043e\u0441\u0442\u044c", "\u043d\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u044f", "\u043a\u0430\u0436\u0434\u043e\u0439", "\u0438\u0437", "\u0444\u043e\u0440\u043c", "\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f", ",", "\u0441\u0440\u0435\u0434\u043d\u044f\u044f", "\u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c", "\u0436\u0438\u0437\u043d\u0438", "\u043f\u0440\u0438", "\u043a\u043e\u0442\u043e\u0440\u044b\u0445", "\u043f\u0440\u0435\u0432\u044b\u0448\u0430\u0435\u0442", "72", "\u0433\u043e\u0434\u0430", "?"]}, "query_toks": {"en": ["select", "sum", "(", "population", ")", ",", "governmentform", "from", "country", "group", "by", "governmentform", "having", "avg", "(", "lifeexpectancy", ")", ">", "72", ";"], "ru": ["select", "sum", "(", "population", ")", ",", "governmentform", "from", "country", "group", "by", "governmentform", "having", "avg", "(", "lifeexpectancy", ")", ">", "72", ";"]}, "query_toks_no_values": {"en": ["select", "sum", "(", "population", ")", ",", "governmentform", "from", "country", "group", "by", "governmentform", "having", "avg", "(", "lifeexpectancy", ")", ">", "72", ";"], "ru": ["select", "sum", "(", "population", ")", ",", "governmentform", "from", "country", "group", "by", "governmentform", "having", "avg", "(", "lifeexpectancy", ")", ">", "72", ";"]}, "masked_query": "SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72;", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0432\u044b \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0435 \u0444\u043e\u0440\u043c\u044b \u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0438 \u043a\u0430\u043a\u043e\u0432\u0430 \u043e\u0431\u0449\u0430\u044f \u0447\u0438\u0441\u043b\u0435\u043d\u043d\u043e\u0441\u0442\u044c \u043d\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u0438\u0437 \u0444\u043e\u0440\u043c \u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f, \u0441\u0440\u0435\u0434\u043d\u044f\u044f \u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0436\u0438\u0437\u043d\u0438 \u043f\u0440\u0438 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043f\u0440\u0435\u0432\u044b\u0448\u0430\u0435\u0442 72 \u0433\u043e\u0434\u0430?"}, "question": "What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72?", "kb_id": "world_1"}, {"id": "D_0799", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[4, [0, [0, 14, false], null]], [5, [0, [0, 15, false], null]], [0, [0, [0, 10, false], null]]]], "where": [], "groupBy": [[0, 10, false]], "having": [[false, 4, [0, [5, 15, false], null], 72.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[4, [0, [0, 14, false], null]], [5, [0, [0, 15, false], null]], [0, [0, [0, 10, false], null]]]], "where": [], "groupBy": [[0, 10, false]], "having": [[false, 4, [0, [5, 15, false], null], 72.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Find", "the", "average", "life", "expectancy", "and", "total", "population", "for", "each", "continent", "where", "the", "average", "life", "expectancy", "is", "shorter", "than", "72", "?"], "ru": ["\u041d\u0430\u0439\u0434\u0438\u0442\u0435", "\u0441\u0440\u0435\u0434\u043d\u044e\u044e", "\u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c", "\u0436\u0438\u0437\u043d\u0438", "\u0438", "\u043e\u0431\u0449\u0443\u044e", "\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u043e\u0441\u0442\u044c", "\u043d\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u044f", "\u0434\u043b\u044f", "\u043a\u0430\u0436\u0434\u043e\u0433\u043e", "\u043a\u043e\u043d\u0442\u0438\u043d\u0435\u043d\u0442\u0430", ",", "\u0433\u0434\u0435", "\u0441\u0440\u0435\u0434\u043d\u044f\u044f", "\u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c", "\u0436\u0438\u0437\u043d\u0438", "\u043c\u0435\u043d\u044c\u0448\u0435", "72"]}, "query_toks": {"en": ["select", "sum", "(", "population", ")", ",", "avg", "(", "lifeexpectancy", ")", ",", "continent", "from", "country", "group", "by", "continent", "having", "avg", "(", "lifeexpectancy", ")", "<", "72", ";"], "ru": ["select", "sum", "(", "population", ")", ",", "avg", "(", "lifeexpectancy", ")", ",", "continent", "from", "country", "group", "by", "continent", "having", "avg", "(", "lifeexpectancy", ")", "<", "72", ";"]}, "query_toks_no_values": {"en": ["select", "sum", "(", "population", ")", ",", "avg", "(", "lifeexpectancy", ")", ",", "continent", "from", "country", "group", "by", "continent", "having", "avg", "(", "lifeexpectancy", ")", "<", "72", ";"], "ru": ["select", "sum", "(", "population", ")", ",", "avg", "(", "lifeexpectancy", ")", ",", "continent", "from", "country", "group", "by", "continent", "having", "avg", "(", "lifeexpectancy", ")", "<", "72", ";"]}, "masked_query": "SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72;", "question_pauq": {"ru": "\u041d\u0430\u0439\u0434\u0438\u0442\u0435 \u0441\u0440\u0435\u0434\u043d\u044e\u044e \u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0436\u0438\u0437\u043d\u0438 \u0438 \u043e\u0431\u0449\u0443\u044e \u0447\u0438\u0441\u043b\u0435\u043d\u043d\u043e\u0441\u0442\u044c \u043d\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043a\u043e\u043d\u0442\u0438\u043d\u0435\u043d\u0442\u0430, \u0433\u0434\u0435 \u0441\u0440\u0435\u0434\u043d\u044f\u044f \u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0436\u0438\u0437\u043d\u0438 \u043c\u0435\u043d\u044c\u0448\u0435 72"}, "question": "Find the average life expectancy and total population for each continent where the average life expectancy is shorter than 72?", "kb_id": "world_1"}, {"id": "D_0800", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[4, [0, [0, 14, false], null]], [5, [0, [0, 15, false], null]], [0, [0, [0, 10, false], null]]]], "where": [], "groupBy": [[0, 10, false]], "having": [[false, 4, [0, [5, 15, false], null], 72.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[4, [0, [0, 14, false], null]], [5, [0, [0, 15, false], null]], [0, [0, [0, 10, false], null]]]], "where": [], "groupBy": [[0, 10, false]], "having": [[false, 4, [0, [5, 15, false], null], 72.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "the", "different", "continents", "and", "the", "total", "popuation", "and", "average", "life", "expectancy", "corresponding", "to", "each", ",", "for", "continents", "that", "have", "an", "average", "life", "expectancy", "less", "than", "72", "?"], "ru": ["\u041a\u0430\u043a\u043e\u0432\u044b", "\u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0435", "\u043a\u043e\u043d\u0442\u0438\u043d\u0435\u043d\u0442\u044b", ",", "\u043e\u0431\u0449\u0430\u044f", "\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u043e\u0441\u0442\u044c", "\u043d\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u044f", "\u0438", "\u0441\u0440\u0435\u0434\u043d\u044f\u044f", "\u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c", "\u0436\u0438\u0437\u043d\u0438", ",", "\u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0435", "\u043a\u0430\u0436\u0434\u043e\u043c\u0443", "\u0438\u0437", "\u043a\u043e\u043d\u0442\u0438\u043d\u0435\u043d\u0442\u043e\u0432", ",", "\u0441\u0440\u0435\u0434\u043d\u044f\u044f", "\u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c", "\u0436\u0438\u0437\u043d\u0438", "\u043a\u043e\u0442\u043e\u0440\u044b\u0445", "\u043c\u0435\u043d\u0435\u0435", "72", "?"]}, "query_toks": {"en": ["select", "sum", "(", "population", ")", ",", "avg", "(", "lifeexpectancy", ")", ",", "continent", "from", "country", "group", "by", "continent", "having", "avg", "(", "lifeexpectancy", ")", "<", "72", ";"], "ru": ["select", "sum", "(", "population", ")", ",", "avg", "(", "lifeexpectancy", ")", ",", "continent", "from", "country", "group", "by", "continent", "having", "avg", "(", "lifeexpectancy", ")", "<", "72", ";"]}, "query_toks_no_values": {"en": ["select", "sum", "(", "population", ")", ",", "avg", "(", "lifeexpectancy", ")", ",", "continent", "from", "country", "group", "by", "continent", "having", "avg", "(", "lifeexpectancy", ")", "<", "72", ";"], "ru": ["select", "sum", "(", "population", ")", ",", "avg", "(", "lifeexpectancy", ")", ",", "continent", "from", "country", "group", "by", "continent", "having", "avg", "(", "lifeexpectancy", ")", "<", "72", ";"]}, "masked_query": "SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72;", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0432\u044b \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0435 \u043a\u043e\u043d\u0442\u0438\u043d\u0435\u043d\u0442\u044b, \u043e\u0431\u0449\u0430\u044f \u0447\u0438\u0441\u043b\u0435\u043d\u043d\u043e\u0441\u0442\u044c \u043d\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u044f \u0438 \u0441\u0440\u0435\u0434\u043d\u044f\u044f \u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0436\u0438\u0437\u043d\u0438, \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0435 \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u0438\u0437 \u043a\u043e\u043d\u0442\u0438\u043d\u0435\u043d\u0442\u043e\u0432, \u0441\u0440\u0435\u0434\u043d\u044f\u044f \u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0436\u0438\u0437\u043d\u0438 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043c\u0435\u043d\u0435\u0435 72?"}, "question": "What are the different continents and the total popuation and average life expectancy corresponding to each, for continents that have an average life expectancy less than 72?", "kb_id": "world_1"}, {"id": "D_0801", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 9, false], null]], [0, [0, [0, 12, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 12, false], null]]], "limit": 5, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 9, false], null]], [0, [0, [0, 12, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 12, false], null]]], "limit": 5, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "the", "names", "and", "areas", "of", "countries", "with", "the", "top", "5", "largest", "area", "?"], "ru": ["\u041a\u0430\u043a", "\u043d\u0430\u0437\u044b\u0432\u0430\u044e\u0442\u0441\u044f", "\u0441\u0442\u0440\u0430\u043d\u044b", ",", "\u0432\u0445\u043e\u0434\u044f\u0449\u0438\u0435", "\u0432", "\u043f\u044f\u0442\u0435\u0440\u043a\u0443", "\u043a\u0440\u0443\u043f\u043d\u0435\u0439\u0448\u0438\u0445", "\u043f\u043e", "\u043f\u043b\u043e\u0449\u0430\u0434\u0438", ",", "\u0438", "\u043a\u0430\u043a\u043e\u0432\u044b", "\u0438\u0445", "\u0442\u0435\u0440\u0440\u0438\u0442\u043e\u0440\u0438\u0438", "?"]}, "query_toks": {"en": ["select", "name", ",", "surfacearea", "from", "country", "order", "by", "surfacearea", "desc", "limit", "5", ";"], "ru": ["select", "name", ",", "surfacearea", "from", "country", "order", "by", "surfacearea", "desc", "limit", "5", ";"]}, "query_toks_no_values": {"en": ["select", "name", ",", "surfacearea", "from", "country", "order", "by", "surfacearea", "desc", "limit", "5", ";"], "ru": ["select", "name", ",", "surfacearea", "from", "country", "order", "by", "surfacearea", "desc", "limit", "5", ";"]}, "masked_query": "SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5;", "question_pauq": {"ru": "\u041a\u0430\u043a \u043d\u0430\u0437\u044b\u0432\u0430\u044e\u0442\u0441\u044f \u0441\u0442\u0440\u0430\u043d\u044b, \u0432\u0445\u043e\u0434\u044f\u0449\u0438\u0435 \u0432 \u043f\u044f\u0442\u0435\u0440\u043a\u0443 \u043a\u0440\u0443\u043f\u043d\u0435\u0439\u0448\u0438\u0445 \u043f\u043e \u043f\u043b\u043e\u0449\u0430\u0434\u0438, \u0438 \u043a\u0430\u043a\u043e\u0432\u044b \u0438\u0445 \u0442\u0435\u0440\u0440\u0438\u0442\u043e\u0440\u0438\u0438?"}, "question": "What are the names and areas of countries with the top 5 largest area?", "kb_id": "world_1"}, {"id": "D_0802", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 9, false], null]], [0, [0, [0, 12, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 12, false], null]]], "limit": 5, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 9, false], null]], [0, [0, [0, 12, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 12, false], null]]], "limit": 5, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Return", "the", "names", "and", "surface", "areas", "of", "the", "5", "largest", "countries", "."], "ru": ["\u041e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0442\u044c", "\u0438\u043c\u0435\u043d\u0430", "\u0438", "\u043f\u043b\u043e\u0449\u0430\u0434\u0438", "5", "\u043a\u0440\u0443\u043f\u043d\u0435\u0439\u0448\u0438\u0445", "\u0441\u0442\u0440\u0430\u043d", "."]}, "query_toks": {"en": ["select", "name", ",", "surfacearea", "from", "country", "order", "by", "surfacearea", "desc", "limit", "5", ";"], "ru": ["select", "name", ",", "surfacearea", "from", "country", "order", "by", "surfacearea", "desc", "limit", "5", ";"]}, "query_toks_no_values": {"en": ["select", "name", ",", "surfacearea", "from", "country", "order", "by", "surfacearea", "desc", "limit", "5", ";"], "ru": ["select", "name", ",", "surfacearea", "from", "country", "order", "by", "surfacearea", "desc", "limit", "5", ";"]}, "masked_query": "SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5;", "question_pauq": {"ru": "\u041e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0442\u044c \u0438\u043c\u0435\u043d\u0430 \u0438 \u043f\u043b\u043e\u0449\u0430\u0434\u0438 5 \u043a\u0440\u0443\u043f\u043d\u0435\u0439\u0448\u0438\u0445 \u0441\u0442\u0440\u0430\u043d."}, "question": "Return the names and surface areas of the 5 largest countries.", "kb_id": "world_1"}, {"id": "D_0803", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 14, false], null]]], "limit": 3, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 14, false], null]]], "limit": 3, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "names", "of", "countries", "with", "the", "top", "3", "largest", "population", "?"], "ru": ["\u041a\u0430\u043a", "\u043d\u0430\u0437\u044b\u0432\u0430\u044e\u0442\u0441\u044f", "\u0441\u0442\u0440\u0430\u043d\u044b", "\u0441", "\u0442\u043e\u043f-3", "\u043f\u043e", "\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u043e\u0441\u0442\u0438", "\u043d\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u044f", "?"]}, "query_toks": {"en": ["select", "name", "from", "country", "order", "by", "population", "desc", "limit", "3", ";"], "ru": ["select", "name", "from", "country", "order", "by", "population", "desc", "limit", "3", ";"]}, "query_toks_no_values": {"en": ["select", "name", "from", "country", "order", "by", "population", "desc", "limit", "3", ";"], "ru": ["select", "name", "from", "country", "order", "by", "population", "desc", "limit", "3", ";"]}, "masked_query": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3;", "question_pauq": {"ru": "\u041a\u0430\u043a \u043d\u0430\u0437\u044b\u0432\u0430\u044e\u0442\u0441\u044f \u0441\u0442\u0440\u0430\u043d\u044b \u0441 \u0442\u043e\u043f-3 \u043f\u043e \u0447\u0438\u0441\u043b\u0435\u043d\u043d\u043e\u0441\u0442\u0438 \u043d\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u044f?"}, "question": "What are names of countries with the top 3 largest population?", "kb_id": "world_1"}, {"id": "D_0804", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 14, false], null]]], "limit": 3, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 14, false], null]]], "limit": 3, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Return", "the", "names", "of", "the", "3", "most", "populated", "countries", "."], "ru": ["\u041f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c", "\u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f", "3-\u0445", "\u0441\u0430\u043c\u044b\u0445", "\u0433\u0443\u0441\u0442\u043e\u043d\u0430\u0441\u0435\u043b\u0435\u043d\u043d\u044b\u0445", "\u0441\u0442\u0440\u0430\u043d", "."]}, "query_toks": {"en": ["select", "name", "from", "country", "order", "by", "population", "desc", "limit", "3", ";"], "ru": ["select", "name", "from", "country", "order", "by", "population", "desc", "limit", "3", ";"]}, "query_toks_no_values": {"en": ["select", "name", "from", "country", "order", "by", "population", "desc", "limit", "3", ";"], "ru": ["select", "name", "from", "country", "order", "by", "population", "desc", "limit", "3", ";"]}, "masked_query": "SELECT Name FROM country ORDER BY Population DESC LIMIT 3;", "question_pauq": {"ru": "\u041f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f 3-\u0445 \u0441\u0430\u043c\u044b\u0445 \u0433\u0443\u0441\u0442\u043e\u043d\u0430\u0441\u0435\u043b\u0435\u043d\u043d\u044b\u0445 \u0441\u0442\u0440\u0430\u043d."}, "question": "Return the names of the 3 most populated countries.", "kb_id": "world_1"}, {"id": "D_0805", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["asc", [[0, [0, 14, false], null]]], "limit": 3, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["asc", [[0, [0, 14, false], null]]], "limit": 3, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "the", "names", "of", "the", "nations", "with", "the", "3", "lowest", "populations", "?"], "ru": ["\u041a\u0430\u043a", "\u043d\u0430\u0437\u044b\u0432\u0430\u044e\u0442\u0441\u044f", "\u043d\u0430\u0440\u043e\u0434\u044b", "\u0441", "3", "\u043d\u0430\u0438\u043c\u0435\u043d\u044c\u0448\u0438\u043c", "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c", "\u043d\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u044f", "?"]}, "query_toks": {"en": ["select", "name", "from", "country", "order", "by", "population", "asc", "limit", "3", ";"], "ru": ["select", "name", "from", "country", "order", "by", "population", "asc", "limit", "3", ";"]}, "query_toks_no_values": {"en": ["select", "name", "from", "country", "order", "by", "population", "asc", "limit", "3", ";"], "ru": ["select", "name", "from", "country", "order", "by", "population", "asc", "limit", "3", ";"]}, "masked_query": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3;", "question_pauq": {"ru": "\u041a\u0430\u043a \u043d\u0430\u0437\u044b\u0432\u0430\u044e\u0442\u0441\u044f \u043d\u0430\u0440\u043e\u0434\u044b \u0441 3 \u043d\u0430\u0438\u043c\u0435\u043d\u044c\u0448\u0438\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c \u043d\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u044f?"}, "question": "What are the names of the nations with the 3 lowest populations?", "kb_id": "world_1"}, {"id": "D_0806", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["asc", [[0, [0, 14, false], null]]], "limit": 3, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["asc", [[0, [0, 14, false], null]]], "limit": 3, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Return", "the", "names", "of", "the", "3", "countries", "with", "the", "fewest", "people", "."], "ru": ["\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c", "\u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f", "3", "\u0441\u0442\u0440\u0430\u043d", "\u0441", "\u043d\u0430\u0438\u043c\u0435\u043d\u044c\u0448\u0438\u043c", "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c", "\u043b\u044e\u0434\u0435\u0439", "."]}, "query_toks": {"en": ["select", "name", "from", "country", "order", "by", "population", "asc", "limit", "3", ";"], "ru": ["select", "name", "from", "country", "order", "by", "population", "asc", "limit", "3", ";"]}, "query_toks_no_values": {"en": ["select", "name", "from", "country", "order", "by", "population", "asc", "limit", "3", ";"], "ru": ["select", "name", "from", "country", "order", "by", "population", "asc", "limit", "3", ";"]}, "masked_query": "SELECT Name FROM country ORDER BY Population ASC LIMIT 3;", "question_pauq": {"ru": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f 3 \u0441\u0442\u0440\u0430\u043d \u0441 \u043d\u0430\u0438\u043c\u0435\u043d\u044c\u0448\u0438\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c \u043b\u044e\u0434\u0435\u0439."}, "question": "Return the names of the 3 countries with the fewest people.", "kb_id": "world_1"}, {"id": "D_0807", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT count(*) FROM country WHERE continent  =  \"\u0410\u0442\u043b\u0430\u043d\u0442\u0438\u0434\u0430\";"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 10, false], null], "\"Asia\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 10, false], null], "\"\u0410\u0442\u043b\u0430\u043d\u0442\u0438\u0434\u0430\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["how", "many", "countries", "are", "in", "Asia", "?"], "ru": ["\u0421\u043a\u043e\u043b\u044c\u043a\u043e", "\u0441\u0442\u0440\u0430\u043d", "\u0432", "\u0410\u0442\u043b\u0430\u043d\u0442\u0438\u0434\u0435", "?"]}, "query_toks": {"en": ["select", "count", "(", "*", ")", "from", "country", "where", "continent", "=", "\"Asia\"", ";"], "ru": ["select", "count", "(", "*", ")", "from", "country", "where", "continent", "=", "\"\u0410\u0442\u043b\u0430\u043d\u0442\u0438\u0434\u0430\"", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "*", ")", "from", "country", "where", "continent", "=", "value", ";"], "ru": ["select", "count", "(", "*", ")", "from", "country", "where", "continent", "=", "value", ";"]}, "masked_query": "SELECT count(*) FROM country WHERE continent  =  \"Asia\";", "question_pauq": {"ru": "\u0421\u043a\u043e\u043b\u044c\u043a\u043e \u0441\u0442\u0440\u0430\u043d \u0432 \u0410\u0442\u043b\u0430\u043d\u0442\u0438\u0434\u0435?"}, "question": "how many countries are in Asia?", "kb_id": "world_1"}, {"id": "D_0808", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT count(*) FROM country WHERE continent  =  \"\u0410\u0442\u043b\u0430\u043d\u0442\u0438\u0434\u0430\";"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 10, false], null], "\"Asia\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 10, false], null], "\"\u0410\u0442\u043b\u0430\u043d\u0442\u0438\u0434\u0430\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Count", "the", "number", "of", "countries", "in", "Asia", "."], "ru": ["\u041f\u043e\u0434\u0441\u0447\u0438\u0442\u0430\u0439\u0442\u0435", "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e", "\u0441\u0442\u0440\u0430\u043d", "\u0432", "\u0410\u0442\u043b\u0430\u043d\u0442\u0438\u0434\u0435", "."]}, "query_toks": {"en": ["select", "count", "(", "*", ")", "from", "country", "where", "continent", "=", "\"Asia\"", ";"], "ru": ["select", "count", "(", "*", ")", "from", "country", "where", "continent", "=", "\"\u0410\u0442\u043b\u0430\u043d\u0442\u0438\u0434\u0430\"", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "*", ")", "from", "country", "where", "continent", "=", "value", ";"], "ru": ["select", "count", "(", "*", ")", "from", "country", "where", "continent", "=", "value", ";"]}, "masked_query": "SELECT count(*) FROM country WHERE continent  =  \"Asia\";", "question_pauq": {"ru": "\u041f\u043e\u0434\u0441\u0447\u0438\u0442\u0430\u0439\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0442\u0440\u0430\u043d \u0432 \u0410\u0442\u043b\u0430\u043d\u0442\u0438\u0434\u0435."}, "question": "Count the number of countries in Asia.", "kb_id": "world_1"}, {"id": "D_0809", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT Name FROM country WHERE continent  =  \"\u041b\u0435\u043c\u0443\u0440\u0438\u044f\" AND Population  =  \"80000\";"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [[false, 2, [0, [0, 10, false], null], "\"Europe\"", null], "and", [false, 2, [0, [0, 14, false], null], "\"80000\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [[false, 2, [0, [0, 10, false], null], "\"\u041b\u0435\u043c\u0443\u0440\u0438\u044f\"", null], "and", [false, 2, [0, [0, 14, false], null], "\"80000\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "the", "names", "of", "the", "countries", "that", "are", "in", "the", "continent", "of", "Europe", "and", "have", "a", "population", "of", "80000", "?"], "ru": ["\u041a\u0430\u043a", "\u043d\u0430\u0437\u044b\u0432\u0430\u044e\u0442\u0441\u044f", "\u0441\u0442\u0440\u0430\u043d\u044b", "\u043b\u0435\u043c\u0443\u0440\u0438\u0439\u0441\u043a\u043e\u0433\u043e", "\u043a\u043e\u043d\u0442\u0438\u043d\u0435\u043d\u0442\u0430", "\u0441", "\u043d\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u0435\u043c", "80000", "\u0447\u0435\u043b\u043e\u0432\u0435\u043a", "?"]}, "query_toks": {"en": ["select", "name", "from", "country", "where", "continent", "=", "\"Europe\"", "and", "population", "=", "\"80000\"", ";"], "ru": ["select", "name", "from", "country", "where", "continent", "=", "\"\u041b\u0435\u043c\u0443\u0440\u0438\u044f\"", "and", "population", "=", "\"80000\"", ";"]}, "query_toks_no_values": {"en": ["select", "name", "from", "country", "where", "continent", "=", "value", "and", "population", "=", "value", ";"], "ru": ["select", "name", "from", "country", "where", "continent", "=", "value", "and", "population", "=", "value", ";"]}, "masked_query": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\";", "question_pauq": {"ru": "\u041a\u0430\u043a \u043d\u0430\u0437\u044b\u0432\u0430\u044e\u0442\u0441\u044f \u0441\u0442\u0440\u0430\u043d\u044b \u043b\u0435\u043c\u0443\u0440\u0438\u0439\u0441\u043a\u043e\u0433\u043e \u043a\u043e\u043d\u0442\u0438\u043d\u0435\u043d\u0442\u0430 \u0441 \u043d\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u0435\u043c 80000 \u0447\u0435\u043b\u043e\u0432\u0435\u043a?"}, "question": "What are the names of the countries that are in the continent of Europe and have a population of 80000?", "kb_id": "world_1"}, {"id": "D_0810", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT Name FROM country WHERE continent  =  \"\u041b\u0435\u043c\u0443\u0440\u0438\u044f\" AND Population  =  \"80000\";"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [[false, 2, [0, [0, 10, false], null], "\"Europe\"", null], "and", [false, 2, [0, [0, 14, false], null], "\"80000\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [[false, 2, [0, [0, 10, false], null], "\"\u041b\u0435\u043c\u0443\u0440\u0438\u044f\"", null], "and", [false, 2, [0, [0, 14, false], null], "\"80000\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Give", "the", "names", "of", "countries", "that", "are", "in", "Europe", "and", "have", "a", "population", "equal", "to", "80000", "."], "ru": ["\u041d\u0430\u0437\u043e\u0432\u0438\u0442\u0435", "\u0441\u0442\u0440\u0430\u043d\u044b", "\u041b\u0435\u043c\u0443\u0440\u0438\u0438", "\u0441", "\u043d\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u0435\u043c", "80000", "\u0447\u0435\u043b\u043e\u0432\u0435\u043a", "."]}, "query_toks": {"en": ["select", "name", "from", "country", "where", "continent", "=", "\"Europe\"", "and", "population", "=", "\"80000\"", ";"], "ru": ["select", "name", "from", "country", "where", "continent", "=", "\"\u041b\u0435\u043c\u0443\u0440\u0438\u044f\"", "and", "population", "=", "\"80000\"", ";"]}, "query_toks_no_values": {"en": ["select", "name", "from", "country", "where", "continent", "=", "value", "and", "population", "=", "value", ";"], "ru": ["select", "name", "from", "country", "where", "continent", "=", "value", "and", "population", "=", "value", ";"]}, "masked_query": "SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\";", "question_pauq": {"ru": "\u041d\u0430\u0437\u043e\u0432\u0438\u0442\u0435 \u0441\u0442\u0440\u0430\u043d\u044b \u041b\u0435\u043c\u0443\u0440\u0438\u0438 \u0441 \u043d\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u0435\u043c 80000 \u0447\u0435\u043b\u043e\u0432\u0435\u043a."}, "question": "Give the names of countries that are in Europe and have a population equal to 80000.", "kb_id": "world_1"}, {"id": "D_0811", "source": "spider-dev", "type": "dev", "query": {"ru": "select sum(population) ,  avg(surfacearea) from country where continent  =  \"\u0410\u0442\u043b\u0430\u043d\u0442\u0438\u0434\u0430\" and surfacearea  >  3000;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[4, [0, [0, 14, false], null]], [5, [0, [0, 12, false], null]]]], "where": [[false, 2, [0, [0, 10, false], null], "\"north america\"", null], "and", [false, 3, [0, [0, 12, false], null], 3000.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[4, [0, [0, 14, false], null]], [5, [0, [0, 12, false], null]]]], "where": [[false, 2, [0, [0, 10, false], null], "\"\u0410\u0442\u043b\u0430\u043d\u0442\u0438\u0434\u0430\"", null], "and", [false, 3, [0, [0, 12, false], null], 3000.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "total", "population", "and", "average", "area", "of", "countries", "in", "the", "continent", "of", "North", "America", "whose", "area", "is", "bigger", "than", "3000", "?"], "ru": ["\u041a\u0430\u043a\u043e\u0432\u0430", "\u043e\u0431\u0449\u0430\u044f", "\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u043e\u0441\u0442\u044c", "\u043d\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u044f", "\u0438", "\u0441\u0440\u0435\u0434\u043d\u044f\u044f", "\u043f\u043b\u043e\u0449\u0430\u0434\u044c", "\u0441\u0442\u0440\u0430\u043d", "\u043d\u0430", "\u043a\u043e\u043d\u0442\u0438\u043d\u0435\u043d\u0442\u0435", "\u0410\u0442\u043b\u0430\u043d\u0442\u0438\u0434\u0430", ",", "\u043f\u043b\u043e\u0449\u0430\u0434\u044c", "\u043a\u043e\u0442\u043e\u0440\u044b\u0445", "\u043f\u0440\u0435\u0432\u044b\u0448\u0430\u0435\u0442", "3000", "?"]}, "query_toks": {"en": ["select", "sum", "(", "population", ")", ",", "avg", "(", "surfacearea", ")", "from", "country", "where", "continent", "=", "\"north america\"", "and", "surfacearea", ">", "3000", ";"], "ru": ["select", "sum", "(", "population", ")", ",", "avg", "(", "surfacearea", ")", "from", "country", "where", "continent", "=", "\"\u0410\u0442\u043b\u0430\u043d\u0442\u0438\u0434\u0430\"", "and", "surfacearea", ">", "3000", ";"]}, "query_toks_no_values": {"en": ["select", "sum", "(", "population", ")", ",", "avg", "(", "surfacearea", ")", "from", "country", "where", "continent", "=", "value", "and", "surfacearea", ">", "3000", ";"], "ru": ["select", "sum", "(", "population", ")", ",", "avg", "(", "surfacearea", ")", "from", "country", "where", "continent", "=", "value", "and", "surfacearea", ">", "3000", ";"]}, "masked_query": "select sum(population) ,  avg(surfacearea) from country where continent  =  \"north america\" and surfacearea  >  3000;", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0432\u0430 \u043e\u0431\u0449\u0430\u044f \u0447\u0438\u0441\u043b\u0435\u043d\u043d\u043e\u0441\u0442\u044c \u043d\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u044f \u0438 \u0441\u0440\u0435\u0434\u043d\u044f\u044f \u043f\u043b\u043e\u0449\u0430\u0434\u044c \u0441\u0442\u0440\u0430\u043d \u043d\u0430 \u043a\u043e\u043d\u0442\u0438\u043d\u0435\u043d\u0442\u0435 \u0410\u0442\u043b\u0430\u043d\u0442\u0438\u0434\u0430, \u043f\u043b\u043e\u0449\u0430\u0434\u044c \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043f\u0440\u0435\u0432\u044b\u0448\u0430\u0435\u0442 3000?"}, "question": "What is the total population and average area of countries in the continent of North America whose area is bigger than 3000 ?", "kb_id": "world_1"}, {"id": "D_0812", "source": "spider-dev", "type": "dev", "query": {"ru": "select sum(population) ,  avg(surfacearea) from country where continent  =  \"\u0410\u0442\u043b\u0430\u043d\u0442\u0438\u0434\u0430\" and surfacearea  >  3000;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[4, [0, [0, 14, false], null]], [5, [0, [0, 12, false], null]]]], "where": [[false, 2, [0, [0, 10, false], null], "\"north america\"", null], "and", [false, 3, [0, [0, 12, false], null], 3000.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[4, [0, [0, 14, false], null]], [5, [0, [0, 12, false], null]]]], "where": [[false, 2, [0, [0, 10, false], null], "\"\u0410\u0442\u043b\u0430\u043d\u0442\u0438\u0434\u0430\"", null], "and", [false, 3, [0, [0, 12, false], null], 3000.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Give", "the", "total", "population", "and", "average", "surface", "area", "corresponding", "to", "countries", "in", "North", "America", "that", "have", "a", "surface", "area", "greater", "than", "3000", "."], "ru": ["\u041f\u0440\u0438\u0432\u0435\u0434\u0438", "\u043e\u0431\u0449\u0443\u044e", "\u0447\u0438\u0441\u043b\u0435\u043d\u043d\u043e\u0441\u0442\u044c", "\u043d\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u044f", "\u0438", "\u0441\u0440\u0435\u0434\u043d\u044e\u044e", "\u043f\u043b\u043e\u0449\u0430\u0434\u044c", "\u0432", "\u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0438", "\u0441\u043e", "\u0441\u0442\u0440\u0430\u043d\u0430\u043c\u0438", "\u0410\u0442\u043b\u0430\u043d\u0442\u0438\u0434\u044b", "\u0441", "\u043f\u043b\u043e\u0449\u0430\u0434\u044c\u044e", "\u0431\u043e\u043b\u0435\u0435", "3000", "."]}, "query_toks": {"en": ["select", "sum", "(", "population", ")", ",", "avg", "(", "surfacearea", ")", "from", "country", "where", "continent", "=", "\"north america\"", "and", "surfacearea", ">", "3000", ";"], "ru": ["select", "sum", "(", "population", ")", ",", "avg", "(", "surfacearea", ")", "from", "country", "where", "continent", "=", "\"\u0410\u0442\u043b\u0430\u043d\u0442\u0438\u0434\u0430\"", "and", "surfacearea", ">", "3000", ";"]}, "query_toks_no_values": {"en": ["select", "sum", "(", "population", ")", ",", "avg", "(", "surfacearea", ")", "from", "country", "where", "continent", "=", "value", "and", "surfacearea", ">", "3000", ";"], "ru": ["select", "sum", "(", "population", ")", ",", "avg", "(", "surfacearea", ")", "from", "country", "where", "continent", "=", "value", "and", "surfacearea", ">", "3000", ";"]}, "masked_query": "select sum(population) ,  avg(surfacearea) from country where continent  =  \"north america\" and surfacearea  >  3000;", "question_pauq": {"ru": "\u041f\u0440\u0438\u0432\u0435\u0434\u0438 \u043e\u0431\u0449\u0443\u044e \u0447\u0438\u0441\u043b\u0435\u043d\u043d\u043e\u0441\u0442\u044c \u043d\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u044f \u0438 \u0441\u0440\u0435\u0434\u043d\u044e\u044e \u043f\u043b\u043e\u0449\u0430\u0434\u044c \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0438 \u0441\u043e \u0441\u0442\u0440\u0430\u043d\u0430\u043c\u0438 \u0410\u0442\u043b\u0430\u043d\u0442\u0438\u0434\u044b \u0441 \u043f\u043b\u043e\u0449\u0430\u0434\u044c\u044e \u0431\u043e\u043b\u0435\u0435 3000."}, "question": "Give the total population and average surface area corresponding to countries in North America that have a surface area greater than 3000 .", "kb_id": "world_1"}, {"id": "D_0813", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT name FROM city WHERE Population BETWEEN 160000 AND 900000;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [[false, 1, [0, [0, 5, false], null], 160000.0, 900000.0]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [[false, 1, [0, [0, 5, false], null], 160000.0, 900000.0]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "the", "cities", "whose", "population", "is", "between", "160000", "and", "900000", "?"], "ru": ["\u041a\u0430\u043a\u0438\u0435", "\u0433\u043e\u0440\u043e\u0434\u0430", "\u0441", "\u043d\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u0435\u043c", "\u043e\u0442", "160000", "\u0434\u043e", "900000", "?"]}, "query_toks": {"en": ["select", "name", "from", "city", "where", "population", "between", "160000", "and", "900000", ";"], "ru": ["select", "name", "from", "city", "where", "population", "between", "160000", "and", "900000", ";"]}, "query_toks_no_values": {"en": ["select", "name", "from", "city", "where", "population", "between", "160000", "and", "900000", ";"], "ru": ["select", "name", "from", "city", "where", "population", "between", "160000", "and", "900000", ";"]}, "masked_query": "SELECT name FROM city WHERE Population BETWEEN 160000 AND 900000;", "question_pauq": {"ru": "\u041a\u0430\u043a\u0438\u0435 \u0433\u043e\u0440\u043e\u0434\u0430 \u0441 \u043d\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u0435\u043c \u043e\u0442 160000 \u0434\u043e 900000?"}, "question": "What are the cities whose population is between 160000 and 900000?", "kb_id": "world_1"}, {"id": "D_0814", "source": "spider-dev", "type": "dev", "query": {"ru": "select name from city where population between 160000 and 900000;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [[false, 1, [0, [0, 5, false], null], 160000.0, 900000.0]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [[false, 1, [0, [0, 5, false], null], 160000.0, 900000.0]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Return", "the", "names", "of", "cities", "that", "have", "a", "population", "between", "160000", "and", "900000", "."], "ru": ["\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c", "\u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f", "\u0433\u043e\u0440\u043e\u0434\u043e\u0432", "\u0441", "\u043d\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u0435\u043c", "\u043e\u0442", "160000", "\u0434\u043e", "900000", "\u0447\u0435\u043b\u043e\u0432\u0435\u043a", "."]}, "query_toks": {"en": ["select", "name", "from", "city", "where", "population", "between", "160000", "and", "900000", ";"], "ru": ["select", "name", "from", "city", "where", "population", "between", "160000", "and", "900000", ";"]}, "query_toks_no_values": {"en": ["select", "name", "from", "city", "where", "population", "between", "160000", "and", "900000", ";"], "ru": ["select", "name", "from", "city", "where", "population", "between", "160000", "and", "900000", ";"]}, "masked_query": "select name from city where population between 160000 and 900000;", "question_pauq": {"ru": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f \u0433\u043e\u0440\u043e\u0434\u043e\u0432 \u0441 \u043d\u0430\u0441\u0435\u043b\u0435\u043d\u0438\u0435\u043c \u043e\u0442 160000 \u0434\u043e 900000 \u0447\u0435\u043b\u043e\u0432\u0435\u043a."}, "question": "Return the names of cities that have a population between 160000 and 900000 .", "kb_id": "world_1"}, {"id": "D_0815", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 3]], "conds": []}, "select": [false, [[0, [0, [0, 24, false], null]]]], "where": [], "groupBy": [[0, 24, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 3]], "conds": []}, "select": [false, [[0, [0, [0, 24, false], null]]]], "where": [], "groupBy": [[0, 24, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Which", "language", "is", "spoken", "by", "the", "largest", "number", "of", "countries", "?"], "ru": ["\u041d\u0430", "\u043a\u0430\u043a\u043e\u043c", "\u044f\u0437\u044b\u043a\u0435", "\u0433\u043e\u0432\u043e\u0440\u0438\u0442", "\u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0435\u0435", "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e", "\u0441\u0442\u0440\u0430\u043d", "?"]}, "query_toks": {"en": ["select", "language", "from", "countrylanguage", "group", "by", "language", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"], "ru": ["select", "language", "from", "countrylanguage", "group", "by", "language", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"]}, "query_toks_no_values": {"en": ["select", "language", "from", "countrylanguage", "group", "by", "language", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"], "ru": ["select", "language", "from", "countrylanguage", "group", "by", "language", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"]}, "masked_query": "SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1;", "question_pauq": {"ru": "\u041d\u0430 \u043a\u0430\u043a\u043e\u043c \u044f\u0437\u044b\u043a\u0435 \u0433\u043e\u0432\u043e\u0440\u0438\u0442 \u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0442\u0440\u0430\u043d?"}, "question": "Which language is spoken by the largest number of countries?", "kb_id": "world_1"}, {"id": "D_0816", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 3]], "conds": []}, "select": [false, [[0, [0, [0, 24, false], null]]]], "where": [], "groupBy": [[0, 24, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 3]], "conds": []}, "select": [false, [[0, [0, [0, 24, false], null]]]], "where": [], "groupBy": [[0, 24, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Give", "the", "language", "that", "is", "spoken", "in", "the", "most", "countries", "."], "ru": ["\u041d\u0430\u0437\u043e\u0432\u0438\u0442\u0435", "\u044f\u0437\u044b\u043a", ",", "\u043d\u0430", "\u043a\u043e\u0442\u043e\u0440\u043e\u043c", "\u0433\u043e\u0432\u043e\u0440\u044f\u0442", "\u0432", "\u0431\u043e\u043b\u044c\u0448\u0438\u043d\u0441\u0442\u0432\u0435", "\u0441\u0442\u0440\u0430\u043d", "."]}, "query_toks": {"en": ["select", "language", "from", "countrylanguage", "group", "by", "language", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"], "ru": ["select", "language", "from", "countrylanguage", "group", "by", "language", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"]}, "query_toks_no_values": {"en": ["select", "language", "from", "countrylanguage", "group", "by", "language", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"], "ru": ["select", "language", "from", "countrylanguage", "group", "by", "language", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"]}, "masked_query": "SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1;", "question_pauq": {"ru": "\u041d\u0430\u0437\u043e\u0432\u0438\u0442\u0435 \u044f\u0437\u044b\u043a, \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u0433\u043e\u0432\u043e\u0440\u044f\u0442 \u0432 \u0431\u043e\u043b\u044c\u0448\u0438\u043d\u0441\u0442\u0432\u0435 \u0441\u0442\u0440\u0430\u043d."}, "question": "Give the language that is spoken in the most countries.", "kb_id": "world_1"}, {"id": "D_0817", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 3]], "conds": []}, "select": [false, [[0, [0, [0, 24, false], null]], [0, [0, [0, 23, false], null]], [1, [0, [0, 26, false], null]]]], "where": [], "groupBy": [[0, 23, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 3]], "conds": []}, "select": [false, [[0, [0, [0, 24, false], null]], [0, [0, [0, 23, false], null]], [1, [0, [0, 26, false], null]]]], "where": [], "groupBy": [[0, 23, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "language", "spoken", "by", "the", "largest", "percentage", "of", "people", "in", "each", "country", "?"], "ru": ["\u041d\u0430", "\u043a\u0430\u043a\u043e\u043c", "\u044f\u0437\u044b\u043a\u0435", "\u0433\u043e\u0432\u043e\u0440\u0438\u0442", "\u0441\u0430\u043c\u044b\u0439", "\u0431\u043e\u043b\u044c\u0448\u043e\u0439", "\u043f\u0440\u043e\u0446\u0435\u043d\u0442", "\u043b\u044e\u0434\u0435\u0439", "\u0432", "\u043a\u0430\u0436\u0434\u043e\u0439", "\u0441\u0442\u0440\u0430\u043d\u0435", "?"]}, "query_toks": {"en": ["select", "language", ",", "countrycode", ",", "max", "(", "percentage", ")", "from", "countrylanguage", "group", "by", "countrycode", ";"], "ru": ["select", "language", ",", "countrycode", ",", "max", "(", "percentage", ")", "from", "countrylanguage", "group", "by", "countrycode", ";"]}, "query_toks_no_values": {"en": ["select", "language", ",", "countrycode", ",", "max", "(", "percentage", ")", "from", "countrylanguage", "group", "by", "countrycode", ";"], "ru": ["select", "language", ",", "countrycode", ",", "max", "(", "percentage", ")", "from", "countrylanguage", "group", "by", "countrycode", ";"]}, "masked_query": "SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode;", "question_pauq": {"ru": "\u041d\u0430 \u043a\u0430\u043a\u043e\u043c \u044f\u0437\u044b\u043a\u0435 \u0433\u043e\u0432\u043e\u0440\u0438\u0442 \u0441\u0430\u043c\u044b\u0439 \u0431\u043e\u043b\u044c\u0448\u043e\u0439 \u043f\u0440\u043e\u0446\u0435\u043d\u0442 \u043b\u044e\u0434\u0435\u0439 \u0432 \u043a\u0430\u0436\u0434\u043e\u0439 \u0441\u0442\u0440\u0430\u043d\u0435?"}, "question": "What is the language spoken by the largest percentage of people in each country?", "kb_id": "world_1"}, {"id": "D_0818", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 3]], "conds": []}, "select": [false, [[0, [0, [0, 24, false], null]], [0, [0, [0, 23, false], null]], [1, [0, [0, 26, false], null]]]], "where": [], "groupBy": [[0, 23, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 3]], "conds": []}, "select": [false, [[0, [0, [0, 24, false], null]], [0, [0, [0, 23, false], null]], [1, [0, [0, 26, false], null]]]], "where": [], "groupBy": [[0, 23, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "the", "country", "codes", "of", "the", "different", "countries", ",", "and", "what", "are", "the", "languages", "spoken", "by", "the", "greatest", "percentage", "of", "people", "for", "each", "?"], "ru": ["\u041a\u0430\u043a\u043e\u0432\u044b", "\u043a\u043e\u0434\u044b", "\u0441\u0442\u0440\u0430\u043d", "\u0432", "\u0440\u0430\u0437\u043d\u044b\u0445", "\u0441\u0442\u0440\u0430\u043d\u0430\u0445", "\u0438", "\u043d\u0430", "\u043a\u0430\u043a\u0438\u0445", "\u044f\u0437\u044b\u043a\u0430\u0445", "\u0433\u043e\u0432\u043e\u0440\u0438\u0442", "\u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0438\u0439", "\u043f\u0440\u043e\u0446\u0435\u043d\u0442", "\u043b\u044e\u0434\u0435\u0439", "\u0432", "\u043a\u0430\u0436\u0434\u043e\u0439", "\u0438\u0437", "\u043d\u0438\u0445", "?"]}, "query_toks": {"en": ["select", "language", ",", "countrycode", ",", "max", "(", "percentage", ")", "from", "countrylanguage", "group", "by", "countrycode", ";"], "ru": ["select", "language", ",", "countrycode", ",", "max", "(", "percentage", ")", "from", "countrylanguage", "group", "by", "countrycode", ";"]}, "query_toks_no_values": {"en": ["select", "language", ",", "countrycode", ",", "max", "(", "percentage", ")", "from", "countrylanguage", "group", "by", "countrycode", ";"], "ru": ["select", "language", ",", "countrycode", ",", "max", "(", "percentage", ")", "from", "countrylanguage", "group", "by", "countrycode", ";"]}, "masked_query": "SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode;", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0432\u044b \u043a\u043e\u0434\u044b \u0441\u0442\u0440\u0430\u043d \u0432 \u0440\u0430\u0437\u043d\u044b\u0445 \u0441\u0442\u0440\u0430\u043d\u0430\u0445 \u0438 \u043d\u0430 \u043a\u0430\u043a\u0438\u0445 \u044f\u0437\u044b\u043a\u0430\u0445 \u0433\u043e\u0432\u043e\u0440\u0438\u0442 \u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0438\u0439 \u043f\u0440\u043e\u0446\u0435\u043d\u0442 \u043b\u044e\u0434\u0435\u0439 \u0432 \u043a\u0430\u0436\u0434\u043e\u0439 \u0438\u0437 \u043d\u0438\u0445?"}, "question": "What are the country codes of the different countries, and what are the languages spoken by the greatest percentage of people for each?", "kb_id": "world_1"}, {"id": "D_0819", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"\u041d\u043e\u0432\u043e\u044f\u0437\" GROUP BY CountryCode;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 3]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]], [1, [0, [0, 26, false], null]]]], "where": [[false, 2, [0, [0, 24, false], null], "\"Spanish\"", null]], "groupBy": [[0, 23, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 3]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]], [1, [0, [0, 26, false], null]]]], "where": [[false, 2, [0, [0, 24, false], null], "\"\u041d\u043e\u0432\u043e\u044f\u0437\"", null]], "groupBy": [[0, 23, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "total", "number", "of", "countries", "where", "Spanish", "is", "spoken", "by", "the", "largest", "percentage", "of", "people", "?"], "ru": ["\u041a\u0430\u043a\u043e\u0432\u043e", "\u043e\u0431\u0449\u0435\u0435", "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e", "\u0441\u0442\u0440\u0430\u043d", ",", "\u0432", "\u043a\u043e\u0442\u043e\u0440\u044b\u0445", "\u043d\u0430", "\u043d\u043e\u0432\u043e\u044f\u0437\u0441\u043a\u043e\u043c", "\u044f\u0437\u044b\u043a\u0435", "\u0433\u043e\u0432\u043e\u0440\u0438\u0442", "\u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0438\u0439", "\u043f\u0440\u043e\u0446\u0435\u043d\u0442", "\u043b\u044e\u0434\u0435\u0439", "?"]}, "query_toks": {"en": ["select", "count", "(", "*", ")", ",", "max", "(", "percentage", ")", "from", "countrylanguage", "where", "language", "=", "\"Spanish\"", "group", "by", "countrycode", ";"], "ru": ["select", "count", "(", "*", ")", ",", "max", "(", "percentage", ")", "from", "countrylanguage", "where", "language", "=", "\"\u041d\u043e\u0432\u043e\u044f\u0437\"", "group", "by", "countrycode", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "*", ")", ",", "max", "(", "percentage", ")", "from", "countrylanguage", "where", "language", "=", "value", "group", "by", "countrycode", ";"], "ru": ["select", "count", "(", "*", ")", ",", "max", "(", "percentage", ")", "from", "countrylanguage", "where", "language", "=", "value", "group", "by", "countrycode", ";"]}, "masked_query": "SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode;", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0432\u043e \u043e\u0431\u0449\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0442\u0440\u0430\u043d, \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043d\u0430 \u043d\u043e\u0432\u043e\u044f\u0437\u0441\u043a\u043e\u043c \u044f\u0437\u044b\u043a\u0435 \u0433\u043e\u0432\u043e\u0440\u0438\u0442 \u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0438\u0439 \u043f\u0440\u043e\u0446\u0435\u043d\u0442 \u043b\u044e\u0434\u0435\u0439?"}, "question": "What is the total number of countries where Spanish is spoken by the largest percentage of people?", "kb_id": "world_1"}, {"id": "D_0820", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"\u041d\u043e\u0432\u043e\u044f\u0437\" GROUP BY CountryCode;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 3]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]], [1, [0, [0, 26, false], null]]]], "where": [[false, 2, [0, [0, 24, false], null], "\"Spanish\"", null]], "groupBy": [[0, 23, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 3]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]], [1, [0, [0, 26, false], null]]]], "where": [[false, 2, [0, [0, 24, false], null], "\"\u041d\u043e\u0432\u043e\u044f\u0437\"", null]], "groupBy": [[0, 23, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Count", "the", "number", "of", "countries", "for", "which", "Spanish", "is", "the", "predominantly", "spoken", "language", "."], "ru": ["\u041f\u043e\u0434\u0441\u0447\u0438\u0442\u0430\u0439\u0442\u0435", "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e", "\u0441\u0442\u0440\u0430\u043d", ",", "\u0432", "\u043a\u043e\u0442\u043e\u0440\u044b\u0445", "\u043d\u043e\u0432\u043e\u044f\u0437\u0441\u043a\u0438\u0439", "\u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f", "\u043e\u0441\u043d\u043e\u0432\u043d\u044b\u043c", "\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u043c", "\u044f\u0437\u044b\u043a\u043e\u043c", "."]}, "query_toks": {"en": ["select", "count", "(", "*", ")", ",", "max", "(", "percentage", ")", "from", "countrylanguage", "where", "language", "=", "\"Spanish\"", "group", "by", "countrycode", ";"], "ru": ["select", "count", "(", "*", ")", ",", "max", "(", "percentage", ")", "from", "countrylanguage", "where", "language", "=", "\"\u041d\u043e\u0432\u043e\u044f\u0437\"", "group", "by", "countrycode", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "*", ")", ",", "max", "(", "percentage", ")", "from", "countrylanguage", "where", "language", "=", "value", "group", "by", "countrycode", ";"], "ru": ["select", "count", "(", "*", ")", ",", "max", "(", "percentage", ")", "from", "countrylanguage", "where", "language", "=", "value", "group", "by", "countrycode", ";"]}, "masked_query": "SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode;", "question_pauq": {"ru": "\u041f\u043e\u0434\u0441\u0447\u0438\u0442\u0430\u0439\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0442\u0440\u0430\u043d, \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043d\u043e\u0432\u043e\u044f\u0437\u0441\u043a\u0438\u0439 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u043c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u043c \u044f\u0437\u044b\u043a\u043e\u043c."}, "question": "Count the number of countries for which Spanish is the predominantly spoken language.", "kb_id": "world_1"}, {"id": "D_0821", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"\u041d\u043e\u0432\u043e\u044f\u0437\" GROUP BY CountryCode;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 3]], "conds": []}, "select": [false, [[0, [0, [0, 23, false], null]], [1, [0, [0, 26, false], null]]]], "where": [[false, 2, [0, [0, 24, false], null], "\"Spanish\"", null]], "groupBy": [[0, 23, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 3]], "conds": []}, "select": [false, [[0, [0, [0, 23, false], null]], [1, [0, [0, 26, false], null]]]], "where": [[false, 2, [0, [0, 24, false], null], "\"\u041d\u043e\u0432\u043e\u044f\u0437\"", null]], "groupBy": [[0, 23, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "the", "codes", "of", "countries", "where", "Spanish", "is", "spoken", "by", "the", "largest", "percentage", "of", "people", "?"], "ru": ["\u041a\u0430\u043a\u043e\u0432\u044b", "\u043a\u043e\u0434\u044b", "\u0441\u0442\u0440\u0430\u043d", ",", "\u0432", "\u043a\u043e\u0442\u043e\u0440\u044b\u0445", "\u043d\u0430", "\u043d\u043e\u0432\u043e\u044f\u0437\u0441\u043a\u043e\u043c", "\u044f\u0437\u044b\u043a\u0435", "\u0433\u043e\u0432\u043e\u0440\u0438\u0442", "\u0441\u0430\u043c\u044b\u0439", "\u0431\u043e\u043b\u044c\u0448\u043e\u0439", "\u043f\u0440\u043e\u0446\u0435\u043d\u0442", "\u043b\u044e\u0434\u0435\u0439", "?"]}, "query_toks": {"en": ["select", "countrycode", ",", "max", "(", "percentage", ")", "from", "countrylanguage", "where", "language", "=", "\"Spanish\"", "group", "by", "countrycode", ";"], "ru": ["select", "countrycode", ",", "max", "(", "percentage", ")", "from", "countrylanguage", "where", "language", "=", "\"\u041d\u043e\u0432\u043e\u044f\u0437\"", "group", "by", "countrycode", ";"]}, "query_toks_no_values": {"en": ["select", "countrycode", ",", "max", "(", "percentage", ")", "from", "countrylanguage", "where", "language", "=", "value", "group", "by", "countrycode", ";"], "ru": ["select", "countrycode", ",", "max", "(", "percentage", ")", "from", "countrylanguage", "where", "language", "=", "value", "group", "by", "countrycode", ";"]}, "masked_query": "SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode;", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0432\u044b \u043a\u043e\u0434\u044b \u0441\u0442\u0440\u0430\u043d, \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043d\u0430 \u043d\u043e\u0432\u043e\u044f\u0437\u0441\u043a\u043e\u043c \u044f\u0437\u044b\u043a\u0435 \u0433\u043e\u0432\u043e\u0440\u0438\u0442 \u0441\u0430\u043c\u044b\u0439 \u0431\u043e\u043b\u044c\u0448\u043e\u0439 \u043f\u0440\u043e\u0446\u0435\u043d\u0442 \u043b\u044e\u0434\u0435\u0439?"}, "question": "What are the codes of countries where Spanish is spoken by the largest percentage of people?", "kb_id": "world_1"}, {"id": "D_0822", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"\u041d\u043e\u0432\u043e\u044f\u0437\" GROUP BY CountryCode;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 3]], "conds": []}, "select": [false, [[0, [0, [0, 23, false], null]], [1, [0, [0, 26, false], null]]]], "where": [[false, 2, [0, [0, 24, false], null], "\"Spanish\"", null]], "groupBy": [[0, 23, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 3]], "conds": []}, "select": [false, [[0, [0, [0, 23, false], null]], [1, [0, [0, 26, false], null]]]], "where": [[false, 2, [0, [0, 24, false], null], "\"\u041d\u043e\u0432\u043e\u044f\u0437\"", null]], "groupBy": [[0, 23, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Return", "the", "codes", "of", "countries", "for", "which", "Spanish", "is", "the", "predominantly", "spoken", "language", "."], "ru": ["\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c", "\u043a\u043e\u0434\u044b", "\u0441\u0442\u0440\u0430\u043d", ",", "\u0434\u043b\u044f", "\u043a\u043e\u0442\u043e\u0440\u044b\u0445", "\u043d\u043e\u0432\u043e\u044f\u0437", "\u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f", "\u043e\u0441\u043d\u043e\u0432\u043d\u044b\u043c", "\u044f\u0437\u044b\u043a\u043e\u043c", "."]}, "query_toks": {"en": ["select", "countrycode", ",", "max", "(", "percentage", ")", "from", "countrylanguage", "where", "language", "=", "\"Spanish\"", "group", "by", "countrycode", ";"], "ru": ["select", "countrycode", ",", "max", "(", "percentage", ")", "from", "countrylanguage", "where", "language", "=", "\"\u041d\u043e\u0432\u043e\u044f\u0437\"", "group", "by", "countrycode", ";"]}, "query_toks_no_values": {"en": ["select", "countrycode", ",", "max", "(", "percentage", ")", "from", "countrylanguage", "where", "language", "=", "value", "group", "by", "countrycode", ";"], "ru": ["select", "countrycode", ",", "max", "(", "percentage", ")", "from", "countrylanguage", "where", "language", "=", "value", "group", "by", "countrycode", ";"]}, "masked_query": "SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode;", "question_pauq": {"ru": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u043a\u043e\u0434\u044b \u0441\u0442\u0440\u0430\u043d, \u0434\u043b\u044f \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043d\u043e\u0432\u043e\u044f\u0437 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u043c \u044f\u0437\u044b\u043a\u043e\u043c."}, "question": "Return the codes of countries for which Spanish is the predominantly spoken language.", "kb_id": "world_1"}, {"id": "D_0823", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT count(*) FROM conductor;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["How", "many", "conductors", "are", "there", "?"], "ru": ["\u0421\u043a\u043e\u043b\u044c\u043a\u043e", "\u0437\u0434\u0435\u0441\u044c", "\u0434\u0438\u0440\u0438\u0436\u0435\u0440\u043e\u0432", "?"]}, "query_toks": {"en": ["select", "count", "(", "*", ")", "from", "conductor", ";"], "ru": ["select", "count", "(", "*", ")", "from", "conductor", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "*", ")", "from", "conductor", ";"], "ru": ["select", "count", "(", "*", ")", "from", "conductor", ";"]}, "masked_query": "SELECT count(*) FROM conductor;", "question_pauq": {"ru": "\u0421\u043a\u043e\u043b\u044c\u043a\u043e \u0437\u0434\u0435\u0441\u044c \u0434\u0438\u0440\u0438\u0436\u0435\u0440\u043e\u0432?"}, "question": "How many conductors are there?", "kb_id": "orchestra"}, {"id": "D_0824", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT count(*) FROM conductor;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Count", "the", "number", "of", "conductors", "."], "ru": ["\u041f\u043e\u0434\u0441\u0447\u0438\u0442\u0430\u0439\u0442\u0435", "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e", "\u0434\u0438\u0440\u0438\u0436\u0435\u0440\u043e\u0432", "."]}, "query_toks": {"en": ["select", "count", "(", "*", ")", "from", "conductor", ";"], "ru": ["select", "count", "(", "*", ")", "from", "conductor", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "*", ")", "from", "conductor", ";"], "ru": ["select", "count", "(", "*", ")", "from", "conductor", ";"]}, "masked_query": "SELECT count(*) FROM conductor;", "question_pauq": {"ru": "\u041f\u043e\u0434\u0441\u0447\u0438\u0442\u0430\u0439\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0434\u0438\u0440\u0438\u0436\u0435\u0440\u043e\u0432."}, "question": "Count the number of conductors.", "kb_id": "orchestra"}, {"id": "D_0825", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT Name FROM conductor ORDER BY Age ASC;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["asc", [[0, [0, 3, false], null]]], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["asc", [[0, [0, 3, false], null]]], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["List", "the", "names", "of", "conductors", "in", "ascending", "order", "of", "age", "."], "ru": ["\u041f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0438\u0442\u0435", "\u0438\u043c\u0435\u043d\u0430", "\u0434\u0438\u0440\u0438\u0436\u0435\u0440\u043e\u0432", "\u0432", "\u043f\u043e\u0440\u044f\u0434\u043a\u0435", "\u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430\u043d\u0438\u044f", "\u0438\u0445", "\u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430", "."]}, "query_toks": {"en": ["select", "name", "from", "conductor", "order", "by", "age", "asc", ";"], "ru": ["select", "name", "from", "conductor", "order", "by", "age", "asc", ";"]}, "query_toks_no_values": {"en": ["select", "name", "from", "conductor", "order", "by", "age", "asc", ";"], "ru": ["select", "name", "from", "conductor", "order", "by", "age", "asc", ";"]}, "masked_query": "SELECT Name FROM conductor ORDER BY Age ASC;", "question_pauq": {"ru": "\u041f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0438\u0442\u0435 \u0438\u043c\u0435\u043d\u0430 \u0434\u0438\u0440\u0438\u0436\u0435\u0440\u043e\u0432 \u0432 \u043f\u043e\u0440\u044f\u0434\u043a\u0435 \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430\u043d\u0438\u044f \u0438\u0445 \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430."}, "question": "List the names of conductors in ascending order of age.", "kb_id": "orchestra"}, {"id": "D_0826", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT Name FROM conductor ORDER BY Age ASC;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["asc", [[0, [0, 3, false], null]]], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["asc", [[0, [0, 3, false], null]]], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "the", "names", "of", "conductors", ",", "ordered", "by", "age", "?"], "ru": ["\u041a\u0430\u043a", "\u0437\u043e\u0432\u0443\u0442", "\u0434\u0438\u0440\u0438\u0436\u0435\u0440\u043e\u0432", "\u043f\u043e", "\u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0443", "?"]}, "query_toks": {"en": ["select", "name", "from", "conductor", "order", "by", "age", "asc", ";"], "ru": ["select", "name", "from", "conductor", "order", "by", "age", "asc", ";"]}, "query_toks_no_values": {"en": ["select", "name", "from", "conductor", "order", "by", "age", "asc", ";"], "ru": ["select", "name", "from", "conductor", "order", "by", "age", "asc", ";"]}, "masked_query": "SELECT Name FROM conductor ORDER BY Age ASC;", "question_pauq": {"ru": "\u041a\u0430\u043a \u0437\u043e\u0432\u0443\u0442 \u0434\u0438\u0440\u0438\u0436\u0435\u0440\u043e\u0432 \u043f\u043e \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0443?"}, "question": "What are the names of conductors, ordered by age?", "kb_id": "orchestra"}, {"id": "D_0827", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT Name FROM conductor WHERE Nationality != '\u0420\u043e\u0441\u0441\u0438\u044f';"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [[false, 7, [0, [0, 4, false], null], "\"USA\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [[false, 7, [0, [0, 4, false], null], "\"\u0420\u043e\u0441\u0441\u0438\u044f\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "the", "names", "of", "conductors", "whose", "nationalities", "are", "not", "``", "USA", "''", "?"], "ru": ["\u041a\u0430\u043a", "\u0437\u043e\u0432\u0443\u0442", "\u0434\u0438\u0440\u0438\u0436\u0435\u0440\u043e\u0432", ",", "\u0447\u044c\u044f", "\u043d\u0430\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u044c", "\u043d\u0435", "\u00ab", "\u0420\u043e\u0441\u0441\u0438\u044f", "\u00bb", "?"]}, "query_toks": {"en": ["select", "name", "from", "conductor", "where", "nationality", "!=", "\"USA\"", ";"], "ru": ["select", "name", "from", "conductor", "where", "nationality", "!=", "\"\u0420\u043e\u0441\u0441\u0438\u044f\"", ";"]}, "query_toks_no_values": {"en": ["select", "name", "from", "conductor", "where", "nationality", "!=", "value", ";"], "ru": ["select", "name", "from", "conductor", "where", "nationality", "!=", "value", ";"]}, "masked_query": "SELECT Name FROM conductor WHERE Nationality != 'USA';", "question_pauq": {"ru": "\u041a\u0430\u043a \u0437\u043e\u0432\u0443\u0442 \u0434\u0438\u0440\u0438\u0436\u0435\u0440\u043e\u0432, \u0447\u044c\u044f \u043d\u0430\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u043d\u0435 \u00ab\u0420\u043e\u0441\u0441\u0438\u044f\u00bb?"}, "question": "What are the names of conductors whose nationalities are not \"USA\"?", "kb_id": "orchestra"}, {"id": "D_0828", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT Name FROM conductor WHERE Nationality != '\u0420\u043e\u0441\u0441\u0438\u044f';"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [[false, 7, [0, [0, 4, false], null], "\"USA\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [[false, 7, [0, [0, 4, false], null], "\"\u0420\u043e\u0441\u0441\u0438\u044f\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Return", "the", "names", "of", "conductors", "that", "do", "not", "have", "the", "nationality", "``", "USA", "''", "."], "ru": ["\u0423\u043a\u0430\u0436\u0438\u0442\u0435", "\u0438\u043c\u0435\u043d\u0430", "\u0434\u0438\u0440\u0438\u0436\u0435\u0440\u043e\u0432", ",", "\u043d\u0435", "\u0438\u043c\u0435\u044e\u0449\u0438\u0445", "\u043d\u0430\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u0438", "\u00ab", "\u0420\u043e\u0441\u0441\u0438\u044f", "\u00bb", "."]}, "query_toks": {"en": ["select", "name", "from", "conductor", "where", "nationality", "!=", "\"USA\"", ";"], "ru": ["select", "name", "from", "conductor", "where", "nationality", "!=", "\"\u0420\u043e\u0441\u0441\u0438\u044f\"", ";"]}, "query_toks_no_values": {"en": ["select", "name", "from", "conductor", "where", "nationality", "!=", "value", ";"], "ru": ["select", "name", "from", "conductor", "where", "nationality", "!=", "value", ";"]}, "masked_query": "SELECT Name FROM conductor WHERE Nationality != 'USA';", "question_pauq": {"ru": "\u0423\u043a\u0430\u0436\u0438\u0442\u0435 \u0438\u043c\u0435\u043d\u0430 \u0434\u0438\u0440\u0438\u0436\u0435\u0440\u043e\u0432, \u043d\u0435 \u0438\u043c\u0435\u044e\u0449\u0438\u0445 \u043d\u0430\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u0438 \u00ab\u0420\u043e\u0441\u0441\u0438\u044f\u00bb."}, "question": "Return the names of conductors that do not have the nationality \"USA\".", "kb_id": "orchestra"}, {"id": "D_0829", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 10, false], null]]], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 10, false], null]]], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "the", "record", "companies", "of", "orchestras", "in", "descending", "order", "of", "years", "in", "which", "they", "were", "founded", "?"], "ru": ["\u041a\u0430\u043a\u043e\u0432\u044b", "\u0437\u0432\u0443\u043a\u043e\u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u044e\u0449\u0438\u0435", "\u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438", "\u043e\u0440\u043a\u0435\u0441\u0442\u0440\u043e\u0432", "\u0432", "\u043f\u043e\u0440\u044f\u0434\u043a\u0435", "\u0443\u0431\u044b\u0432\u0430\u043d\u0438\u044f", "\u0433\u043e\u0434\u0430", "\u0438\u0445", "\u043e\u0441\u043d\u043e\u0432\u0430\u043d\u0438\u044f", "?"]}, "query_toks": {"en": ["select", "record_company", "from", "orchestra", "order", "by", "year_of_founded", "desc", ";"], "ru": ["select", "record_company", "from", "orchestra", "order", "by", "year_of_founded", "desc", ";"]}, "query_toks_no_values": {"en": ["select", "record_company", "from", "orchestra", "order", "by", "year_of_founded", "desc", ";"], "ru": ["select", "record_company", "from", "orchestra", "order", "by", "year_of_founded", "desc", ";"]}, "masked_query": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC;", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0432\u044b \u0437\u0432\u0443\u043a\u043e\u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u044e\u0449\u0438\u0435 \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438 \u043e\u0440\u043a\u0435\u0441\u0442\u0440\u043e\u0432 \u0432 \u043f\u043e\u0440\u044f\u0434\u043a\u0435 \u0443\u0431\u044b\u0432\u0430\u043d\u0438\u044f \u0433\u043e\u0434\u0430 \u0438\u0445 \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u0438\u044f?"}, "question": "What are the record companies of orchestras in descending order of years in which they were founded?", "kb_id": "orchestra"}, {"id": "D_0830", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 10, false], null]]], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 10, false], null]]], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Return", "the", "record", "companies", "of", "orchestras", ",", "sorted", "descending", "by", "the", "years", "in", "which", "they", "were", "founded", "."], "ru": ["\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c", "\u0437\u0432\u0443\u043a\u043e\u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u044e\u0449\u0438\u0435", "\u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438", "\u043e\u0440\u043a\u0435\u0441\u0442\u0440\u043e\u0432", ",", "\u043e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435", "\u043f\u043e", "\u0433\u043e\u0434\u0430\u043c", "\u0438\u0445", "\u043e\u0441\u043d\u043e\u0432\u0430\u043d\u0438\u044f", "."]}, "query_toks": {"en": ["select", "record_company", "from", "orchestra", "order", "by", "year_of_founded", "desc", ";"], "ru": ["select", "record_company", "from", "orchestra", "order", "by", "year_of_founded", "desc", ";"]}, "query_toks_no_values": {"en": ["select", "record_company", "from", "orchestra", "order", "by", "year_of_founded", "desc", ";"], "ru": ["select", "record_company", "from", "orchestra", "order", "by", "year_of_founded", "desc", ";"]}, "masked_query": "SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC;", "question_pauq": {"ru": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0437\u0432\u0443\u043a\u043e\u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u044e\u0449\u0438\u0435 \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438 \u043e\u0440\u043a\u0435\u0441\u0442\u0440\u043e\u0432, \u043e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u043f\u043e \u0433\u043e\u0434\u0430\u043c \u0438\u0445 \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u0438\u044f."}, "question": "Return the record companies of orchestras, sorted descending by the years in which they were founded.", "kb_id": "orchestra"}, {"id": "D_0831", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT avg(Attendance) FROM SHOW;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 3]], "conds": []}, "select": [false, [[5, [0, [0, 23, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 3]], "conds": []}, "select": [false, [[5, [0, [0, 23, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "average", "attendance", "of", "shows", "?"], "ru": ["\u041a\u0430\u043a\u043e\u0432\u0430", "\u0441\u0440\u0435\u0434\u043d\u044f\u044f", "\u043f\u043e\u0441\u0435\u0449\u0430\u0435\u043c\u043e\u0441\u0442\u044c", "\u0448\u043e\u0443", "?"]}, "query_toks": {"en": ["select", "avg", "(", "attendance", ")", "from", "show", ";"], "ru": ["select", "avg", "(", "attendance", ")", "from", "show", ";"]}, "query_toks_no_values": {"en": ["select", "avg", "(", "attendance", ")", "from", "show", ";"], "ru": ["select", "avg", "(", "attendance", ")", "from", "show", ";"]}, "masked_query": "SELECT avg(Attendance) FROM SHOW;", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0432\u0430 \u0441\u0440\u0435\u0434\u043d\u044f\u044f \u043f\u043e\u0441\u0435\u0449\u0430\u0435\u043c\u043e\u0441\u0442\u044c \u0448\u043e\u0443?"}, "question": "What is the average attendance of shows?", "kb_id": "orchestra"}, {"id": "D_0832", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT avg(Attendance) FROM SHOW;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 3]], "conds": []}, "select": [false, [[5, [0, [0, 23, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 3]], "conds": []}, "select": [false, [[5, [0, [0, 23, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Return", "the", "average", "attendance", "across", "all", "shows", "."], "ru": ["\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c", "\u0441\u0440\u0435\u0434\u043d\u044e\u044e", "\u043f\u043e\u0441\u0435\u0449\u0430\u0435\u043c\u043e\u0441\u0442\u044c", "\u043f\u043e", "\u0432\u0441\u0435\u043c", "\u0448\u043e\u0443", "."]}, "query_toks": {"en": ["select", "avg", "(", "attendance", ")", "from", "show", ";"], "ru": ["select", "avg", "(", "attendance", ")", "from", "show", ";"]}, "query_toks_no_values": {"en": ["select", "avg", "(", "attendance", ")", "from", "show", ";"], "ru": ["select", "avg", "(", "attendance", ")", "from", "show", ";"]}, "masked_query": "SELECT avg(Attendance) FROM SHOW;", "question_pauq": {"ru": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0441\u0440\u0435\u0434\u043d\u044e\u044e \u043f\u043e\u0441\u0435\u0449\u0430\u0435\u043c\u043e\u0441\u0442\u044c \u043f\u043e \u0432\u0441\u0435\u043c \u0448\u043e\u0443."}, "question": "Return the average attendance across all shows.", "kb_id": "orchestra"}, {"id": "D_0833", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"\u041f\u0440\u0435\u0434\u043f\u043e\u043a\u0430\u0437\";"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[1, [0, [0, 18, false], null]], [2, [0, [0, 18, false], null]]]], "where": [[false, 7, [0, [0, 14, false], null], "\"Live final\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[1, [0, [0, 18, false], null]], [2, [0, [0, 18, false], null]]]], "where": [[false, 7, [0, [0, 14, false], null], "\"\u041f\u0440\u0435\u0434\u043f\u043e\u043a\u0430\u0437\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "the", "maximum", "and", "minimum", "share", "of", "performances", "whose", "type", "is", "not", "``", "Live", "final", "''", "."], "ru": ["\u041a\u0430\u043a\u043e\u0432\u0430", "\u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u0430\u044f", "\u0438", "\u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u0430\u044f", "\u0434\u043e\u043b\u044f", "\u0432\u044b\u0441\u0442\u0443\u043f\u043b\u0435\u043d\u0438\u0439", ",", "\u0442\u0438\u043f", "\u043a\u043e\u0442\u043e\u0440\u044b\u0445", "\u043d\u0435", "\u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f", "\u043f\u0440\u0435\u0434\u043e\u043a\u0430\u0437\u043e\u043c", "."]}, "query_toks": {"en": ["select", "max", "(", "share", ")", ",", "min", "(", "share", ")", "from", "performance", "where", "type", "!=", "\"Live final\"", ";"], "ru": ["select", "max", "(", "share", ")", ",", "min", "(", "share", ")", "from", "performance", "where", "type", "!=", "\"\u041f\u0440\u0435\u0434\u043f\u043e\u043a\u0430\u0437\"", ";"]}, "query_toks_no_values": {"en": ["select", "max", "(", "share", ")", ",", "min", "(", "share", ")", "from", "performance", "where", "type", "!=", "value", ";"], "ru": ["select", "max", "(", "share", ")", ",", "min", "(", "share", ")", "from", "performance", "where", "type", "!=", "value", ";"]}, "masked_query": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\";", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0432\u0430 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u0430\u044f \u0438 \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u0430\u044f \u0434\u043e\u043b\u044f \u0432\u044b\u0441\u0442\u0443\u043f\u043b\u0435\u043d\u0438\u0439, \u0442\u0438\u043f \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043d\u0435 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043f\u0440\u0435\u0434\u043e\u043a\u0430\u0437\u043e\u043c."}, "question": "What are the maximum and minimum share of performances whose type is not \"Live final\".", "kb_id": "orchestra"}, {"id": "D_0834", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"\u041f\u0440\u0435\u0434\u043f\u043e\u043a\u0430\u0437\";"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[1, [0, [0, 18, false], null]], [2, [0, [0, 18, false], null]]]], "where": [[false, 7, [0, [0, 14, false], null], "\"Live final\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[1, [0, [0, 18, false], null]], [2, [0, [0, 18, false], null]]]], "where": [[false, 7, [0, [0, 14, false], null], "\"\u041f\u0440\u0435\u0434\u043f\u043e\u043a\u0430\u0437\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Return", "the", "maximum", "and", "minimum", "shares", "for", "performances", "that", "do", "not", "have", "the", "type", "``", "Live", "final", "''", "."], "ru": ["\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c", "\u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u0443\u044e", "\u0438", "\u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u0443\u044e", "\u0434\u043e\u043b\u044e", "\u0432\u044b\u0441\u0442\u0443\u043f\u043b\u0435\u043d\u0438\u0439", ",", "\u043d\u0435", "\u0438\u043c\u0435\u044e\u0449\u0438\u0445", "\u0442\u0438\u043f\u0430", "\u00ab", "\u043f\u0440\u0435\u0434\u043f\u043e\u043a\u0430\u0437", "\u00bb", "."]}, "query_toks": {"en": ["select", "max", "(", "share", ")", ",", "min", "(", "share", ")", "from", "performance", "where", "type", "!=", "\"Live final\"", ";"], "ru": ["select", "max", "(", "share", ")", ",", "min", "(", "share", ")", "from", "performance", "where", "type", "!=", "\"\u041f\u0440\u0435\u0434\u043f\u043e\u043a\u0430\u0437\"", ";"]}, "query_toks_no_values": {"en": ["select", "max", "(", "share", ")", ",", "min", "(", "share", ")", "from", "performance", "where", "type", "!=", "value", ";"], "ru": ["select", "max", "(", "share", ")", ",", "min", "(", "share", ")", "from", "performance", "where", "type", "!=", "value", ";"]}, "masked_query": "SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\";", "question_pauq": {"ru": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u0443\u044e \u0438 \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u0443\u044e \u0434\u043e\u043b\u044e \u0432\u044b\u0441\u0442\u0443\u043f\u043b\u0435\u043d\u0438\u0439, \u043d\u0435 \u0438\u043c\u0435\u044e\u0449\u0438\u0445 \u0442\u0438\u043f\u0430 \u00ab\u043f\u0440\u0435\u0434\u043f\u043e\u043a\u0430\u0437\u00bb."}, "question": "Return the maximum and minimum shares for performances that do not have the type \"Live final\".", "kb_id": "orchestra"}, {"id": "D_0835", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT count(DISTINCT Nationality) FROM conductor;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[3, [0, [0, 4, true], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[3, [0, [0, 4, true], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["How", "many", "different", "nationalities", "do", "conductors", "have", "?"], "ru": ["\u0421\u043a\u043e\u043b\u044c\u043a\u043e", "\u043d\u0430\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u0435\u0439", "\u0443", "\u0434\u0438\u0440\u0438\u0436\u0435\u0440\u043e\u0432", "?"]}, "query_toks": {"en": ["select", "count", "(", "distinct", "nationality", ")", "from", "conductor", ";"], "ru": ["select", "count", "(", "distinct", "nationality", ")", "from", "conductor", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "distinct", "nationality", ")", "from", "conductor", ";"], "ru": ["select", "count", "(", "distinct", "nationality", ")", "from", "conductor", ";"]}, "masked_query": "SELECT count(DISTINCT Nationality) FROM conductor;", "question_pauq": {"ru": "\u0421\u043a\u043e\u043b\u044c\u043a\u043e \u043d\u0430\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u0435\u0439 \u0443 \u0434\u0438\u0440\u0438\u0436\u0435\u0440\u043e\u0432?"}, "question": "How many different nationalities do conductors have?", "kb_id": "orchestra"}, {"id": "D_0836", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT count(DISTINCT Nationality) FROM conductor;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[3, [0, [0, 4, true], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[3, [0, [0, 4, true], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Count", "the", "number", "of", "different", "nationalities", "of", "conductors", "."], "ru": ["\u041f\u043e\u0434\u0441\u0447\u0438\u0442\u0430\u0439\u0442\u0435", "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e", "\u0434\u0438\u0440\u0438\u0436\u0435\u0440\u043e\u0432", "\u0440\u0430\u0437\u043d\u044b\u0445", "\u043d\u0430\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u0435\u0439", "."]}, "query_toks": {"en": ["select", "count", "(", "distinct", "nationality", ")", "from", "conductor", ";"], "ru": ["select", "count", "(", "distinct", "nationality", ")", "from", "conductor", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "distinct", "nationality", ")", "from", "conductor", ";"], "ru": ["select", "count", "(", "distinct", "nationality", ")", "from", "conductor", ";"]}, "masked_query": "SELECT count(DISTINCT Nationality) FROM conductor;", "question_pauq": {"ru": "\u041f\u043e\u0434\u0441\u0447\u0438\u0442\u0430\u0439\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0434\u0438\u0440\u0438\u0436\u0435\u0440\u043e\u0432 \u0440\u0430\u0437\u043d\u044b\u0445 \u043d\u0430\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u0435\u0439."}, "question": "Count the number of different nationalities of conductors.", "kb_id": "orchestra"}, {"id": "D_0837", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 5, false], null]]], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 5, false], null]]], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["List", "names", "of", "conductors", "in", "descending", "order", "of", "years", "of", "work", "."], "ru": ["\u041f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0438\u0442\u0435", "\u0438\u043c\u0435\u043d\u0430", "\u0434\u0438\u0440\u0438\u0436\u0435\u0440\u043e\u0432", "\u0432", "\u043f\u043e\u0440\u044f\u0434\u043a\u0435", "\u0443\u0431\u044b\u0432\u0430\u043d\u0438\u044f", "\u0441\u0442\u0430\u0436\u0430", "\u0440\u0430\u0431\u043e\u0442\u044b", "."]}, "query_toks": {"en": ["select", "name", "from", "conductor", "order", "by", "year_of_work", "desc", ";"], "ru": ["select", "name", "from", "conductor", "order", "by", "year_of_work", "desc", ";"]}, "query_toks_no_values": {"en": ["select", "name", "from", "conductor", "order", "by", "year_of_work", "desc", ";"], "ru": ["select", "name", "from", "conductor", "order", "by", "year_of_work", "desc", ";"]}, "masked_query": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC;", "question_pauq": {"ru": "\u041f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0438\u0442\u0435 \u0438\u043c\u0435\u043d\u0430 \u0434\u0438\u0440\u0438\u0436\u0435\u0440\u043e\u0432 \u0432 \u043f\u043e\u0440\u044f\u0434\u043a\u0435 \u0443\u0431\u044b\u0432\u0430\u043d\u0438\u044f \u0441\u0442\u0430\u0436\u0430 \u0440\u0430\u0431\u043e\u0442\u044b."}, "question": "List names of conductors in descending order of years of work.", "kb_id": "orchestra"}, {"id": "D_0838", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 5, false], null]]], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 5, false], null]]], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "the", "names", "of", "conductors", ",", "sorted", "descending", "by", "the", "number", "of", "years", "they", "have", "worked", "?"], "ru": ["\u041a\u0430\u043a", "\u0437\u043e\u0432\u0443\u0442", "\u0434\u0438\u0440\u0438\u0436\u0435\u0440\u043e\u0432", ",", "\u043e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445", "\u043f\u043e", "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0443", "\u043e\u0442\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u043d\u044b\u0445", "\u043b\u0435\u0442", "?"]}, "query_toks": {"en": ["select", "name", "from", "conductor", "order", "by", "year_of_work", "desc", ";"], "ru": ["select", "name", "from", "conductor", "order", "by", "year_of_work", "desc", ";"]}, "query_toks_no_values": {"en": ["select", "name", "from", "conductor", "order", "by", "year_of_work", "desc", ";"], "ru": ["select", "name", "from", "conductor", "order", "by", "year_of_work", "desc", ";"]}, "masked_query": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC;", "question_pauq": {"ru": "\u041a\u0430\u043a \u0437\u043e\u0432\u0443\u0442 \u0434\u0438\u0440\u0438\u0436\u0435\u0440\u043e\u0432, \u043e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u043f\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0443 \u043e\u0442\u0440\u0430\u0431\u043e\u0442\u0430\u043d\u043d\u044b\u0445 \u043b\u0435\u0442?"}, "question": "What are the names of conductors, sorted descending by the number of years they have worked?", "kb_id": "orchestra"}, {"id": "D_0839", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 5, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 5, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["List", "the", "name", "of", "the", "conductor", "with", "the", "most", "years", "of", "work", "."], "ru": ["\u0423\u043a\u0430\u0436\u0438\u0442\u0435", "\u0444\u0430\u043c\u0438\u043b\u0438\u044e", "\u0434\u0438\u0440\u0438\u0436\u0435\u0440\u0430", "\u0441", "\u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0438\u043c", "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c", "\u043b\u0435\u0442", "\u0440\u0430\u0431\u043e\u0442\u044b", "."]}, "query_toks": {"en": ["select", "name", "from", "conductor", "order", "by", "year_of_work", "desc", "limit", "1", ";"], "ru": ["select", "name", "from", "conductor", "order", "by", "year_of_work", "desc", "limit", "1", ";"]}, "query_toks_no_values": {"en": ["select", "name", "from", "conductor", "order", "by", "year_of_work", "desc", "limit", "1", ";"], "ru": ["select", "name", "from", "conductor", "order", "by", "year_of_work", "desc", "limit", "1", ";"]}, "masked_query": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1;", "question_pauq": {"ru": "\u0423\u043a\u0430\u0436\u0438\u0442\u0435 \u0444\u0430\u043c\u0438\u043b\u0438\u044e \u0434\u0438\u0440\u0438\u0436\u0435\u0440\u0430 \u0441 \u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0438\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c \u043b\u0435\u0442 \u0440\u0430\u0431\u043e\u0442\u044b."}, "question": "List the name of the conductor with the most years of work.", "kb_id": "orchestra"}, {"id": "D_0840", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 5, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 5, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "name", "of", "the", "conductor", "who", "has", "worked", "the", "greatest", "number", "of", "years", "?"], "ru": ["\u041a\u0430\u043a", "\u0437\u043e\u0432\u0443\u0442", "\u0434\u0438\u0440\u0438\u0436\u0435\u0440\u0430", ",", "\u043f\u0440\u043e\u0440\u0430\u0431\u043e\u0442\u0430\u0432\u0448\u0435\u0433\u043e", "\u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0435\u0435", "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e", "\u043b\u0435\u0442", "?"]}, "query_toks": {"en": ["select", "name", "from", "conductor", "order", "by", "year_of_work", "desc", "limit", "1", ";"], "ru": ["select", "name", "from", "conductor", "order", "by", "year_of_work", "desc", "limit", "1", ";"]}, "query_toks_no_values": {"en": ["select", "name", "from", "conductor", "order", "by", "year_of_work", "desc", "limit", "1", ";"], "ru": ["select", "name", "from", "conductor", "order", "by", "year_of_work", "desc", "limit", "1", ";"]}, "masked_query": "SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1;", "question_pauq": {"ru": "\u041a\u0430\u043a \u0437\u043e\u0432\u0443\u0442 \u0434\u0438\u0440\u0438\u0436\u0435\u0440\u0430, \u043f\u0440\u043e\u0440\u0430\u0431\u043e\u0442\u0430\u0432\u0448\u0435\u0433\u043e \u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043b\u0435\u0442?"}, "question": "What is the name of the conductor who has worked the greatest number of years?", "kb_id": "orchestra"}, {"id": "D_0841", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 8, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]], [0, [0, [0, 7, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 8, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]], [0, [0, [0, 7, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Show", "the", "names", "of", "conductors", "and", "the", "orchestras", "they", "have", "conducted", "."], "ru": ["\u041f\u043e\u043a\u0430\u0436\u0438\u0442\u0435", "\u0438\u043c\u0435\u043d\u0430", "\u0434\u0438\u0440\u0438\u0436\u0435\u0440\u043e\u0432", "\u0438", "\u043e\u0440\u043a\u0435\u0441\u0442\u0440\u043e\u0432", ",", "\u043a\u043e\u0442\u043e\u0440\u044b\u043c\u0438", "\u043e\u043d\u0438", "\u0434\u0438\u0440\u0438\u0436\u0438\u0440\u043e\u0432\u0430\u043b\u0438", "."]}, "query_toks": {"en": ["select", "t1.name", ",", "t2.orchestra", "from", "conductor", "as", "t1", "join", "orchestra", "as", "t2", "on", "t1.conductor_id", "=", "t2.conductor_id", ";"], "ru": ["select", "t1.name", ",", "t2.orchestra", "from", "conductor", "as", "t1", "join", "orchestra", "as", "t2", "on", "t1.conductor_id", "=", "t2.conductor_id", ";"]}, "query_toks_no_values": {"en": ["select", "t1.name", ",", "t2.orchestra", "from", "conductor", "as", "t1", "join", "orchestra", "as", "t2", "on", "t1.conductor_id", "=", "t2.conductor_id", ";"], "ru": ["select", "t1.name", ",", "t2.orchestra", "from", "conductor", "as", "t1", "join", "orchestra", "as", "t2", "on", "t1.conductor_id", "=", "t2.conductor_id", ";"]}, "masked_query": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID;", "question_pauq": {"ru": "\u041f\u043e\u043a\u0430\u0436\u0438\u0442\u0435 \u0438\u043c\u0435\u043d\u0430 \u0434\u0438\u0440\u0438\u0436\u0435\u0440\u043e\u0432 \u0438 \u043e\u0440\u043a\u0435\u0441\u0442\u0440\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u043c\u0438 \u043e\u043d\u0438 \u0434\u0438\u0440\u0438\u0436\u0438\u0440\u043e\u0432\u0430\u043b\u0438."}, "question": "Show the names of conductors and the orchestras they have conducted.", "kb_id": "orchestra"}, {"id": "D_0842", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 8, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]], [0, [0, [0, 7, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 8, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]], [0, [0, [0, 7, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "the", "names", "of", "conductors", "as", "well", "as", "the", "corresonding", "orchestras", "that", "they", "have", "conducted", "?"], "ru": ["\u0418\u043c\u0435\u043d\u0430", "\u0434\u0438\u0440\u0438\u0436\u0435\u0440\u043e\u0432", "\u0438", "\u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f", "\u043e\u0440\u043a\u0435\u0441\u0442\u0440\u043e\u0432", ",", "\u043a\u043e\u0442\u043e\u0440\u044b\u043c\u0438", "\u043e\u043d\u0438", "\u0434\u0438\u0440\u0438\u0436\u0438\u0440\u043e\u0432\u0430\u043b\u0438"]}, "query_toks": {"en": ["select", "t1.name", ",", "t2.orchestra", "from", "conductor", "as", "t1", "join", "orchestra", "as", "t2", "on", "t1.conductor_id", "=", "t2.conductor_id", ";"], "ru": ["select", "t1.name", ",", "t2.orchestra", "from", "conductor", "as", "t1", "join", "orchestra", "as", "t2", "on", "t1.conductor_id", "=", "t2.conductor_id", ";"]}, "query_toks_no_values": {"en": ["select", "t1.name", ",", "t2.orchestra", "from", "conductor", "as", "t1", "join", "orchestra", "as", "t2", "on", "t1.conductor_id", "=", "t2.conductor_id", ";"], "ru": ["select", "t1.name", ",", "t2.orchestra", "from", "conductor", "as", "t1", "join", "orchestra", "as", "t2", "on", "t1.conductor_id", "=", "t2.conductor_id", ";"]}, "masked_query": "SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID;", "question_pauq": {"ru": "\u0418\u043c\u0435\u043d\u0430 \u0434\u0438\u0440\u0438\u0436\u0435\u0440\u043e\u0432 \u0438 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f \u043e\u0440\u043a\u0435\u0441\u0442\u0440\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u043c\u0438 \u043e\u043d\u0438 \u0434\u0438\u0440\u0438\u0436\u0438\u0440\u043e\u0432\u0430\u043b\u0438"}, "question": "What are the names of conductors as well as the corresonding orchestras that they have conducted?", "kb_id": "orchestra"}, {"id": "D_0843", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 8, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [], "groupBy": [[0, 8, false]], "having": [[false, 3, [0, [3, 0, false], null], 1.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 8, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [], "groupBy": [[0, 8, false]], "having": [[false, 3, [0, [3, 0, false], null], 1.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Show", "the", "names", "of", "conductors", "that", "have", "conducted", "more", "than", "one", "orchestras", "."], "ru": ["\u0423\u043a\u0430\u0436\u0438\u0442\u0435", "\u0438\u043c\u0435\u043d\u0430", "\u0434\u0438\u0440\u0438\u0436\u0435\u0440\u043e\u0432", ",", "\u0434\u0438\u0440\u0438\u0436\u0438\u0440\u043e\u0432\u0430\u0432\u0448\u0438\u0445", "\u0431\u043e\u043b\u0435\u0435", "\u0447\u0435\u043c", "\u043e\u0434\u043d\u0438\u043c", "\u043e\u0440\u043a\u0435\u0441\u0442\u0440\u043e\u043c", "."]}, "query_toks": {"en": ["select", "t1.name", "from", "conductor", "as", "t1", "join", "orchestra", "as", "t2", "on", "t1.conductor_id", "=", "t2.conductor_id", "group", "by", "t2.conductor_id", "having", "count", "(", "*", ")", ">", "1", ";"], "ru": ["select", "t1.name", "from", "conductor", "as", "t1", "join", "orchestra", "as", "t2", "on", "t1.conductor_id", "=", "t2.conductor_id", "group", "by", "t2.conductor_id", "having", "count", "(", "*", ")", ">", "1", ";"]}, "query_toks_no_values": {"en": ["select", "t1.name", "from", "conductor", "as", "t1", "join", "orchestra", "as", "t2", "on", "t1.conductor_id", "=", "t2.conductor_id", "group", "by", "t2.conductor_id", "having", "count", "(", "*", ")", ">", "1", ";"], "ru": ["select", "t1.name", "from", "conductor", "as", "t1", "join", "orchestra", "as", "t2", "on", "t1.conductor_id", "=", "t2.conductor_id", "group", "by", "t2.conductor_id", "having", "count", "(", "*", ")", ">", "1", ";"]}, "masked_query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1;", "question_pauq": {"ru": "\u0423\u043a\u0430\u0436\u0438\u0442\u0435 \u0438\u043c\u0435\u043d\u0430 \u0434\u0438\u0440\u0438\u0436\u0435\u0440\u043e\u0432, \u0434\u0438\u0440\u0438\u0436\u0438\u0440\u043e\u0432\u0430\u0432\u0448\u0438\u0445 \u0431\u043e\u043b\u0435\u0435 \u0447\u0435\u043c \u043e\u0434\u043d\u0438\u043c \u043e\u0440\u043a\u0435\u0441\u0442\u0440\u043e\u043c."}, "question": "Show the names of conductors that have conducted more than one orchestras.", "kb_id": "orchestra"}, {"id": "D_0844", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 8, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [], "groupBy": [[0, 8, false]], "having": [[false, 3, [0, [3, 0, false], null], 1.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 8, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [], "groupBy": [[0, 8, false]], "having": [[false, 3, [0, [3, 0, false], null], 1.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "the", "names", "of", "conductors", "who", "have", "conducted", "at", "more", "than", "one", "orchestra", "?"], "ru": ["\u041a\u0430\u043a", "\u0437\u043e\u0432\u0443\u0442", "\u0434\u0438\u0440\u0438\u0436\u0435\u0440\u043e\u0432", ",", "\u0434\u0438\u0440\u0438\u0436\u0438\u0440\u043e\u0432\u0430\u0432\u0448\u0438\u0445", "\u0431\u043e\u043b\u0435\u0435", "\u0447\u0435\u043c", "\u0432", "\u043e\u0434\u043d\u043e\u043c", "\u043e\u0440\u043a\u0435\u0441\u0442\u0440\u0435", "?"]}, "query_toks": {"en": ["select", "t1.name", "from", "conductor", "as", "t1", "join", "orchestra", "as", "t2", "on", "t1.conductor_id", "=", "t2.conductor_id", "group", "by", "t2.conductor_id", "having", "count", "(", "*", ")", ">", "1", ";"], "ru": ["select", "t1.name", "from", "conductor", "as", "t1", "join", "orchestra", "as", "t2", "on", "t1.conductor_id", "=", "t2.conductor_id", "group", "by", "t2.conductor_id", "having", "count", "(", "*", ")", ">", "1", ";"]}, "query_toks_no_values": {"en": ["select", "t1.name", "from", "conductor", "as", "t1", "join", "orchestra", "as", "t2", "on", "t1.conductor_id", "=", "t2.conductor_id", "group", "by", "t2.conductor_id", "having", "count", "(", "*", ")", ">", "1", ";"], "ru": ["select", "t1.name", "from", "conductor", "as", "t1", "join", "orchestra", "as", "t2", "on", "t1.conductor_id", "=", "t2.conductor_id", "group", "by", "t2.conductor_id", "having", "count", "(", "*", ")", ">", "1", ";"]}, "masked_query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1;", "question_pauq": {"ru": "\u041a\u0430\u043a \u0437\u043e\u0432\u0443\u0442 \u0434\u0438\u0440\u0438\u0436\u0435\u0440\u043e\u0432, \u0434\u0438\u0440\u0438\u0436\u0438\u0440\u043e\u0432\u0430\u0432\u0448\u0438\u0445 \u0431\u043e\u043b\u0435\u0435 \u0447\u0435\u043c \u0432 \u043e\u0434\u043d\u043e\u043c \u043e\u0440\u043a\u0435\u0441\u0442\u0440\u0435?"}, "question": "What are the names of conductors who have conducted at more than one orchestra?", "kb_id": "orchestra"}, {"id": "D_0845", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 8, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [], "groupBy": [[0, 8, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 8, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [], "groupBy": [[0, 8, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Show", "the", "name", "of", "the", "conductor", "that", "has", "conducted", "the", "most", "number", "of", "orchestras", "."], "ru": ["\u0423\u043a\u0430\u0436\u0438\u0442\u0435", "\u0438\u043c\u044f", "\u0434\u0438\u0440\u0438\u0436\u0435\u0440\u0430", ",", "\u0434\u0438\u0440\u0438\u0436\u0438\u0440\u043e\u0432\u0430\u0432\u0448\u0435\u0433\u043e", "\u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0438\u043c", "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c", "\u043e\u0440\u043a\u0435\u0441\u0442\u0440\u043e\u0432", "."]}, "query_toks": {"en": ["select", "t1.name", "from", "conductor", "as", "t1", "join", "orchestra", "as", "t2", "on", "t1.conductor_id", "=", "t2.conductor_id", "group", "by", "t2.conductor_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"], "ru": ["select", "t1.name", "from", "conductor", "as", "t1", "join", "orchestra", "as", "t2", "on", "t1.conductor_id", "=", "t2.conductor_id", "group", "by", "t2.conductor_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"]}, "query_toks_no_values": {"en": ["select", "t1.name", "from", "conductor", "as", "t1", "join", "orchestra", "as", "t2", "on", "t1.conductor_id", "=", "t2.conductor_id", "group", "by", "t2.conductor_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"], "ru": ["select", "t1.name", "from", "conductor", "as", "t1", "join", "orchestra", "as", "t2", "on", "t1.conductor_id", "=", "t2.conductor_id", "group", "by", "t2.conductor_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"]}, "masked_query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1;", "question_pauq": {"ru": "\u0423\u043a\u0430\u0436\u0438\u0442\u0435 \u0438\u043c\u044f \u0434\u0438\u0440\u0438\u0436\u0435\u0440\u0430, \u0434\u0438\u0440\u0438\u0436\u0438\u0440\u043e\u0432\u0430\u0432\u0448\u0435\u0433\u043e \u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0438\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c \u043e\u0440\u043a\u0435\u0441\u0442\u0440\u043e\u0432."}, "question": "Show the name of the conductor that has conducted the most number of orchestras.", "kb_id": "orchestra"}, {"id": "D_0846", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 8, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [], "groupBy": [[0, 8, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 8, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [], "groupBy": [[0, 8, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "name", "of", "the", "conductor", "who", "has", "conducted", "the", "most", "orchestras", "?"], "ru": ["\u041a\u0430\u043a", "\u0437\u043e\u0432\u0443\u0442", "\u0434\u0438\u0440\u0438\u0436\u0435\u0440\u0430", ",", "\u0434\u0438\u0440\u0438\u0436\u0438\u0440\u043e\u0432\u0430\u0432\u0448\u0435\u0433\u043e", "\u0431\u043e\u043b\u044c\u0448\u0438\u043d\u0441\u0442\u0432\u043e\u043c", "\u043e\u0440\u043a\u0435\u0441\u0442\u0440\u043e\u0432", "?"]}, "query_toks": {"en": ["select", "t1.name", "from", "conductor", "as", "t1", "join", "orchestra", "as", "t2", "on", "t1.conductor_id", "=", "t2.conductor_id", "group", "by", "t2.conductor_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"], "ru": ["select", "t1.name", "from", "conductor", "as", "t1", "join", "orchestra", "as", "t2", "on", "t1.conductor_id", "=", "t2.conductor_id", "group", "by", "t2.conductor_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"]}, "query_toks_no_values": {"en": ["select", "t1.name", "from", "conductor", "as", "t1", "join", "orchestra", "as", "t2", "on", "t1.conductor_id", "=", "t2.conductor_id", "group", "by", "t2.conductor_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"], "ru": ["select", "t1.name", "from", "conductor", "as", "t1", "join", "orchestra", "as", "t2", "on", "t1.conductor_id", "=", "t2.conductor_id", "group", "by", "t2.conductor_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"]}, "masked_query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1;", "question_pauq": {"ru": "\u041a\u0430\u043a \u0437\u043e\u0432\u0443\u0442 \u0434\u0438\u0440\u0438\u0436\u0435\u0440\u0430, \u0434\u0438\u0440\u0438\u0436\u0438\u0440\u043e\u0432\u0430\u0432\u0448\u0435\u0433\u043e \u0431\u043e\u043b\u044c\u0448\u0438\u043d\u0441\u0442\u0432\u043e\u043c \u043e\u0440\u043a\u0435\u0441\u0442\u0440\u043e\u0432?"}, "question": "What is the name of the conductor who has conducted the most orchestras?", "kb_id": "orchestra"}, {"id": "D_0847", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 8, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [[false, 3, [0, [0, 10, false], null], 2008.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 8, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [[false, 3, [0, [0, 10, false], null], 2008.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Please", "show", "the", "name", "of", "the", "conductor", "that", "has", "conducted", "orchestras", "founded", "after", "2008", "."], "ru": ["\u0423\u043a\u0430\u0436\u0438\u0442\u0435", "\u0438\u043c\u044f", "\u0434\u0438\u0440\u0438\u0436\u0435\u0440\u0430", ",", "\u0434\u0438\u0440\u0438\u0436\u0438\u0440\u043e\u0432\u0430\u0432\u0448\u0435\u0433\u043e", "\u043e\u0440\u043a\u0435\u0441\u0442\u0440\u0430\u043c\u0438", ",", "\u043e\u0441\u043d\u043e\u0432\u0430\u043d\u043d\u044b\u043c\u0438", "\u043f\u043e\u0441\u043b\u0435", "2008", "\u0433\u043e\u0434\u0430", "."]}, "query_toks": {"en": ["select", "t1.name", "from", "conductor", "as", "t1", "join", "orchestra", "as", "t2", "on", "t1.conductor_id", "=", "t2.conductor_id", "where", "year_of_founded", ">", "2008", ";"], "ru": ["select", "t1.name", "from", "conductor", "as", "t1", "join", "orchestra", "as", "t2", "on", "t1.conductor_id", "=", "t2.conductor_id", "where", "year_of_founded", ">", "2008", ";"]}, "query_toks_no_values": {"en": ["select", "t1.name", "from", "conductor", "as", "t1", "join", "orchestra", "as", "t2", "on", "t1.conductor_id", "=", "t2.conductor_id", "where", "year_of_founded", ">", "2008", ";"], "ru": ["select", "t1.name", "from", "conductor", "as", "t1", "join", "orchestra", "as", "t2", "on", "t1.conductor_id", "=", "t2.conductor_id", "where", "year_of_founded", ">", "2008", ";"]}, "masked_query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008;", "question_pauq": {"ru": "\u0423\u043a\u0430\u0436\u0438\u0442\u0435 \u0438\u043c\u044f \u0434\u0438\u0440\u0438\u0436\u0435\u0440\u0430, \u0434\u0438\u0440\u0438\u0436\u0438\u0440\u043e\u0432\u0430\u0432\u0448\u0435\u0433\u043e \u043e\u0440\u043a\u0435\u0441\u0442\u0440\u0430\u043c\u0438, \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u043d\u044b\u043c\u0438 \u043f\u043e\u0441\u043b\u0435 2008 \u0433\u043e\u0434\u0430."}, "question": "Please show the name of the conductor that has conducted orchestras founded after 2008.", "kb_id": "orchestra"}, {"id": "D_0848", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 8, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [[false, 3, [0, [0, 10, false], null], 2008.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 8, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [[false, 3, [0, [0, 10, false], null], 2008.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "the", "names", "of", "conductors", "who", "have", "conducted", "orchestras", "founded", "after", "the", "year", "2008", "?"], "ru": ["\u041a\u0430\u043a", "\u0437\u043e\u0432\u0443\u0442", "\u0434\u0438\u0440\u0438\u0436\u0435\u0440\u043e\u0432", ",", "\u0434\u0438\u0440\u0438\u0436\u0438\u0440\u043e\u0432\u0430\u0432\u0448\u0438\u0445", "\u043e\u0440\u043a\u0435\u0441\u0442\u0440\u0430\u043c\u0438", ",", "\u043e\u0441\u043d\u043e\u0432\u0430\u043d\u043d\u044b\u043c\u0438", "\u043f\u043e\u0441\u043b\u0435", "2008", "\u0433\u043e\u0434\u0430", "?"]}, "query_toks": {"en": ["select", "t1.name", "from", "conductor", "as", "t1", "join", "orchestra", "as", "t2", "on", "t1.conductor_id", "=", "t2.conductor_id", "where", "year_of_founded", ">", "2008", ";"], "ru": ["select", "t1.name", "from", "conductor", "as", "t1", "join", "orchestra", "as", "t2", "on", "t1.conductor_id", "=", "t2.conductor_id", "where", "year_of_founded", ">", "2008", ";"]}, "query_toks_no_values": {"en": ["select", "t1.name", "from", "conductor", "as", "t1", "join", "orchestra", "as", "t2", "on", "t1.conductor_id", "=", "t2.conductor_id", "where", "year_of_founded", ">", "2008", ";"], "ru": ["select", "t1.name", "from", "conductor", "as", "t1", "join", "orchestra", "as", "t2", "on", "t1.conductor_id", "=", "t2.conductor_id", "where", "year_of_founded", ">", "2008", ";"]}, "masked_query": "SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008;", "question_pauq": {"ru": "\u041a\u0430\u043a \u0437\u043e\u0432\u0443\u0442 \u0434\u0438\u0440\u0438\u0436\u0435\u0440\u043e\u0432, \u0434\u0438\u0440\u0438\u0436\u0438\u0440\u043e\u0432\u0430\u0432\u0448\u0438\u0445 \u043e\u0440\u043a\u0435\u0441\u0442\u0440\u0430\u043c\u0438, \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u043d\u044b\u043c\u0438 \u043f\u043e\u0441\u043b\u0435 2008 \u0433\u043e\u0434\u0430?"}, "question": "What are the names of conductors who have conducted orchestras founded after the year 2008?", "kb_id": "orchestra"}, {"id": "D_0849", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 9, false], null]], [3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [[0, 9, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 9, false], null]], [3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [[0, 9, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Please", "show", "the", "different", "record", "companies", "and", "the", "corresponding", "number", "of", "orchestras", "."], "ru": ["\u041f\u043e\u0436\u0430\u043b\u0443\u0439\u0441\u0442\u0430", ",", "\u043f\u043e\u043a\u0430\u0436\u0438", "\u0440\u0430\u0437\u043d\u044b\u0435", "\u0437\u0432\u0443\u043a\u043e\u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u044e\u0449\u0438\u0435", "\u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438", "\u0438", "\u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0435\u0435", "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e", "\u043e\u0440\u043a\u0435\u0441\u0442\u0440\u043e\u0432", "."]}, "query_toks": {"en": ["select", "record_company", ",", "count", "(", "*", ")", "from", "orchestra", "group", "by", "record_company", ";"], "ru": ["select", "record_company", ",", "count", "(", "*", ")", "from", "orchestra", "group", "by", "record_company", ";"]}, "query_toks_no_values": {"en": ["select", "record_company", ",", "count", "(", "*", ")", "from", "orchestra", "group", "by", "record_company", ";"], "ru": ["select", "record_company", ",", "count", "(", "*", ")", "from", "orchestra", "group", "by", "record_company", ";"]}, "masked_query": "SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company;", "question_pauq": {"ru": "\u041f\u043e\u0436\u0430\u043b\u0443\u0439\u0441\u0442\u0430, \u043f\u043e\u043a\u0430\u0436\u0438 \u0440\u0430\u0437\u043d\u044b\u0435 \u0437\u0432\u0443\u043a\u043e\u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u044e\u0449\u0438\u0435 \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438 \u0438 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0440\u043a\u0435\u0441\u0442\u0440\u043e\u0432."}, "question": "Please show the different record companies and the corresponding number of orchestras.", "kb_id": "orchestra"}, {"id": "D_0850", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 9, false], null]], [3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [[0, 9, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 9, false], null]], [3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [[0, 9, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["How", "many", "orchestras", "does", "each", "record", "company", "manage", "?"], "ru": ["\u0421\u043a\u043e\u043b\u044c\u043a\u043e", "\u043e\u0440\u043a\u0435\u0441\u0442\u0440\u043e\u0432", "\u0443", "\u043a\u0430\u0436\u0434\u043e\u0439", "\u0437\u0432\u0443\u043a\u043e\u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u044e\u0449\u0435\u0439", "\u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438", "?"]}, "query_toks": {"en": ["select", "record_company", ",", "count", "(", "*", ")", "from", "orchestra", "group", "by", "record_company", ";"], "ru": ["select", "record_company", ",", "count", "(", "*", ")", "from", "orchestra", "group", "by", "record_company", ";"]}, "query_toks_no_values": {"en": ["select", "record_company", ",", "count", "(", "*", ")", "from", "orchestra", "group", "by", "record_company", ";"], "ru": ["select", "record_company", ",", "count", "(", "*", ")", "from", "orchestra", "group", "by", "record_company", ";"]}, "masked_query": "SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company;", "question_pauq": {"ru": "\u0421\u043a\u043e\u043b\u044c\u043a\u043e \u043e\u0440\u043a\u0435\u0441\u0442\u0440\u043e\u0432 \u0443 \u043a\u0430\u0436\u0434\u043e\u0439 \u0437\u0432\u0443\u043a\u043e\u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u044e\u0449\u0435\u0439 \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438?"}, "question": "How many orchestras does each record company manage?", "kb_id": "orchestra"}, {"id": "D_0851", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 11, false], null]]]], "where": [], "groupBy": [[0, 11, false]], "having": [], "orderBy": ["asc", [[0, [3, 0, false], null]]], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 11, false], null]]]], "where": [], "groupBy": [[0, 11, false]], "having": [], "orderBy": ["asc", [[0, [3, 0, false], null]]], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Please", "show", "the", "record", "formats", "of", "orchestras", "in", "ascending", "order", "of", "count", "."], "ru": ["\u041f\u043e\u0436\u0430\u043b\u0443\u0439\u0441\u0442\u0430", ",", "\u043f\u043e\u043a\u0430\u0436\u0438\u0442\u0435", "\u0444\u043e\u0440\u043c\u0430\u0442\u044b", "\u0437\u0430\u043f\u0438\u0441\u0438", "\u043e\u0440\u043a\u0435\u0441\u0442\u0440\u043e\u0432", "\u0432", "\u043f\u043e\u0440\u044f\u0434\u043a\u0435", "\u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430\u043d\u0438\u044f", "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430", "."]}, "query_toks": {"en": ["select", "major_record_format", "from", "orchestra", "group", "by", "major_record_format", "order", "by", "count", "(", "*", ")", "asc", ";"], "ru": ["select", "major_record_format", "from", "orchestra", "group", "by", "major_record_format", "order", "by", "count", "(", "*", ")", "asc", ";"]}, "query_toks_no_values": {"en": ["select", "major_record_format", "from", "orchestra", "group", "by", "major_record_format", "order", "by", "count", "(", "*", ")", "asc", ";"], "ru": ["select", "major_record_format", "from", "orchestra", "group", "by", "major_record_format", "order", "by", "count", "(", "*", ")", "asc", ";"]}, "masked_query": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC;", "question_pauq": {"ru": "\u041f\u043e\u0436\u0430\u043b\u0443\u0439\u0441\u0442\u0430, \u043f\u043e\u043a\u0430\u0436\u0438\u0442\u0435 \u0444\u043e\u0440\u043c\u0430\u0442\u044b \u0437\u0430\u043f\u0438\u0441\u0438 \u043e\u0440\u043a\u0435\u0441\u0442\u0440\u043e\u0432 \u0432 \u043f\u043e\u0440\u044f\u0434\u043a\u0435 \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430\u043d\u0438\u044f \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430."}, "question": "Please show the record formats of orchestras in ascending order of count.", "kb_id": "orchestra"}, {"id": "D_0852", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 11, false], null]]]], "where": [], "groupBy": [[0, 11, false]], "having": [], "orderBy": ["asc", [[0, [3, 0, false], null]]], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 11, false], null]]]], "where": [], "groupBy": [[0, 11, false]], "having": [], "orderBy": ["asc", [[0, [3, 0, false], null]]], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "the", "major", "record", "formats", "of", "orchestras", ",", "sorted", "by", "their", "frequency", "?"], "ru": ["\u041a\u0430\u043a\u0438\u0435", "\u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0435", "\u0444\u043e\u0440\u043c\u0430\u0442\u044b", "\u0437\u0430\u043f\u0438\u0441\u0438", "\u043e\u0440\u043a\u0435\u0441\u0442\u0440\u043e\u0432", ",", "\u043e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435", "\u043f\u043e", "\u0447\u0430\u0441\u0442\u043e\u0442\u0435", "?"]}, "query_toks": {"en": ["select", "major_record_format", "from", "orchestra", "group", "by", "major_record_format", "order", "by", "count", "(", "*", ")", "asc", ";"], "ru": ["select", "major_record_format", "from", "orchestra", "group", "by", "major_record_format", "order", "by", "count", "(", "*", ")", "asc", ";"]}, "query_toks_no_values": {"en": ["select", "major_record_format", "from", "orchestra", "group", "by", "major_record_format", "order", "by", "count", "(", "*", ")", "asc", ";"], "ru": ["select", "major_record_format", "from", "orchestra", "group", "by", "major_record_format", "order", "by", "count", "(", "*", ")", "asc", ";"]}, "masked_query": "SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC;", "question_pauq": {"ru": "\u041a\u0430\u043a\u0438\u0435 \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u0444\u043e\u0440\u043c\u0430\u0442\u044b \u0437\u0430\u043f\u0438\u0441\u0438 \u043e\u0440\u043a\u0435\u0441\u0442\u0440\u043e\u0432, \u043e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u043f\u043e \u0447\u0430\u0441\u0442\u043e\u0442\u0435?"}, "question": "What are the major record formats of orchestras, sorted by their frequency?", "kb_id": "orchestra"}, {"id": "D_0853", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [], "groupBy": [[0, 9, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [], "groupBy": [[0, 9, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["List", "the", "record", "company", "shared", "by", "the", "most", "number", "of", "orchestras", "."], "ru": ["\u0423\u043a\u0430\u0436\u0438\u0442\u0435", "\u0437\u0432\u0443\u043a\u043e\u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u044e\u0449\u0443\u044e", "\u043a\u043e\u043c\u043f\u0430\u043d\u0438\u044e", ",", "\u043a\u043e\u0442\u043e\u0440\u0443\u044e", "\u0434\u0435\u043b\u0438\u0442", "\u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0435\u0435", "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e", "\u043e\u0440\u043a\u0435\u0441\u0442\u0440\u043e\u0432", "."]}, "query_toks": {"en": ["select", "record_company", "from", "orchestra", "group", "by", "record_company", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"], "ru": ["select", "record_company", "from", "orchestra", "group", "by", "record_company", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"]}, "query_toks_no_values": {"en": ["select", "record_company", "from", "orchestra", "group", "by", "record_company", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"], "ru": ["select", "record_company", "from", "orchestra", "group", "by", "record_company", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"]}, "masked_query": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1;", "question_pauq": {"ru": "\u0423\u043a\u0430\u0436\u0438\u0442\u0435 \u0437\u0432\u0443\u043a\u043e\u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u044e\u0449\u0443\u044e \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u044e, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u0434\u0435\u043b\u0438\u0442 \u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0440\u043a\u0435\u0441\u0442\u0440\u043e\u0432."}, "question": "List the record company shared by the most number of orchestras.", "kb_id": "orchestra"}, {"id": "D_0854", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [], "groupBy": [[0, 9, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [], "groupBy": [[0, 9, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "record", "company", "used", "by", "the", "greatest", "number", "of", "orchestras", "?"], "ru": ["\u041a\u0430\u043a\u0443\u044e", "\u0437\u0432\u0443\u043a\u043e\u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u044e\u0449\u0443\u044e", "\u043a\u043e\u043c\u043f\u0430\u043d\u0438\u044e", "\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442", "\u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0435\u0435", "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e", "\u043e\u0440\u043a\u0435\u0441\u0442\u0440\u043e\u0432", "?"]}, "query_toks": {"en": ["select", "record_company", "from", "orchestra", "group", "by", "record_company", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"], "ru": ["select", "record_company", "from", "orchestra", "group", "by", "record_company", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"]}, "query_toks_no_values": {"en": ["select", "record_company", "from", "orchestra", "group", "by", "record_company", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"], "ru": ["select", "record_company", "from", "orchestra", "group", "by", "record_company", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"]}, "masked_query": "SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1;", "question_pauq": {"ru": "\u041a\u0430\u043a\u0443\u044e \u0437\u0432\u0443\u043a\u043e\u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u044e\u0449\u0443\u044e \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u044e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 \u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0440\u043a\u0435\u0441\u0442\u0440\u043e\u0432?"}, "question": "What is the record company used by the greatest number of orchestras?", "kb_id": "orchestra"}, {"id": "D_0855", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance);"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 7, false], null]]]], "where": [[true, 8, [0, [0, 6, false], null], {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 13, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 7, false], null]]]], "where": [[true, 8, [0, [0, 6, false], null], {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 13, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["List", "the", "names", "of", "orchestras", "that", "have", "no", "performance", "."], "ru": ["\u041f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0438\u0442\u0435", "\u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f", "\u043e\u0440\u043a\u0435\u0441\u0442\u0440\u043e\u0432", ",", "\u0443", "\u043a\u043e\u0442\u043e\u0440\u044b\u0445", "\u043d\u0435\u0442", "\u0432\u044b\u0441\u0442\u0443\u043f\u043b\u0435\u043d\u0438\u0439", "."]}, "query_toks": {"en": ["select", "orchestra", "from", "orchestra", "where", "orchestra_id", "not", "in", "(", "select", "orchestra_id", "from", "performance", ")", ";"], "ru": ["select", "orchestra", "from", "orchestra", "where", "orchestra_id", "not", "in", "(", "select", "orchestra_id", "from", "performance", ")", ";"]}, "query_toks_no_values": {"en": ["select", "orchestra", "from", "orchestra", "where", "orchestra_id", "not", "in", "(", "select", "orchestra_id", "from", "performance", ")", ";"], "ru": ["select", "orchestra", "from", "orchestra", "where", "orchestra_id", "not", "in", "(", "select", "orchestra_id", "from", "performance", ")", ";"]}, "masked_query": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance);", "question_pauq": {"ru": "\u041f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0438\u0442\u0435 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f \u043e\u0440\u043a\u0435\u0441\u0442\u0440\u043e\u0432, \u0443 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043d\u0435\u0442 \u0432\u044b\u0441\u0442\u0443\u043f\u043b\u0435\u043d\u0438\u0439."}, "question": "List the names of orchestras that have no performance.", "kb_id": "orchestra"}, {"id": "D_0856", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance);"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 7, false], null]]]], "where": [[true, 8, [0, [0, 6, false], null], {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 13, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 7, false], null]]]], "where": [[true, 8, [0, [0, 6, false], null], {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 13, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "the", "orchestras", "that", "do", "not", "have", "any", "performances", "?"], "ru": ["\u041a\u0430\u043a\u0438\u0435", "\u043e\u0440\u043a\u0435\u0441\u0442\u0440\u044b", "\u043d\u0435", "\u0432\u044b\u0441\u0442\u0443\u043f\u0430\u044e\u0442", "?"]}, "query_toks": {"en": ["select", "orchestra", "from", "orchestra", "where", "orchestra_id", "not", "in", "(", "select", "orchestra_id", "from", "performance", ")", ";"], "ru": ["select", "orchestra", "from", "orchestra", "where", "orchestra_id", "not", "in", "(", "select", "orchestra_id", "from", "performance", ")", ";"]}, "query_toks_no_values": {"en": ["select", "orchestra", "from", "orchestra", "where", "orchestra_id", "not", "in", "(", "select", "orchestra_id", "from", "performance", ")", ";"], "ru": ["select", "orchestra", "from", "orchestra", "where", "orchestra_id", "not", "in", "(", "select", "orchestra_id", "from", "performance", ")", ";"]}, "masked_query": "SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance);", "question_pauq": {"ru": "\u041a\u0430\u043a\u0438\u0435 \u043e\u0440\u043a\u0435\u0441\u0442\u0440\u044b \u043d\u0435 \u0432\u044b\u0441\u0442\u0443\u043f\u0430\u044e\u0442?"}, "question": "What are the orchestras that do not have any performances?", "kb_id": "orchestra"}, {"id": "D_0857", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [[false, 4, [0, [0, 10, false], null], 2003.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [[false, 3, [0, [0, 10, false], null], 2003.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [[false, 4, [0, [0, 10, false], null], 2003.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [[false, 3, [0, [0, 10, false], null], 2003.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "union": null, "except": null}}, "question_toks": {"en": ["Show", "the", "record", "companies", "shared", "by", "orchestras", "founded", "before", "2003", "and", "after", "2003", "."], "ru": ["\u041f\u043e\u043a\u0430\u0436\u0438\u0442\u0435", "\u0437\u0432\u0443\u043a\u043e\u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u044e\u0449\u0438\u0435", "\u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438", "\u043e\u0440\u043a\u0435\u0441\u0442\u0440\u043e\u0432", ",", "\u043e\u0441\u043d\u043e\u0432\u0430\u043d\u043d\u044b\u0445", "\u0434\u043e", "2003", "\u0433\u043e\u0434\u0430", "\u0438", "\u043f\u043e\u0441\u043b\u0435", "2003", "\u0433\u043e\u0434\u0430", "."]}, "query_toks": {"en": ["select", "record_company", "from", "orchestra", "where", "year_of_founded", "<", "2003", "intersect", "select", "record_company", "from", "orchestra", "where", "year_of_founded", ">", "2003", ";"], "ru": ["select", "record_company", "from", "orchestra", "where", "year_of_founded", "<", "2003", "intersect", "select", "record_company", "from", "orchestra", "where", "year_of_founded", ">", "2003", ";"]}, "query_toks_no_values": {"en": ["select", "record_company", "from", "orchestra", "where", "year_of_founded", "<", "2003", "intersect", "select", "record_company", "from", "orchestra", "where", "year_of_founded", ">", "2003", ";"], "ru": ["select", "record_company", "from", "orchestra", "where", "year_of_founded", "<", "2003", "intersect", "select", "record_company", "from", "orchestra", "where", "year_of_founded", ">", "2003", ";"]}, "masked_query": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003;", "question_pauq": {"ru": "\u041f\u043e\u043a\u0430\u0436\u0438\u0442\u0435 \u0437\u0432\u0443\u043a\u043e\u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u044e\u0449\u0438\u0435 \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438 \u043e\u0440\u043a\u0435\u0441\u0442\u0440\u043e\u0432, \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u0434\u043e 2003 \u0433\u043e\u0434\u0430 \u0438 \u043f\u043e\u0441\u043b\u0435 2003 \u0433\u043e\u0434\u0430."}, "question": "Show the record companies shared by orchestras founded before 2003 and after 2003.", "kb_id": "orchestra"}, {"id": "D_0858", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [[false, 4, [0, [0, 10, false], null], 2003.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [[false, 3, [0, [0, 10, false], null], 2003.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [[false, 4, [0, [0, 10, false], null], 2003.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [[false, 3, [0, [0, 10, false], null], 2003.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "the", "record", "companies", "that", "are", "used", "by", "both", "orchestras", "founded", "before", "2003", "and", "those", "founded", "after", "2003", "?"], "ru": ["\u041a\u0430\u043a\u0438\u0435", "\u0437\u0432\u0443\u043a\u043e\u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u044e\u0449\u0438\u0435", "\u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438", "\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f", "\u043a\u0430\u043a", "\u043e\u0440\u043a\u0435\u0441\u0442\u0440\u0430\u043c\u0438", ",", "\u043e\u0441\u043d\u043e\u0432\u0430\u043d\u043d\u044b\u043c\u0438", "\u0434\u043e", "2003", "\u0433\u043e\u0434\u0430", ",", "\u0442\u0430\u043a", "\u0438", "\u043e\u0440\u043a\u0435\u0441\u0442\u0440\u0430\u043c\u0438", ",", "\u043e\u0441\u043d\u043e\u0432\u0430\u043d\u043d\u044b\u043c\u0438", "\u043f\u043e\u0441\u043b\u0435", "2003", "\u0433\u043e\u0434\u0430", "?"]}, "query_toks": {"en": ["select", "record_company", "from", "orchestra", "where", "year_of_founded", "<", "2003", "intersect", "select", "record_company", "from", "orchestra", "where", "year_of_founded", ">", "2003", ";"], "ru": ["select", "record_company", "from", "orchestra", "where", "year_of_founded", "<", "2003", "intersect", "select", "record_company", "from", "orchestra", "where", "year_of_founded", ">", "2003", ";"]}, "query_toks_no_values": {"en": ["select", "record_company", "from", "orchestra", "where", "year_of_founded", "<", "2003", "intersect", "select", "record_company", "from", "orchestra", "where", "year_of_founded", ">", "2003", ";"], "ru": ["select", "record_company", "from", "orchestra", "where", "year_of_founded", "<", "2003", "intersect", "select", "record_company", "from", "orchestra", "where", "year_of_founded", ">", "2003", ";"]}, "masked_query": "SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003;", "question_pauq": {"ru": "\u041a\u0430\u043a\u0438\u0435 \u0437\u0432\u0443\u043a\u043e\u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u044e\u0449\u0438\u0435 \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f \u043a\u0430\u043a \u043e\u0440\u043a\u0435\u0441\u0442\u0440\u0430\u043c\u0438, \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u043d\u044b\u043c\u0438 \u0434\u043e 2003 \u0433\u043e\u0434\u0430, \u0442\u0430\u043a \u0438 \u043e\u0440\u043a\u0435\u0441\u0442\u0440\u0430\u043c\u0438, \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u043d\u044b\u043c\u0438 \u043f\u043e\u0441\u043b\u0435 2003 \u0433\u043e\u0434\u0430?"}, "question": "What are the record companies that are used by both orchestras founded before 2003 and those founded after 2003?", "kb_id": "orchestra"}, {"id": "D_0859", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  \"CD\" OR Major_Record_Format  =  \"DVD\";"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 11, false], null], "\"CD\"", null], "or", [false, 2, [0, [0, 11, false], null], "\"DVD\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 11, false], null], "\"CD\"", null], "or", [false, 2, [0, [0, 11, false], null], "\"DVD\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Find", "the", "number", "of", "orchestras", "whose", "record", "format", "is", "``", "CD", "''", "or", "``", "DVD", "''", "."], "ru": ["\u041d\u0430\u0439\u0434\u0438", "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e", "\u043e\u0440\u043a\u0435\u0441\u0442\u0440\u043e\u0432", ",", "\u0447\u0435\u0439", "\u0444\u043e\u0440\u043c\u0430\u0442", "\u0437\u0430\u043f\u0438\u0441\u0438", "-", "``", "CD", "''", "\u0438\u043b\u0438", "``", "DVD", "''", "."]}, "query_toks": {"en": ["select", "count", "(", "*", ")", "from", "orchestra", "where", "major_record_format", "=", "\"CD\"", "or", "major_record_format", "=", "\"DVD\"", ";"], "ru": ["select", "count", "(", "*", ")", "from", "orchestra", "where", "major_record_format", "=", "\"CD\"", "or", "major_record_format", "=", "\"DVD\"", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "*", ")", "from", "orchestra", "where", "major_record_format", "=", "value", "or", "major_record_format", "=", "value", ";"], "ru": ["select", "count", "(", "*", ")", "from", "orchestra", "where", "major_record_format", "=", "value", "or", "major_record_format", "=", "value", ";"]}, "masked_query": "SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  \"CD\" OR Major_Record_Format  =  \"DVD\";", "question_pauq": {"ru": "\u041d\u0430\u0439\u0434\u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0440\u043a\u0435\u0441\u0442\u0440\u043e\u0432, \u0447\u0435\u0439 \u0444\u043e\u0440\u043c\u0430\u0442 \u0437\u0430\u043f\u0438\u0441\u0438 - \"CD\" \u0438\u043b\u0438 \"DVD\"."}, "question": "Find the number of orchestras whose record format is \"CD\" or \"DVD\".", "kb_id": "orchestra"}, {"id": "D_0860", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  \"CD\" OR Major_Record_Format  =  \"DVD\";"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 11, false], null], "\"CD\"", null], "or", [false, 2, [0, [0, 11, false], null], "\"DVD\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 11, false], null], "\"CD\"", null], "or", [false, 2, [0, [0, 11, false], null], "\"DVD\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Count", "the", "number", "of", "orchestras", "that", "have", "CD", "or", "DVD", "as", "their", "record", "format", "."], "ru": ["\u041f\u043e\u0434\u0441\u0447\u0438\u0442\u0430\u0439", "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e", "\u043e\u0440\u043a\u0435\u0441\u0442\u0440\u043e\u0432", ",", "\u0443", "\u043a\u043e\u0442\u043e\u0440\u044b\u0445", "\u0435\u0441\u0442\u044c", "CD", "\u0438\u043b\u0438", "DVD", "\u0432", "\u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435", "\u0444\u043e\u0440\u043c\u0430\u0442\u0430", "\u0437\u0430\u043f\u0438\u0441\u0438", "."]}, "query_toks": {"en": ["select", "count", "(", "*", ")", "from", "orchestra", "where", "major_record_format", "=", "\"CD\"", "or", "major_record_format", "=", "\"DVD\"", ";"], "ru": ["select", "count", "(", "*", ")", "from", "orchestra", "where", "major_record_format", "=", "\"CD\"", "or", "major_record_format", "=", "\"DVD\"", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "*", ")", "from", "orchestra", "where", "major_record_format", "=", "value", "or", "major_record_format", "=", "value", ";"], "ru": ["select", "count", "(", "*", ")", "from", "orchestra", "where", "major_record_format", "=", "value", "or", "major_record_format", "=", "value", ";"]}, "masked_query": "SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  \"CD\" OR Major_Record_Format  =  \"DVD\";", "question_pauq": {"ru": "\u041f\u043e\u0434\u0441\u0447\u0438\u0442\u0430\u0439 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0440\u043a\u0435\u0441\u0442\u0440\u043e\u0432, \u0443 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0435\u0441\u0442\u044c CD \u0438\u043b\u0438 DVD \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0444\u043e\u0440\u043c\u0430\u0442\u0430 \u0437\u0430\u043f\u0438\u0441\u0438."}, "question": "Count the number of orchestras that have CD or DVD as their record format.", "kb_id": "orchestra"}, {"id": "D_0861", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*)  >  1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 6, false], null], [0, 13, false], null]]}, "select": [false, [[0, [0, [0, 10, false], null]]]], "where": [], "groupBy": [[0, 13, false]], "having": [[false, 3, [0, [3, 0, false], null], 1.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 6, false], null], [0, 13, false], null]]}, "select": [false, [[0, [0, [0, 10, false], null]]]], "where": [], "groupBy": [[0, 13, false]], "having": [[false, 3, [0, [3, 0, false], null], 1.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Show", "the", "years", "in", "which", "orchestras", "that", "have", "given", "more", "than", "one", "performance", "are", "founded", "."], "ru": ["\u041f\u043e\u043a\u0430\u0436\u0438\u0442\u0435", "\u0433\u043e\u0434\u044b", ",", "\u043a\u043e\u0433\u0434\u0430", "\u0431\u044b\u043b\u0438", "\u043e\u0441\u043d\u043e\u0432\u0430\u043d\u044b", "\u043e\u0440\u043a\u0435\u0441\u0442\u0440\u044b", ",", "\u0434\u0430\u0432\u0448\u0438\u0435", "\u0431\u043e\u043b\u0435\u0435", "\u043e\u0434\u043d\u043e\u0433\u043e", "\u0432\u044b\u0441\u0442\u0443\u043f\u043b\u0435\u043d\u0438\u044f", "."]}, "query_toks": {"en": ["select", "year_of_founded", "from", "orchestra", "as", "t1", "join", "performance", "as", "t2", "on", "t1.orchestra_id", "=", "t2.orchestra_id", "group", "by", "t2.orchestra_id", "having", "count", "(", "*", ")", ">", "1", ";"], "ru": ["select", "year_of_founded", "from", "orchestra", "as", "t1", "join", "performance", "as", "t2", "on", "t1.orchestra_id", "=", "t2.orchestra_id", "group", "by", "t2.orchestra_id", "having", "count", "(", "*", ")", ">", "1", ";"]}, "query_toks_no_values": {"en": ["select", "year_of_founded", "from", "orchestra", "as", "t1", "join", "performance", "as", "t2", "on", "t1.orchestra_id", "=", "t2.orchestra_id", "group", "by", "t2.orchestra_id", "having", "count", "(", "*", ")", ">", "1", ";"], "ru": ["select", "year_of_founded", "from", "orchestra", "as", "t1", "join", "performance", "as", "t2", "on", "t1.orchestra_id", "=", "t2.orchestra_id", "group", "by", "t2.orchestra_id", "having", "count", "(", "*", ")", ">", "1", ";"]}, "masked_query": "SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*)  >  1;", "question_pauq": {"ru": "\u041f\u043e\u043a\u0430\u0436\u0438\u0442\u0435 \u0433\u043e\u0434\u044b, \u043a\u043e\u0433\u0434\u0430 \u0431\u044b\u043b\u0438 \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u044b \u043e\u0440\u043a\u0435\u0441\u0442\u0440\u044b, \u0434\u0430\u0432\u0448\u0438\u0435 \u0431\u043e\u043b\u0435\u0435 \u043e\u0434\u043d\u043e\u0433\u043e \u0432\u044b\u0441\u0442\u0443\u043f\u043b\u0435\u043d\u0438\u044f."}, "question": "Show the years in which orchestras that have given more than one performance are founded.", "kb_id": "orchestra"}, {"id": "D_0862", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*)  >  1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 6, false], null], [0, 13, false], null]]}, "select": [false, [[0, [0, [0, 10, false], null]]]], "where": [], "groupBy": [[0, 13, false]], "having": [[false, 3, [0, [3, 0, false], null], 1.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1], ["table_unit", 2]], "conds": [[false, 2, [0, [0, 6, false], null], [0, 13, false], null]]}, "select": [false, [[0, [0, [0, 10, false], null]]]], "where": [], "groupBy": [[0, 13, false]], "having": [[false, 3, [0, [3, 0, false], null], 1.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "years", "of", "founding", "for", "orchestras", "that", "have", "had", "more", "than", "a", "single", "performance", "?"], "ru": ["\u041a\u043e\u0433\u0434\u0430", "\u0431\u044b\u043b\u0438", "\u043e\u0441\u043d\u043e\u0432\u0430\u043d\u044b", "\u043e\u0440\u043a\u0435\u0441\u0442\u0440\u044b", ",", "\u043a\u043e\u0442\u043e\u0440\u044b\u0435", "\u0432\u044b\u0441\u0442\u0443\u043f\u0430\u043b\u0438", "\u0431\u043e\u043b\u0435\u0435", "\u043e\u0434\u043d\u043e\u0433\u043e", "\u0440\u0430\u0437\u0430", "?"]}, "query_toks": {"en": ["select", "year_of_founded", "from", "orchestra", "as", "t1", "join", "performance", "as", "t2", "on", "t1.orchestra_id", "=", "t2.orchestra_id", "group", "by", "t2.orchestra_id", "having", "count", "(", "*", ")", ">", "1", ";"], "ru": ["select", "year_of_founded", "from", "orchestra", "as", "t1", "join", "performance", "as", "t2", "on", "t1.orchestra_id", "=", "t2.orchestra_id", "group", "by", "t2.orchestra_id", "having", "count", "(", "*", ")", ">", "1", ";"]}, "query_toks_no_values": {"en": ["select", "year_of_founded", "from", "orchestra", "as", "t1", "join", "performance", "as", "t2", "on", "t1.orchestra_id", "=", "t2.orchestra_id", "group", "by", "t2.orchestra_id", "having", "count", "(", "*", ")", ">", "1", ";"], "ru": ["select", "year_of_founded", "from", "orchestra", "as", "t1", "join", "performance", "as", "t2", "on", "t1.orchestra_id", "=", "t2.orchestra_id", "group", "by", "t2.orchestra_id", "having", "count", "(", "*", ")", ">", "1", ";"]}, "masked_query": "SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*)  >  1;", "question_pauq": {"ru": "\u041a\u043e\u0433\u0434\u0430 \u0431\u044b\u043b\u0438 \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u044b \u043e\u0440\u043a\u0435\u0441\u0442\u0440\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0432\u044b\u0441\u0442\u0443\u043f\u0430\u043b\u0438 \u0431\u043e\u043b\u0435\u0435 \u043e\u0434\u043d\u043e\u0433\u043e \u0440\u0430\u0437\u0430?"}, "question": "What are years of founding for orchestras that have had more than a single performance?", "kb_id": "orchestra"}, {"id": "D_0863", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT count(*) FROM Highschooler;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["How", "many", "high", "schoolers", "are", "there", "?"], "ru": ["\u0421\u043a\u043e\u043b\u044c\u043a\u043e", "\u0437\u0434\u0435\u0441\u044c", "\u0441\u0442\u0430\u0440\u0448\u0435\u043a\u043b\u0430\u0441\u0441\u043d\u0438\u043a\u043e\u0432", "?"]}, "query_toks": {"en": ["select", "count", "(", "*", ")", "from", "highschooler", ";"], "ru": ["select", "count", "(", "*", ")", "from", "highschooler", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "*", ")", "from", "highschooler", ";"], "ru": ["select", "count", "(", "*", ")", "from", "highschooler", ";"]}, "masked_query": "SELECT count(*) FROM Highschooler;", "question_pauq": {"ru": "\u0421\u043a\u043e\u043b\u044c\u043a\u043e \u0437\u0434\u0435\u0441\u044c \u0441\u0442\u0430\u0440\u0448\u0435\u043a\u043b\u0430\u0441\u0441\u043d\u0438\u043a\u043e\u0432?"}, "question": "How many high schoolers are there?", "kb_id": "network_1"}, {"id": "D_0864", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT count(*) FROM Highschooler;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Count", "the", "number", "of", "high", "schoolers", "."], "ru": ["\u041f\u043e\u0434\u0441\u0447\u0438\u0442\u0430\u0439\u0442\u0435", "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e", "\u0441\u0442\u0430\u0440\u0448\u0435\u043a\u043b\u0430\u0441\u0441\u043d\u0438\u043a\u043e\u0432", "."]}, "query_toks": {"en": ["select", "count", "(", "*", ")", "from", "highschooler", ";"], "ru": ["select", "count", "(", "*", ")", "from", "highschooler", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "*", ")", "from", "highschooler", ";"], "ru": ["select", "count", "(", "*", ")", "from", "highschooler", ";"]}, "masked_query": "SELECT count(*) FROM Highschooler;", "question_pauq": {"ru": "\u041f\u043e\u0434\u0441\u0447\u0438\u0442\u0430\u0439\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0442\u0430\u0440\u0448\u0435\u043a\u043b\u0430\u0441\u0441\u043d\u0438\u043a\u043e\u0432."}, "question": "Count the number of high schoolers.", "kb_id": "network_1"}, {"id": "D_0865", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT name ,  grade FROM Highschooler;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 2, false], null]], [0, [0, [0, 3, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 2, false], null]], [0, [0, [0, 3, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Show", "the", "names", "and", "grades", "of", "each", "high", "schooler", "."], "ru": ["\u041f\u043e\u043a\u0430\u0436\u0438\u0442\u0435", "\u0438\u043c\u0435\u043d\u0430", "\u0438", "\u043e\u0446\u0435\u043d\u043a\u0438", "\u043a\u0430\u0436\u0434\u043e\u0433\u043e", "\u0441\u0442\u0430\u0440\u0448\u0435\u043a\u043b\u0430\u0441\u0441\u043d\u0438\u043a\u0430", "."]}, "query_toks": {"en": ["select", "name", ",", "grade", "from", "highschooler", ";"], "ru": ["select", "name", ",", "grade", "from", "highschooler", ";"]}, "query_toks_no_values": {"en": ["select", "name", ",", "grade", "from", "highschooler", ";"], "ru": ["select", "name", ",", "grade", "from", "highschooler", ";"]}, "masked_query": "SELECT name ,  grade FROM Highschooler;", "question_pauq": {"ru": "\u041f\u043e\u043a\u0430\u0436\u0438\u0442\u0435 \u0438\u043c\u0435\u043d\u0430 \u0438 \u043e\u0446\u0435\u043d\u043a\u0438 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0441\u0442\u0430\u0440\u0448\u0435\u043a\u043b\u0430\u0441\u0441\u043d\u0438\u043a\u0430."}, "question": "Show the names and grades of each high schooler.", "kb_id": "network_1"}, {"id": "D_0866", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT name ,  grade FROM Highschooler;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 2, false], null]], [0, [0, [0, 3, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 2, false], null]], [0, [0, [0, 3, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "the", "names", "and", "grades", "for", "each", "high", "schooler", "?"], "ru": ["\u041a\u0430\u043a\u0438\u0435", "\u0438\u043c\u0435\u043d\u0430", "\u0438", "\u043e\u0446\u0435\u043d\u043a\u0438", "\u0443", "\u043a\u0430\u0436\u0434\u043e\u0433\u043e", "\u0441\u0442\u0430\u0440\u0448\u0435\u043a\u043b\u0430\u0441\u0441\u043d\u0438\u043a\u0430", "?"]}, "query_toks": {"en": ["select", "name", ",", "grade", "from", "highschooler", ";"], "ru": ["select", "name", ",", "grade", "from", "highschooler", ";"]}, "query_toks_no_values": {"en": ["select", "name", ",", "grade", "from", "highschooler", ";"], "ru": ["select", "name", ",", "grade", "from", "highschooler", ";"]}, "masked_query": "SELECT name ,  grade FROM Highschooler;", "question_pauq": {"ru": "\u041a\u0430\u043a\u0438\u0435 \u0438\u043c\u0435\u043d\u0430 \u0438 \u043e\u0446\u0435\u043d\u043a\u0438 \u0443 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0441\u0442\u0430\u0440\u0448\u0435\u043a\u043b\u0430\u0441\u0441\u043d\u0438\u043a\u0430?"}, "question": "What are the names and grades for each high schooler?", "kb_id": "network_1"}, {"id": "D_0867", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT grade FROM Highschooler;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 3, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 3, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Show", "all", "the", "grades", "of", "the", "high", "schoolers", "."], "ru": ["\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c", "\u0432\u0441\u0435", "\u043e\u0446\u0435\u043d\u043a\u0438", "\u0441\u0442\u0430\u0440\u0448\u0435\u043a\u043b\u0430\u0441\u0441\u043d\u0438\u043a\u043e\u0432", "."]}, "query_toks": {"en": ["select", "grade", "from", "highschooler", ";"], "ru": ["select", "grade", "from", "highschooler", ";"]}, "query_toks_no_values": {"en": ["select", "grade", "from", "highschooler", ";"], "ru": ["select", "grade", "from", "highschooler", ";"]}, "masked_query": "SELECT grade FROM Highschooler;", "question_pauq": {"ru": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0432\u0441\u0435 \u043e\u0446\u0435\u043d\u043a\u0438 \u0441\u0442\u0430\u0440\u0448\u0435\u043a\u043b\u0430\u0441\u0441\u043d\u0438\u043a\u043e\u0432."}, "question": "Show all the grades of the high schoolers.", "kb_id": "network_1"}, {"id": "D_0868", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT grade FROM Highschooler;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 3, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 3, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "grade", "of", "each", "high", "schooler", "?"], "ru": ["\u041a\u0430\u043a\u0430\u044f", "\u043e\u0446\u0435\u043d\u043a\u0430", "\u0443", "\u043a\u0430\u0436\u0434\u043e\u0433\u043e", "\u0441\u0442\u0430\u0440\u0448\u0435\u043a\u043b\u0430\u0441\u0441\u043d\u0438\u043a\u0430", "?"]}, "query_toks": {"en": ["select", "grade", "from", "highschooler", ";"], "ru": ["select", "grade", "from", "highschooler", ";"]}, "query_toks_no_values": {"en": ["select", "grade", "from", "highschooler", ";"], "ru": ["select", "grade", "from", "highschooler", ";"]}, "masked_query": "SELECT grade FROM Highschooler;", "question_pauq": {"ru": "\u041a\u0430\u043a\u0430\u044f \u043e\u0446\u0435\u043d\u043a\u0430 \u0443 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0441\u0442\u0430\u0440\u0448\u0435\u043a\u043b\u0430\u0441\u0441\u043d\u0438\u043a\u0430?"}, "question": "What is the grade of each high schooler?", "kb_id": "network_1"}, {"id": "D_0869", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT grade FROM Highschooler WHERE name  =  \"\u041b\u0435\u0432\";"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 3, false], null]]]], "where": [[false, 2, [0, [0, 2, false], null], "\"Kyle\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 3, false], null]]]], "where": [[false, 2, [0, [0, 2, false], null], "\"\u041b\u0435\u0432\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "grade", "is", "Kyle", "in", "?"], "ru": ["\u0412", "\u043a\u0430\u043a\u043e\u043c", "\u043a\u043b\u0430\u0441\u0441\u0435", "\u041b\u0435\u0432", "?"]}, "query_toks": {"en": ["select", "grade", "from", "highschooler", "where", "name", "=", "\"Kyle\"", ";"], "ru": ["select", "grade", "from", "highschooler", "where", "name", "=", "\"\u041b\u0435\u0432\"", ";"]}, "query_toks_no_values": {"en": ["select", "grade", "from", "highschooler", "where", "name", "=", "value", ";"], "ru": ["select", "grade", "from", "highschooler", "where", "name", "=", "value", ";"]}, "masked_query": "SELECT grade FROM Highschooler WHERE name  =  \"Kyle\";", "question_pauq": {"ru": "\u0412 \u043a\u0430\u043a\u043e\u043c \u043a\u043b\u0430\u0441\u0441\u0435 \u041b\u0435\u0432?"}, "question": "What grade is Kyle in?", "kb_id": "network_1"}, {"id": "D_0870", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT grade FROM Highschooler WHERE name  =  \"\u041b\u0435\u0432\";"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 3, false], null]]]], "where": [[false, 2, [0, [0, 2, false], null], "\"Kyle\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 3, false], null]]]], "where": [[false, 2, [0, [0, 2, false], null], "\"\u041b\u0435\u0432\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Return", "the", "grade", "for", "the", "high", "schooler", "named", "Kyle", "."], "ru": ["\u041e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u0442\u044c", "\u043e\u0446\u0435\u043d\u043a\u0443", "\u0441\u0442\u0430\u0440\u0448\u0435\u043a\u043b\u0430\u0441\u0441\u043d\u0438\u043a\u0430", "\u043f\u043e", "\u0438\u043c\u0435\u043d\u0438", "\u041b\u0435\u0432", "."]}, "query_toks": {"en": ["select", "grade", "from", "highschooler", "where", "name", "=", "\"Kyle\"", ";"], "ru": ["select", "grade", "from", "highschooler", "where", "name", "=", "\"\u041b\u0435\u0432\"", ";"]}, "query_toks_no_values": {"en": ["select", "grade", "from", "highschooler", "where", "name", "=", "value", ";"], "ru": ["select", "grade", "from", "highschooler", "where", "name", "=", "value", ";"]}, "masked_query": "SELECT grade FROM Highschooler WHERE name  =  \"Kyle\";", "question_pauq": {"ru": "\u041e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u0442\u044c \u043e\u0446\u0435\u043d\u043a\u0443 \u0441\u0442\u0430\u0440\u0448\u0435\u043a\u043b\u0430\u0441\u0441\u043d\u0438\u043a\u0430 \u043f\u043e \u0438\u043c\u0435\u043d\u0438 \u041b\u0435\u0432."}, "question": "Return the grade for the high schooler named Kyle.", "kb_id": "network_1"}, {"id": "D_0871", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT name FROM Highschooler WHERE grade  =  10;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [[false, 2, [0, [0, 3, false], null], 10.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [[false, 2, [0, [0, 3, false], null], 10.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Show", "the", "names", "of", "all", "high", "schoolers", "in", "grade", "10", "."], "ru": ["\u041f\u043e\u043a\u0430\u0436\u0438\u0442\u0435", "\u0438\u043c\u0435\u043d\u0430", "\u0432\u0441\u0435\u0445", "\u0441\u0442\u0430\u0440\u0448\u0435\u043a\u043b\u0430\u0441\u0441\u043d\u0438\u043a\u043e\u0432", "10", "\u043a\u043b\u0430\u0441\u0441\u0430", "."]}, "query_toks": {"en": ["select", "name", "from", "highschooler", "where", "grade", "=", "10", ";"], "ru": ["select", "name", "from", "highschooler", "where", "grade", "=", "10", ";"]}, "query_toks_no_values": {"en": ["select", "name", "from", "highschooler", "where", "grade", "=", "10", ";"], "ru": ["select", "name", "from", "highschooler", "where", "grade", "=", "10", ";"]}, "masked_query": "SELECT name FROM Highschooler WHERE grade  =  10;", "question_pauq": {"ru": "\u041f\u043e\u043a\u0430\u0436\u0438\u0442\u0435 \u0438\u043c\u0435\u043d\u0430 \u0432\u0441\u0435\u0445 \u0441\u0442\u0430\u0440\u0448\u0435\u043a\u043b\u0430\u0441\u0441\u043d\u0438\u043a\u043e\u0432 10 \u043a\u043b\u0430\u0441\u0441\u0430."}, "question": "Show the names of all high schoolers in grade 10.", "kb_id": "network_1"}, {"id": "D_0872", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT name FROM Highschooler WHERE grade  =  10;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [[false, 2, [0, [0, 3, false], null], 10.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [[false, 2, [0, [0, 3, false], null], 10.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "the", "names", "of", "all", "high", "schoolers", "in", "grade", "10", "?"], "ru": ["\u041a\u0430\u043a", "\u0437\u043e\u0432\u0443\u0442", "\u0432\u0441\u0435\u0445", "\u0441\u0442\u0430\u0440\u0448\u0435\u043a\u043b\u0430\u0441\u0441\u043d\u0438\u043a\u043e\u0432", "10", "\u043a\u043b\u0430\u0441\u0441\u0430", "?"]}, "query_toks": {"en": ["select", "name", "from", "highschooler", "where", "grade", "=", "10", ";"], "ru": ["select", "name", "from", "highschooler", "where", "grade", "=", "10", ";"]}, "query_toks_no_values": {"en": ["select", "name", "from", "highschooler", "where", "grade", "=", "10", ";"], "ru": ["select", "name", "from", "highschooler", "where", "grade", "=", "10", ";"]}, "masked_query": "SELECT name FROM Highschooler WHERE grade  =  10;", "question_pauq": {"ru": "\u041a\u0430\u043a \u0437\u043e\u0432\u0443\u0442 \u0432\u0441\u0435\u0445 \u0441\u0442\u0430\u0440\u0448\u0435\u043a\u043b\u0430\u0441\u0441\u043d\u0438\u043a\u043e\u0432 10 \u043a\u043b\u0430\u0441\u0441\u0430?"}, "question": "What are the names of all high schoolers in grade 10?", "kb_id": "network_1"}, {"id": "D_0873", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT ID FROM Highschooler WHERE name  =  \"\u041b\u0435\u0432\";"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 1, false], null]]]], "where": [[false, 2, [0, [0, 2, false], null], "\"Kyle\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 1, false], null]]]], "where": [[false, 2, [0, [0, 2, false], null], "\"\u041b\u0435\u0432\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Show", "the", "ID", "of", "the", "high", "schooler", "named", "Kyle", "."], "ru": ["\u041d\u0430\u0439\u0434\u0438", "id", "\u0441\u0442\u0430\u0440\u0448\u0435\u043a\u043b\u0430\u0441\u0441\u043d\u0438\u043a\u0430", "\u043f\u043e", "\u0438\u043c\u0435\u043d\u0438", "\u041b\u0435\u0432", "."]}, "query_toks": {"en": ["select", "id", "from", "highschooler", "where", "name", "=", "\"Kyle\"", ";"], "ru": ["select", "id", "from", "highschooler", "where", "name", "=", "\"\u041b\u0435\u0432\"", ";"]}, "query_toks_no_values": {"en": ["select", "id", "from", "highschooler", "where", "name", "=", "value", ";"], "ru": ["select", "id", "from", "highschooler", "where", "name", "=", "value", ";"]}, "masked_query": "SELECT ID FROM Highschooler WHERE name  =  \"Kyle\";", "question_pauq": {"ru": "\u041d\u0430\u0439\u0434\u0438 id \u0441\u0442\u0430\u0440\u0448\u0435\u043a\u043b\u0430\u0441\u0441\u043d\u0438\u043a\u0430 \u043f\u043e \u0438\u043c\u0435\u043d\u0438 \u041b\u0435\u0432."}, "question": "Show the ID of the high schooler named Kyle.", "kb_id": "network_1"}, {"id": "D_0874", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT ID FROM Highschooler WHERE name  =  \"\u041b\u0435\u0432\";"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 1, false], null]]]], "where": [[false, 2, [0, [0, 2, false], null], "\"Kyle\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 1, false], null]]]], "where": [[false, 2, [0, [0, 2, false], null], "\"\u041b\u0435\u0432\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "Kyle", "'s", "id", "?"], "ru": ["\u041a\u0430\u043a\u043e\u0439", "\u0443", "\u041b\u044c\u0432\u0430", "id", "?"]}, "query_toks": {"en": ["select", "id", "from", "highschooler", "where", "name", "=", "\"Kyle\"", ";"], "ru": ["select", "id", "from", "highschooler", "where", "name", "=", "\"\u041b\u0435\u0432\"", ";"]}, "query_toks_no_values": {"en": ["select", "id", "from", "highschooler", "where", "name", "=", "value", ";"], "ru": ["select", "id", "from", "highschooler", "where", "name", "=", "value", ";"]}, "masked_query": "SELECT ID FROM Highschooler WHERE name  =  \"Kyle\";", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0439 \u0443 \u041b\u044c\u0432\u0430 id?"}, "question": "What is Kyle's id?", "kb_id": "network_1"}, {"id": "D_0875", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 3, false], null], 9.0, null], "or", [false, 2, [0, [0, 3, false], null], 10.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 3, false], null], 9.0, null], "or", [false, 2, [0, [0, 3, false], null], 10.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["How", "many", "high", "schoolers", "are", "there", "in", "grade", "9", "or", "10", "?"], "ru": ["\u0421\u043a\u043e\u043b\u044c\u043a\u043e", "\u0441\u0442\u0430\u0440\u0448\u0435\u043a\u043b\u0430\u0441\u0441\u043d\u0438\u043a\u043e\u0432", "\u0432", "9", "\u0438\u043b\u0438", "10", "\u043a\u043b\u0430\u0441\u0441\u0435", "?"]}, "query_toks": {"en": ["select", "count", "(", "*", ")", "from", "highschooler", "where", "grade", "=", "9", "or", "grade", "=", "10", ";"], "ru": ["select", "count", "(", "*", ")", "from", "highschooler", "where", "grade", "=", "9", "or", "grade", "=", "10", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "*", ")", "from", "highschooler", "where", "grade", "=", "9", "or", "grade", "=", "10", ";"], "ru": ["select", "count", "(", "*", ")", "from", "highschooler", "where", "grade", "=", "9", "or", "grade", "=", "10", ";"]}, "masked_query": "SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10;", "question_pauq": {"ru": "\u0421\u043a\u043e\u043b\u044c\u043a\u043e \u0441\u0442\u0430\u0440\u0448\u0435\u043a\u043b\u0430\u0441\u0441\u043d\u0438\u043a\u043e\u0432 \u0432 9 \u0438\u043b\u0438 10 \u043a\u043b\u0430\u0441\u0441\u0435?"}, "question": "How many high schoolers are there in grade 9 or 10?", "kb_id": "network_1"}, {"id": "D_0876", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 3, false], null], 9.0, null], "or", [false, 2, [0, [0, 3, false], null], 10.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 3, false], null], 9.0, null], "or", [false, 2, [0, [0, 3, false], null], 10.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Count", "the", "number", "of", "high", "schoolers", "in", "grades", "9", "or", "10", "."], "ru": ["\u041f\u043e\u0434\u0441\u0447\u0438\u0442\u0430\u0439\u0442\u0435", "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e", "\u0441\u0442\u0430\u0440\u0448\u0435\u043a\u043b\u0430\u0441\u0441\u043d\u0438\u043a\u043e\u0432", "\u0432", "9", "\u0438\u043b\u0438", "10", "\u043a\u043b\u0430\u0441\u0441\u0430\u0445", "."]}, "query_toks": {"en": ["select", "count", "(", "*", ")", "from", "highschooler", "where", "grade", "=", "9", "or", "grade", "=", "10", ";"], "ru": ["select", "count", "(", "*", ")", "from", "highschooler", "where", "grade", "=", "9", "or", "grade", "=", "10", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "*", ")", "from", "highschooler", "where", "grade", "=", "9", "or", "grade", "=", "10", ";"], "ru": ["select", "count", "(", "*", ")", "from", "highschooler", "where", "grade", "=", "9", "or", "grade", "=", "10", ";"]}, "masked_query": "SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10;", "question_pauq": {"ru": "\u041f\u043e\u0434\u0441\u0447\u0438\u0442\u0430\u0439\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0442\u0430\u0440\u0448\u0435\u043a\u043b\u0430\u0441\u0441\u043d\u0438\u043a\u043e\u0432 \u0432 9 \u0438\u043b\u0438 10 \u043a\u043b\u0430\u0441\u0441\u0430\u0445."}, "question": "Count the number of high schoolers in grades 9 or 10.", "kb_id": "network_1"}, {"id": "D_0877", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT grade ,  count(*) FROM Highschooler GROUP BY grade;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 3, false], null]], [3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [[0, 3, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 3, false], null]], [3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [[0, 3, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Show", "the", "number", "of", "high", "schoolers", "for", "each", "grade", "."], "ru": ["\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e", "\u0441\u0442\u0430\u0440\u0448\u0435\u043a\u043b\u0430\u0441\u0441\u043d\u0438\u043a\u043e\u0432", "\u0432", "\u043a\u0430\u0436\u0434\u043e\u043c", "\u043a\u043b\u0430\u0441\u0441\u0435", "."]}, "query_toks": {"en": ["select", "grade", ",", "count", "(", "*", ")", "from", "highschooler", "group", "by", "grade", ";"], "ru": ["select", "grade", ",", "count", "(", "*", ")", "from", "highschooler", "group", "by", "grade", ";"]}, "query_toks_no_values": {"en": ["select", "grade", ",", "count", "(", "*", ")", "from", "highschooler", "group", "by", "grade", ";"], "ru": ["select", "grade", ",", "count", "(", "*", ")", "from", "highschooler", "group", "by", "grade", ";"]}, "masked_query": "SELECT grade ,  count(*) FROM Highschooler GROUP BY grade;", "question_pauq": {"ru": "\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0442\u0430\u0440\u0448\u0435\u043a\u043b\u0430\u0441\u0441\u043d\u0438\u043a\u043e\u0432 \u0432 \u043a\u0430\u0436\u0434\u043e\u043c \u043a\u043b\u0430\u0441\u0441\u0435."}, "question": "Show the number of high schoolers for each grade.", "kb_id": "network_1"}, {"id": "D_0878", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT grade ,  count(*) FROM Highschooler GROUP BY grade;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 3, false], null]], [3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [[0, 3, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 3, false], null]], [3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [[0, 3, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["How", "many", "high", "schoolers", "are", "in", "each", "grade", "?"], "ru": ["\u0421\u043a\u043e\u043b\u044c\u043a\u043e", "\u0441\u0442\u0430\u0440\u0448\u0435\u043a\u043b\u0430\u0441\u0441\u043d\u0438\u043a\u043e\u0432", "\u0432", "\u043a\u0430\u0436\u0434\u043e\u043c", "\u043a\u043b\u0430\u0441\u0441\u0435", "?"]}, "query_toks": {"en": ["select", "grade", ",", "count", "(", "*", ")", "from", "highschooler", "group", "by", "grade", ";"], "ru": ["select", "grade", ",", "count", "(", "*", ")", "from", "highschooler", "group", "by", "grade", ";"]}, "query_toks_no_values": {"en": ["select", "grade", ",", "count", "(", "*", ")", "from", "highschooler", "group", "by", "grade", ";"], "ru": ["select", "grade", ",", "count", "(", "*", ")", "from", "highschooler", "group", "by", "grade", ";"]}, "masked_query": "SELECT grade ,  count(*) FROM Highschooler GROUP BY grade;", "question_pauq": {"ru": "\u0421\u043a\u043e\u043b\u044c\u043a\u043e \u0441\u0442\u0430\u0440\u0448\u0435\u043a\u043b\u0430\u0441\u0441\u043d\u0438\u043a\u043e\u0432 \u0432 \u043a\u0430\u0436\u0434\u043e\u043c \u043a\u043b\u0430\u0441\u0441\u0435?"}, "question": "How many high schoolers are in each grade?", "kb_id": "network_1"}, {"id": "D_0879", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 3, false], null]]]], "where": [], "groupBy": [[0, 3, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 3, false], null]]]], "where": [], "groupBy": [[0, 3, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Which", "grade", "has", "the", "most", "high", "schoolers", "?"], "ru": ["\u0412", "\u043a\u0430\u043a\u043e\u043c", "\u043a\u043b\u0430\u0441\u0441\u0435", "\u0443\u0447\u0430\u0442\u0441\u044f", "\u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0435\u0435", "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e", "\u0441\u0442\u0430\u0440\u0448\u0435\u043a\u043b\u0430\u0441\u0441\u043d\u0438\u043a\u043e\u0432", "?"]}, "query_toks": {"en": ["select", "grade", "from", "highschooler", "group", "by", "grade", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"], "ru": ["select", "grade", "from", "highschooler", "group", "by", "grade", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"]}, "query_toks_no_values": {"en": ["select", "grade", "from", "highschooler", "group", "by", "grade", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"], "ru": ["select", "grade", "from", "highschooler", "group", "by", "grade", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"]}, "masked_query": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1;", "question_pauq": {"ru": "\u0412 \u043a\u0430\u043a\u043e\u043c \u043a\u043b\u0430\u0441\u0441\u0435 \u0443\u0447\u0430\u0442\u0441\u044f \u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0435\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0442\u0430\u0440\u0448\u0435\u043a\u043b\u0430\u0441\u0441\u043d\u0438\u043a\u043e\u0432?"}, "question": "Which grade has the most high schoolers?", "kb_id": "network_1"}, {"id": "D_0880", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 3, false], null]]]], "where": [], "groupBy": [[0, 3, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 3, false], null]]]], "where": [], "groupBy": [[0, 3, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Return", "the", "grade", "that", "has", "the", "greatest", "number", "of", "high", "schoolers", "."], "ru": ["\u041f\u043e\u043a\u0430\u0436\u0438", "\u043e\u0446\u0435\u043d\u043a\u0443", "\u0431\u043e\u043b\u044c\u0448\u0438\u043d\u0441\u0442\u0432\u0430", "\u0441\u0442\u0430\u0440\u0448\u0435\u043a\u043b\u0430\u0441\u0441\u043d\u0438\u043a\u043e\u0432", "."]}, "query_toks": {"en": ["select", "grade", "from", "highschooler", "group", "by", "grade", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"], "ru": ["select", "grade", "from", "highschooler", "group", "by", "grade", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"]}, "query_toks_no_values": {"en": ["select", "grade", "from", "highschooler", "group", "by", "grade", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"], "ru": ["select", "grade", "from", "highschooler", "group", "by", "grade", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"]}, "masked_query": "SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1;", "question_pauq": {"ru": "\u041f\u043e\u043a\u0430\u0436\u0438 \u043e\u0446\u0435\u043d\u043a\u0443 \u0431\u043e\u043b\u044c\u0448\u0438\u043d\u0441\u0442\u0432\u0430 \u0441\u0442\u0430\u0440\u0448\u0435\u043a\u043b\u0430\u0441\u0441\u043d\u0438\u043a\u043e\u0432."}, "question": "Return the grade that has the greatest number of high schoolers.", "kb_id": "network_1"}, {"id": "D_0881", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 3, false], null]]]], "where": [], "groupBy": [[0, 3, false]], "having": [[false, 5, [0, [3, 0, false], null], 4.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 3, false], null]]]], "where": [], "groupBy": [[0, 3, false]], "having": [[false, 5, [0, [3, 0, false], null], 4.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Show", "me", "all", "grades", "that", "have", "at", "least", "4", "students", "."], "ru": ["\u041f\u043e\u043a\u0430\u0436\u0438", "\u0432\u0441\u0435", "\u043a\u043b\u0430\u0441\u0441\u044b", ",", "\u0432", "\u043a\u043e\u0442\u043e\u0440\u044b\u0445", "\u0443\u0447\u0438\u0442\u0441\u044f", "\u043d\u0435", "\u043c\u0435\u043d\u0435\u0435", "4", "\u0443\u0447\u0435\u043d\u0438\u043a\u043e\u0432", "."]}, "query_toks": {"en": ["select", "grade", "from", "highschooler", "group", "by", "grade", "having", "count", "(", "*", ")", ">=", "4", ";"], "ru": ["select", "grade", "from", "highschooler", "group", "by", "grade", "having", "count", "(", "*", ")", ">=", "4", ";"]}, "query_toks_no_values": {"en": ["select", "grade", "from", "highschooler", "group", "by", "grade", "having", "count", "(", "*", ")", ">=", "4", ";"], "ru": ["select", "grade", "from", "highschooler", "group", "by", "grade", "having", "count", "(", "*", ")", ">=", "4", ";"]}, "masked_query": "SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4;", "question_pauq": {"ru": "\u041f\u043e\u043a\u0430\u0436\u0438 \u0432\u0441\u0435 \u043a\u043b\u0430\u0441\u0441\u044b, \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0443\u0447\u0438\u0442\u0441\u044f \u043d\u0435 \u043c\u0435\u043d\u0435\u0435 4 \u0443\u0447\u0435\u043d\u0438\u043a\u043e\u0432."}, "question": "Show me all grades that have at least 4 students.", "kb_id": "network_1"}, {"id": "D_0882", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 3, false], null]]]], "where": [], "groupBy": [[0, 3, false]], "having": [[false, 5, [0, [3, 0, false], null], 4.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 3, false], null]]]], "where": [], "groupBy": [[0, 3, false]], "having": [[false, 5, [0, [3, 0, false], null], 4.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Which", "grades", "have", "4", "or", "more", "high", "schoolers", "?"], "ru": ["\u0412", "\u043a\u0430\u043a\u0438\u0445", "\u043a\u043b\u0430\u0441\u0441\u0430\u0445", "\u0443\u0447\u0430\u0442\u0441\u044f", "4", "\u0438\u043b\u0438", "\u0431\u043e\u043b\u0435\u0435", "\u0441\u0442\u0430\u0440\u0448\u0435\u043a\u043b\u0430\u0441\u0441\u043d\u0438\u043a\u043e\u0432", "?"]}, "query_toks": {"en": ["select", "grade", "from", "highschooler", "group", "by", "grade", "having", "count", "(", "*", ")", ">=", "4", ";"], "ru": ["select", "grade", "from", "highschooler", "group", "by", "grade", "having", "count", "(", "*", ")", ">=", "4", ";"]}, "query_toks_no_values": {"en": ["select", "grade", "from", "highschooler", "group", "by", "grade", "having", "count", "(", "*", ")", ">=", "4", ";"], "ru": ["select", "grade", "from", "highschooler", "group", "by", "grade", "having", "count", "(", "*", ")", ">=", "4", ";"]}, "masked_query": "SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4;", "question_pauq": {"ru": "\u0412 \u043a\u0430\u043a\u0438\u0445 \u043a\u043b\u0430\u0441\u0441\u0430\u0445 \u0443\u0447\u0430\u0442\u0441\u044f 4 \u0438\u043b\u0438 \u0431\u043e\u043b\u0435\u0435 \u0441\u0442\u0430\u0440\u0448\u0435\u043a\u043b\u0430\u0441\u0441\u043d\u0438\u043a\u043e\u0432?"}, "question": "Which grades have 4 or more high schoolers?", "kb_id": "network_1"}, {"id": "D_0883", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT student_id ,  count(*) FROM Friend GROUP BY student_id;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 4, false], null]], [3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [[0, 4, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 4, false], null]], [3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [[0, 4, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Show", "the", "student", "IDs", "and", "numbers", "of", "friends", "corresponding", "to", "each", "."], "ru": ["\u041f\u043e\u043a\u0430\u0436\u0438\u0442\u0435", "\u0441\u0442\u0443\u0434\u0435\u043d\u0447\u0435\u0441\u043a\u0438\u0435", "id", "\u0438", "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e", "\u0434\u0440\u0443\u0437\u0435\u0439", ",", "\u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445", "\u043a\u0430\u0436\u0434\u043e\u043c\u0443", "\u0438\u0437", "\u044d\u0442\u0438\u0445", "id", "."]}, "query_toks": {"en": ["select", "student_id", ",", "count", "(", "*", ")", "from", "friend", "group", "by", "student_id", ";"], "ru": ["select", "student_id", ",", "count", "(", "*", ")", "from", "friend", "group", "by", "student_id", ";"]}, "query_toks_no_values": {"en": ["select", "student_id", ",", "count", "(", "*", ")", "from", "friend", "group", "by", "student_id", ";"], "ru": ["select", "student_id", ",", "count", "(", "*", ")", "from", "friend", "group", "by", "student_id", ";"]}, "masked_query": "SELECT student_id ,  count(*) FROM Friend GROUP BY student_id;", "question_pauq": {"ru": "\u041f\u043e\u043a\u0430\u0436\u0438\u0442\u0435 \u0441\u0442\u0443\u0434\u0435\u043d\u0447\u0435\u0441\u043a\u0438\u0435 id \u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0434\u0440\u0443\u0437\u0435\u0439, \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445 \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u0438\u0437 \u044d\u0442\u0438\u0445 id."}, "question": "Show the student IDs and numbers of friends corresponding to each.", "kb_id": "network_1"}, {"id": "D_0884", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT student_id ,  count(*) FROM Friend GROUP BY student_id;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 4, false], null]], [3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [[0, 4, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 4, false], null]], [3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [[0, 4, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["How", "many", "friends", "does", "each", "student", "have", "?"], "ru": ["\u0421\u043a\u043e\u043b\u044c\u043a\u043e", "\u0434\u0440\u0443\u0437\u0435\u0439", "\u0443", "\u043a\u0430\u0436\u0434\u043e\u0433\u043e", "\u0443\u0447\u0435\u043d\u0438\u043a\u0430", "?"]}, "query_toks": {"en": ["select", "student_id", ",", "count", "(", "*", ")", "from", "friend", "group", "by", "student_id", ";"], "ru": ["select", "student_id", ",", "count", "(", "*", ")", "from", "friend", "group", "by", "student_id", ";"]}, "query_toks_no_values": {"en": ["select", "student_id", ",", "count", "(", "*", ")", "from", "friend", "group", "by", "student_id", ";"], "ru": ["select", "student_id", ",", "count", "(", "*", ")", "from", "friend", "group", "by", "student_id", ";"]}, "masked_query": "SELECT student_id ,  count(*) FROM Friend GROUP BY student_id;", "question_pauq": {"ru": "\u0421\u043a\u043e\u043b\u044c\u043a\u043e \u0434\u0440\u0443\u0437\u0435\u0439 \u0443 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0443\u0447\u0435\u043d\u0438\u043a\u0430?"}, "question": "How many friends does each student have?", "kb_id": "network_1"}, {"id": "D_0885", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 4, false], null], [0, 1, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]], [3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [[0, 4, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 4, false], null], [0, 1, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]], [3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [[0, 4, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Show", "the", "names", "of", "high", "school", "students", "and", "their", "corresponding", "number", "of", "friends", "."], "ru": ["\u041f\u043e\u043a\u0430\u0436\u0438\u0442\u0435", "\u0438\u043c\u0435\u043d\u0430", "\u0441\u0442\u0430\u0440\u0448\u0435\u043a\u043b\u0430\u0441\u0441\u043d\u0438\u043a\u043e\u0432", "\u0438", "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e", "\u0438\u0445", "\u0434\u0440\u0443\u0437\u0435\u0439", "."]}, "query_toks": {"en": ["select", "t2.name", ",", "count", "(", "*", ")", "from", "friend", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1.student_id", "=", "t2.id", "group", "by", "t1.student_id", ";"], "ru": ["select", "t2.name", ",", "count", "(", "*", ")", "from", "friend", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1.student_id", "=", "t2.id", "group", "by", "t1.student_id", ";"]}, "query_toks_no_values": {"en": ["select", "t2.name", ",", "count", "(", "*", ")", "from", "friend", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1.student_id", "=", "t2.id", "group", "by", "t1.student_id", ";"], "ru": ["select", "t2.name", ",", "count", "(", "*", ")", "from", "friend", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1.student_id", "=", "t2.id", "group", "by", "t1.student_id", ";"]}, "masked_query": "SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id;", "question_pauq": {"ru": "\u041f\u043e\u043a\u0430\u0436\u0438\u0442\u0435 \u0438\u043c\u0435\u043d\u0430 \u0441\u0442\u0430\u0440\u0448\u0435\u043a\u043b\u0430\u0441\u0441\u043d\u0438\u043a\u043e\u0432 \u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0438\u0445 \u0434\u0440\u0443\u0437\u0435\u0439."}, "question": "Show the names of high school students and their corresponding number of friends.", "kb_id": "network_1"}, {"id": "D_0886", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 4, false], null], [0, 1, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]], [3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [[0, 4, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 4, false], null], [0, 1, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]], [3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [[0, 4, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "the", "names", "of", "the", "high", "schoolers", "and", "how", "many", "friends", "does", "each", "have", "?"], "ru": ["\u041a\u0430\u043a", "\u0437\u043e\u0432\u0443\u0442", "\u0441\u0442\u0430\u0440\u0448\u0435\u043a\u043b\u0430\u0441\u0441\u043d\u0438\u043a\u043e\u0432", "\u0438", "\u0441\u043a\u043e\u043b\u044c\u043a\u043e", "\u0434\u0440\u0443\u0437\u0435\u0439", "\u0443", "\u043a\u0430\u0436\u0434\u043e\u0433\u043e", "\u0438\u0437", "\u043d\u0438\u0445", "?"]}, "query_toks": {"en": ["select", "t2.name", ",", "count", "(", "*", ")", "from", "friend", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1.student_id", "=", "t2.id", "group", "by", "t1.student_id", ";"], "ru": ["select", "t2.name", ",", "count", "(", "*", ")", "from", "friend", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1.student_id", "=", "t2.id", "group", "by", "t1.student_id", ";"]}, "query_toks_no_values": {"en": ["select", "t2.name", ",", "count", "(", "*", ")", "from", "friend", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1.student_id", "=", "t2.id", "group", "by", "t1.student_id", ";"], "ru": ["select", "t2.name", ",", "count", "(", "*", ")", "from", "friend", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1.student_id", "=", "t2.id", "group", "by", "t1.student_id", ";"]}, "masked_query": "SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id;", "question_pauq": {"ru": "\u041a\u0430\u043a \u0437\u043e\u0432\u0443\u0442 \u0441\u0442\u0430\u0440\u0448\u0435\u043a\u043b\u0430\u0441\u0441\u043d\u0438\u043a\u043e\u0432 \u0438 \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0434\u0440\u0443\u0437\u0435\u0439 \u0443 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0438\u0437 \u043d\u0438\u0445?"}, "question": "What are the names of the high schoolers and how many friends does each have?", "kb_id": "network_1"}, {"id": "D_0887", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 4, false], null], [0, 1, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [], "groupBy": [[0, 4, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 4, false], null], [0, 1, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [], "groupBy": [[0, 4, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "name", "of", "the", "high", "schooler", "who", "has", "the", "greatest", "number", "of", "friends", "?"], "ru": ["\u041a\u0430\u043a", "\u0437\u043e\u0432\u0443\u0442", "\u0441\u0442\u0430\u0440\u0448\u0435\u043a\u043b\u0430\u0441\u0441\u043d\u0438\u043a\u0430", ",", "\u0443", "\u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e", "\u0431\u043e\u043b\u044c\u0448\u0435", "\u0432\u0441\u0435\u0433\u043e", "\u0434\u0440\u0443\u0437\u0435\u0439", "?"]}, "query_toks": {"en": ["select", "t2.name", "from", "friend", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1.student_id", "=", "t2.id", "group", "by", "t1.student_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"], "ru": ["select", "t2.name", "from", "friend", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1.student_id", "=", "t2.id", "group", "by", "t1.student_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"]}, "query_toks_no_values": {"en": ["select", "t2.name", "from", "friend", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1.student_id", "=", "t2.id", "group", "by", "t1.student_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"], "ru": ["select", "t2.name", "from", "friend", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1.student_id", "=", "t2.id", "group", "by", "t1.student_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"]}, "masked_query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1;", "question_pauq": {"ru": "\u041a\u0430\u043a \u0437\u043e\u0432\u0443\u0442 \u0441\u0442\u0430\u0440\u0448\u0435\u043a\u043b\u0430\u0441\u0441\u043d\u0438\u043a\u0430, \u0443 \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u0431\u043e\u043b\u044c\u0448\u0435 \u0432\u0441\u0435\u0433\u043e \u0434\u0440\u0443\u0437\u0435\u0439?"}, "question": "What is the name of the high schooler who has the greatest number of friends?", "kb_id": "network_1"}, {"id": "D_0888", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 4, false], null], [0, 1, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [], "groupBy": [[0, 4, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 4, false], null], [0, 1, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [], "groupBy": [[0, 4, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Return", "the", "name", "of", "the", "high", "school", "student", "with", "the", "most", "friends", "."], "ru": ["\u041e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0442\u044c", "\u0438\u043c\u044f", "\u0441\u0442\u0430\u0440\u0448\u0435\u043a\u043b\u0430\u0441\u0441\u043d\u0438\u043a\u0430", "\u0441", "\u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0438\u043c", "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c", "\u0434\u0440\u0443\u0437\u0435\u0439", "."]}, "query_toks": {"en": ["select", "t2.name", "from", "friend", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1.student_id", "=", "t2.id", "group", "by", "t1.student_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"], "ru": ["select", "t2.name", "from", "friend", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1.student_id", "=", "t2.id", "group", "by", "t1.student_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"]}, "query_toks_no_values": {"en": ["select", "t2.name", "from", "friend", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1.student_id", "=", "t2.id", "group", "by", "t1.student_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"], "ru": ["select", "t2.name", "from", "friend", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1.student_id", "=", "t2.id", "group", "by", "t1.student_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"]}, "masked_query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1;", "question_pauq": {"ru": "\u041e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0442\u044c \u0438\u043c\u044f \u0441\u0442\u0430\u0440\u0448\u0435\u043a\u043b\u0430\u0441\u0441\u043d\u0438\u043a\u0430 \u0441 \u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0438\u043c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e\u043c \u0434\u0440\u0443\u0437\u0435\u0439."}, "question": "Return the name of the high school student with the most friends.", "kb_id": "network_1"}, {"id": "D_0889", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 4, false], null], [0, 1, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [], "groupBy": [[0, 4, false]], "having": [[false, 5, [0, [3, 0, false], null], 3.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 4, false], null], [0, 1, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [], "groupBy": [[0, 4, false]], "having": [[false, 5, [0, [3, 0, false], null], 3.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Show", "the", "names", "of", "high", "schoolers", "who", "have", "at", "least", "3", "friends", "."], "ru": ["\u041f\u043e\u043a\u0430\u0436\u0438", "\u0438\u043c\u0435\u043d\u0430", "\u0441\u0442\u0430\u0440\u0448\u0435\u043a\u043b\u0430\u0441\u0441\u043d\u0438\u043a\u043e\u0432", ",", "\u0443", "\u043a\u043e\u0442\u043e\u0440\u044b\u0445", "\u0435\u0441\u0442\u044c", "\u043a\u0430\u043a", "\u043c\u0438\u043d\u0438\u043c\u0443\u043c", "3", "\u0434\u0440\u0443\u0433\u0430", "."]}, "query_toks": {"en": ["select", "t2.name", "from", "friend", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1.student_id", "=", "t2.id", "group", "by", "t1.student_id", "having", "count", "(", "*", ")", ">=", "3", ";"], "ru": ["select", "t2.name", "from", "friend", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1.student_id", "=", "t2.id", "group", "by", "t1.student_id", "having", "count", "(", "*", ")", ">=", "3", ";"]}, "query_toks_no_values": {"en": ["select", "t2.name", "from", "friend", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1.student_id", "=", "t2.id", "group", "by", "t1.student_id", "having", "count", "(", "*", ")", ">=", "3", ";"], "ru": ["select", "t2.name", "from", "friend", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1.student_id", "=", "t2.id", "group", "by", "t1.student_id", "having", "count", "(", "*", ")", ">=", "3", ";"]}, "masked_query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3;", "question_pauq": {"ru": "\u041f\u043e\u043a\u0430\u0436\u0438 \u0438\u043c\u0435\u043d\u0430 \u0441\u0442\u0430\u0440\u0448\u0435\u043a\u043b\u0430\u0441\u0441\u043d\u0438\u043a\u043e\u0432, \u0443 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0435\u0441\u0442\u044c \u043a\u0430\u043a \u043c\u0438\u043d\u0438\u043c\u0443\u043c 3 \u0434\u0440\u0443\u0433\u0430."}, "question": "Show the names of high schoolers who have at least 3 friends.", "kb_id": "network_1"}, {"id": "D_0890", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 4, false], null], [0, 1, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [], "groupBy": [[0, 4, false]], "having": [[false, 5, [0, [3, 0, false], null], 3.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 4, false], null], [0, 1, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [], "groupBy": [[0, 4, false]], "having": [[false, 5, [0, [3, 0, false], null], 3.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "the", "names", "of", "high", "schoolers", "who", "have", "3", "or", "more", "friends", "?"], "ru": ["\u041a\u0430\u043a", "\u0437\u043e\u0432\u0443\u0442", "\u0441\u0442\u0430\u0440\u0448\u0435\u043a\u043b\u0430\u0441\u0441\u043d\u0438\u043a\u043e\u0432", ",", "\u0443", "\u043a\u043e\u0442\u043e\u0440\u044b\u0445", "\u0435\u0441\u0442\u044c", "3", "\u0438\u043b\u0438", "\u0431\u043e\u043b\u0435\u0435", "\u0434\u0440\u0443\u0437\u0435\u0439", "?"]}, "query_toks": {"en": ["select", "t2.name", "from", "friend", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1.student_id", "=", "t2.id", "group", "by", "t1.student_id", "having", "count", "(", "*", ")", ">=", "3", ";"], "ru": ["select", "t2.name", "from", "friend", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1.student_id", "=", "t2.id", "group", "by", "t1.student_id", "having", "count", "(", "*", ")", ">=", "3", ";"]}, "query_toks_no_values": {"en": ["select", "t2.name", "from", "friend", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1.student_id", "=", "t2.id", "group", "by", "t1.student_id", "having", "count", "(", "*", ")", ">=", "3", ";"], "ru": ["select", "t2.name", "from", "friend", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1.student_id", "=", "t2.id", "group", "by", "t1.student_id", "having", "count", "(", "*", ")", ">=", "3", ";"]}, "masked_query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3;", "question_pauq": {"ru": "\u041a\u0430\u043a \u0437\u043e\u0432\u0443\u0442 \u0441\u0442\u0430\u0440\u0448\u0435\u043a\u043b\u0430\u0441\u0441\u043d\u0438\u043a\u043e\u0432, \u0443 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0435\u0441\u0442\u044c 3 \u0438\u043b\u0438 \u0431\u043e\u043b\u0435\u0435 \u0434\u0440\u0443\u0437\u0435\u0439?"}, "question": "What are the names of high schoolers who have 3 or more friends?", "kb_id": "network_1"}, {"id": "D_0891", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  \"\u041b\u0435\u0432\";"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1], ["table_unit", 0], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 4, false], null], [0, 1, false], null], "and", [false, 2, [0, [0, 5, false], null], [0, 1, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [[false, 2, [0, [0, 2, false], null], "\"Kyle\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1], ["table_unit", 0], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 4, false], null], [0, 1, false], null], "and", [false, 2, [0, [0, 5, false], null], [0, 1, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [[false, 2, [0, [0, 2, false], null], "\"\u041b\u0435\u0432\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Show", "the", "names", "of", "all", "of", "the", "high", "schooler", "Kyle", "'s", "friends", "."], "ru": ["\u041f\u043e\u043a\u0430\u0436\u0438\u0442\u0435", "\u0438\u043c\u0435\u043d\u0430", "\u0432\u0441\u0435\u0445", "\u0434\u0440\u0443\u0437\u0435\u0439", "\u0441\u0442\u0430\u0440\u0448\u0435\u043a\u043b\u0430\u0441\u0441\u043d\u0438\u043a\u0430", "\u041b\u044c\u0432\u0430", "."]}, "query_toks": {"en": ["select", "t3.name", "from", "friend", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1.student_id", "=", "t2.id", "join", "highschooler", "as", "t3", "on", "t1.friend_id", "=", "t3.id", "where", "t2.name", "=", "\"Kyle\"", ";"], "ru": ["select", "t3.name", "from", "friend", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1.student_id", "=", "t2.id", "join", "highschooler", "as", "t3", "on", "t1.friend_id", "=", "t3.id", "where", "t2.name", "=", "\"\u041b\u0435\u0432\"", ";"]}, "query_toks_no_values": {"en": ["select", "t3.name", "from", "friend", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1.student_id", "=", "t2.id", "join", "highschooler", "as", "t3", "on", "t1.friend_id", "=", "t3.id", "where", "t2.name", "=", "value", ";"], "ru": ["select", "t3.name", "from", "friend", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1.student_id", "=", "t2.id", "join", "highschooler", "as", "t3", "on", "t1.friend_id", "=", "t3.id", "where", "t2.name", "=", "value", ";"]}, "masked_query": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  \"Kyle\";", "question_pauq": {"ru": "\u041f\u043e\u043a\u0430\u0436\u0438\u0442\u0435 \u0438\u043c\u0435\u043d\u0430 \u0432\u0441\u0435\u0445 \u0434\u0440\u0443\u0437\u0435\u0439 \u0441\u0442\u0430\u0440\u0448\u0435\u043a\u043b\u0430\u0441\u0441\u043d\u0438\u043a\u0430 \u041b\u044c\u0432\u0430."}, "question": "Show the names of all of the high schooler Kyle's friends.", "kb_id": "network_1"}, {"id": "D_0892", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  \"\u041b\u0435\u0432\";"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1], ["table_unit", 0], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 4, false], null], [0, 1, false], null], "and", [false, 2, [0, [0, 5, false], null], [0, 1, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [[false, 2, [0, [0, 2, false], null], "\"Kyle\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1], ["table_unit", 0], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 4, false], null], [0, 1, false], null], "and", [false, 2, [0, [0, 5, false], null], [0, 1, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [[false, 2, [0, [0, 2, false], null], "\"\u041b\u0435\u0432\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Return", "the", "names", "of", "friends", "of", "the", "high", "school", "student", "Kyle", "."], "ru": ["\u041f\u043e\u043a\u0430\u0436\u0438", "\u0438\u043c\u0435\u043d\u0430", "\u0434\u0440\u0443\u0437\u0435\u0439", "\u0441\u0442\u0430\u0440\u0448\u0435\u043a\u043b\u0430\u0441\u0441\u043d\u0438\u043a\u0430", "\u041b\u044c\u0432\u0430", "."]}, "query_toks": {"en": ["select", "t3.name", "from", "friend", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1.student_id", "=", "t2.id", "join", "highschooler", "as", "t3", "on", "t1.friend_id", "=", "t3.id", "where", "t2.name", "=", "\"Kyle\"", ";"], "ru": ["select", "t3.name", "from", "friend", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1.student_id", "=", "t2.id", "join", "highschooler", "as", "t3", "on", "t1.friend_id", "=", "t3.id", "where", "t2.name", "=", "\"\u041b\u0435\u0432\"", ";"]}, "query_toks_no_values": {"en": ["select", "t3.name", "from", "friend", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1.student_id", "=", "t2.id", "join", "highschooler", "as", "t3", "on", "t1.friend_id", "=", "t3.id", "where", "t2.name", "=", "value", ";"], "ru": ["select", "t3.name", "from", "friend", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1.student_id", "=", "t2.id", "join", "highschooler", "as", "t3", "on", "t1.friend_id", "=", "t3.id", "where", "t2.name", "=", "value", ";"]}, "masked_query": "SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  \"Kyle\";", "question_pauq": {"ru": "\u041f\u043e\u043a\u0430\u0436\u0438 \u0438\u043c\u0435\u043d\u0430 \u0434\u0440\u0443\u0437\u0435\u0439 \u0441\u0442\u0430\u0440\u0448\u0435\u043a\u043b\u0430\u0441\u0441\u043d\u0438\u043a\u0430 \u041b\u044c\u0432\u0430."}, "question": "Return the names of friends of the high school student Kyle.", "kb_id": "network_1"}, {"id": "D_0893", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"\u041b\u0435\u0432\";"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 4, false], null], [0, 1, false], null]]}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 2, false], null], "\"Kyle\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 4, false], null], [0, 1, false], null]]}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 2, false], null], "\"\u041b\u0435\u0432\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["How", "many", "friends", "does", "the", "high", "school", "student", "Kyle", "have", "?"], "ru": ["\u0421\u043a\u043e\u043b\u044c\u043a\u043e", "\u0434\u0440\u0443\u0437\u0435\u0439", "\u0443", "\u0441\u0442\u0430\u0440\u0448\u0435\u043a\u043b\u0430\u0441\u0441\u043d\u0438\u043a\u0430", "\u041b\u044c\u0432\u0430", "?"]}, "query_toks": {"en": ["select", "count", "(", "*", ")", "from", "friend", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1.student_id", "=", "t2.id", "where", "t2.name", "=", "\"Kyle\"", ";"], "ru": ["select", "count", "(", "*", ")", "from", "friend", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1.student_id", "=", "t2.id", "where", "t2.name", "=", "\"\u041b\u0435\u0432\"", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "*", ")", "from", "friend", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1.student_id", "=", "t2.id", "where", "t2.name", "=", "value", ";"], "ru": ["select", "count", "(", "*", ")", "from", "friend", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1.student_id", "=", "t2.id", "where", "t2.name", "=", "value", ";"]}, "masked_query": "SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\";", "question_pauq": {"ru": "\u0421\u043a\u043e\u043b\u044c\u043a\u043e \u0434\u0440\u0443\u0437\u0435\u0439 \u0443 \u0441\u0442\u0430\u0440\u0448\u0435\u043a\u043b\u0430\u0441\u0441\u043d\u0438\u043a\u0430 \u041b\u044c\u0432\u0430?"}, "question": "How many friends does the high school student Kyle have?", "kb_id": "network_1"}, {"id": "D_0894", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"\u041b\u0435\u0432\";"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 4, false], null], [0, 1, false], null]]}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 2, false], null], "\"Kyle\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 4, false], null], [0, 1, false], null]]}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 2, false], null], "\"\u041b\u0435\u0432\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Count", "the", "number", "of", "friends", "Kyle", "has", "."], "ru": ["\u041f\u043e\u0434\u0441\u0447\u0438\u0442\u0430\u0439", "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e", "\u0434\u0440\u0443\u0437\u0435\u0439", "\u041b\u044c\u0432\u0430", "."]}, "query_toks": {"en": ["select", "count", "(", "*", ")", "from", "friend", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1.student_id", "=", "t2.id", "where", "t2.name", "=", "\"Kyle\"", ";"], "ru": ["select", "count", "(", "*", ")", "from", "friend", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1.student_id", "=", "t2.id", "where", "t2.name", "=", "\"\u041b\u0435\u0432\"", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "*", ")", "from", "friend", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1.student_id", "=", "t2.id", "where", "t2.name", "=", "value", ";"], "ru": ["select", "count", "(", "*", ")", "from", "friend", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1.student_id", "=", "t2.id", "where", "t2.name", "=", "value", ";"]}, "masked_query": "SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\";", "question_pauq": {"ru": "\u041f\u043e\u0434\u0441\u0447\u0438\u0442\u0430\u0439 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0434\u0440\u0443\u0437\u0435\u0439 \u041b\u044c\u0432\u0430."}, "question": "Count the number of friends Kyle has.", "kb_id": "network_1"}, {"id": "D_0895", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 1, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 4, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 1, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 4, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}}, "question_toks": {"en": ["Show", "ids", "of", "all", "students", "who", "do", "not", "have", "any", "friends", "."], "ru": ["\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c", "id", "\u0432\u0441\u0435\u0445", "\u0441\u0442\u0443\u0434\u0435\u043d\u0442\u043e\u0432", ",", "\u0443", "\u043a\u043e\u0442\u043e\u0440\u044b\u0445", "\u043d\u0435\u0442", "\u0434\u0440\u0443\u0437\u0435\u0439", "."]}, "query_toks": {"en": ["select", "id", "from", "highschooler", "except", "select", "student_id", "from", "friend", ";"], "ru": ["select", "id", "from", "highschooler", "except", "select", "student_id", "from", "friend", ";"]}, "query_toks_no_values": {"en": ["select", "id", "from", "highschooler", "except", "select", "student_id", "from", "friend", ";"], "ru": ["select", "id", "from", "highschooler", "except", "select", "student_id", "from", "friend", ";"]}, "masked_query": "SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend;", "question_pauq": {"ru": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c id \u0432\u0441\u0435\u0445 \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u043e\u0432, \u0443 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043d\u0435\u0442 \u0434\u0440\u0443\u0437\u0435\u0439."}, "question": "Show ids of all students who do not have any friends.", "kb_id": "network_1"}, {"id": "D_0896", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 1, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 4, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 1, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 4, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}}, "question_toks": {"en": ["What", "are", "the", "ids", "of", "high", "school", "students", "who", "do", "not", "have", "friends", "?"], "ru": ["\u041a\u0430\u043a\u043e\u0432\u044b", "id", "\u0441\u0442\u0430\u0440\u0448\u0435\u043a\u043b\u0430\u0441\u0441\u043d\u0438\u043a\u043e\u0432", ",", "\u0443", "\u043a\u043e\u0442\u043e\u0440\u044b\u0445", "\u043d\u0435\u0442", "\u0434\u0440\u0443\u0437\u0435\u0439", "?"]}, "query_toks": {"en": ["select", "id", "from", "highschooler", "except", "select", "student_id", "from", "friend", ";"], "ru": ["select", "id", "from", "highschooler", "except", "select", "student_id", "from", "friend", ";"]}, "query_toks_no_values": {"en": ["select", "id", "from", "highschooler", "except", "select", "student_id", "from", "friend", ";"], "ru": ["select", "id", "from", "highschooler", "except", "select", "student_id", "from", "friend", ";"]}, "masked_query": "SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend;", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0432\u044b id \u0441\u0442\u0430\u0440\u0448\u0435\u043a\u043b\u0430\u0441\u0441\u043d\u0438\u043a\u043e\u0432, \u0443 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043d\u0435\u0442 \u0434\u0440\u0443\u0437\u0435\u0439?"}, "question": "What are the ids of high school students who do not have friends?", "kb_id": "network_1"}, {"id": "D_0897", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": {"from": {"table_units": [["table_unit", 1], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 4, false], null], [0, 1, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": {"from": {"table_units": [["table_unit", 1], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 4, false], null], [0, 1, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}}, "question_toks": {"en": ["Show", "names", "of", "all", "high", "school", "students", "who", "do", "not", "have", "any", "friends", "."], "ru": ["\u041f\u043e\u043a\u0430\u0436\u0438\u0442\u0435", "\u0438\u043c\u0435\u043d\u0430", "\u0432\u0441\u0435\u0445", "\u0441\u0442\u0430\u0440\u0448\u0435\u043a\u043b\u0430\u0441\u0441\u043d\u0438\u043a\u043e\u0432", ",", "\u0443", "\u043a\u043e\u0442\u043e\u0440\u044b\u0445", "\u043d\u0435\u0442", "\u0434\u0440\u0443\u0437\u0435\u0439", "."]}, "query_toks": {"en": ["select", "name", "from", "highschooler", "except", "select", "t2.name", "from", "friend", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1.student_id", "=", "t2.id", ";"], "ru": ["select", "name", "from", "highschooler", "except", "select", "t2.name", "from", "friend", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1.student_id", "=", "t2.id", ";"]}, "query_toks_no_values": {"en": ["select", "name", "from", "highschooler", "except", "select", "t2.name", "from", "friend", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1.student_id", "=", "t2.id", ";"], "ru": ["select", "name", "from", "highschooler", "except", "select", "t2.name", "from", "friend", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1.student_id", "=", "t2.id", ";"]}, "masked_query": "SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id;", "question_pauq": {"ru": "\u041f\u043e\u043a\u0430\u0436\u0438\u0442\u0435 \u0438\u043c\u0435\u043d\u0430 \u0432\u0441\u0435\u0445 \u0441\u0442\u0430\u0440\u0448\u0435\u043a\u043b\u0430\u0441\u0441\u043d\u0438\u043a\u043e\u0432, \u0443 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043d\u0435\u0442 \u0434\u0440\u0443\u0437\u0435\u0439."}, "question": "Show names of all high school students who do not have any friends.", "kb_id": "network_1"}, {"id": "D_0898", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": {"from": {"table_units": [["table_unit", 1], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 4, false], null], [0, 1, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": {"from": {"table_units": [["table_unit", 1], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 4, false], null], [0, 1, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}}, "question_toks": {"en": ["What", "are", "the", "names", "of", "students", "who", "have", "no", "friends", "?"], "ru": ["\u041a\u0430\u043a", "\u0437\u043e\u0432\u0443\u0442", "\u0441\u0442\u0443\u0434\u0435\u043d\u0442\u043e\u0432", ",", "\u0443", "\u043a\u043e\u0442\u043e\u0440\u044b\u0445", "\u043d\u0435\u0442", "\u0434\u0440\u0443\u0437\u0435\u0439", "?"]}, "query_toks": {"en": ["select", "name", "from", "highschooler", "except", "select", "t2.name", "from", "friend", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1.student_id", "=", "t2.id", ";"], "ru": ["select", "name", "from", "highschooler", "except", "select", "t2.name", "from", "friend", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1.student_id", "=", "t2.id", ";"]}, "query_toks_no_values": {"en": ["select", "name", "from", "highschooler", "except", "select", "t2.name", "from", "friend", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1.student_id", "=", "t2.id", ";"], "ru": ["select", "name", "from", "highschooler", "except", "select", "t2.name", "from", "friend", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1.student_id", "=", "t2.id", ";"]}, "masked_query": "SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id;", "question_pauq": {"ru": "\u041a\u0430\u043a \u0437\u043e\u0432\u0443\u0442 \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u043e\u0432, \u0443 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043d\u0435\u0442 \u0434\u0440\u0443\u0437\u0435\u0439?"}, "question": "What are the names of students who have no friends?", "kb_id": "network_1"}, {"id": "D_0899", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 4, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 7, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 4, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 7, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "union": null, "except": null}}, "question_toks": {"en": ["Show", "the", "ids", "of", "high", "schoolers", "who", "have", "friends", "and", "are", "also", "liked", "by", "someone", "else", "."], "ru": ["\u041f\u043e\u043a\u0430\u0436\u0438", "id", "\u0441\u0442\u0430\u0440\u0448\u0435\u043a\u043b\u0430\u0441\u0441\u043d\u0438\u043a\u043e\u0432", ",", "\u0443", "\u043a\u043e\u0442\u043e\u0440\u044b\u0445", "\u0435\u0441\u0442\u044c", "\u0434\u0440\u0443\u0437\u044c\u044f", "\u0438", "\u043a\u043e\u0442\u043e\u0440\u044b\u0435", "\u043a\u043e\u043c\u0443-\u0442\u043e", "\u043d\u0440\u0430\u0432\u044f\u0442\u0441\u044f", "."]}, "query_toks": {"en": ["select", "student_id", "from", "friend", "intersect", "select", "liked_id", "from", "likes", ";"], "ru": ["select", "student_id", "from", "friend", "intersect", "select", "liked_id", "from", "likes", ";"]}, "query_toks_no_values": {"en": ["select", "student_id", "from", "friend", "intersect", "select", "liked_id", "from", "likes", ";"], "ru": ["select", "student_id", "from", "friend", "intersect", "select", "liked_id", "from", "likes", ";"]}, "masked_query": "SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes;", "question_pauq": {"ru": "\u041f\u043e\u043a\u0430\u0436\u0438 id \u0441\u0442\u0430\u0440\u0448\u0435\u043a\u043b\u0430\u0441\u0441\u043d\u0438\u043a\u043e\u0432, \u0443 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0435\u0441\u0442\u044c \u0434\u0440\u0443\u0437\u044c\u044f \u0438 \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043a\u043e\u043c\u0443-\u0442\u043e \u043d\u0440\u0430\u0432\u044f\u0442\u0441\u044f."}, "question": "Show the ids of high schoolers who have friends and are also liked by someone else.", "kb_id": "network_1"}, {"id": "D_0900", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 4, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 7, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 4, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 7, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "the", "ids", "of", "students", "who", "both", "have", "friends", "and", "are", "liked", "?"], "ru": ["\u041a\u0430\u043a\u0438\u0435", "id", "\u0443", "\u0441\u0442\u0443\u0434\u0435\u043d\u0442\u043e\u0432", ",", "\u0443", "\u043a\u043e\u0442\u043e\u0440\u044b\u0445", "\u0435\u0441\u0442\u044c", "\u0434\u0440\u0443\u0437\u044c\u044f", "\u0438", "\u043a\u043e\u0442\u043e\u0440\u044b\u0435", "\u043d\u0440\u0430\u0432\u044f\u0442\u0441\u044f", "\u0434\u0440\u0443\u0433\u0438\u043c", "?"]}, "query_toks": {"en": ["select", "student_id", "from", "friend", "intersect", "select", "liked_id", "from", "likes", ";"], "ru": ["select", "student_id", "from", "friend", "intersect", "select", "liked_id", "from", "likes", ";"]}, "query_toks_no_values": {"en": ["select", "student_id", "from", "friend", "intersect", "select", "liked_id", "from", "likes", ";"], "ru": ["select", "student_id", "from", "friend", "intersect", "select", "liked_id", "from", "likes", ";"]}, "masked_query": "SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes;", "question_pauq": {"ru": "\u041a\u0430\u043a\u0438\u0435 id \u0443 \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u043e\u0432, \u0443 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0435\u0441\u0442\u044c \u0434\u0440\u0443\u0437\u044c\u044f \u0438 \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0440\u0430\u0432\u044f\u0442\u0441\u044f \u0434\u0440\u0443\u0433\u0438\u043c?"}, "question": "What are the ids of students who both have friends and are liked?", "kb_id": "network_1"}, {"id": "D_0901", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 6, false], null], [0, 1, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": {"from": {"table_units": [["table_unit", 2], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 7, false], null], [0, 1, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 6, false], null], [0, 1, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": {"from": {"table_units": [["table_unit", 2], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 7, false], null], [0, 1, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "union": null, "except": null}}, "question_toks": {"en": ["Show", "name", "of", "all", "students", "who", "have", "some", "friends", "and", "also", "are", "liked", "by", "someone", "else", "."], "ru": ["\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c", "\u0438\u043c\u0435\u043d\u0430", "\u0432\u0441\u0435\u0445", "\u0441\u0442\u0443\u0434\u0435\u043d\u0442\u043e\u0432", ",", "\u0443", "\u043a\u043e\u0442\u043e\u0440\u044b\u0445", "\u0435\u0441\u0442\u044c", "\u0434\u0440\u0443\u0437\u044c\u044f", "\u0438", "\u043e\u043d\u0438", "\u043a\u043e\u043c\u0443-\u0442\u043e", "\u043d\u0440\u0430\u0432\u044f\u0442\u0441\u044f", "."]}, "query_toks": {"en": ["select", "t2.name", "from", "friend", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1.student_id", "=", "t2.id", "intersect", "select", "t2.name", "from", "likes", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1.liked_id", "=", "t2.id", ";"], "ru": ["select", "t2.name", "from", "friend", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1.student_id", "=", "t2.id", "intersect", "select", "t2.name", "from", "likes", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1.liked_id", "=", "t2.id", ";"]}, "query_toks_no_values": {"en": ["select", "t2.name", "from", "friend", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1.student_id", "=", "t2.id", "intersect", "select", "t2.name", "from", "likes", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1.liked_id", "=", "t2.id", ";"], "ru": ["select", "t2.name", "from", "friend", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1.student_id", "=", "t2.id", "intersect", "select", "t2.name", "from", "likes", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1.liked_id", "=", "t2.id", ";"]}, "masked_query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id;", "question_pauq": {"ru": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0438\u043c\u0435\u043d\u0430 \u0432\u0441\u0435\u0445 \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u043e\u0432, \u0443 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0435\u0441\u0442\u044c \u0434\u0440\u0443\u0437\u044c\u044f \u0438 \u043e\u043d\u0438 \u043a\u043e\u043c\u0443-\u0442\u043e \u043d\u0440\u0430\u0432\u044f\u0442\u0441\u044f."}, "question": "Show name of all students who have some friends and also are liked by someone else.", "kb_id": "network_1"}, {"id": "D_0902", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 6, false], null], [0, 1, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": {"from": {"table_units": [["table_unit", 2], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 7, false], null], [0, 1, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 6, false], null], [0, 1, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": {"from": {"table_units": [["table_unit", 2], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 7, false], null], [0, 1, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "the", "names", "of", "high", "schoolers", "who", "both", "have", "friends", "and", "are", "liked", "?"], "ru": ["\u041a\u0430\u043a", "\u0437\u043e\u0432\u0443\u0442", "\u0441\u0442\u0430\u0440\u0448\u0435\u043a\u043b\u0430\u0441\u0441\u043d\u0438\u043a\u043e\u0432", ",", "\u0443", "\u043a\u043e\u0442\u043e\u0440\u044b\u0445", "\u0435\u0441\u0442\u044c", "\u0434\u0440\u0443\u0437\u044c\u044f", "\u0438", "\u043a\u043e\u0442\u043e\u0440\u044b\u0435", "\u043d\u0440\u0430\u0432\u044f\u0442\u0441\u044f", "\u043b\u044e\u0434\u044f\u043c", "?"]}, "query_toks": {"en": ["select", "t2.name", "from", "friend", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1.student_id", "=", "t2.id", "intersect", "select", "t2.name", "from", "likes", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1.liked_id", "=", "t2.id", ";"], "ru": ["select", "t2.name", "from", "friend", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1.student_id", "=", "t2.id", "intersect", "select", "t2.name", "from", "likes", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1.liked_id", "=", "t2.id", ";"]}, "query_toks_no_values": {"en": ["select", "t2.name", "from", "friend", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1.student_id", "=", "t2.id", "intersect", "select", "t2.name", "from", "likes", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1.liked_id", "=", "t2.id", ";"], "ru": ["select", "t2.name", "from", "friend", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1.student_id", "=", "t2.id", "intersect", "select", "t2.name", "from", "likes", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1.liked_id", "=", "t2.id", ";"]}, "masked_query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id;", "question_pauq": {"ru": "\u041a\u0430\u043a \u0437\u043e\u0432\u0443\u0442 \u0441\u0442\u0430\u0440\u0448\u0435\u043a\u043b\u0430\u0441\u0441\u043d\u0438\u043a\u043e\u0432, \u0443 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0435\u0441\u0442\u044c \u0434\u0440\u0443\u0437\u044c\u044f \u0438 \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0440\u0430\u0432\u044f\u0442\u0441\u044f \u043b\u044e\u0434\u044f\u043c?"}, "question": "What are the names of high schoolers who both have friends and are liked?", "kb_id": "network_1"}, {"id": "D_0903", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT student_id ,  count(*) FROM Likes GROUP BY student_id;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 6, false], null]], [3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [[0, 6, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 6, false], null]], [3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [[0, 6, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Count", "the", "number", "of", "likes", "for", "each", "student", "id", "."], "ru": ["\u041f\u043e\u0434\u0441\u0447\u0438\u0442\u0430\u0439\u0442\u0435", "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e", "\u043b\u0430\u0439\u043a\u043e\u0432", "\u0434\u043b\u044f", "\u043a\u0430\u0436\u0434\u043e\u0433\u043e", "\u0441\u0442\u0443\u0434\u0435\u043d\u0447\u0435\u0441\u043a\u043e\u0433\u043e", "id", "."]}, "query_toks": {"en": ["select", "student_id", ",", "count", "(", "*", ")", "from", "likes", "group", "by", "student_id", ";"], "ru": ["select", "student_id", ",", "count", "(", "*", ")", "from", "likes", "group", "by", "student_id", ";"]}, "query_toks_no_values": {"en": ["select", "student_id", ",", "count", "(", "*", ")", "from", "likes", "group", "by", "student_id", ";"], "ru": ["select", "student_id", ",", "count", "(", "*", ")", "from", "likes", "group", "by", "student_id", ";"]}, "masked_query": "SELECT student_id ,  count(*) FROM Likes GROUP BY student_id;", "question_pauq": {"ru": "\u041f\u043e\u0434\u0441\u0447\u0438\u0442\u0430\u0439\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043b\u0430\u0439\u043a\u043e\u0432 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0441\u0442\u0443\u0434\u0435\u043d\u0447\u0435\u0441\u043a\u043e\u0433\u043e id."}, "question": "Count the number of likes for each student id.", "kb_id": "network_1"}, {"id": "D_0904", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT student_id ,  count(*) FROM Likes GROUP BY student_id;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 6, false], null]], [3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [[0, 6, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 6, false], null]], [3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [[0, 6, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["How", "many", "likes", "correspond", "to", "each", "student", "id", "?"], "ru": ["\u0421\u043a\u043e\u043b\u044c\u043a\u043e", "\u043b\u0430\u0439\u043a\u043e\u0432", "\u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442", "\u043a\u0430\u0436\u0434\u043e\u043c\u0443", "\u0441\u0442\u0443\u0434\u0435\u043d\u0447\u0435\u0441\u043a\u043e\u043c\u0443", "id", "?"]}, "query_toks": {"en": ["select", "student_id", ",", "count", "(", "*", ")", "from", "likes", "group", "by", "student_id", ";"], "ru": ["select", "student_id", ",", "count", "(", "*", ")", "from", "likes", "group", "by", "student_id", ";"]}, "query_toks_no_values": {"en": ["select", "student_id", ",", "count", "(", "*", ")", "from", "likes", "group", "by", "student_id", ";"], "ru": ["select", "student_id", ",", "count", "(", "*", ")", "from", "likes", "group", "by", "student_id", ";"]}, "masked_query": "SELECT student_id ,  count(*) FROM Likes GROUP BY student_id;", "question_pauq": {"ru": "\u0421\u043a\u043e\u043b\u044c\u043a\u043e \u043b\u0430\u0439\u043a\u043e\u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u0441\u0442\u0443\u0434\u0435\u043d\u0447\u0435\u0441\u043a\u043e\u043c\u0443 id?"}, "question": "How many likes correspond to each student id?", "kb_id": "network_1"}, {"id": "D_0905", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 6, false], null], [0, 1, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]], [3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [[0, 6, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 6, false], null], [0, 1, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]], [3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [[0, 6, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Show", "the", "names", "of", "high", "schoolers", "who", "have", "likes", ",", "and", "numbers", "of", "likes", "for", "each", "."], "ru": ["\u041f\u043e\u043a\u0430\u0436\u0438\u0442\u0435", "\u0438\u043c\u0435\u043d\u0430", "\u0441\u0442\u0430\u0440\u0448\u0435\u043a\u043b\u0430\u0441\u0441\u043d\u0438\u043a\u043e\u0432", "\u0441", "\u043b\u0430\u0439\u043a\u0430\u043c\u0438", ",", "\u0438", "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e", "\u043b\u0430\u0439\u043a\u043e\u0432", "\u0443", "\u043a\u0430\u0436\u0434\u043e\u0433\u043e", "\u0438\u0437", "\u043d\u0438\u0445", "."]}, "query_toks": {"en": ["select", "t2.name", ",", "count", "(", "*", ")", "from", "likes", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1.student_id", "=", "t2.id", "group", "by", "t1.student_id", ";"], "ru": ["select", "t2.name", ",", "count", "(", "*", ")", "from", "likes", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1.student_id", "=", "t2.id", "group", "by", "t1.student_id", ";"]}, "query_toks_no_values": {"en": ["select", "t2.name", ",", "count", "(", "*", ")", "from", "likes", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1.student_id", "=", "t2.id", "group", "by", "t1.student_id", ";"], "ru": ["select", "t2.name", ",", "count", "(", "*", ")", "from", "likes", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1.student_id", "=", "t2.id", "group", "by", "t1.student_id", ";"]}, "masked_query": "SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id;", "question_pauq": {"ru": "\u041f\u043e\u043a\u0430\u0436\u0438\u0442\u0435 \u0438\u043c\u0435\u043d\u0430 \u0441\u0442\u0430\u0440\u0448\u0435\u043a\u043b\u0430\u0441\u0441\u043d\u0438\u043a\u043e\u0432 \u0441 \u043b\u0430\u0439\u043a\u0430\u043c\u0438, \u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043b\u0430\u0439\u043a\u043e\u0432 \u0443 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0438\u0437 \u043d\u0438\u0445."}, "question": "Show the names of high schoolers who have likes, and numbers of likes for each.", "kb_id": "network_1"}, {"id": "D_0906", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 6, false], null], [0, 1, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]], [3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [[0, 6, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 6, false], null], [0, 1, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]], [3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [[0, 6, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "the", "names", "of", "high", "schoolers", "who", "have", "likes", ",", "and", "how", "many", "likes", "does", "each", "have", "?"], "ru": ["\u041a\u0430\u043a", "\u0437\u043e\u0432\u0443\u0442", "\u0441\u0442\u0430\u0440\u0448\u0435\u043a\u043b\u0430\u0441\u0441\u043d\u0438\u043a\u043e\u0432", ",", "\u0443", "\u043a\u043e\u0442\u043e\u0440\u044b\u0445", "\u0435\u0441\u0442\u044c", "\u043b\u0430\u0439\u043a\u0438", ",", "\u0438", "\u0441\u043a\u043e\u043b\u044c\u043a\u043e", "\u043b\u0430\u0439\u043a\u043e\u0432", "\u0443", "\u043a\u0430\u0436\u0434\u043e\u0433\u043e", "?"]}, "query_toks": {"en": ["select", "t2.name", ",", "count", "(", "*", ")", "from", "likes", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1.student_id", "=", "t2.id", "group", "by", "t1.student_id", ";"], "ru": ["select", "t2.name", ",", "count", "(", "*", ")", "from", "likes", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1.student_id", "=", "t2.id", "group", "by", "t1.student_id", ";"]}, "query_toks_no_values": {"en": ["select", "t2.name", ",", "count", "(", "*", ")", "from", "likes", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1.student_id", "=", "t2.id", "group", "by", "t1.student_id", ";"], "ru": ["select", "t2.name", ",", "count", "(", "*", ")", "from", "likes", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1.student_id", "=", "t2.id", "group", "by", "t1.student_id", ";"]}, "masked_query": "SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id;", "question_pauq": {"ru": "\u041a\u0430\u043a \u0437\u043e\u0432\u0443\u0442 \u0441\u0442\u0430\u0440\u0448\u0435\u043a\u043b\u0430\u0441\u0441\u043d\u0438\u043a\u043e\u0432, \u0443 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0435\u0441\u0442\u044c \u043b\u0430\u0439\u043a\u0438, \u0438 \u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043b\u0430\u0439\u043a\u043e\u0432 \u0443 \u043a\u0430\u0436\u0434\u043e\u0433\u043e?"}, "question": "What are the names of high schoolers who have likes, and how many likes does each have?", "kb_id": "network_1"}, {"id": "D_0907", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 6, false], null], [0, 1, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [], "groupBy": [[0, 6, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 6, false], null], [0, 1, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [], "groupBy": [[0, 6, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "name", "of", "the", "high", "schooler", "who", "has", "the", "greatest", "number", "of", "likes", "?"], "ru": ["\u041a\u0430\u043a", "\u0437\u043e\u0432\u0443\u0442", "\u0441\u0442\u0430\u0440\u0448\u0435\u043a\u043b\u0430\u0441\u0441\u043d\u0438\u043a\u0430", ",", "\u0443", "\u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e", "\u0431\u043e\u043b\u044c\u0448\u0435", "\u0432\u0441\u0435\u0433\u043e", "\u043b\u0430\u0439\u043a\u043e\u0432", "?"]}, "query_toks": {"en": ["select", "t2.name", "from", "likes", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1.student_id", "=", "t2.id", "group", "by", "t1.student_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"], "ru": ["select", "t2.name", "from", "likes", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1.student_id", "=", "t2.id", "group", "by", "t1.student_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"]}, "query_toks_no_values": {"en": ["select", "t2.name", "from", "likes", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1.student_id", "=", "t2.id", "group", "by", "t1.student_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"], "ru": ["select", "t2.name", "from", "likes", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1.student_id", "=", "t2.id", "group", "by", "t1.student_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"]}, "masked_query": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1;", "question_pauq": {"ru": "\u041a\u0430\u043a \u0437\u043e\u0432\u0443\u0442 \u0441\u0442\u0430\u0440\u0448\u0435\u043a\u043b\u0430\u0441\u0441\u043d\u0438\u043a\u0430, \u0443 \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u0431\u043e\u043b\u044c\u0448\u0435 \u0432\u0441\u0435\u0433\u043e \u043b\u0430\u0439\u043a\u043e\u0432?"}, "question": "What is the name of the high schooler who has the greatest number of likes?", "kb_id": "network_1"}, {"id": "D_0908", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 6, false], null], [0, 1, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [], "groupBy": [[0, 6, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 6, false], null], [0, 1, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [], "groupBy": [[0, 6, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Give", "the", "name", "of", "the", "student", "with", "the", "most", "likes", "."], "ru": ["\u041d\u0430\u0437\u043e\u0432\u0438\u0442\u0435", "\u0438\u043c\u044f", "\u0443\u0447\u0435\u043d\u0438\u043a\u0430", ",", "\u0443", "\u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e", "\u0431\u043e\u043b\u044c\u0448\u0435", "\u0432\u0441\u0435\u0433\u043e", "\u043b\u0430\u0439\u043a\u043e\u0432", "."]}, "query_toks": {"en": ["select", "t2.name", "from", "likes", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1.student_id", "=", "t2.id", "group", "by", "t1.student_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"], "ru": ["select", "t2.name", "from", "likes", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1.student_id", "=", "t2.id", "group", "by", "t1.student_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"]}, "query_toks_no_values": {"en": ["select", "t2.name", "from", "likes", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1.student_id", "=", "t2.id", "group", "by", "t1.student_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"], "ru": ["select", "t2.name", "from", "likes", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1.student_id", "=", "t2.id", "group", "by", "t1.student_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"]}, "masked_query": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1;", "question_pauq": {"ru": "\u041d\u0430\u0437\u043e\u0432\u0438\u0442\u0435 \u0438\u043c\u044f \u0443\u0447\u0435\u043d\u0438\u043a\u0430, \u0443 \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u0431\u043e\u043b\u044c\u0448\u0435 \u0432\u0441\u0435\u0433\u043e \u043b\u0430\u0439\u043a\u043e\u0432."}, "question": "Give the name of the student with the most likes.", "kb_id": "network_1"}, {"id": "D_0909", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 6, false], null], [0, 1, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [], "groupBy": [[0, 6, false]], "having": [[false, 5, [0, [3, 0, false], null], 2.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 6, false], null], [0, 1, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [], "groupBy": [[0, 6, false]], "having": [[false, 5, [0, [3, 0, false], null], 2.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Show", "the", "names", "of", "students", "who", "have", "at", "least", "2", "likes", "."], "ru": ["\u041f\u043e\u043a\u0430\u0436\u0438\u0442\u0435", "\u0438\u043c\u0435\u043d\u0430", "\u0441\u0442\u0443\u0434\u0435\u043d\u0442\u043e\u0432", ",", "\u043a\u043e\u0442\u043e\u0440\u044b\u043c", "\u043f\u043e\u0441\u0442\u0430\u0432\u0438\u043b\u0438", "\u043d\u0435", "\u043c\u0435\u043d\u0435\u0435", "2", "\u043b\u0430\u0439\u043a\u043e\u0432", "."]}, "query_toks": {"en": ["select", "t2.name", "from", "likes", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1.student_id", "=", "t2.id", "group", "by", "t1.student_id", "having", "count", "(", "*", ")", ">=", "2", ";"], "ru": ["select", "t2.name", "from", "likes", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1.student_id", "=", "t2.id", "group", "by", "t1.student_id", "having", "count", "(", "*", ")", ">=", "2", ";"]}, "query_toks_no_values": {"en": ["select", "t2.name", "from", "likes", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1.student_id", "=", "t2.id", "group", "by", "t1.student_id", "having", "count", "(", "*", ")", ">=", "2", ";"], "ru": ["select", "t2.name", "from", "likes", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1.student_id", "=", "t2.id", "group", "by", "t1.student_id", "having", "count", "(", "*", ")", ">=", "2", ";"]}, "masked_query": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2;", "question_pauq": {"ru": "\u041f\u043e\u043a\u0430\u0436\u0438\u0442\u0435 \u0438\u043c\u0435\u043d\u0430 \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u043c \u043f\u043e\u0441\u0442\u0430\u0432\u0438\u043b\u0438 \u043d\u0435 \u043c\u0435\u043d\u0435\u0435 2 \u043b\u0430\u0439\u043a\u043e\u0432."}, "question": "Show the names of students who have at least 2 likes.", "kb_id": "network_1"}, {"id": "D_0910", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 6, false], null], [0, 1, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [], "groupBy": [[0, 6, false]], "having": [[false, 5, [0, [3, 0, false], null], 2.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 6, false], null], [0, 1, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [], "groupBy": [[0, 6, false]], "having": [[false, 5, [0, [3, 0, false], null], 2.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "the", "names", "of", "students", "who", "have", "2", "or", "more", "likes", "?"], "ru": ["\u041a\u0430\u043a", "\u0437\u043e\u0432\u0443\u0442", "\u0441\u0442\u0443\u0434\u0435\u043d\u0442\u043e\u0432", ",", "\u0443", "\u043a\u043e\u0442\u043e\u0440\u044b\u0445", "2", "\u0438", "\u0431\u043e\u043b\u0435\u0435", "\u043b\u0430\u0439\u043a\u043e\u0432", "?"]}, "query_toks": {"en": ["select", "t2.name", "from", "likes", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1.student_id", "=", "t2.id", "group", "by", "t1.student_id", "having", "count", "(", "*", ")", ">=", "2", ";"], "ru": ["select", "t2.name", "from", "likes", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1.student_id", "=", "t2.id", "group", "by", "t1.student_id", "having", "count", "(", "*", ")", ">=", "2", ";"]}, "query_toks_no_values": {"en": ["select", "t2.name", "from", "likes", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1.student_id", "=", "t2.id", "group", "by", "t1.student_id", "having", "count", "(", "*", ")", ">=", "2", ";"], "ru": ["select", "t2.name", "from", "likes", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1.student_id", "=", "t2.id", "group", "by", "t1.student_id", "having", "count", "(", "*", ")", ">=", "2", ";"]}, "masked_query": "SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2;", "question_pauq": {"ru": "\u041a\u0430\u043a \u0437\u043e\u0432\u0443\u0442 \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u043e\u0432, \u0443 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 2 \u0438 \u0431\u043e\u043b\u0435\u0435 \u043b\u0430\u0439\u043a\u043e\u0432?"}, "question": "What are the names of students who have 2 or more likes?", "kb_id": "network_1"}, {"id": "D_0911", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 4, false], null], [0, 1, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [[false, 3, [0, [0, 3, false], null], 5.0, null]], "groupBy": [[0, 4, false]], "having": [[false, 5, [0, [3, 0, false], null], 2.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 4, false], null], [0, 1, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [[false, 3, [0, [0, 3, false], null], 5.0, null]], "groupBy": [[0, 4, false]], "having": [[false, 5, [0, [3, 0, false], null], 2.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Show", "the", "names", "of", "students", "who", "have", "a", "grade", "higher", "than", "5", "and", "have", "at", "least", "2", "friends", "."], "ru": ["\u041f\u043e\u043a\u0430\u0436\u0438\u0442\u0435", "\u0438\u043c\u0435\u043d\u0430", "\u0443\u0447\u0435\u043d\u0438\u043a\u043e\u0432", ",", "\u043a\u043e\u0442\u043e\u0440\u044b\u0435", "\u0438\u043c\u0435\u044e\u0442", "\u043e\u0446\u0435\u043d\u043a\u0443", "\u0432\u044b\u0448\u0435", "5", "\u0438", "\u0438\u043c\u0435\u044e\u0442", "\u043a\u0430\u043a", "\u043c\u0438\u043d\u0438\u043c\u0443\u043c", "2", "\u0434\u0440\u0443\u0437\u0435\u0439", "."]}, "query_toks": {"en": ["select", "t2.name", "from", "friend", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1.student_id", "=", "t2.id", "where", "t2.grade", ">", "5", "group", "by", "t1.student_id", "having", "count", "(", "*", ")", ">=", "2", ";"], "ru": ["select", "t2.name", "from", "friend", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1.student_id", "=", "t2.id", "where", "t2.grade", ">", "5", "group", "by", "t1.student_id", "having", "count", "(", "*", ")", ">=", "2", ";"]}, "query_toks_no_values": {"en": ["select", "t2.name", "from", "friend", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1.student_id", "=", "t2.id", "where", "t2.grade", ">", "5", "group", "by", "t1.student_id", "having", "count", "(", "*", ")", ">=", "2", ";"], "ru": ["select", "t2.name", "from", "friend", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1.student_id", "=", "t2.id", "where", "t2.grade", ">", "5", "group", "by", "t1.student_id", "having", "count", "(", "*", ")", ">=", "2", ";"]}, "masked_query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2;", "question_pauq": {"ru": "\u041f\u043e\u043a\u0430\u0436\u0438\u0442\u0435 \u0438\u043c\u0435\u043d\u0430 \u0443\u0447\u0435\u043d\u0438\u043a\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0438\u043c\u0435\u044e\u0442 \u043e\u0446\u0435\u043d\u043a\u0443 \u0432\u044b\u0448\u0435 5 \u0438 \u0438\u043c\u0435\u044e\u0442 \u043a\u0430\u043a \u043c\u0438\u043d\u0438\u043c\u0443\u043c 2 \u0434\u0440\u0443\u0437\u0435\u0439."}, "question": "Show the names of students who have a grade higher than 5 and have at least 2 friends.", "kb_id": "network_1"}, {"id": "D_0912", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 4, false], null], [0, 1, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [[false, 3, [0, [0, 3, false], null], 5.0, null]], "groupBy": [[0, 4, false]], "having": [[false, 5, [0, [3, 0, false], null], 2.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 4, false], null], [0, 1, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [[false, 3, [0, [0, 3, false], null], 5.0, null]], "groupBy": [[0, 4, false]], "having": [[false, 5, [0, [3, 0, false], null], 2.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "the", "names", "of", "high", "schoolers", "who", "have", "a", "grade", "of", "over", "5", "and", "have", "2", "or", "more", "friends", "?"], "ru": ["\u041a\u0430\u043a", "\u0437\u043e\u0432\u0443\u0442", "\u0441\u0442\u0430\u0440\u0448\u0435\u043a\u043b\u0430\u0441\u0441\u043d\u0438\u043a\u043e\u0432", ",", "\u043a\u043e\u0442\u043e\u0440\u044b\u0435", "\u0438\u043c\u0435\u044e\u0442", "\u043e\u0446\u0435\u043d\u043a\u0443", "\u0432\u044b\u0448\u0435", "5", "\u0438", "\u0438\u043c\u0435\u044e\u0442", "2", "\u0438\u043b\u0438", "\u0431\u043e\u043b\u0435\u0435", "\u0434\u0440\u0443\u0437\u0435\u0439", "?"]}, "query_toks": {"en": ["select", "t2.name", "from", "friend", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1.student_id", "=", "t2.id", "where", "t2.grade", ">", "5", "group", "by", "t1.student_id", "having", "count", "(", "*", ")", ">=", "2", ";"], "ru": ["select", "t2.name", "from", "friend", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1.student_id", "=", "t2.id", "where", "t2.grade", ">", "5", "group", "by", "t1.student_id", "having", "count", "(", "*", ")", ">=", "2", ";"]}, "query_toks_no_values": {"en": ["select", "t2.name", "from", "friend", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1.student_id", "=", "t2.id", "where", "t2.grade", ">", "5", "group", "by", "t1.student_id", "having", "count", "(", "*", ")", ">=", "2", ";"], "ru": ["select", "t2.name", "from", "friend", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1.student_id", "=", "t2.id", "where", "t2.grade", ">", "5", "group", "by", "t1.student_id", "having", "count", "(", "*", ")", ">=", "2", ";"]}, "masked_query": "SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2;", "question_pauq": {"ru": "\u041a\u0430\u043a \u0437\u043e\u0432\u0443\u0442 \u0441\u0442\u0430\u0440\u0448\u0435\u043a\u043b\u0430\u0441\u0441\u043d\u0438\u043a\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0438\u043c\u0435\u044e\u0442 \u043e\u0446\u0435\u043d\u043a\u0443 \u0432\u044b\u0448\u0435 5 \u0438 \u0438\u043c\u0435\u044e\u0442 2 \u0438\u043b\u0438 \u0431\u043e\u043b\u0435\u0435 \u0434\u0440\u0443\u0437\u0435\u0439?"}, "question": "What are the names of high schoolers who have a grade of over 5 and have 2 or more friends?", "kb_id": "network_1"}, {"id": "D_0913", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"\u041b\u0435\u0432\";"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 6, false], null], [0, 1, false], null]]}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 2, false], null], "\"Kyle\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 6, false], null], [0, 1, false], null]]}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 2, false], null], "\"\u041b\u0435\u0432\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["How", "many", "likes", "does", "Kyle", "have", "?"], "ru": ["\u0421\u043a\u043e\u043b\u044c\u043a\u043e", "\u043b\u0430\u0439\u043a\u043e\u0432", "\u0443", "\u041b\u044c\u0432\u0430", "?"]}, "query_toks": {"en": ["select", "count", "(", "*", ")", "from", "likes", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1.student_id", "=", "t2.id", "where", "t2.name", "=", "\"Kyle\"", ";"], "ru": ["select", "count", "(", "*", ")", "from", "likes", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1.student_id", "=", "t2.id", "where", "t2.name", "=", "\"\u041b\u0435\u0432\"", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "*", ")", "from", "likes", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1.student_id", "=", "t2.id", "where", "t2.name", "=", "value", ";"], "ru": ["select", "count", "(", "*", ")", "from", "likes", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1.student_id", "=", "t2.id", "where", "t2.name", "=", "value", ";"]}, "masked_query": "SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\";", "question_pauq": {"ru": "\u0421\u043a\u043e\u043b\u044c\u043a\u043e \u043b\u0430\u0439\u043a\u043e\u0432 \u0443 \u041b\u044c\u0432\u0430?"}, "question": "How many likes does Kyle have?", "kb_id": "network_1"}, {"id": "D_0914", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"\u041b\u0435\u0432\";"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 6, false], null], [0, 1, false], null]]}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 2, false], null], "\"Kyle\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 6, false], null], [0, 1, false], null]]}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 2, false], null], "\"\u041b\u0435\u0432\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Return", "the", "number", "of", "likes", "that", "the", "high", "schooler", "named", "Kyle", "has", "."], "ru": ["\u041f\u043e\u043a\u0430\u0436\u0438", "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e", "\u043b\u0430\u0439\u043a\u043e\u0432", "\u0443", "\u0441\u0442\u0430\u0440\u0448\u0435\u043a\u043b\u0430\u0441\u0441\u043d\u0438\u043a\u0430", "\u043f\u043e", "\u0438\u043c\u0435\u043d\u0438", "\u041b\u0435\u0432", "."]}, "query_toks": {"en": ["select", "count", "(", "*", ")", "from", "likes", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1.student_id", "=", "t2.id", "where", "t2.name", "=", "\"Kyle\"", ";"], "ru": ["select", "count", "(", "*", ")", "from", "likes", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1.student_id", "=", "t2.id", "where", "t2.name", "=", "\"\u041b\u0435\u0432\"", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "*", ")", "from", "likes", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1.student_id", "=", "t2.id", "where", "t2.name", "=", "value", ";"], "ru": ["select", "count", "(", "*", ")", "from", "likes", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1.student_id", "=", "t2.id", "where", "t2.name", "=", "value", ";"]}, "masked_query": "SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\";", "question_pauq": {"ru": "\u041f\u043e\u043a\u0430\u0436\u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043b\u0430\u0439\u043a\u043e\u0432 \u0443 \u0441\u0442\u0430\u0440\u0448\u0435\u043a\u043b\u0430\u0441\u0441\u043d\u0438\u043a\u0430 \u043f\u043e \u0438\u043c\u0435\u043d\u0438 \u041b\u0435\u0432."}, "question": "Return the number of likes that the high schooler named Kyle has.", "kb_id": "network_1"}, {"id": "D_0915", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id);"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[5, [0, [0, 3, false], null]]]], "where": [[false, 8, [0, [0, 1, false], null], {"from": {"table_units": [["table_unit", 1], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 4, false], null], [0, 1, false], null]]}, "select": [false, [[0, [0, [0, 4, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[5, [0, [0, 3, false], null]]]], "where": [[false, 8, [0, [0, 1, false], null], {"from": {"table_units": [["table_unit", 1], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 4, false], null], [0, 1, false], null]]}, "select": [false, [[0, [0, [0, 4, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Find", "the", "average", "grade", "of", "all", "students", "who", "have", "some", "friends", "."], "ru": ["\u041d\u0430\u0439\u0434\u0438\u0442\u0435", "\u0441\u0440\u0435\u0434\u043d\u044e\u044e", "\u043e\u0446\u0435\u043d\u043a\u0443", "\u0432\u0441\u0435\u0445", "\u0443\u0447\u0435\u043d\u0438\u043a\u043e\u0432", ",", "\u0443", "\u043a\u043e\u0442\u043e\u0440\u044b\u0445", "\u0435\u0441\u0442\u044c", "\u0434\u0440\u0443\u0437\u044c\u044f", "."]}, "query_toks": {"en": ["select", "avg", "(", "grade", ")", "from", "highschooler", "where", "id", "in", "(", "select", "t1.student_id", "from", "friend", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1.student_id", "=", "t2.id", ")", ";"], "ru": ["select", "avg", "(", "grade", ")", "from", "highschooler", "where", "id", "in", "(", "select", "t1.student_id", "from", "friend", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1.student_id", "=", "t2.id", ")", ";"]}, "query_toks_no_values": {"en": ["select", "avg", "(", "grade", ")", "from", "highschooler", "where", "id", "in", "(", "select", "t1.student_id", "from", "friend", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1.student_id", "=", "t2.id", ")", ";"], "ru": ["select", "avg", "(", "grade", ")", "from", "highschooler", "where", "id", "in", "(", "select", "t1.student_id", "from", "friend", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1.student_id", "=", "t2.id", ")", ";"]}, "masked_query": "SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id);", "question_pauq": {"ru": "\u041d\u0430\u0439\u0434\u0438\u0442\u0435 \u0441\u0440\u0435\u0434\u043d\u044e\u044e \u043e\u0446\u0435\u043d\u043a\u0443 \u0432\u0441\u0435\u0445 \u0443\u0447\u0435\u043d\u0438\u043a\u043e\u0432, \u0443 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0435\u0441\u0442\u044c \u0434\u0440\u0443\u0437\u044c\u044f."}, "question": "Find the average grade of all students who have some friends.", "kb_id": "network_1"}, {"id": "D_0916", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id);"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[5, [0, [0, 3, false], null]]]], "where": [[false, 8, [0, [0, 1, false], null], {"from": {"table_units": [["table_unit", 1], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 4, false], null], [0, 1, false], null]]}, "select": [false, [[0, [0, [0, 4, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[5, [0, [0, 3, false], null]]]], "where": [[false, 8, [0, [0, 1, false], null], {"from": {"table_units": [["table_unit", 1], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 4, false], null], [0, 1, false], null]]}, "select": [false, [[0, [0, [0, 4, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "average", "grade", "of", "students", "who", "have", "friends", "?"], "ru": ["\u041a\u0430\u043a\u043e\u0432\u0430", "\u0441\u0440\u0435\u0434\u043d\u044f\u044f", "\u043e\u0446\u0435\u043d\u043a\u0430", "\u0443", "\u0441\u0442\u0443\u0434\u0435\u043d\u0442\u043e\u0432", ",", "\u0443", "\u043a\u043e\u0442\u043e\u0440\u044b\u0445", "\u0435\u0441\u0442\u044c", "\u0434\u0440\u0443\u0437\u044c\u044f", "?"]}, "query_toks": {"en": ["select", "avg", "(", "grade", ")", "from", "highschooler", "where", "id", "in", "(", "select", "t1.student_id", "from", "friend", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1.student_id", "=", "t2.id", ")", ";"], "ru": ["select", "avg", "(", "grade", ")", "from", "highschooler", "where", "id", "in", "(", "select", "t1.student_id", "from", "friend", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1.student_id", "=", "t2.id", ")", ";"]}, "query_toks_no_values": {"en": ["select", "avg", "(", "grade", ")", "from", "highschooler", "where", "id", "in", "(", "select", "t1.student_id", "from", "friend", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1.student_id", "=", "t2.id", ")", ";"], "ru": ["select", "avg", "(", "grade", ")", "from", "highschooler", "where", "id", "in", "(", "select", "t1.student_id", "from", "friend", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1.student_id", "=", "t2.id", ")", ";"]}, "masked_query": "SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id);", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0432\u0430 \u0441\u0440\u0435\u0434\u043d\u044f\u044f \u043e\u0446\u0435\u043d\u043a\u0430 \u0443 \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u043e\u0432, \u0443 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0435\u0441\u0442\u044c \u0434\u0440\u0443\u0437\u044c\u044f?"}, "question": "What is the average grade of students who have friends?", "kb_id": "network_1"}, {"id": "D_0917", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id);"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[2, [0, [0, 3, false], null]]]], "where": [[true, 8, [0, [0, 1, false], null], {"from": {"table_units": [["table_unit", 1], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 4, false], null], [0, 1, false], null]]}, "select": [false, [[0, [0, [0, 4, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[2, [0, [0, 3, false], null]]]], "where": [[true, 8, [0, [0, 1, false], null], {"from": {"table_units": [["table_unit", 1], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 4, false], null], [0, 1, false], null]]}, "select": [false, [[0, [0, [0, 4, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Find", "the", "minimum", "grade", "of", "students", "who", "have", "no", "friends", "."], "ru": ["\u041d\u0430\u0439\u0434\u0438\u0442\u0435", "\u0441\u0430\u043c\u044b\u0439", "\u043c\u043b\u0430\u0434\u0448\u0438\u0439", "\u043a\u043b\u0430\u0441\u0441", "\u0443\u0447\u0435\u043d\u0438\u043a\u043e\u0432", ",", "\u0443", "\u043a\u043e\u0442\u043e\u0440\u044b\u0445", "\u043d\u0435\u0442", "\u0434\u0440\u0443\u0437\u0435\u0439", "."]}, "query_toks": {"en": ["select", "min", "(", "grade", ")", "from", "highschooler", "where", "id", "not", "in", "(", "select", "t1.student_id", "from", "friend", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1.student_id", "=", "t2.id", ")", ";"], "ru": ["select", "min", "(", "grade", ")", "from", "highschooler", "where", "id", "not", "in", "(", "select", "t1.student_id", "from", "friend", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1.student_id", "=", "t2.id", ")", ";"]}, "query_toks_no_values": {"en": ["select", "min", "(", "grade", ")", "from", "highschooler", "where", "id", "not", "in", "(", "select", "t1.student_id", "from", "friend", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1.student_id", "=", "t2.id", ")", ";"], "ru": ["select", "min", "(", "grade", ")", "from", "highschooler", "where", "id", "not", "in", "(", "select", "t1.student_id", "from", "friend", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1.student_id", "=", "t2.id", ")", ";"]}, "masked_query": "SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id);", "question_pauq": {"ru": "\u041d\u0430\u0439\u0434\u0438\u0442\u0435 \u0441\u0430\u043c\u044b\u0439 \u043c\u043b\u0430\u0434\u0448\u0438\u0439 \u043a\u043b\u0430\u0441\u0441 \u0443\u0447\u0435\u043d\u0438\u043a\u043e\u0432, \u0443 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043d\u0435\u0442 \u0434\u0440\u0443\u0437\u0435\u0439."}, "question": "Find the minimum grade of students who have no friends.", "kb_id": "network_1"}, {"id": "D_0918", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id);"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[2, [0, [0, 3, false], null]]]], "where": [[true, 8, [0, [0, 1, false], null], {"from": {"table_units": [["table_unit", 1], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 4, false], null], [0, 1, false], null]]}, "select": [false, [[0, [0, [0, 4, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[2, [0, [0, 3, false], null]]]], "where": [[true, 8, [0, [0, 1, false], null], {"from": {"table_units": [["table_unit", 1], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 4, false], null], [0, 1, false], null]]}, "select": [false, [[0, [0, [0, 4, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "lowest", "grade", "of", "students", "who", "do", "not", "have", "any", "friends", "?"], "ru": ["\u041a\u0430\u043a\u043e\u0439", "\u0441\u0430\u043c\u044b\u0439", "\u043c\u043b\u0430\u0434\u0448\u0438\u0439", "\u043a\u043b\u0430\u0441\u0441", "\u0443\u0447\u0435\u043d\u0438\u043a\u043e\u0432", ",", "\u0443", "\u043a\u043e\u0442\u043e\u0440\u044b\u0445", "\u043d\u0435\u0442", "\u0434\u0440\u0443\u0437\u0435\u0439", "?"]}, "query_toks": {"en": ["select", "min", "(", "grade", ")", "from", "highschooler", "where", "id", "not", "in", "(", "select", "t1.student_id", "from", "friend", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1.student_id", "=", "t2.id", ")", ";"], "ru": ["select", "min", "(", "grade", ")", "from", "highschooler", "where", "id", "not", "in", "(", "select", "t1.student_id", "from", "friend", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1.student_id", "=", "t2.id", ")", ";"]}, "query_toks_no_values": {"en": ["select", "min", "(", "grade", ")", "from", "highschooler", "where", "id", "not", "in", "(", "select", "t1.student_id", "from", "friend", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1.student_id", "=", "t2.id", ")", ";"], "ru": ["select", "min", "(", "grade", ")", "from", "highschooler", "where", "id", "not", "in", "(", "select", "t1.student_id", "from", "friend", "as", "t1", "join", "highschooler", "as", "t2", "on", "t1.student_id", "=", "t2.id", ")", ";"]}, "masked_query": "SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id);", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0439 \u0441\u0430\u043c\u044b\u0439 \u043c\u043b\u0430\u0434\u0448\u0438\u0439 \u043a\u043b\u0430\u0441\u0441 \u0443\u0447\u0435\u043d\u0438\u043a\u043e\u0432, \u0443 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043d\u0435\u0442 \u0434\u0440\u0443\u0437\u0435\u0439?"}, "question": "What is the lowest grade of students who do not have any friends?", "kb_id": "network_1"}, {"id": "D_0919", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT state FROM Owners INTERSECT SELECT state FROM Professionals;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 4]], "conds": []}, "select": [false, [[0, [0, [0, 15, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": {"from": {"table_units": [["table_unit", 6]], "conds": []}, "select": [false, [[0, [0, [0, 38, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 4]], "conds": []}, "select": [false, [[0, [0, [0, 15, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": {"from": {"table_units": [["table_unit", 6]], "conds": []}, "select": [false, [[0, [0, [0, 38, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "union": null, "except": null}}, "question_toks": {"en": ["Which", "states", "have", "both", "owners", "and", "professionals", "living", "there", "?"], "ru": ["\u0412", "\u043a\u0430\u043a\u0438\u0445", "\u0448\u0442\u0430\u0442\u0430\u0445", "\u043f\u0440\u043e\u0436\u0438\u0432\u0430\u044e\u0442", "\u0438", "\u0445\u043e\u0437\u044f\u0435\u0432\u0430", ",", "\u0438", "\u0441\u043f\u0435\u0446\u0438\u0430\u043b\u0438\u0441\u0442\u044b", "?"]}, "query_toks": {"en": ["select", "state", "from", "owners", "intersect", "select", "state", "from", "professionals", ";"], "ru": ["select", "state", "from", "owners", "intersect", "select", "state", "from", "professionals", ";"]}, "query_toks_no_values": {"en": ["select", "state", "from", "owners", "intersect", "select", "state", "from", "professionals", ";"], "ru": ["select", "state", "from", "owners", "intersect", "select", "state", "from", "professionals", ";"]}, "masked_query": "SELECT state FROM Owners INTERSECT SELECT state FROM Professionals;", "question_pauq": {"ru": "\u0412 \u043a\u0430\u043a\u0438\u0445 \u0448\u0442\u0430\u0442\u0430\u0445 \u043f\u0440\u043e\u0436\u0438\u0432\u0430\u044e\u0442 \u0438 \u0445\u043e\u0437\u044f\u0435\u0432\u0430, \u0438 \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u0438\u0441\u0442\u044b?"}, "question": "Which states have both owners and professionals living there?", "kb_id": "dog_kennels"}, {"id": "D_0920", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT state FROM Owners INTERSECT SELECT state FROM Professionals;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 4]], "conds": []}, "select": [false, [[0, [0, [0, 15, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": {"from": {"table_units": [["table_unit", 6]], "conds": []}, "select": [false, [[0, [0, [0, 38, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 4]], "conds": []}, "select": [false, [[0, [0, [0, 15, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": {"from": {"table_units": [["table_unit", 6]], "conds": []}, "select": [false, [[0, [0, [0, 38, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "union": null, "except": null}}, "question_toks": {"en": ["Find", "the", "states", "where", "both", "owners", "and", "professionals", "live", "."], "ru": ["\u041d\u0430\u0439\u0434\u0438\u0442\u0435", "\u0448\u0442\u0430\u0442\u044b", ",", "\u0432", "\u043a\u043e\u0442\u043e\u0440\u044b\u0445", "\u0436\u0438\u0432\u0443\u0442", "\u0438", "\u0445\u043e\u0437\u044f\u0435\u0432\u0430", ",", "\u0438", "\u0441\u043f\u0435\u0446\u0438\u0430\u043b\u0438\u0441\u0442\u044b", "."]}, "query_toks": {"en": ["select", "state", "from", "owners", "intersect", "select", "state", "from", "professionals", ";"], "ru": ["select", "state", "from", "owners", "intersect", "select", "state", "from", "professionals", ";"]}, "query_toks_no_values": {"en": ["select", "state", "from", "owners", "intersect", "select", "state", "from", "professionals", ";"], "ru": ["select", "state", "from", "owners", "intersect", "select", "state", "from", "professionals", ";"]}, "masked_query": "SELECT state FROM Owners INTERSECT SELECT state FROM Professionals;", "question_pauq": {"ru": "\u041d\u0430\u0439\u0434\u0438\u0442\u0435 \u0448\u0442\u0430\u0442\u044b, \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0436\u0438\u0432\u0443\u0442 \u0438 \u0445\u043e\u0437\u044f\u0435\u0432\u0430, \u0438 \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u0438\u0441\u0442\u044b."}, "question": "Find the states where both owners and professionals live.", "kb_id": "dog_kennels"}, {"id": "D_0921", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments );"}, "sql": {"en": {"from": {"table_units": [["table_unit", 5]], "conds": []}, "select": [false, [[5, [0, [0, 26, false], null]]]], "where": [[false, 8, [0, [0, 20, false], null], {"from": {"table_units": [["table_unit", 7]], "conds": []}, "select": [false, [[0, [0, [0, 45, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 5]], "conds": []}, "select": [false, [[5, [0, [0, 26, false], null]]]], "where": [[false, 8, [0, [0, 20, false], null], {"from": {"table_units": [["table_unit", 7]], "conds": []}, "select": [false, [[0, [0, [0, 45, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "average", "age", "of", "the", "dogs", "who", "have", "gone", "through", "any", "treatments", "?"], "ru": ["\u041a\u0430\u043a\u043e\u0432", "\u0441\u0440\u0435\u0434\u043d\u0438\u0439", "\u0432\u043e\u0437\u0440\u0430\u0441\u0442", "\u0441\u043e\u0431\u0430\u043a", ",", "\u043f\u0440\u043e\u0448\u0435\u0434\u0448\u0438\u0445", "\u043a\u0430\u043a\u043e\u0435-\u043b\u0438\u0431\u043e", "\u043b\u0435\u0447\u0435\u043d\u0438\u0435", "?"]}, "query_toks": {"en": ["select", "avg", "(", "age", ")", "from", "dogs", "where", "dog_id", "in", "(", "select", "dog_id", "from", "treatments", ")", ";"], "ru": ["select", "avg", "(", "age", ")", "from", "dogs", "where", "dog_id", "in", "(", "select", "dog_id", "from", "treatments", ")", ";"]}, "query_toks_no_values": {"en": ["select", "avg", "(", "age", ")", "from", "dogs", "where", "dog_id", "in", "(", "select", "dog_id", "from", "treatments", ")", ";"], "ru": ["select", "avg", "(", "age", ")", "from", "dogs", "where", "dog_id", "in", "(", "select", "dog_id", "from", "treatments", ")", ";"]}, "masked_query": "SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments );", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0432 \u0441\u0440\u0435\u0434\u043d\u0438\u0439 \u0432\u043e\u0437\u0440\u0430\u0441\u0442 \u0441\u043e\u0431\u0430\u043a, \u043f\u0440\u043e\u0448\u0435\u0434\u0448\u0438\u0445 \u043a\u0430\u043a\u043e\u0435-\u043b\u0438\u0431\u043e \u043b\u0435\u0447\u0435\u043d\u0438\u0435?"}, "question": "What is the average age of the dogs who have gone through any treatments?", "kb_id": "dog_kennels"}, {"id": "D_0922", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments );"}, "sql": {"en": {"from": {"table_units": [["table_unit", 5]], "conds": []}, "select": [false, [[5, [0, [0, 26, false], null]]]], "where": [[false, 8, [0, [0, 20, false], null], {"from": {"table_units": [["table_unit", 7]], "conds": []}, "select": [false, [[0, [0, [0, 45, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 5]], "conds": []}, "select": [false, [[5, [0, [0, 26, false], null]]]], "where": [[false, 8, [0, [0, 20, false], null], {"from": {"table_units": [["table_unit", 7]], "conds": []}, "select": [false, [[0, [0, [0, 45, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Find", "the", "average", "age", "of", "the", "dogs", "who", "went", "through", "treatments", "."], "ru": ["\u041d\u0430\u0439\u0434\u0438\u0442\u0435", "\u0441\u0440\u0435\u0434\u043d\u0438\u0439", "\u0432\u043e\u0437\u0440\u0430\u0441\u0442", "\u0441\u043e\u0431\u0430\u043a", ",", "\u043f\u0440\u043e\u0448\u0435\u0434\u0448\u0438\u0445", "\u043a\u0443\u0440\u0441", "\u043b\u0435\u0447\u0435\u043d\u0438\u044f", "."]}, "query_toks": {"en": ["select", "avg", "(", "age", ")", "from", "dogs", "where", "dog_id", "in", "(", "select", "dog_id", "from", "treatments", ")", ";"], "ru": ["select", "avg", "(", "age", ")", "from", "dogs", "where", "dog_id", "in", "(", "select", "dog_id", "from", "treatments", ")", ";"]}, "query_toks_no_values": {"en": ["select", "avg", "(", "age", ")", "from", "dogs", "where", "dog_id", "in", "(", "select", "dog_id", "from", "treatments", ")", ";"], "ru": ["select", "avg", "(", "age", ")", "from", "dogs", "where", "dog_id", "in", "(", "select", "dog_id", "from", "treatments", ")", ";"]}, "masked_query": "SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments );", "question_pauq": {"ru": "\u041d\u0430\u0439\u0434\u0438\u0442\u0435 \u0441\u0440\u0435\u0434\u043d\u0438\u0439 \u0432\u043e\u0437\u0440\u0430\u0441\u0442 \u0441\u043e\u0431\u0430\u043a, \u043f\u0440\u043e\u0448\u0435\u0434\u0448\u0438\u0445 \u043a\u0443\u0440\u0441 \u043b\u0435\u0447\u0435\u043d\u0438\u044f."}, "question": "Find the average age of the dogs who went through treatments.", "kb_id": "dog_kennels"}, {"id": "D_0923", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 6]], "conds": []}, "select": [false, [[0, [0, [0, 33, false], null]], [0, [0, [0, 40, false], null]], [0, [0, [0, 43, false], null]]]], "where": [[false, 2, [0, [0, 38, false], null], "\"Indiana\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": {"from": {"table_units": [["table_unit", 6], ["table_unit", 7]], "conds": [[false, 2, [0, [0, 33, false], null], [0, 46, false], null]]}, "select": [false, [[0, [0, [0, 33, false], null]], [0, [0, [0, 40, false], null]], [0, [0, [0, 43, false], null]]]], "where": [], "groupBy": [[0, 33, false]], "having": [[false, 3, [0, [3, 0, false], null], 2.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "except": null}, "ru": {"from": {"table_units": [["table_unit", 6]], "conds": []}, "select": [false, [[0, [0, [0, 33, false], null]], [0, [0, [0, 40, false], null]], [0, [0, [0, 43, false], null]]]], "where": [[false, 2, [0, [0, 38, false], null], "\"Indiana\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": {"from": {"table_units": [["table_unit", 6], ["table_unit", 7]], "conds": [[false, 2, [0, [0, 33, false], null], [0, 46, false], null]]}, "select": [false, [[0, [0, [0, 33, false], null]], [0, [0, [0, 40, false], null]], [0, [0, [0, 43, false], null]]]], "where": [], "groupBy": [[0, 33, false]], "having": [[false, 3, [0, [3, 0, false], null], 2.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "except": null}}, "question_toks": {"en": ["Which", "professionals", "live", "in", "the", "state", "of", "Indiana", "or", "have", "done", "treatment", "on", "more", "than", "2", "treatments", "?", "List", "his", "or", "her", "id", ",", "last", "name", "and", "cell", "phone", "."], "ru": ["\u041a\u0430\u043a\u0438\u0435", "\u0441\u043f\u0435\u0446\u0438\u0430\u043b\u0438\u0441\u0442\u044b", "\u0436\u0438\u0432\u0443\u0442", "\u0432", "\u0448\u0442\u0430\u0442\u0435", "\u0418\u043d\u0434\u0438\u0430\u043d\u0430", "\u0438\u043b\u0438", "\u043f\u0440\u043e\u0432\u0435\u043b\u0438", "\u043b\u0435\u0447\u0435\u043d\u0438\u0435", "\u0431\u043e\u043b\u0435\u0435", "\u0447\u0435\u043c", "\u0434\u0432\u0443\u043c\u044f", "\u0441\u043f\u043e\u0441\u043e\u0431\u0430\u043c\u0438", "?", "\u0423\u043a\u0430\u0436\u0438\u0442\u0435", "\u0435\u0433\u043e", "\u0438\u043b\u0438", "\u0435\u0435", "id", ",", "\u0444\u0430\u043c\u0438\u043b\u0438\u044e", "\u0438", "\u043c\u043e\u0431\u0438\u043b\u044c\u043d\u044b\u0439", "\u0442\u0435\u043b\u0435\u0444\u043e\u043d", "."]}, "query_toks": {"en": ["select", "professional_id", ",", "last_name", ",", "cell_number", "from", "professionals", "where", "state", "=", "\"Indiana\"", "union", "select", "t1.professional_id", ",", "t1.last_name", ",", "t1.cell_number", "from", "professionals", "as", "t1", "join", "treatments", "as", "t2", "on", "t1.professional_id", "=", "t2.professional_id", "group", "by", "t1.professional_id", "having", "count", "(", "*", ")", ">", "2", ";"], "ru": ["select", "professional_id", ",", "last_name", ",", "cell_number", "from", "professionals", "where", "state", "=", "\"Indiana\"", "union", "select", "t1.professional_id", ",", "t1.last_name", ",", "t1.cell_number", "from", "professionals", "as", "t1", "join", "treatments", "as", "t2", "on", "t1.professional_id", "=", "t2.professional_id", "group", "by", "t1.professional_id", "having", "count", "(", "*", ")", ">", "2", ";"]}, "query_toks_no_values": {"en": ["select", "professional_id", ",", "last_name", ",", "cell_number", "from", "professionals", "where", "state", "=", "value", "union", "select", "t1.professional_id", ",", "t1.last_name", ",", "t1.cell_number", "from", "professionals", "as", "t1", "join", "treatments", "as", "t2", "on", "t1.professional_id", "=", "t2.professional_id", "group", "by", "t1.professional_id", "having", "count", "(", "*", ")", ">", "2", ";"], "ru": ["select", "professional_id", ",", "last_name", ",", "cell_number", "from", "professionals", "where", "state", "=", "value", "union", "select", "t1.professional_id", ",", "t1.last_name", ",", "t1.cell_number", "from", "professionals", "as", "t1", "join", "treatments", "as", "t2", "on", "t1.professional_id", "=", "t2.professional_id", "group", "by", "t1.professional_id", "having", "count", "(", "*", ")", ">", "2", ";"]}, "masked_query": "SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2;", "question_pauq": {"ru": "\u041a\u0430\u043a\u0438\u0435 \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u0438\u0441\u0442\u044b \u0436\u0438\u0432\u0443\u0442 \u0432 \u0448\u0442\u0430\u0442\u0435 \u0418\u043d\u0434\u0438\u0430\u043d\u0430 \u0438\u043b\u0438 \u043f\u0440\u043e\u0432\u0435\u043b\u0438 \u043b\u0435\u0447\u0435\u043d\u0438\u0435 \u0431\u043e\u043b\u0435\u0435 \u0447\u0435\u043c \u0434\u0432\u0443\u043c\u044f \u0441\u043f\u043e\u0441\u043e\u0431\u0430\u043c\u0438? \u0423\u043a\u0430\u0436\u0438\u0442\u0435 \u0435\u0433\u043e \u0438\u043b\u0438 \u0435\u0435 id, \u0444\u0430\u043c\u0438\u043b\u0438\u044e \u0438 \u043c\u043e\u0431\u0438\u043b\u044c\u043d\u044b\u0439 \u0442\u0435\u043b\u0435\u0444\u043e\u043d."}, "question": "Which professionals live in the state of Indiana or have done treatment on more than 2 treatments? List his or her id, last name and cell phone.", "kb_id": "dog_kennels"}, {"id": "D_0924", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 6]], "conds": []}, "select": [false, [[0, [0, [0, 33, false], null]], [0, [0, [0, 40, false], null]], [0, [0, [0, 43, false], null]]]], "where": [[false, 2, [0, [0, 38, false], null], "\"Indiana\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": {"from": {"table_units": [["table_unit", 6], ["table_unit", 7]], "conds": [[false, 2, [0, [0, 33, false], null], [0, 46, false], null]]}, "select": [false, [[0, [0, [0, 33, false], null]], [0, [0, [0, 40, false], null]], [0, [0, [0, 43, false], null]]]], "where": [], "groupBy": [[0, 33, false]], "having": [[false, 3, [0, [3, 0, false], null], 2.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "except": null}, "ru": {"from": {"table_units": [["table_unit", 6]], "conds": []}, "select": [false, [[0, [0, [0, 33, false], null]], [0, [0, [0, 40, false], null]], [0, [0, [0, 43, false], null]]]], "where": [[false, 2, [0, [0, 38, false], null], "\"Indiana\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": {"from": {"table_units": [["table_unit", 6], ["table_unit", 7]], "conds": [[false, 2, [0, [0, 33, false], null], [0, 46, false], null]]}, "select": [false, [[0, [0, [0, 33, false], null]], [0, [0, [0, 40, false], null]], [0, [0, [0, 43, false], null]]]], "where": [], "groupBy": [[0, 33, false]], "having": [[false, 3, [0, [3, 0, false], null], 2.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "except": null}}, "question_toks": {"en": ["Find", "the", "id", ",", "last", "name", "and", "cell", "phone", "of", "the", "professionals", "who", "live", "in", "the", "state", "of", "Indiana", "or", "have", "performed", "more", "than", "two", "treatments", "."], "ru": ["\u041d\u0430\u0439\u0434\u0438\u0442\u0435", "id", ",", "\u0444\u0430\u043c\u0438\u043b\u0438\u0438", "\u0438", "\u0441\u043e\u0442\u043e\u0432\u044b\u0435", "\u0442\u0435\u043b\u0435\u0444\u043e\u043d\u044b", "\u0441\u043f\u0435\u0446\u0438\u0430\u043b\u0438\u0441\u0442\u043e\u0432", ",", "\u043a\u043e\u0442\u043e\u0440\u044b\u0435", "\u0436\u0438\u0432\u0443\u0442", "\u0432", "\u0448\u0442\u0430\u0442\u0435", "\u0418\u043d\u0434\u0438\u0430\u043d\u0430", "\u0438\u043b\u0438", "\u043f\u0440\u043e\u0432\u0435\u043b\u0438", "\u0431\u043e\u043b\u0435\u0435", "\u0434\u0432\u0443\u0445", "\u043f\u0440\u043e\u0446\u0435\u0434\u0443\u0440", "."]}, "query_toks": {"en": ["select", "professional_id", ",", "last_name", ",", "cell_number", "from", "professionals", "where", "state", "=", "\"Indiana\"", "union", "select", "t1.professional_id", ",", "t1.last_name", ",", "t1.cell_number", "from", "professionals", "as", "t1", "join", "treatments", "as", "t2", "on", "t1.professional_id", "=", "t2.professional_id", "group", "by", "t1.professional_id", "having", "count", "(", "*", ")", ">", "2", ";"], "ru": ["select", "professional_id", ",", "last_name", ",", "cell_number", "from", "professionals", "where", "state", "=", "\"Indiana\"", "union", "select", "t1.professional_id", ",", "t1.last_name", ",", "t1.cell_number", "from", "professionals", "as", "t1", "join", "treatments", "as", "t2", "on", "t1.professional_id", "=", "t2.professional_id", "group", "by", "t1.professional_id", "having", "count", "(", "*", ")", ">", "2", ";"]}, "query_toks_no_values": {"en": ["select", "professional_id", ",", "last_name", ",", "cell_number", "from", "professionals", "where", "state", "=", "value", "union", "select", "t1.professional_id", ",", "t1.last_name", ",", "t1.cell_number", "from", "professionals", "as", "t1", "join", "treatments", "as", "t2", "on", "t1.professional_id", "=", "t2.professional_id", "group", "by", "t1.professional_id", "having", "count", "(", "*", ")", ">", "2", ";"], "ru": ["select", "professional_id", ",", "last_name", ",", "cell_number", "from", "professionals", "where", "state", "=", "value", "union", "select", "t1.professional_id", ",", "t1.last_name", ",", "t1.cell_number", "from", "professionals", "as", "t1", "join", "treatments", "as", "t2", "on", "t1.professional_id", "=", "t2.professional_id", "group", "by", "t1.professional_id", "having", "count", "(", "*", ")", ">", "2", ";"]}, "masked_query": "SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2;", "question_pauq": {"ru": "\u041d\u0430\u0439\u0434\u0438\u0442\u0435 id, \u0444\u0430\u043c\u0438\u043b\u0438\u0438 \u0438 \u0441\u043e\u0442\u043e\u0432\u044b\u0435 \u0442\u0435\u043b\u0435\u0444\u043e\u043d\u044b \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u0438\u0441\u0442\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0436\u0438\u0432\u0443\u0442 \u0432 \u0448\u0442\u0430\u0442\u0435 \u0418\u043d\u0434\u0438\u0430\u043d\u0430 \u0438\u043b\u0438 \u043f\u0440\u043e\u0432\u0435\u043b\u0438 \u0431\u043e\u043b\u0435\u0435 \u0434\u0432\u0443\u0445 \u043f\u0440\u043e\u0446\u0435\u0434\u0443\u0440."}, "question": "Find the id, last name and cell phone of the professionals who live in the state of Indiana or have performed more than two treatments.", "kb_id": "dog_kennels"}, {"id": "D_0925", "source": "spider-dev", "type": "dev", "query": {"ru": "select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  >  1000 );"}, "sql": {"en": {"from": {"table_units": [["table_unit", 5]], "conds": []}, "select": [false, [[0, [0, [0, 25, false], null]]]], "where": [[true, 8, [0, [0, 20, false], null], {"from": {"table_units": [["table_unit", 7]], "conds": []}, "select": [false, [[0, [0, [0, 45, false], null]]]], "where": [], "groupBy": [[0, 45, false]], "having": [[false, 3, [0, [4, 49, false], null], 1000.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 5]], "conds": []}, "select": [false, [[0, [0, [0, 25, false], null]]]], "where": [[true, 8, [0, [0, 20, false], null], {"from": {"table_units": [["table_unit", 7]], "conds": []}, "select": [false, [[0, [0, [0, 45, false], null]]]], "where": [], "groupBy": [[0, 45, false]], "having": [[false, 3, [0, [4, 49, false], null], 1000.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Which", "dogs", "have", "not", "cost", "their", "owner", "more", "than", "1000", "for", "treatment", "?", "List", "the", "dog", "names", "."], "ru": ["\u041b\u0435\u0447\u0435\u043d\u0438\u0435", "\u043a\u0430\u043a\u0438\u0445", "\u0441\u043e\u0431\u0430\u043a", "\u043d\u0435", "\u043e\u0431\u043e\u0448\u043b\u043e\u0441\u044c", "\u0441\u0432\u043e\u0438\u043c", "\u0445\u043e\u0437\u044f\u0435\u0432\u0430\u043c", "\u0434\u043e\u0440\u043e\u0436\u0435", "1000", "?", "\u0423\u043a\u0430\u0436\u0438", "\u043a\u043b\u0438\u0447\u043a\u0438", "\u0441\u043e\u0431\u0430\u043a", "."]}, "query_toks": {"en": ["select", "name", "from", "dogs", "where", "dog_id", "not", "in", "(", "select", "dog_id", "from", "treatments", "group", "by", "dog_id", "having", "sum", "(", "cost_of_treatment", ")", ">", "1000", ")", ";"], "ru": ["select", "name", "from", "dogs", "where", "dog_id", "not", "in", "(", "select", "dog_id", "from", "treatments", "group", "by", "dog_id", "having", "sum", "(", "cost_of_treatment", ")", ">", "1000", ")", ";"]}, "query_toks_no_values": {"en": ["select", "name", "from", "dogs", "where", "dog_id", "not", "in", "(", "select", "dog_id", "from", "treatments", "group", "by", "dog_id", "having", "sum", "(", "cost_of_treatment", ")", ">", "1000", ")", ";"], "ru": ["select", "name", "from", "dogs", "where", "dog_id", "not", "in", "(", "select", "dog_id", "from", "treatments", "group", "by", "dog_id", "having", "sum", "(", "cost_of_treatment", ")", ">", "1000", ")", ";"]}, "masked_query": "select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  >  1000 );", "question_pauq": {"ru": "\u041b\u0435\u0447\u0435\u043d\u0438\u0435 \u043a\u0430\u043a\u0438\u0445 \u0441\u043e\u0431\u0430\u043a \u043d\u0435 \u043e\u0431\u043e\u0448\u043b\u043e\u0441\u044c \u0441\u0432\u043e\u0438\u043c \u0445\u043e\u0437\u044f\u0435\u0432\u0430\u043c \u0434\u043e\u0440\u043e\u0436\u0435 1000? \u0423\u043a\u0430\u0436\u0438 \u043a\u043b\u0438\u0447\u043a\u0438 \u0441\u043e\u0431\u0430\u043a."}, "question": "Which dogs have not cost their owner more than 1000 for treatment ? List the dog names .", "kb_id": "dog_kennels"}, {"id": "D_0926", "source": "spider-dev", "type": "dev", "query": {"ru": "select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  >  1000 );"}, "sql": {"en": {"from": {"table_units": [["table_unit", 5]], "conds": []}, "select": [false, [[0, [0, [0, 25, false], null]]]], "where": [[true, 8, [0, [0, 20, false], null], {"from": {"table_units": [["table_unit", 7]], "conds": []}, "select": [false, [[0, [0, [0, 45, false], null]]]], "where": [], "groupBy": [[0, 45, false]], "having": [[false, 3, [0, [4, 49, false], null], 1000.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 5]], "conds": []}, "select": [false, [[0, [0, [0, 25, false], null]]]], "where": [[true, 8, [0, [0, 20, false], null], {"from": {"table_units": [["table_unit", 7]], "conds": []}, "select": [false, [[0, [0, [0, 45, false], null]]]], "where": [], "groupBy": [[0, 45, false]], "having": [[false, 3, [0, [4, 49, false], null], 1000.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "the", "names", "of", "the", "dogs", "for", "which", "the", "owner", "has", "not", "spend", "more", "than", "1000", "for", "treatment", "?"], "ru": ["\u041a\u0430\u043a", "\u0437\u043e\u0432\u0443\u0442", "\u0441\u043e\u0431\u0430\u043a", ",", "\u043d\u0430", "\u043b\u0435\u0447\u0435\u043d\u0438\u0435", "\u043a\u043e\u0442\u043e\u0440\u044b\u0445", "\u0438\u0445", "\u0445\u043e\u0437\u044f\u0438\u043d", "\u043d\u0435", "\u043f\u043e\u0442\u0440\u0430\u0442\u0438\u043b", "\u0431\u043e\u043b\u0435\u0435", "1000", "?"]}, "query_toks": {"en": ["select", "name", "from", "dogs", "where", "dog_id", "not", "in", "(", "select", "dog_id", "from", "treatments", "group", "by", "dog_id", "having", "sum", "(", "cost_of_treatment", ")", ">", "1000", ")", ";"], "ru": ["select", "name", "from", "dogs", "where", "dog_id", "not", "in", "(", "select", "dog_id", "from", "treatments", "group", "by", "dog_id", "having", "sum", "(", "cost_of_treatment", ")", ">", "1000", ")", ";"]}, "query_toks_no_values": {"en": ["select", "name", "from", "dogs", "where", "dog_id", "not", "in", "(", "select", "dog_id", "from", "treatments", "group", "by", "dog_id", "having", "sum", "(", "cost_of_treatment", ")", ">", "1000", ")", ";"], "ru": ["select", "name", "from", "dogs", "where", "dog_id", "not", "in", "(", "select", "dog_id", "from", "treatments", "group", "by", "dog_id", "having", "sum", "(", "cost_of_treatment", ")", ">", "1000", ")", ";"]}, "masked_query": "select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  >  1000 );", "question_pauq": {"ru": "\u041a\u0430\u043a \u0437\u043e\u0432\u0443\u0442 \u0441\u043e\u0431\u0430\u043a, \u043d\u0430 \u043b\u0435\u0447\u0435\u043d\u0438\u0435 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0438\u0445 \u0445\u043e\u0437\u044f\u0438\u043d \u043d\u0435 \u043f\u043e\u0442\u0440\u0430\u0442\u0438\u043b \u0431\u043e\u043b\u0435\u0435 1000?"}, "question": "What are the names of the dogs for which the owner has not spend more than 1000 for treatment ?", "kb_id": "dog_kennels"}, {"id": "D_0927", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 6]], "conds": []}, "select": [false, [[0, [0, [0, 35, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": {"from": {"table_units": [["table_unit", 4]], "conds": []}, "select": [false, [[0, [0, [0, 11, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": {"from": {"table_units": [["table_unit", 5]], "conds": []}, "select": [false, [[0, [0, [0, 25, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "except": null}, "ru": {"from": {"table_units": [["table_unit", 6]], "conds": []}, "select": [false, [[0, [0, [0, 35, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": {"from": {"table_units": [["table_unit", 4]], "conds": []}, "select": [false, [[0, [0, [0, 11, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": {"from": {"table_units": [["table_unit", 5]], "conds": []}, "select": [false, [[0, [0, [0, 25, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "except": null}}, "question_toks": {"en": ["Which", "first", "names", "are", "used", "for", "professionals", "or", "owners", "but", "are", "not", "used", "as", "dog", "names", "?"], "ru": ["\u041a\u0430\u043a\u0438\u0435", "\u0438\u043c\u0435\u043d\u0430", "\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f", "\u0434\u043b\u044f", "\u0441\u043f\u0435\u0446\u0438\u0430\u043b\u0438\u0441\u0442\u043e\u0432", "\u0438\u043b\u0438", "\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432", ",", "\u043d\u043e", "\u043d\u0435", "\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f", "\u0432", "\u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435", "\u0438\u043c\u0435\u043d", "\u0441\u043e\u0431\u0430\u043a", "?"]}, "query_toks": {"en": ["select", "first_name", "from", "professionals", "union", "select", "first_name", "from", "owners", "except", "select", "name", "from", "dogs", ";"], "ru": ["select", "first_name", "from", "professionals", "union", "select", "first_name", "from", "owners", "except", "select", "name", "from", "dogs", ";"]}, "query_toks_no_values": {"en": ["select", "first_name", "from", "professionals", "union", "select", "first_name", "from", "owners", "except", "select", "name", "from", "dogs", ";"], "ru": ["select", "first_name", "from", "professionals", "union", "select", "first_name", "from", "owners", "except", "select", "name", "from", "dogs", ";"]}, "masked_query": "SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs;", "question_pauq": {"ru": "\u041a\u0430\u043a\u0438\u0435 \u0438\u043c\u0435\u043d\u0430 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f \u0434\u043b\u044f \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u0438\u0441\u0442\u043e\u0432 \u0438\u043b\u0438 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432, \u043d\u043e \u043d\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0438\u043c\u0435\u043d \u0441\u043e\u0431\u0430\u043a?"}, "question": "Which first names are used for professionals or owners but are not used as dog names?", "kb_id": "dog_kennels"}, {"id": "D_0928", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 6]], "conds": []}, "select": [false, [[0, [0, [0, 35, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": {"from": {"table_units": [["table_unit", 4]], "conds": []}, "select": [false, [[0, [0, [0, 11, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": {"from": {"table_units": [["table_unit", 5]], "conds": []}, "select": [false, [[0, [0, [0, 25, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "except": null}, "ru": {"from": {"table_units": [["table_unit", 6]], "conds": []}, "select": [false, [[0, [0, [0, 35, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": {"from": {"table_units": [["table_unit", 4]], "conds": []}, "select": [false, [[0, [0, [0, 11, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": {"from": {"table_units": [["table_unit", 5]], "conds": []}, "select": [false, [[0, [0, [0, 25, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "except": null}}, "question_toks": {"en": ["Find", "the", "first", "names", "that", "are", "used", "for", "professionals", "or", "owners", "but", "are", "not", "used", "as", "dog", "names", "."], "ru": ["\u041d\u0430\u0439\u0434\u0438\u0442\u0435", "\u0438\u043c\u0435\u043d\u0430", ",", "\u043a\u043e\u0442\u043e\u0440\u044b\u0435", "\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f", "\u0434\u043b\u044f", "\u0441\u043f\u0435\u0446\u0438\u0430\u043b\u0438\u0441\u0442\u043e\u0432", "\u0438\u043b\u0438", "\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432", ",", "\u043d\u043e", "\u043d\u0435", "\u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f", "\u0432", "\u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435", "\u0438\u043c\u0435\u043d", "\u0441\u043e\u0431\u0430\u043a", "."]}, "query_toks": {"en": ["select", "first_name", "from", "professionals", "union", "select", "first_name", "from", "owners", "except", "select", "name", "from", "dogs", ";"], "ru": ["select", "first_name", "from", "professionals", "union", "select", "first_name", "from", "owners", "except", "select", "name", "from", "dogs", ";"]}, "query_toks_no_values": {"en": ["select", "first_name", "from", "professionals", "union", "select", "first_name", "from", "owners", "except", "select", "name", "from", "dogs", ";"], "ru": ["select", "first_name", "from", "professionals", "union", "select", "first_name", "from", "owners", "except", "select", "name", "from", "dogs", ";"]}, "masked_query": "SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs;", "question_pauq": {"ru": "\u041d\u0430\u0439\u0434\u0438\u0442\u0435 \u0438\u043c\u0435\u043d\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f \u0434\u043b\u044f \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u0438\u0441\u0442\u043e\u0432 \u0438\u043b\u0438 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432, \u043d\u043e \u043d\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0438\u043c\u0435\u043d \u0441\u043e\u0431\u0430\u043a."}, "question": "Find the first names that are used for professionals or owners but are not used as dog names.", "kb_id": "dog_kennels"}, {"id": "D_0929", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 6]], "conds": []}, "select": [false, [[0, [0, [0, 33, false], null]], [0, [0, [0, 34, false], null]], [0, [0, [0, 41, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": {"from": {"table_units": [["table_unit", 6], ["table_unit", 7]], "conds": [[false, 2, [0, [0, 33, false], null], [0, 46, false], null]]}, "select": [false, [[0, [0, [0, 33, false], null]], [0, [0, [0, 34, false], null]], [0, [0, [0, 41, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "ru": {"from": {"table_units": [["table_unit", 6]], "conds": []}, "select": [false, [[0, [0, [0, 33, false], null]], [0, [0, [0, 34, false], null]], [0, [0, [0, 41, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": {"from": {"table_units": [["table_unit", 6], ["table_unit", 7]], "conds": [[false, 2, [0, [0, 33, false], null], [0, 46, false], null]]}, "select": [false, [[0, [0, [0, 33, false], null]], [0, [0, [0, 34, false], null]], [0, [0, [0, 41, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}}, "question_toks": {"en": ["Which", "professional", "did", "not", "operate", "any", "treatment", "on", "dogs", "?", "List", "the", "professional", "'s", "id", ",", "role", "and", "email", "."], "ru": ["\u041a\u0442\u043e", "\u0438\u0437", "\u0441\u043f\u0435\u0446\u0438\u0430\u043b\u0438\u0441\u0442\u043e\u0432", "\u043d\u0435", "\u043f\u0440\u043e\u0432\u043e\u0434\u0438\u043b", "\u043b\u0435\u0447\u0435\u043d\u0438\u0435", "\u0441\u043e\u0431\u0430\u043a\u0430\u043c", "?", "\u041f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0438\u0442\u0435", "id", ",", "\u0434\u043e\u043b\u0436\u043d\u043e\u0441\u0442\u044c", "\u0438", "\u0430\u0434\u0440\u0435\u0441", "\u044d\u043b\u0435\u043a\u0442\u0440\u043e\u043d\u043d\u043e\u0439", "\u043f\u043e\u0447\u0442\u044b", "\u0441\u043f\u0435\u0446\u0438\u0430\u043b\u0438\u0441\u0442\u0430", "."]}, "query_toks": {"en": ["select", "professional_id", ",", "role_code", ",", "email_address", "from", "professionals", "except", "select", "t1.professional_id", ",", "t1.role_code", ",", "t1.email_address", "from", "professionals", "as", "t1", "join", "treatments", "as", "t2", "on", "t1.professional_id", "=", "t2.professional_id", ";"], "ru": ["select", "professional_id", ",", "role_code", ",", "email_address", "from", "professionals", "except", "select", "t1.professional_id", ",", "t1.role_code", ",", "t1.email_address", "from", "professionals", "as", "t1", "join", "treatments", "as", "t2", "on", "t1.professional_id", "=", "t2.professional_id", ";"]}, "query_toks_no_values": {"en": ["select", "professional_id", ",", "role_code", ",", "email_address", "from", "professionals", "except", "select", "t1.professional_id", ",", "t1.role_code", ",", "t1.email_address", "from", "professionals", "as", "t1", "join", "treatments", "as", "t2", "on", "t1.professional_id", "=", "t2.professional_id", ";"], "ru": ["select", "professional_id", ",", "role_code", ",", "email_address", "from", "professionals", "except", "select", "t1.professional_id", ",", "t1.role_code", ",", "t1.email_address", "from", "professionals", "as", "t1", "join", "treatments", "as", "t2", "on", "t1.professional_id", "=", "t2.professional_id", ";"]}, "masked_query": "SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id;", "question_pauq": {"ru": "\u041a\u0442\u043e \u0438\u0437 \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u0438\u0441\u0442\u043e\u0432 \u043d\u0435 \u043f\u0440\u043e\u0432\u043e\u0434\u0438\u043b \u043b\u0435\u0447\u0435\u043d\u0438\u0435 \u0441\u043e\u0431\u0430\u043a\u0430\u043c? \u041f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0438\u0442\u0435 id, \u0434\u043e\u043b\u0436\u043d\u043e\u0441\u0442\u044c \u0438 \u0430\u0434\u0440\u0435\u0441 \u044d\u043b\u0435\u043a\u0442\u0440\u043e\u043d\u043d\u043e\u0439 \u043f\u043e\u0447\u0442\u044b \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u0438\u0441\u0442\u0430."}, "question": "Which professional did not operate any treatment on dogs? List the professional's id, role and email.", "kb_id": "dog_kennels"}, {"id": "D_0930", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 6]], "conds": []}, "select": [false, [[0, [0, [0, 33, false], null]], [0, [0, [0, 34, false], null]], [0, [0, [0, 41, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": {"from": {"table_units": [["table_unit", 6], ["table_unit", 7]], "conds": [[false, 2, [0, [0, 33, false], null], [0, 46, false], null]]}, "select": [false, [[0, [0, [0, 33, false], null]], [0, [0, [0, 34, false], null]], [0, [0, [0, 41, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "ru": {"from": {"table_units": [["table_unit", 6]], "conds": []}, "select": [false, [[0, [0, [0, 33, false], null]], [0, [0, [0, 34, false], null]], [0, [0, [0, 41, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": {"from": {"table_units": [["table_unit", 6], ["table_unit", 7]], "conds": [[false, 2, [0, [0, 33, false], null], [0, 46, false], null]]}, "select": [false, [[0, [0, [0, 33, false], null]], [0, [0, [0, 34, false], null]], [0, [0, [0, 41, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}}, "question_toks": {"en": ["Give", "me", "the", "id", ",", "role", "and", "email", "of", "the", "professionals", "who", "did", "not", "perform", "any", "treatment", "on", "dogs", "."], "ru": ["\u041f\u043e\u043a\u0430\u0436\u0438", "id", ",", "\u0434\u043e\u043b\u0436\u043d\u043e\u0441\u0442\u044c", "\u0438", "\u0430\u0434\u0440\u0435\u0441", "\u044d\u043b\u0435\u043a\u0442\u0440\u043e\u043d\u043d\u043e\u0439", "\u043f\u043e\u0447\u0442\u044b", "\u043f\u0440\u043e\u0444\u0435\u0441\u0441\u0438\u043e\u043d\u0430\u043b\u043e\u0432", ",", "\u043a\u043e\u0442\u043e\u0440\u044b\u0435", "\u043d\u0435", "\u043b\u0435\u0447\u0438\u043b\u0438", "\u0441\u043e\u0431\u0430\u043a", "."]}, "query_toks": {"en": ["select", "professional_id", ",", "role_code", ",", "email_address", "from", "professionals", "except", "select", "t1.professional_id", ",", "t1.role_code", ",", "t1.email_address", "from", "professionals", "as", "t1", "join", "treatments", "as", "t2", "on", "t1.professional_id", "=", "t2.professional_id", ";"], "ru": ["select", "professional_id", ",", "role_code", ",", "email_address", "from", "professionals", "except", "select", "t1.professional_id", ",", "t1.role_code", ",", "t1.email_address", "from", "professionals", "as", "t1", "join", "treatments", "as", "t2", "on", "t1.professional_id", "=", "t2.professional_id", ";"]}, "query_toks_no_values": {"en": ["select", "professional_id", ",", "role_code", ",", "email_address", "from", "professionals", "except", "select", "t1.professional_id", ",", "t1.role_code", ",", "t1.email_address", "from", "professionals", "as", "t1", "join", "treatments", "as", "t2", "on", "t1.professional_id", "=", "t2.professional_id", ";"], "ru": ["select", "professional_id", ",", "role_code", ",", "email_address", "from", "professionals", "except", "select", "t1.professional_id", ",", "t1.role_code", ",", "t1.email_address", "from", "professionals", "as", "t1", "join", "treatments", "as", "t2", "on", "t1.professional_id", "=", "t2.professional_id", ";"]}, "masked_query": "SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id;", "question_pauq": {"ru": "\u041f\u043e\u043a\u0430\u0436\u0438 id, \u0434\u043e\u043b\u0436\u043d\u043e\u0441\u0442\u044c \u0438 \u0430\u0434\u0440\u0435\u0441 \u044d\u043b\u0435\u043a\u0442\u0440\u043e\u043d\u043d\u043e\u0439 \u043f\u043e\u0447\u0442\u044b \u043f\u0440\u043e\u0444\u0435\u0441\u0441\u0438\u043e\u043d\u0430\u043b\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0435 \u043b\u0435\u0447\u0438\u043b\u0438 \u0441\u043e\u0431\u0430\u043a."}, "question": "Give me the id, role and email of the professionals who did not perform any treatment on dogs.", "kb_id": "dog_kennels"}, {"id": "D_0931", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 5], ["table_unit", 4]], "conds": [[false, 2, [0, [0, 21, false], null], [0, 10, false], null]]}, "select": [false, [[0, [0, [0, 21, false], null]], [0, [0, [0, 11, false], null]], [0, [0, [0, 12, false], null]]]], "where": [], "groupBy": [[0, 21, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 5], ["table_unit", 4]], "conds": [[false, 2, [0, [0, 21, false], null], [0, 10, false], null]]}, "select": [false, [[0, [0, [0, 21, false], null]], [0, [0, [0, 11, false], null]], [0, [0, [0, 12, false], null]]]], "where": [], "groupBy": [[0, 21, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Which", "owner", "owns", "the", "most", "dogs", "?", "List", "the", "owner", "id", ",", "first", "name", "and", "last", "name", "."], "ru": ["\u0423", "\u043a\u0430\u043a\u043e\u0433\u043e", "\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430", "\u0431\u043e\u043b\u044c\u0448\u0435", "\u0432\u0441\u0435\u0433\u043e", "\u0441\u043e\u0431\u0430\u043a", "?", "\u0423\u043a\u0430\u0436\u0438\u0442\u0435", "id", "\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430", ",", "\u0438\u043c\u044f", "\u0438", "\u0444\u0430\u043c\u0438\u043b\u0438\u044e", "."]}, "query_toks": {"en": ["select", "t1.owner_id", ",", "t2.first_name", ",", "t2.last_name", "from", "dogs", "as", "t1", "join", "owners", "as", "t2", "on", "t1.owner_id", "=", "t2.owner_id", "group", "by", "t1.owner_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"], "ru": ["select", "t1.owner_id", ",", "t2.first_name", ",", "t2.last_name", "from", "dogs", "as", "t1", "join", "owners", "as", "t2", "on", "t1.owner_id", "=", "t2.owner_id", "group", "by", "t1.owner_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"]}, "query_toks_no_values": {"en": ["select", "t1.owner_id", ",", "t2.first_name", ",", "t2.last_name", "from", "dogs", "as", "t1", "join", "owners", "as", "t2", "on", "t1.owner_id", "=", "t2.owner_id", "group", "by", "t1.owner_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"], "ru": ["select", "t1.owner_id", ",", "t2.first_name", ",", "t2.last_name", "from", "dogs", "as", "t1", "join", "owners", "as", "t2", "on", "t1.owner_id", "=", "t2.owner_id", "group", "by", "t1.owner_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"]}, "masked_query": "SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1;", "question_pauq": {"ru": "\u0423 \u043a\u0430\u043a\u043e\u0433\u043e \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430 \u0431\u043e\u043b\u044c\u0448\u0435 \u0432\u0441\u0435\u0433\u043e \u0441\u043e\u0431\u0430\u043a? \u0423\u043a\u0430\u0436\u0438\u0442\u0435 id \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430, \u0438\u043c\u044f \u0438 \u0444\u0430\u043c\u0438\u043b\u0438\u044e."}, "question": "Which owner owns the most dogs? List the owner id, first name and last name.", "kb_id": "dog_kennels"}, {"id": "D_0932", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 5], ["table_unit", 4]], "conds": [[false, 2, [0, [0, 21, false], null], [0, 10, false], null]]}, "select": [false, [[0, [0, [0, 21, false], null]], [0, [0, [0, 11, false], null]], [0, [0, [0, 12, false], null]]]], "where": [], "groupBy": [[0, 21, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 5], ["table_unit", 4]], "conds": [[false, 2, [0, [0, 21, false], null], [0, 10, false], null]]}, "select": [false, [[0, [0, [0, 21, false], null]], [0, [0, [0, 11, false], null]], [0, [0, [0, 12, false], null]]]], "where": [], "groupBy": [[0, 21, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Return", "the", "owner", "id", ",", "first", "name", "and", "last", "name", "of", "the", "owner", "who", "has", "the", "most", "dogs", "."], "ru": ["\u0423\u043a\u0430\u0437\u0430\u0442\u044c", "id", ",", "\u0438\u043c\u044f", "\u0438", "\u0444\u0430\u043c\u0438\u043b\u0438\u044e", "\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430", ",", "\u0443", "\u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e", "\u0431\u043e\u043b\u044c\u0448\u0435", "\u0432\u0441\u0435\u0433\u043e", "\u0441\u043e\u0431\u0430\u043a", "."]}, "query_toks": {"en": ["select", "t1.owner_id", ",", "t2.first_name", ",", "t2.last_name", "from", "dogs", "as", "t1", "join", "owners", "as", "t2", "on", "t1.owner_id", "=", "t2.owner_id", "group", "by", "t1.owner_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"], "ru": ["select", "t1.owner_id", ",", "t2.first_name", ",", "t2.last_name", "from", "dogs", "as", "t1", "join", "owners", "as", "t2", "on", "t1.owner_id", "=", "t2.owner_id", "group", "by", "t1.owner_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"]}, "query_toks_no_values": {"en": ["select", "t1.owner_id", ",", "t2.first_name", ",", "t2.last_name", "from", "dogs", "as", "t1", "join", "owners", "as", "t2", "on", "t1.owner_id", "=", "t2.owner_id", "group", "by", "t1.owner_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"], "ru": ["select", "t1.owner_id", ",", "t2.first_name", ",", "t2.last_name", "from", "dogs", "as", "t1", "join", "owners", "as", "t2", "on", "t1.owner_id", "=", "t2.owner_id", "group", "by", "t1.owner_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"]}, "masked_query": "SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1;", "question_pauq": {"ru": "\u0423\u043a\u0430\u0437\u0430\u0442\u044c id, \u0438\u043c\u044f \u0438 \u0444\u0430\u043c\u0438\u043b\u0438\u044e \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430, \u0443 \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u0431\u043e\u043b\u044c\u0448\u0435 \u0432\u0441\u0435\u0433\u043e \u0441\u043e\u0431\u0430\u043a."}, "question": "Return the owner id, first name and last name of the owner who has the most dogs.", "kb_id": "dog_kennels"}, {"id": "D_0933", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 6], ["table_unit", 7]], "conds": [[false, 2, [0, [0, 33, false], null], [0, 46, false], null]]}, "select": [false, [[0, [0, [0, 33, false], null]], [0, [0, [0, 34, false], null]], [0, [0, [0, 35, false], null]]]], "where": [], "groupBy": [[0, 33, false]], "having": [[false, 5, [0, [3, 0, false], null], 2.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 6], ["table_unit", 7]], "conds": [[false, 2, [0, [0, 33, false], null], [0, 46, false], null]]}, "select": [false, [[0, [0, [0, 33, false], null]], [0, [0, [0, 34, false], null]], [0, [0, [0, 35, false], null]]]], "where": [], "groupBy": [[0, 33, false]], "having": [[false, 5, [0, [3, 0, false], null], 2.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Which", "professionals", "have", "done", "at", "least", "two", "treatments", "?", "List", "the", "professional", "'s", "id", ",", "role", ",", "and", "first", "name", "."], "ru": ["\u041a\u0430\u043a\u0438\u0435", "\u0441\u043f\u0435\u0446\u0438\u0430\u043b\u0438\u0441\u0442\u044b", "\u043f\u0440\u043e\u0432\u0435\u043b\u0438", "\u043a\u0430\u043a", "\u043c\u0438\u043d\u0438\u043c\u0443\u043c", "\u0434\u0432\u0435", "\u043f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b", "?", "\u041f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0438\u0442\u0435", "id", ",", "\u0434\u043e\u043b\u0436\u043d\u043e\u0441\u0442\u044c", "\u0438", "\u0438\u043c\u044f", "\u0441\u043f\u0435\u0446\u0438\u0430\u043b\u0438\u0441\u0442\u0430", "."]}, "query_toks": {"en": ["select", "t1.professional_id", ",", "t1.role_code", ",", "t1.first_name", "from", "professionals", "as", "t1", "join", "treatments", "as", "t2", "on", "t1.professional_id", "=", "t2.professional_id", "group", "by", "t1.professional_id", "having", "count", "(", "*", ")", ">=", "2", ";"], "ru": ["select", "t1.professional_id", ",", "t1.role_code", ",", "t1.first_name", "from", "professionals", "as", "t1", "join", "treatments", "as", "t2", "on", "t1.professional_id", "=", "t2.professional_id", "group", "by", "t1.professional_id", "having", "count", "(", "*", ")", ">=", "2", ";"]}, "query_toks_no_values": {"en": ["select", "t1.professional_id", ",", "t1.role_code", ",", "t1.first_name", "from", "professionals", "as", "t1", "join", "treatments", "as", "t2", "on", "t1.professional_id", "=", "t2.professional_id", "group", "by", "t1.professional_id", "having", "count", "(", "*", ")", ">=", "2", ";"], "ru": ["select", "t1.professional_id", ",", "t1.role_code", ",", "t1.first_name", "from", "professionals", "as", "t1", "join", "treatments", "as", "t2", "on", "t1.professional_id", "=", "t2.professional_id", "group", "by", "t1.professional_id", "having", "count", "(", "*", ")", ">=", "2", ";"]}, "masked_query": "SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2;", "question_pauq": {"ru": "\u041a\u0430\u043a\u0438\u0435 \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u0438\u0441\u0442\u044b \u043f\u0440\u043e\u0432\u0435\u043b\u0438 \u043a\u0430\u043a \u043c\u0438\u043d\u0438\u043c\u0443\u043c \u0434\u0432\u0435 \u043f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u044b? \u041f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0438\u0442\u0435 id, \u0434\u043e\u043b\u0436\u043d\u043e\u0441\u0442\u044c \u0438 \u0438\u043c\u044f \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u0438\u0441\u0442\u0430."}, "question": "Which professionals have done at least two treatments? List the professional's id, role, and first name.", "kb_id": "dog_kennels"}, {"id": "D_0934", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 6], ["table_unit", 7]], "conds": [[false, 2, [0, [0, 33, false], null], [0, 46, false], null]]}, "select": [false, [[0, [0, [0, 33, false], null]], [0, [0, [0, 34, false], null]], [0, [0, [0, 35, false], null]]]], "where": [], "groupBy": [[0, 33, false]], "having": [[false, 5, [0, [3, 0, false], null], 2.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 6], ["table_unit", 7]], "conds": [[false, 2, [0, [0, 33, false], null], [0, 46, false], null]]}, "select": [false, [[0, [0, [0, 33, false], null]], [0, [0, [0, 34, false], null]], [0, [0, [0, 35, false], null]]]], "where": [], "groupBy": [[0, 33, false]], "having": [[false, 5, [0, [3, 0, false], null], 2.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "the", "id", ",", "role", ",", "and", "first", "name", "of", "the", "professionals", "who", "have", "performed", "two", "or", "more", "treatments", "?"], "ru": ["\u041a\u0430\u043a\u043e\u0432\u044b", "id", ",", "\u0440\u043e\u043b\u0438", "\u0438", "\u0438\u043c\u0435\u043d\u0430", "\u0441\u043f\u0435\u0446\u0438\u0430\u043b\u0438\u0441\u0442\u043e\u0432", ",", "\u043a\u043e\u0442\u043e\u0440\u044b\u0435", "\u043f\u0440\u043e\u0432\u0435\u043b\u0438", "\u0434\u0432\u0430", "\u0438\u043b\u0438", "\u0431\u043e\u043b\u0435\u0435", "\u043a\u0443\u0440\u0441\u0430", "\u043b\u0435\u0447\u0435\u043d\u0438\u044f", "?"]}, "query_toks": {"en": ["select", "t1.professional_id", ",", "t1.role_code", ",", "t1.first_name", "from", "professionals", "as", "t1", "join", "treatments", "as", "t2", "on", "t1.professional_id", "=", "t2.professional_id", "group", "by", "t1.professional_id", "having", "count", "(", "*", ")", ">=", "2", ";"], "ru": ["select", "t1.professional_id", ",", "t1.role_code", ",", "t1.first_name", "from", "professionals", "as", "t1", "join", "treatments", "as", "t2", "on", "t1.professional_id", "=", "t2.professional_id", "group", "by", "t1.professional_id", "having", "count", "(", "*", ")", ">=", "2", ";"]}, "query_toks_no_values": {"en": ["select", "t1.professional_id", ",", "t1.role_code", ",", "t1.first_name", "from", "professionals", "as", "t1", "join", "treatments", "as", "t2", "on", "t1.professional_id", "=", "t2.professional_id", "group", "by", "t1.professional_id", "having", "count", "(", "*", ")", ">=", "2", ";"], "ru": ["select", "t1.professional_id", ",", "t1.role_code", ",", "t1.first_name", "from", "professionals", "as", "t1", "join", "treatments", "as", "t2", "on", "t1.professional_id", "=", "t2.professional_id", "group", "by", "t1.professional_id", "having", "count", "(", "*", ")", ">=", "2", ";"]}, "masked_query": "SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2;", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0432\u044b id, \u0440\u043e\u043b\u0438 \u0438 \u0438\u043c\u0435\u043d\u0430 \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u0438\u0441\u0442\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u0440\u043e\u0432\u0435\u043b\u0438 \u0434\u0432\u0430 \u0438\u043b\u0438 \u0431\u043e\u043b\u0435\u0435 \u043a\u0443\u0440\u0441\u0430 \u043b\u0435\u0447\u0435\u043d\u0438\u044f?"}, "question": "What are the id, role, and first name of the professionals who have performed two or more treatments?", "kb_id": "dog_kennels"}, {"id": "D_0935", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0], ["table_unit", 5]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 23, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [], "groupBy": [[0, 2, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0], ["table_unit", 5]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 23, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [], "groupBy": [[0, 2, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "name", "of", "the", "breed", "with", "the", "most", "dogs", "?"], "ru": ["\u041a\u0430\u043a", "\u043d\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f", "\u043d\u0430\u0438\u0431\u043e\u043b\u0435\u0435", "\u0440\u0430\u0441\u043f\u0440\u043e\u0441\u0442\u0440\u0430\u043d\u0435\u043d\u043d\u0430\u044f", "\u043f\u043e\u0440\u043e\u0434\u0430", "\u0441\u043e\u0431\u0430\u043a", "?"]}, "query_toks": {"en": ["select", "t1.breed_name", "from", "breeds", "as", "t1", "join", "dogs", "as", "t2", "on", "t1.breed_code", "=", "t2.breed_code", "group", "by", "t1.breed_name", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"], "ru": ["select", "t1.breed_name", "from", "breeds", "as", "t1", "join", "dogs", "as", "t2", "on", "t1.breed_code", "=", "t2.breed_code", "group", "by", "t1.breed_name", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"]}, "query_toks_no_values": {"en": ["select", "t1.breed_name", "from", "breeds", "as", "t1", "join", "dogs", "as", "t2", "on", "t1.breed_code", "=", "t2.breed_code", "group", "by", "t1.breed_name", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"], "ru": ["select", "t1.breed_name", "from", "breeds", "as", "t1", "join", "dogs", "as", "t2", "on", "t1.breed_code", "=", "t2.breed_code", "group", "by", "t1.breed_name", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"]}, "masked_query": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1;", "question_pauq": {"ru": "\u041a\u0430\u043a \u043d\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u043d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u0440\u0430\u0441\u043f\u0440\u043e\u0441\u0442\u0440\u0430\u043d\u0435\u043d\u043d\u0430\u044f \u043f\u043e\u0440\u043e\u0434\u0430 \u0441\u043e\u0431\u0430\u043a?"}, "question": "What is the name of the breed with the most dogs?", "kb_id": "dog_kennels"}, {"id": "D_0936", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0], ["table_unit", 5]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 23, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [], "groupBy": [[0, 2, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0], ["table_unit", 5]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 23, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [], "groupBy": [[0, 2, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Which", "breed", "do", "the", "most", "dogs", "have", "?", "Give", "me", "the", "breed", "name", "."], "ru": ["\u041a\u0430\u043a\u0430\u044f", "\u043f\u043e\u0440\u043e\u0434\u0430", "\u0443", "\u0431\u043e\u043b\u044c\u0448\u0438\u043d\u0441\u0442\u0432\u0430", "\u0441\u043e\u0431\u0430\u043a", "?", "\u041e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0442\u044c", "\u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435", "\u043f\u043e\u0440\u043e\u0434\u044b", "."]}, "query_toks": {"en": ["select", "t1.breed_name", "from", "breeds", "as", "t1", "join", "dogs", "as", "t2", "on", "t1.breed_code", "=", "t2.breed_code", "group", "by", "t1.breed_name", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"], "ru": ["select", "t1.breed_name", "from", "breeds", "as", "t1", "join", "dogs", "as", "t2", "on", "t1.breed_code", "=", "t2.breed_code", "group", "by", "t1.breed_name", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"]}, "query_toks_no_values": {"en": ["select", "t1.breed_name", "from", "breeds", "as", "t1", "join", "dogs", "as", "t2", "on", "t1.breed_code", "=", "t2.breed_code", "group", "by", "t1.breed_name", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"], "ru": ["select", "t1.breed_name", "from", "breeds", "as", "t1", "join", "dogs", "as", "t2", "on", "t1.breed_code", "=", "t2.breed_code", "group", "by", "t1.breed_name", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"]}, "masked_query": "SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1;", "question_pauq": {"ru": "\u041a\u0430\u043a\u0430\u044f \u043f\u043e\u0440\u043e\u0434\u0430 \u0443 \u0431\u043e\u043b\u044c\u0448\u0438\u043d\u0441\u0442\u0432\u0430 \u0441\u043e\u0431\u0430\u043a? \u041e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0442\u044c \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043f\u043e\u0440\u043e\u0434\u044b."}, "question": "Which breed do the most dogs have? Give me the breed name.", "kb_id": "dog_kennels"}, {"id": "D_0937", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 4], ["table_unit", 5], ["table_unit", 7]], "conds": [[false, 2, [0, [0, 10, false], null], [0, 21, false], null], "and", [false, 2, [0, [0, 20, false], null], [0, 45, false], null]]}, "select": [false, [[0, [0, [0, 10, false], null]], [0, [0, [0, 12, false], null]]]], "where": [], "groupBy": [[0, 10, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 4], ["table_unit", 5], ["table_unit", 7]], "conds": [[false, 2, [0, [0, 10, false], null], [0, 21, false], null], "and", [false, 2, [0, [0, 20, false], null], [0, 45, false], null]]}, "select": [false, [[0, [0, [0, 10, false], null]], [0, [0, [0, 12, false], null]]]], "where": [], "groupBy": [[0, 10, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Which", "owner", "has", "paid", "for", "the", "most", "treatments", "on", "his", "or", "her", "dogs", "?", "List", "the", "owner", "id", "and", "last", "name", "."], "ru": ["\u041a\u0430\u043a\u043e\u0439", "\u0432\u043b\u0430\u0434\u0435\u043b\u0435\u0446", "\u0437\u0430\u043f\u043b\u0430\u0442\u0438\u043b", "\u0431\u043e\u043b\u044c\u0448\u0435", "\u0432\u0441\u0435\u0433\u043e", "\u0437\u0430", "\u043b\u0435\u0447\u0435\u043d\u0438\u0435", "\u0441\u0432\u043e\u0438\u0445", "\u0441\u043e\u0431\u0430\u043a", "?", "\u041f\u043e\u043a\u0430\u0436\u0438", "id", "\u0438", "\u0444\u0430\u043c\u0438\u043b\u0438\u044e", "\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430", "."]}, "query_toks": {"en": ["select", "t1.owner_id", ",", "t1.last_name", "from", "owners", "as", "t1", "join", "dogs", "as", "t2", "on", "t1.owner_id", "=", "t2.owner_id", "join", "treatments", "as", "t3", "on", "t2.dog_id", "=", "t3.dog_id", "group", "by", "t1.owner_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"], "ru": ["select", "t1.owner_id", ",", "t1.last_name", "from", "owners", "as", "t1", "join", "dogs", "as", "t2", "on", "t1.owner_id", "=", "t2.owner_id", "join", "treatments", "as", "t3", "on", "t2.dog_id", "=", "t3.dog_id", "group", "by", "t1.owner_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"]}, "query_toks_no_values": {"en": ["select", "t1.owner_id", ",", "t1.last_name", "from", "owners", "as", "t1", "join", "dogs", "as", "t2", "on", "t1.owner_id", "=", "t2.owner_id", "join", "treatments", "as", "t3", "on", "t2.dog_id", "=", "t3.dog_id", "group", "by", "t1.owner_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"], "ru": ["select", "t1.owner_id", ",", "t1.last_name", "from", "owners", "as", "t1", "join", "dogs", "as", "t2", "on", "t1.owner_id", "=", "t2.owner_id", "join", "treatments", "as", "t3", "on", "t2.dog_id", "=", "t3.dog_id", "group", "by", "t1.owner_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"]}, "masked_query": "SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1;", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0439 \u0432\u043b\u0430\u0434\u0435\u043b\u0435\u0446 \u0437\u0430\u043f\u043b\u0430\u0442\u0438\u043b \u0431\u043e\u043b\u044c\u0448\u0435 \u0432\u0441\u0435\u0433\u043e \u0437\u0430 \u043b\u0435\u0447\u0435\u043d\u0438\u0435 \u0441\u0432\u043e\u0438\u0445 \u0441\u043e\u0431\u0430\u043a? \u041f\u043e\u043a\u0430\u0436\u0438 id \u0438 \u0444\u0430\u043c\u0438\u043b\u0438\u044e \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430."}, "question": "Which owner has paid for the most treatments on his or her dogs? List the owner id and last name.", "kb_id": "dog_kennels"}, {"id": "D_0938", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 4], ["table_unit", 5], ["table_unit", 7]], "conds": [[false, 2, [0, [0, 10, false], null], [0, 21, false], null], "and", [false, 2, [0, [0, 20, false], null], [0, 45, false], null]]}, "select": [false, [[0, [0, [0, 10, false], null]], [0, [0, [0, 12, false], null]]]], "where": [], "groupBy": [[0, 10, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 4], ["table_unit", 5], ["table_unit", 7]], "conds": [[false, 2, [0, [0, 10, false], null], [0, 21, false], null], "and", [false, 2, [0, [0, 20, false], null], [0, 45, false], null]]}, "select": [false, [[0, [0, [0, 10, false], null]], [0, [0, [0, 12, false], null]]]], "where": [], "groupBy": [[0, 10, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Tell", "me", "the", "owner", "id", "and", "last", "name", "of", "the", "owner", "who", "spent", "the", "most", "on", "treatments", "of", "his", "or", "her", "dogs", "."], "ru": ["\u041f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c", "id", "\u0438", "\u0444\u0430\u043c\u0438\u043b\u0438\u044e", "\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430", ",", "\u043a\u043e\u0442\u043e\u0440\u044b\u0439", "\u0431\u043e\u043b\u044c\u0448\u0435", "\u0432\u0441\u0435\u0433\u043e", "\u043f\u043e\u0442\u0440\u0430\u0442\u0438\u043b", "\u043d\u0430", "\u043b\u0435\u0447\u0435\u043d\u0438\u0435", "\u0441\u0432\u043e\u0438\u0445", "\u0441\u043e\u0431\u0430\u043a", "."]}, "query_toks": {"en": ["select", "t1.owner_id", ",", "t1.last_name", "from", "owners", "as", "t1", "join", "dogs", "as", "t2", "on", "t1.owner_id", "=", "t2.owner_id", "join", "treatments", "as", "t3", "on", "t2.dog_id", "=", "t3.dog_id", "group", "by", "t1.owner_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"], "ru": ["select", "t1.owner_id", ",", "t1.last_name", "from", "owners", "as", "t1", "join", "dogs", "as", "t2", "on", "t1.owner_id", "=", "t2.owner_id", "join", "treatments", "as", "t3", "on", "t2.dog_id", "=", "t3.dog_id", "group", "by", "t1.owner_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"]}, "query_toks_no_values": {"en": ["select", "t1.owner_id", ",", "t1.last_name", "from", "owners", "as", "t1", "join", "dogs", "as", "t2", "on", "t1.owner_id", "=", "t2.owner_id", "join", "treatments", "as", "t3", "on", "t2.dog_id", "=", "t3.dog_id", "group", "by", "t1.owner_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"], "ru": ["select", "t1.owner_id", ",", "t1.last_name", "from", "owners", "as", "t1", "join", "dogs", "as", "t2", "on", "t1.owner_id", "=", "t2.owner_id", "join", "treatments", "as", "t3", "on", "t2.dog_id", "=", "t3.dog_id", "group", "by", "t1.owner_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"]}, "masked_query": "SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1;", "question_pauq": {"ru": "\u041f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c id \u0438 \u0444\u0430\u043c\u0438\u043b\u0438\u044e \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u043e\u043b\u044c\u0448\u0435 \u0432\u0441\u0435\u0433\u043e \u043f\u043e\u0442\u0440\u0430\u0442\u0438\u043b \u043d\u0430 \u043b\u0435\u0447\u0435\u043d\u0438\u0435 \u0441\u0432\u043e\u0438\u0445 \u0441\u043e\u0431\u0430\u043a."}, "question": "Tell me the owner id and last name of the owner who spent the most on treatments of his or her dogs.", "kb_id": "dog_kennels"}, {"id": "D_0939", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 3], ["table_unit", 7]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 47, false], null]]}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [], "groupBy": [[0, 8, false]], "having": [], "orderBy": ["asc", [[0, [4, 49, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 3], ["table_unit", 7]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 47, false], null]]}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [], "groupBy": [[0, 8, false]], "having": [], "orderBy": ["asc", [[0, [4, 49, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "description", "of", "the", "treatment", "type", "that", "costs", "the", "least", "money", "in", "total", "?"], "ru": ["\u041a\u0430\u043a", "\u043d\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f", "\u043b\u0435\u0447\u0435\u043d\u0438\u0435", ",", "\u043a\u043e\u0442\u043e\u0440\u043e\u0435", "\u0432", "\u0446\u0435\u043b\u043e\u043c", "\u0441\u0442\u043e\u0438\u0442", "\u043c\u0435\u043d\u044c\u0448\u0435", "\u0432\u0441\u0435\u0433\u043e", "?"]}, "query_toks": {"en": ["select", "t1.treatment_type_description", "from", "treatment_types", "as", "t1", "join", "treatments", "as", "t2", "on", "t1.treatment_type_code", "=", "t2.treatment_type_code", "group", "by", "t1.treatment_type_code", "order", "by", "sum", "(", "cost_of_treatment", ")", "asc", "limit", "1", ";"], "ru": ["select", "t1.treatment_type_description", "from", "treatment_types", "as", "t1", "join", "treatments", "as", "t2", "on", "t1.treatment_type_code", "=", "t2.treatment_type_code", "group", "by", "t1.treatment_type_code", "order", "by", "sum", "(", "cost_of_treatment", ")", "asc", "limit", "1", ";"]}, "query_toks_no_values": {"en": ["select", "t1.treatment_type_description", "from", "treatment_types", "as", "t1", "join", "treatments", "as", "t2", "on", "t1.treatment_type_code", "=", "t2.treatment_type_code", "group", "by", "t1.treatment_type_code", "order", "by", "sum", "(", "cost_of_treatment", ")", "asc", "limit", "1", ";"], "ru": ["select", "t1.treatment_type_description", "from", "treatment_types", "as", "t1", "join", "treatments", "as", "t2", "on", "t1.treatment_type_code", "=", "t2.treatment_type_code", "group", "by", "t1.treatment_type_code", "order", "by", "sum", "(", "cost_of_treatment", ")", "asc", "limit", "1", ";"]}, "masked_query": "SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1;", "question_pauq": {"ru": "\u041a\u0430\u043a \u043d\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u043b\u0435\u0447\u0435\u043d\u0438\u0435, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u0432 \u0446\u0435\u043b\u043e\u043c \u0441\u0442\u043e\u0438\u0442 \u043c\u0435\u043d\u044c\u0448\u0435 \u0432\u0441\u0435\u0433\u043e?"}, "question": "What is the description of the treatment type that costs the least money in total?", "kb_id": "dog_kennels"}, {"id": "D_0940", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 3], ["table_unit", 7]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 47, false], null]]}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [], "groupBy": [[0, 8, false]], "having": [], "orderBy": ["asc", [[0, [4, 49, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 3], ["table_unit", 7]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 47, false], null]]}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [], "groupBy": [[0, 8, false]], "having": [], "orderBy": ["asc", [[0, [4, 49, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Give", "me", "the", "description", "of", "the", "treatment", "type", "whose", "total", "cost", "is", "the", "lowest", "."], "ru": ["\u0414\u0430\u0439\u0442\u0435", "\u043c\u043d\u0435", "\u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435", "\u0432\u0438\u0434\u0430", "\u043b\u0435\u0447\u0435\u043d\u0438\u044f", ",", "\u043e\u0431\u0449\u0430\u044f", "\u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c", "\u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e", "\u0441\u0430\u043c\u0430\u044f", "\u043d\u0438\u0437\u043a\u0430\u044f", "."]}, "query_toks": {"en": ["select", "t1.treatment_type_description", "from", "treatment_types", "as", "t1", "join", "treatments", "as", "t2", "on", "t1.treatment_type_code", "=", "t2.treatment_type_code", "group", "by", "t1.treatment_type_code", "order", "by", "sum", "(", "cost_of_treatment", ")", "asc", "limit", "1", ";"], "ru": ["select", "t1.treatment_type_description", "from", "treatment_types", "as", "t1", "join", "treatments", "as", "t2", "on", "t1.treatment_type_code", "=", "t2.treatment_type_code", "group", "by", "t1.treatment_type_code", "order", "by", "sum", "(", "cost_of_treatment", ")", "asc", "limit", "1", ";"]}, "query_toks_no_values": {"en": ["select", "t1.treatment_type_description", "from", "treatment_types", "as", "t1", "join", "treatments", "as", "t2", "on", "t1.treatment_type_code", "=", "t2.treatment_type_code", "group", "by", "t1.treatment_type_code", "order", "by", "sum", "(", "cost_of_treatment", ")", "asc", "limit", "1", ";"], "ru": ["select", "t1.treatment_type_description", "from", "treatment_types", "as", "t1", "join", "treatments", "as", "t2", "on", "t1.treatment_type_code", "=", "t2.treatment_type_code", "group", "by", "t1.treatment_type_code", "order", "by", "sum", "(", "cost_of_treatment", ")", "asc", "limit", "1", ";"]}, "masked_query": "SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1;", "question_pauq": {"ru": "\u0414\u0430\u0439\u0442\u0435 \u043c\u043d\u0435 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0432\u0438\u0434\u0430 \u043b\u0435\u0447\u0435\u043d\u0438\u044f, \u043e\u0431\u0449\u0430\u044f \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u0441\u0430\u043c\u0430\u044f \u043d\u0438\u0437\u043a\u0430\u044f."}, "question": "Give me the description of the treatment type whose total cost is the lowest.", "kb_id": "dog_kennels"}, {"id": "D_0941", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 4], ["table_unit", 5], ["table_unit", 7]], "conds": [[false, 2, [0, [0, 10, false], null], [0, 21, false], null], "and", [false, 2, [0, [0, 20, false], null], [0, 45, false], null]]}, "select": [false, [[0, [0, [0, 10, false], null]], [0, [0, [0, 16, false], null]]]], "where": [], "groupBy": [[0, 10, false]], "having": [], "orderBy": ["desc", [[0, [4, 49, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 4], ["table_unit", 5], ["table_unit", 7]], "conds": [[false, 2, [0, [0, 10, false], null], [0, 21, false], null], "and", [false, 2, [0, [0, 20, false], null], [0, 45, false], null]]}, "select": [false, [[0, [0, [0, 10, false], null]], [0, [0, [0, 16, false], null]]]], "where": [], "groupBy": [[0, 10, false]], "having": [], "orderBy": ["desc", [[0, [4, 49, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Which", "owner", "has", "paid", "the", "largest", "amount", "of", "money", "in", "total", "for", "their", "dogs", "?", "Show", "the", "owner", "id", "and", "zip", "code", "."], "ru": ["\u041a\u0430\u043a\u043e\u0439", "\u0432\u043b\u0430\u0434\u0435\u043b\u0435\u0446", "\u0437\u0430\u043f\u043b\u0430\u0442\u0438\u043b", "\u0441\u0430\u043c\u0443\u044e", "\u0431\u043e\u043b\u044c\u0448\u0443\u044e", "\u0441\u0443\u043c\u043c\u0443", "\u0434\u0435\u043d\u0435\u0433", "\u0437\u0430", "\u0441\u0432\u043e\u0438\u0445", "\u0441\u043e\u0431\u0430\u043a", "?", "\u041f\u043e\u043a\u0430\u0436\u0438\u0442\u0435", "id", "\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430", "\u0438", "\u043f\u043e\u0447\u0442\u043e\u0432\u044b\u0439", "\u0438\u043d\u0434\u0435\u043a\u0441", "."]}, "query_toks": {"en": ["select", "t1.owner_id", ",", "t1.zip_code", "from", "owners", "as", "t1", "join", "dogs", "as", "t2", "on", "t1.owner_id", "=", "t2.owner_id", "join", "treatments", "as", "t3", "on", "t2.dog_id", "=", "t3.dog_id", "group", "by", "t1.owner_id", "order", "by", "sum", "(", "t3.cost_of_treatment", ")", "desc", "limit", "1", ";"], "ru": ["select", "t1.owner_id", ",", "t1.zip_code", "from", "owners", "as", "t1", "join", "dogs", "as", "t2", "on", "t1.owner_id", "=", "t2.owner_id", "join", "treatments", "as", "t3", "on", "t2.dog_id", "=", "t3.dog_id", "group", "by", "t1.owner_id", "order", "by", "sum", "(", "t3.cost_of_treatment", ")", "desc", "limit", "1", ";"]}, "query_toks_no_values": {"en": ["select", "t1.owner_id", ",", "t1.zip_code", "from", "owners", "as", "t1", "join", "dogs", "as", "t2", "on", "t1.owner_id", "=", "t2.owner_id", "join", "treatments", "as", "t3", "on", "t2.dog_id", "=", "t3.dog_id", "group", "by", "t1.owner_id", "order", "by", "sum", "(", "t3.cost_of_treatment", ")", "desc", "limit", "1", ";"], "ru": ["select", "t1.owner_id", ",", "t1.zip_code", "from", "owners", "as", "t1", "join", "dogs", "as", "t2", "on", "t1.owner_id", "=", "t2.owner_id", "join", "treatments", "as", "t3", "on", "t2.dog_id", "=", "t3.dog_id", "group", "by", "t1.owner_id", "order", "by", "sum", "(", "t3.cost_of_treatment", ")", "desc", "limit", "1", ";"]}, "masked_query": "SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1;", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0439 \u0432\u043b\u0430\u0434\u0435\u043b\u0435\u0446 \u0437\u0430\u043f\u043b\u0430\u0442\u0438\u043b \u0441\u0430\u043c\u0443\u044e \u0431\u043e\u043b\u044c\u0448\u0443\u044e \u0441\u0443\u043c\u043c\u0443 \u0434\u0435\u043d\u0435\u0433 \u0437\u0430 \u0441\u0432\u043e\u0438\u0445 \u0441\u043e\u0431\u0430\u043a? \u041f\u043e\u043a\u0430\u0436\u0438\u0442\u0435 id \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430 \u0438 \u043f\u043e\u0447\u0442\u043e\u0432\u044b\u0439 \u0438\u043d\u0434\u0435\u043a\u0441."}, "question": "Which owner has paid the largest amount of money in total for their dogs? Show the owner id and zip code.", "kb_id": "dog_kennels"}, {"id": "D_0942", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 4], ["table_unit", 5], ["table_unit", 7]], "conds": [[false, 2, [0, [0, 10, false], null], [0, 21, false], null], "and", [false, 2, [0, [0, 20, false], null], [0, 45, false], null]]}, "select": [false, [[0, [0, [0, 10, false], null]], [0, [0, [0, 16, false], null]]]], "where": [], "groupBy": [[0, 10, false]], "having": [], "orderBy": ["desc", [[0, [4, 49, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 4], ["table_unit", 5], ["table_unit", 7]], "conds": [[false, 2, [0, [0, 10, false], null], [0, 21, false], null], "and", [false, 2, [0, [0, 20, false], null], [0, 45, false], null]]}, "select": [false, [[0, [0, [0, 10, false], null]], [0, [0, [0, 16, false], null]]]], "where": [], "groupBy": [[0, 10, false]], "having": [], "orderBy": ["desc", [[0, [4, 49, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Find", "the", "owner", "id", "and", "zip", "code", "of", "the", "owner", "who", "spent", "the", "most", "money", "in", "total", "for", "his", "or", "her", "dogs", "."], "ru": ["\u041d\u0430\u0439\u0442\u0438", "id", "\u0438", "\u043f\u043e\u0447\u0442\u043e\u0432\u044b\u0439", "\u0438\u043d\u0434\u0435\u043a\u0441", "\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430", ",", "\u043a\u043e\u0442\u043e\u0440\u044b\u0439", "\u043f\u043e\u0442\u0440\u0430\u0442\u0438\u043b", "\u0431\u043e\u043b\u044c\u0448\u0435", "\u0432\u0441\u0435\u0433\u043e", "\u0434\u0435\u043d\u0435\u0433", "\u043d\u0430", "\u0441\u0432\u043e\u0438\u0445", "\u0441\u043e\u0431\u0430\u043a", "."]}, "query_toks": {"en": ["select", "t1.owner_id", ",", "t1.zip_code", "from", "owners", "as", "t1", "join", "dogs", "as", "t2", "on", "t1.owner_id", "=", "t2.owner_id", "join", "treatments", "as", "t3", "on", "t2.dog_id", "=", "t3.dog_id", "group", "by", "t1.owner_id", "order", "by", "sum", "(", "t3.cost_of_treatment", ")", "desc", "limit", "1", ";"], "ru": ["select", "t1.owner_id", ",", "t1.zip_code", "from", "owners", "as", "t1", "join", "dogs", "as", "t2", "on", "t1.owner_id", "=", "t2.owner_id", "join", "treatments", "as", "t3", "on", "t2.dog_id", "=", "t3.dog_id", "group", "by", "t1.owner_id", "order", "by", "sum", "(", "t3.cost_of_treatment", ")", "desc", "limit", "1", ";"]}, "query_toks_no_values": {"en": ["select", "t1.owner_id", ",", "t1.zip_code", "from", "owners", "as", "t1", "join", "dogs", "as", "t2", "on", "t1.owner_id", "=", "t2.owner_id", "join", "treatments", "as", "t3", "on", "t2.dog_id", "=", "t3.dog_id", "group", "by", "t1.owner_id", "order", "by", "sum", "(", "t3.cost_of_treatment", ")", "desc", "limit", "1", ";"], "ru": ["select", "t1.owner_id", ",", "t1.zip_code", "from", "owners", "as", "t1", "join", "dogs", "as", "t2", "on", "t1.owner_id", "=", "t2.owner_id", "join", "treatments", "as", "t3", "on", "t2.dog_id", "=", "t3.dog_id", "group", "by", "t1.owner_id", "order", "by", "sum", "(", "t3.cost_of_treatment", ")", "desc", "limit", "1", ";"]}, "masked_query": "SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1;", "question_pauq": {"ru": "\u041d\u0430\u0439\u0442\u0438 id \u0438 \u043f\u043e\u0447\u0442\u043e\u0432\u044b\u0439 \u0438\u043d\u0434\u0435\u043a\u0441 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u043e\u0442\u0440\u0430\u0442\u0438\u043b \u0431\u043e\u043b\u044c\u0448\u0435 \u0432\u0441\u0435\u0433\u043e \u0434\u0435\u043d\u0435\u0433 \u043d\u0430 \u0441\u0432\u043e\u0438\u0445 \u0441\u043e\u0431\u0430\u043a."}, "question": "Find the owner id and zip code of the owner who spent the most money in total for his or her dogs.", "kb_id": "dog_kennels"}, {"id": "D_0943", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 6], ["table_unit", 7]], "conds": [[false, 2, [0, [0, 33, false], null], [0, 46, false], null]]}, "select": [false, [[0, [0, [0, 33, false], null]], [0, [0, [0, 43, false], null]]]], "where": [], "groupBy": [[0, 33, false]], "having": [[false, 5, [0, [3, 0, false], null], 2.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 6], ["table_unit", 7]], "conds": [[false, 2, [0, [0, 33, false], null], [0, 46, false], null]]}, "select": [false, [[0, [0, [0, 33, false], null]], [0, [0, [0, 43, false], null]]]], "where": [], "groupBy": [[0, 33, false]], "having": [[false, 5, [0, [3, 0, false], null], 2.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Which", "professionals", "have", "done", "at", "least", "two", "types", "of", "treatments", "?", "List", "the", "professional", "id", "and", "cell", "phone", "."], "ru": ["\u041a\u0430\u043a\u0438\u0435", "\u0441\u043f\u0435\u0446\u0438\u0430\u043b\u0438\u0441\u0442\u044b", "\u043f\u0440\u043e\u0432\u043e\u0434\u0438\u043b\u0438", "\u043a\u0430\u043a", "\u043c\u0438\u043d\u0438\u043c\u0443\u043c", "\u0434\u0432\u0430", "\u0432\u0438\u0434\u0430", "\u043b\u0435\u0447\u0435\u043d\u0438\u044f", "?", "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c", "id", "\u0441\u043f\u0435\u0446\u0438\u0430\u043b\u0438\u0441\u0442\u0430", "\u0438", "\u043c\u043e\u0431\u0438\u043b\u044c\u043d\u044b\u0439", "\u0442\u0435\u043b\u0435\u0444\u043e\u043d", "."]}, "query_toks": {"en": ["select", "t1.professional_id", ",", "t1.cell_number", "from", "professionals", "as", "t1", "join", "treatments", "as", "t2", "on", "t1.professional_id", "=", "t2.professional_id", "group", "by", "t1.professional_id", "having", "count", "(", "*", ")", ">=", "2", ";"], "ru": ["select", "t1.professional_id", ",", "t1.cell_number", "from", "professionals", "as", "t1", "join", "treatments", "as", "t2", "on", "t1.professional_id", "=", "t2.professional_id", "group", "by", "t1.professional_id", "having", "count", "(", "*", ")", ">=", "2", ";"]}, "query_toks_no_values": {"en": ["select", "t1.professional_id", ",", "t1.cell_number", "from", "professionals", "as", "t1", "join", "treatments", "as", "t2", "on", "t1.professional_id", "=", "t2.professional_id", "group", "by", "t1.professional_id", "having", "count", "(", "*", ")", ">=", "2", ";"], "ru": ["select", "t1.professional_id", ",", "t1.cell_number", "from", "professionals", "as", "t1", "join", "treatments", "as", "t2", "on", "t1.professional_id", "=", "t2.professional_id", "group", "by", "t1.professional_id", "having", "count", "(", "*", ")", ">=", "2", ";"]}, "masked_query": "SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2;", "question_pauq": {"ru": "\u041a\u0430\u043a\u0438\u0435 \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u0438\u0441\u0442\u044b \u043f\u0440\u043e\u0432\u043e\u0434\u0438\u043b\u0438 \u043a\u0430\u043a \u043c\u0438\u043d\u0438\u043c\u0443\u043c \u0434\u0432\u0430 \u0432\u0438\u0434\u0430 \u043b\u0435\u0447\u0435\u043d\u0438\u044f? \u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c id \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u0438\u0441\u0442\u0430 \u0438 \u043c\u043e\u0431\u0438\u043b\u044c\u043d\u044b\u0439 \u0442\u0435\u043b\u0435\u0444\u043e\u043d."}, "question": "Which professionals have done at least two types of treatments? List the professional id and cell phone.", "kb_id": "dog_kennels"}, {"id": "D_0944", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 6], ["table_unit", 7]], "conds": [[false, 2, [0, [0, 33, false], null], [0, 46, false], null]]}, "select": [false, [[0, [0, [0, 33, false], null]], [0, [0, [0, 43, false], null]]]], "where": [], "groupBy": [[0, 33, false]], "having": [[false, 5, [0, [3, 0, false], null], 2.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 6], ["table_unit", 7]], "conds": [[false, 2, [0, [0, 33, false], null], [0, 46, false], null]]}, "select": [false, [[0, [0, [0, 33, false], null]], [0, [0, [0, 43, false], null]]]], "where": [], "groupBy": [[0, 33, false]], "having": [[false, 5, [0, [3, 0, false], null], 2.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Find", "the", "id", "and", "cell", "phone", "of", "the", "professionals", "who", "operate", "two", "or", "more", "types", "of", "treatments", "."], "ru": ["\u041d\u0430\u0439\u0434\u0438\u0442\u0435", "id", "\u0438", "\u043c\u043e\u0431\u0438\u043b\u044c\u043d\u044b\u0439", "\u0442\u0435\u043b\u0435\u0444\u043e\u043d", "\u0441\u043f\u0435\u0446\u0438\u0430\u043b\u0438\u0441\u0442\u043e\u0432", ",", "\u043a\u043e\u0442\u043e\u0440\u044b\u0435", "\u043f\u0440\u043e\u0432\u043e\u0434\u044f\u0442", "\u0434\u0432\u0430", "\u0438\u043b\u0438", "\u0431\u043e\u043b\u0435\u0435", "\u043b\u0435\u0447\u0435\u043d\u0438\u044f", "."]}, "query_toks": {"en": ["select", "t1.professional_id", ",", "t1.cell_number", "from", "professionals", "as", "t1", "join", "treatments", "as", "t2", "on", "t1.professional_id", "=", "t2.professional_id", "group", "by", "t1.professional_id", "having", "count", "(", "*", ")", ">=", "2", ";"], "ru": ["select", "t1.professional_id", ",", "t1.cell_number", "from", "professionals", "as", "t1", "join", "treatments", "as", "t2", "on", "t1.professional_id", "=", "t2.professional_id", "group", "by", "t1.professional_id", "having", "count", "(", "*", ")", ">=", "2", ";"]}, "query_toks_no_values": {"en": ["select", "t1.professional_id", ",", "t1.cell_number", "from", "professionals", "as", "t1", "join", "treatments", "as", "t2", "on", "t1.professional_id", "=", "t2.professional_id", "group", "by", "t1.professional_id", "having", "count", "(", "*", ")", ">=", "2", ";"], "ru": ["select", "t1.professional_id", ",", "t1.cell_number", "from", "professionals", "as", "t1", "join", "treatments", "as", "t2", "on", "t1.professional_id", "=", "t2.professional_id", "group", "by", "t1.professional_id", "having", "count", "(", "*", ")", ">=", "2", ";"]}, "masked_query": "SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2;", "question_pauq": {"ru": "\u041d\u0430\u0439\u0434\u0438\u0442\u0435 id \u0438 \u043c\u043e\u0431\u0438\u043b\u044c\u043d\u044b\u0439 \u0442\u0435\u043b\u0435\u0444\u043e\u043d \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u0438\u0441\u0442\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u0440\u043e\u0432\u043e\u0434\u044f\u0442 \u0434\u0432\u0430 \u0438\u043b\u0438 \u0431\u043e\u043b\u0435\u0435 \u043b\u0435\u0447\u0435\u043d\u0438\u044f."}, "question": "Find the id and cell phone of the professionals who operate two or more types of treatments.", "kb_id": "dog_kennels"}, {"id": "D_0945", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments );"}, "sql": {"en": {"from": {"table_units": [["table_unit", 6], ["table_unit", 7]], "conds": []}, "select": [true, [[0, [0, [0, 35, false], null]], [0, [0, [0, 40, false], null]]]], "where": [[false, 4, [0, [0, 49, false], null], {"from": {"table_units": [["table_unit", 7]], "conds": []}, "select": [false, [[5, [0, [0, 49, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 6], ["table_unit", 7]], "conds": []}, "select": [true, [[0, [0, [0, 35, false], null]], [0, [0, [0, 40, false], null]]]], "where": [[false, 4, [0, [0, 49, false], null], {"from": {"table_units": [["table_unit", 7]], "conds": []}, "select": [false, [[5, [0, [0, 49, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "the", "first", "name", "and", "last", "name", "of", "the", "professionals", "who", "have", "done", "treatment", "with", "cost", "below", "average", "?"], "ru": ["\u041a\u0430\u043a", "\u0437\u043e\u0432\u0443\u0442", "\u0441\u043f\u0435\u0446\u0438\u0430\u043b\u0438\u0441\u0442\u043e\u0432", ",", "\u043a\u043e\u0442\u043e\u0440\u044b\u0435", "\u043f\u0440\u043e\u0432\u0435\u043b\u0438", "\u043b\u0435\u0447\u0435\u043d\u0438\u0435", "\u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c\u044e", "\u043d\u0438\u0436\u0435", "\u0441\u0440\u0435\u0434\u043d\u0435\u0433\u043e", "?"]}, "query_toks": {"en": ["select", "distinct", "t1.first_name", ",", "t1.last_name", "from", "professionals", "as", "t1", "join", "treatments", "as", "t2", "where", "cost_of_treatment", "<", "(", "select", "avg", "(", "cost_of_treatment", ")", "from", "treatments", ")", ";"], "ru": ["select", "distinct", "t1.first_name", ",", "t1.last_name", "from", "professionals", "as", "t1", "join", "treatments", "as", "t2", "where", "cost_of_treatment", "<", "(", "select", "avg", "(", "cost_of_treatment", ")", "from", "treatments", ")", ";"]}, "query_toks_no_values": {"en": ["select", "distinct", "t1.first_name", ",", "t1.last_name", "from", "professionals", "as", "t1", "join", "treatments", "as", "t2", "where", "cost_of_treatment", "<", "(", "select", "avg", "(", "cost_of_treatment", ")", "from", "treatments", ")", ";"], "ru": ["select", "distinct", "t1.first_name", ",", "t1.last_name", "from", "professionals", "as", "t1", "join", "treatments", "as", "t2", "where", "cost_of_treatment", "<", "(", "select", "avg", "(", "cost_of_treatment", ")", "from", "treatments", ")", ";"]}, "masked_query": "SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments );", "question_pauq": {"ru": "\u041a\u0430\u043a \u0437\u043e\u0432\u0443\u0442 \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u0438\u0441\u0442\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u0440\u043e\u0432\u0435\u043b\u0438 \u043b\u0435\u0447\u0435\u043d\u0438\u0435 \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c\u044e \u043d\u0438\u0436\u0435 \u0441\u0440\u0435\u0434\u043d\u0435\u0433\u043e?"}, "question": "What are the first name and last name of the professionals who have done treatment with cost below average?", "kb_id": "dog_kennels"}, {"id": "D_0946", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments );"}, "sql": {"en": {"from": {"table_units": [["table_unit", 6], ["table_unit", 7]], "conds": []}, "select": [true, [[0, [0, [0, 35, false], null]], [0, [0, [0, 40, false], null]]]], "where": [[false, 4, [0, [0, 49, false], null], {"from": {"table_units": [["table_unit", 7]], "conds": []}, "select": [false, [[5, [0, [0, 49, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 6], ["table_unit", 7]], "conds": []}, "select": [true, [[0, [0, [0, 35, false], null]], [0, [0, [0, 40, false], null]]]], "where": [[false, 4, [0, [0, 49, false], null], {"from": {"table_units": [["table_unit", 7]], "conds": []}, "select": [false, [[5, [0, [0, 49, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Which", "professionals", "have", "operated", "a", "treatment", "that", "costs", "less", "than", "the", "average", "?", "Give", "me", "theor", "first", "names", "and", "last", "names", "."], "ru": ["\u041a\u0430\u043a\u0438\u0435", "\u0441\u043f\u0435\u0446\u0438\u0430\u043b\u0438\u0441\u0442\u044b", "\u043f\u0440\u043e\u0432\u043e\u0434\u0438\u043b\u0438", "\u043b\u0435\u0447\u0435\u043d\u0438\u0435", ",", "\u043a\u043e\u0442\u043e\u0440\u043e\u0435", "\u0441\u0442\u043e\u0438\u0442", "\u043c\u0435\u043d\u044c\u0448\u0435", "\u0441\u0440\u0435\u0434\u043d\u0435\u0433\u043e", "?", "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c", "\u0438\u0445", "\u0438\u043c\u0435\u043d\u0430", "\u0438", "\u0444\u0430\u043c\u0438\u043b\u0438\u0438", "."]}, "query_toks": {"en": ["select", "distinct", "t1.first_name", ",", "t1.last_name", "from", "professionals", "as", "t1", "join", "treatments", "as", "t2", "where", "cost_of_treatment", "<", "(", "select", "avg", "(", "cost_of_treatment", ")", "from", "treatments", ")", ";"], "ru": ["select", "distinct", "t1.first_name", ",", "t1.last_name", "from", "professionals", "as", "t1", "join", "treatments", "as", "t2", "where", "cost_of_treatment", "<", "(", "select", "avg", "(", "cost_of_treatment", ")", "from", "treatments", ")", ";"]}, "query_toks_no_values": {"en": ["select", "distinct", "t1.first_name", ",", "t1.last_name", "from", "professionals", "as", "t1", "join", "treatments", "as", "t2", "where", "cost_of_treatment", "<", "(", "select", "avg", "(", "cost_of_treatment", ")", "from", "treatments", ")", ";"], "ru": ["select", "distinct", "t1.first_name", ",", "t1.last_name", "from", "professionals", "as", "t1", "join", "treatments", "as", "t2", "where", "cost_of_treatment", "<", "(", "select", "avg", "(", "cost_of_treatment", ")", "from", "treatments", ")", ";"]}, "masked_query": "SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments );", "question_pauq": {"ru": "\u041a\u0430\u043a\u0438\u0435 \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u0438\u0441\u0442\u044b \u043f\u0440\u043e\u0432\u043e\u0434\u0438\u043b\u0438 \u043b\u0435\u0447\u0435\u043d\u0438\u0435, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u0441\u0442\u043e\u0438\u0442 \u043c\u0435\u043d\u044c\u0448\u0435 \u0441\u0440\u0435\u0434\u043d\u0435\u0433\u043e? \u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0438\u0445 \u0438\u043c\u0435\u043d\u0430 \u0438 \u0444\u0430\u043c\u0438\u043b\u0438\u0438."}, "question": "Which professionals have operated a treatment that costs less than the average? Give me theor first names and last names.", "kb_id": "dog_kennels"}, {"id": "D_0947", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 7], ["table_unit", 6]], "conds": [[false, 2, [0, [0, 46, false], null], [0, 33, false], null]]}, "select": [false, [[0, [0, [0, 48, false], null]], [0, [0, [0, 35, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 7], ["table_unit", 6]], "conds": [[false, 2, [0, [0, 46, false], null], [0, 33, false], null]]}, "select": [false, [[0, [0, [0, 48, false], null]], [0, [0, [0, 35, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["List", "the", "date", "of", "each", "treatment", ",", "together", "with", "the", "first", "name", "of", "the", "professional", "who", "operated", "it", "."], "ru": ["\u0423\u043a\u0430\u0436\u0438\u0442\u0435", "\u0434\u0430\u0442\u0443", "\u043a\u0430\u0436\u0434\u043e\u0433\u043e", "\u043b\u0435\u0447\u0435\u043d\u0438\u044f", "\u0432\u043c\u0435\u0441\u0442\u0435", "\u0441", "\u0438\u043c\u0435\u043d\u0435\u043c", "\u0441\u043f\u0435\u0446\u0438\u0430\u043b\u0438\u0441\u0442\u0430", ",", "\u043a\u043e\u0442\u043e\u0440\u044b\u0439", "\u0435\u0433\u043e", "\u043f\u0440\u043e\u0432\u043e\u0434\u0438\u043b", "."]}, "query_toks": {"en": ["select", "t1.date_of_treatment", ",", "t2.first_name", "from", "treatments", "as", "t1", "join", "professionals", "as", "t2", "on", "t1.professional_id", "=", "t2.professional_id", ";"], "ru": ["select", "t1.date_of_treatment", ",", "t2.first_name", "from", "treatments", "as", "t1", "join", "professionals", "as", "t2", "on", "t1.professional_id", "=", "t2.professional_id", ";"]}, "query_toks_no_values": {"en": ["select", "t1.date_of_treatment", ",", "t2.first_name", "from", "treatments", "as", "t1", "join", "professionals", "as", "t2", "on", "t1.professional_id", "=", "t2.professional_id", ";"], "ru": ["select", "t1.date_of_treatment", ",", "t2.first_name", "from", "treatments", "as", "t1", "join", "professionals", "as", "t2", "on", "t1.professional_id", "=", "t2.professional_id", ";"]}, "masked_query": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id;", "question_pauq": {"ru": "\u0423\u043a\u0430\u0436\u0438\u0442\u0435 \u0434\u0430\u0442\u0443 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043b\u0435\u0447\u0435\u043d\u0438\u044f \u0432\u043c\u0435\u0441\u0442\u0435 \u0441 \u0438\u043c\u0435\u043d\u0435\u043c \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u0438\u0441\u0442\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0435\u0433\u043e \u043f\u0440\u043e\u0432\u043e\u0434\u0438\u043b."}, "question": "List the date of each treatment, together with the first name of the professional who operated it.", "kb_id": "dog_kennels"}, {"id": "D_0948", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 7], ["table_unit", 6]], "conds": [[false, 2, [0, [0, 46, false], null], [0, 33, false], null]]}, "select": [false, [[0, [0, [0, 48, false], null]], [0, [0, [0, 35, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 7], ["table_unit", 6]], "conds": [[false, 2, [0, [0, 46, false], null], [0, 33, false], null]]}, "select": [false, [[0, [0, [0, 48, false], null]], [0, [0, [0, 35, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "the", "date", "and", "the", "operating", "professional", "'s", "first", "name", "of", "each", "treatment", "?"], "ru": ["\u041a\u0430\u043a\u0430\u044f", "\u0434\u0430\u0442\u0430", "\u0438", "\u0438\u043c\u044f", "\u043b\u0435\u0447\u0430\u0449\u0435\u0433\u043e", "\u0441\u043f\u0435\u0446\u0438\u0430\u043b\u0438\u0441\u0442\u0430", "\u043d\u0430", "\u043a\u0430\u0436\u0434\u043e\u043c", "\u0441\u0435\u0430\u043d\u0441\u0435", "\u043b\u0435\u0447\u0435\u043d\u0438\u044f", "?"]}, "query_toks": {"en": ["select", "t1.date_of_treatment", ",", "t2.first_name", "from", "treatments", "as", "t1", "join", "professionals", "as", "t2", "on", "t1.professional_id", "=", "t2.professional_id", ";"], "ru": ["select", "t1.date_of_treatment", ",", "t2.first_name", "from", "treatments", "as", "t1", "join", "professionals", "as", "t2", "on", "t1.professional_id", "=", "t2.professional_id", ";"]}, "query_toks_no_values": {"en": ["select", "t1.date_of_treatment", ",", "t2.first_name", "from", "treatments", "as", "t1", "join", "professionals", "as", "t2", "on", "t1.professional_id", "=", "t2.professional_id", ";"], "ru": ["select", "t1.date_of_treatment", ",", "t2.first_name", "from", "treatments", "as", "t1", "join", "professionals", "as", "t2", "on", "t1.professional_id", "=", "t2.professional_id", ";"]}, "masked_query": "SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id;", "question_pauq": {"ru": "\u041a\u0430\u043a\u0430\u044f \u0434\u0430\u0442\u0430 \u0438 \u0438\u043c\u044f \u043b\u0435\u0447\u0430\u0449\u0435\u0433\u043e \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u0438\u0441\u0442\u0430 \u043d\u0430 \u043a\u0430\u0436\u0434\u043e\u043c \u0441\u0435\u0430\u043d\u0441\u0435 \u043b\u0435\u0447\u0435\u043d\u0438\u044f?"}, "question": "What are the date and the operating professional's first name of each treatment?", "kb_id": "dog_kennels"}, {"id": "D_0949", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 7], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 47, false], null], [0, 8, false], null]]}, "select": [false, [[0, [0, [0, 49, false], null]], [0, [0, [0, 9, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 7], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 47, false], null], [0, 8, false], null]]}, "select": [false, [[0, [0, [0, 49, false], null]], [0, [0, [0, 9, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["List", "the", "cost", "of", "each", "treatment", "and", "the", "corresponding", "treatment", "type", "description", "."], "ru": ["\u041e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0442\u044c", "\u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c", "\u043a\u0430\u0436\u0434\u043e\u0433\u043e", "\u043b\u0435\u0447\u0435\u043d\u0438\u044f", "\u0438", "\u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0435\u0435", "\u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435", "\u0442\u0438\u043f\u0430", "\u043b\u0435\u0447\u0435\u043d\u0438\u044f", "."]}, "query_toks": {"en": ["select", "t1.cost_of_treatment", ",", "t2.treatment_type_description", "from", "treatments", "as", "t1", "join", "treatment_types", "as", "t2", "on", "t1.treatment_type_code", "=", "t2.treatment_type_code", ";"], "ru": ["select", "t1.cost_of_treatment", ",", "t2.treatment_type_description", "from", "treatments", "as", "t1", "join", "treatment_types", "as", "t2", "on", "t1.treatment_type_code", "=", "t2.treatment_type_code", ";"]}, "query_toks_no_values": {"en": ["select", "t1.cost_of_treatment", ",", "t2.treatment_type_description", "from", "treatments", "as", "t1", "join", "treatment_types", "as", "t2", "on", "t1.treatment_type_code", "=", "t2.treatment_type_code", ";"], "ru": ["select", "t1.cost_of_treatment", ",", "t2.treatment_type_description", "from", "treatments", "as", "t1", "join", "treatment_types", "as", "t2", "on", "t1.treatment_type_code", "=", "t2.treatment_type_code", ";"]}, "masked_query": "SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code;", "question_pauq": {"ru": "\u041e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0442\u044c \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043b\u0435\u0447\u0435\u043d\u0438\u044f \u0438 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0435\u0435 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0442\u0438\u043f\u0430 \u043b\u0435\u0447\u0435\u043d\u0438\u044f."}, "question": "List the cost of each treatment and the corresponding treatment type description.", "kb_id": "dog_kennels"}, {"id": "D_0950", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 7], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 47, false], null], [0, 8, false], null]]}, "select": [false, [[0, [0, [0, 49, false], null]], [0, [0, [0, 9, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 7], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 47, false], null], [0, 8, false], null]]}, "select": [false, [[0, [0, [0, 49, false], null]], [0, [0, [0, 9, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "the", "cost", "and", "treatment", "type", "description", "of", "each", "treatment", "?"], "ru": ["\u041a\u0430\u043a\u043e\u0432\u0430", "\u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c", "\u0438", "\u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435", "\u043a\u0430\u0436\u0434\u043e\u0433\u043e", "\u0432\u0438\u0434\u0430", "\u043b\u0435\u0447\u0435\u043d\u0438\u044f", "?"]}, "query_toks": {"en": ["select", "t1.cost_of_treatment", ",", "t2.treatment_type_description", "from", "treatments", "as", "t1", "join", "treatment_types", "as", "t2", "on", "t1.treatment_type_code", "=", "t2.treatment_type_code", ";"], "ru": ["select", "t1.cost_of_treatment", ",", "t2.treatment_type_description", "from", "treatments", "as", "t1", "join", "treatment_types", "as", "t2", "on", "t1.treatment_type_code", "=", "t2.treatment_type_code", ";"]}, "query_toks_no_values": {"en": ["select", "t1.cost_of_treatment", ",", "t2.treatment_type_description", "from", "treatments", "as", "t1", "join", "treatment_types", "as", "t2", "on", "t1.treatment_type_code", "=", "t2.treatment_type_code", ";"], "ru": ["select", "t1.cost_of_treatment", ",", "t2.treatment_type_description", "from", "treatments", "as", "t1", "join", "treatment_types", "as", "t2", "on", "t1.treatment_type_code", "=", "t2.treatment_type_code", ";"]}, "masked_query": "SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code;", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0432\u0430 \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u0438 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0432\u0438\u0434\u0430 \u043b\u0435\u0447\u0435\u043d\u0438\u044f?"}, "question": "What are the cost and treatment type description of each treatment?", "kb_id": "dog_kennels"}, {"id": "D_0951", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 4], ["table_unit", 5]], "conds": [[false, 2, [0, [0, 10, false], null], [0, 21, false], null]]}, "select": [false, [[0, [0, [0, 11, false], null]], [0, [0, [0, 12, false], null]], [0, [0, [0, 24, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 4], ["table_unit", 5]], "conds": [[false, 2, [0, [0, 10, false], null], [0, 21, false], null]]}, "select": [false, [[0, [0, [0, 11, false], null]], [0, [0, [0, 12, false], null]], [0, [0, [0, 24, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["List", "each", "owner", "'s", "first", "name", ",", "last", "name", ",", "and", "the", "size", "of", "his", "for", "her", "dog", "."], "ru": ["\u041f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0438\u0442\u0435", "\u0438\u043c\u044f", ",", "\u0444\u0430\u043c\u0438\u043b\u0438\u044e", "\u043a\u0430\u0436\u0434\u043e\u0433\u043e", "\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430", "\u0438", "\u0440\u0430\u0437\u043c\u0435\u0440", "\u0435\u0433\u043e", "\u0441\u043e\u0431\u0430\u043a\u0438", "."]}, "query_toks": {"en": ["select", "t1.first_name", ",", "t1.last_name", ",", "t2.size_code", "from", "owners", "as", "t1", "join", "dogs", "as", "t2", "on", "t1.owner_id", "=", "t2.owner_id", ";"], "ru": ["select", "t1.first_name", ",", "t1.last_name", ",", "t2.size_code", "from", "owners", "as", "t1", "join", "dogs", "as", "t2", "on", "t1.owner_id", "=", "t2.owner_id", ";"]}, "query_toks_no_values": {"en": ["select", "t1.first_name", ",", "t1.last_name", ",", "t2.size_code", "from", "owners", "as", "t1", "join", "dogs", "as", "t2", "on", "t1.owner_id", "=", "t2.owner_id", ";"], "ru": ["select", "t1.first_name", ",", "t1.last_name", ",", "t2.size_code", "from", "owners", "as", "t1", "join", "dogs", "as", "t2", "on", "t1.owner_id", "=", "t2.owner_id", ";"]}, "masked_query": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id;", "question_pauq": {"ru": "\u041f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0438\u0442\u0435 \u0438\u043c\u044f, \u0444\u0430\u043c\u0438\u043b\u0438\u044e \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430 \u0438 \u0440\u0430\u0437\u043c\u0435\u0440 \u0435\u0433\u043e \u0441\u043e\u0431\u0430\u043a\u0438."}, "question": "List each owner's first name, last name, and the size of his for her dog.", "kb_id": "dog_kennels"}, {"id": "D_0952", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 4], ["table_unit", 5]], "conds": [[false, 2, [0, [0, 10, false], null], [0, 21, false], null]]}, "select": [false, [[0, [0, [0, 11, false], null]], [0, [0, [0, 12, false], null]], [0, [0, [0, 24, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 4], ["table_unit", 5]], "conds": [[false, 2, [0, [0, 10, false], null], [0, 21, false], null]]}, "select": [false, [[0, [0, [0, 11, false], null]], [0, [0, [0, 12, false], null]], [0, [0, [0, 24, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "each", "owner", "'s", "first", "name", ",", "last", "name", ",", "and", "the", "size", "of", "their", "dog", "?"], "ru": ["\u041a\u0430\u043a\u043e\u0435", "\u0438\u043c\u044f", ",", "\u0444\u0430\u043c\u0438\u043b\u0438\u044f", "\u0438", "\u0440\u0430\u0437\u043c\u0435\u0440", "\u0441\u043e\u0431\u0430\u043a\u0438", "\u043a\u0430\u0436\u0434\u043e\u0433\u043e", "\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430", "?"]}, "query_toks": {"en": ["select", "t1.first_name", ",", "t1.last_name", ",", "t2.size_code", "from", "owners", "as", "t1", "join", "dogs", "as", "t2", "on", "t1.owner_id", "=", "t2.owner_id", ";"], "ru": ["select", "t1.first_name", ",", "t1.last_name", ",", "t2.size_code", "from", "owners", "as", "t1", "join", "dogs", "as", "t2", "on", "t1.owner_id", "=", "t2.owner_id", ";"]}, "query_toks_no_values": {"en": ["select", "t1.first_name", ",", "t1.last_name", ",", "t2.size_code", "from", "owners", "as", "t1", "join", "dogs", "as", "t2", "on", "t1.owner_id", "=", "t2.owner_id", ";"], "ru": ["select", "t1.first_name", ",", "t1.last_name", ",", "t2.size_code", "from", "owners", "as", "t1", "join", "dogs", "as", "t2", "on", "t1.owner_id", "=", "t2.owner_id", ";"]}, "masked_query": "SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id;", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0435 \u0438\u043c\u044f, \u0444\u0430\u043c\u0438\u043b\u0438\u044f \u0438 \u0440\u0430\u0437\u043c\u0435\u0440 \u0441\u043e\u0431\u0430\u043a\u0438 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430?"}, "question": "What are each owner's first name, last name, and the size of their dog?", "kb_id": "dog_kennels"}, {"id": "D_0953", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 4], ["table_unit", 5]], "conds": [[false, 2, [0, [0, 10, false], null], [0, 21, false], null]]}, "select": [false, [[0, [0, [0, 11, false], null]], [0, [0, [0, 25, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 4], ["table_unit", 5]], "conds": [[false, 2, [0, [0, 10, false], null], [0, 21, false], null]]}, "select": [false, [[0, [0, [0, 11, false], null]], [0, [0, [0, 25, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["List", "pairs", "of", "the", "owner", "'s", "first", "name", "and", "the", "dogs", "'s", "name", "."], "ru": ["\u041f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0438\u0442\u0435", "\u043f\u0430\u0440\u044b", "\u0438\u043c\u0435\u043d\u0438", "\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430", "\u0438", "\u043a\u043b\u0438\u0447\u043a\u0438", "\u0441\u043e\u0431\u0430\u043a\u0438", "."]}, "query_toks": {"en": ["select", "t1.first_name", ",", "t2.name", "from", "owners", "as", "t1", "join", "dogs", "as", "t2", "on", "t1.owner_id", "=", "t2.owner_id", ";"], "ru": ["select", "t1.first_name", ",", "t2.name", "from", "owners", "as", "t1", "join", "dogs", "as", "t2", "on", "t1.owner_id", "=", "t2.owner_id", ";"]}, "query_toks_no_values": {"en": ["select", "t1.first_name", ",", "t2.name", "from", "owners", "as", "t1", "join", "dogs", "as", "t2", "on", "t1.owner_id", "=", "t2.owner_id", ";"], "ru": ["select", "t1.first_name", ",", "t2.name", "from", "owners", "as", "t1", "join", "dogs", "as", "t2", "on", "t1.owner_id", "=", "t2.owner_id", ";"]}, "masked_query": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id;", "question_pauq": {"ru": "\u041f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0438\u0442\u0435 \u043f\u0430\u0440\u044b \u0438\u043c\u0435\u043d\u0438 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430 \u0438 \u043a\u043b\u0438\u0447\u043a\u0438 \u0441\u043e\u0431\u0430\u043a\u0438."}, "question": "List pairs of the owner's first name and the dogs's name.", "kb_id": "dog_kennels"}, {"id": "D_0954", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 4], ["table_unit", 5]], "conds": [[false, 2, [0, [0, 10, false], null], [0, 21, false], null]]}, "select": [false, [[0, [0, [0, 11, false], null]], [0, [0, [0, 25, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 4], ["table_unit", 5]], "conds": [[false, 2, [0, [0, 10, false], null], [0, 21, false], null]]}, "select": [false, [[0, [0, [0, 11, false], null]], [0, [0, [0, 25, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "each", "owner", "'s", "first", "name", "and", "their", "dogs", "'s", "name", "?"], "ru": ["\u041a\u0430\u043a", "\u0437\u043e\u0432\u0443\u0442", "\u043a\u0430\u0436\u0434\u043e\u0433\u043e", "\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430", "\u0438", "\u043a\u0430\u043a", "\u0437\u043e\u0432\u0443\u0442", "\u0438\u0445", "\u0441\u043e\u0431\u0430\u043a", "?"]}, "query_toks": {"en": ["select", "t1.first_name", ",", "t2.name", "from", "owners", "as", "t1", "join", "dogs", "as", "t2", "on", "t1.owner_id", "=", "t2.owner_id", ";"], "ru": ["select", "t1.first_name", ",", "t2.name", "from", "owners", "as", "t1", "join", "dogs", "as", "t2", "on", "t1.owner_id", "=", "t2.owner_id", ";"]}, "query_toks_no_values": {"en": ["select", "t1.first_name", ",", "t2.name", "from", "owners", "as", "t1", "join", "dogs", "as", "t2", "on", "t1.owner_id", "=", "t2.owner_id", ";"], "ru": ["select", "t1.first_name", ",", "t2.name", "from", "owners", "as", "t1", "join", "dogs", "as", "t2", "on", "t1.owner_id", "=", "t2.owner_id", ";"]}, "masked_query": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id;", "question_pauq": {"ru": "\u041a\u0430\u043a \u0437\u043e\u0432\u0443\u0442 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430 \u0438 \u043a\u0430\u043a \u0437\u043e\u0432\u0443\u0442 \u0438\u0445 \u0441\u043e\u0431\u0430\u043a?"}, "question": "What are each owner's first name and their dogs's name?", "kb_id": "dog_kennels"}, {"id": "D_0955", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 );"}, "sql": {"en": {"from": {"table_units": [["table_unit", 5], ["table_unit", 7]], "conds": [[false, 2, [0, [0, 20, false], null], [0, 45, false], null]]}, "select": [false, [[0, [0, [0, 25, false], null]], [0, [0, [0, 48, false], null]]]], "where": [[false, 2, [0, [0, 23, false], null], {"from": {"table_units": [["table_unit", 5]], "conds": []}, "select": [false, [[0, [0, [0, 23, false], null]]]], "where": [], "groupBy": [[0, 23, false]], "having": [], "orderBy": ["asc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 5], ["table_unit", 7]], "conds": [[false, 2, [0, [0, 20, false], null], [0, 45, false], null]]}, "select": [false, [[0, [0, [0, 25, false], null]], [0, [0, [0, 48, false], null]]]], "where": [[false, 2, [0, [0, 23, false], null], {"from": {"table_units": [["table_unit", 5]], "conds": []}, "select": [false, [[0, [0, [0, 23, false], null]]]], "where": [], "groupBy": [[0, 23, false]], "having": [], "orderBy": ["asc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["List", "the", "names", "of", "the", "dogs", "of", "the", "rarest", "breed", "and", "the", "treatment", "dates", "of", "them", "."], "ru": ["\u041f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0438\u0442\u0435", "\u043a\u043b\u0438\u0447\u043a\u0438", "\u0441\u043e\u0431\u0430\u043a", "\u0441\u0430\u043c\u043e\u0439", "\u0440\u0435\u0434\u043a\u043e\u0439", "\u043f\u043e\u0440\u043e\u0434\u044b", "\u0438", "\u0434\u0430\u0442\u044b", "\u0438\u0445", "\u043b\u0435\u0447\u0435\u043d\u0438\u044f", "."]}, "query_toks": {"en": ["select", "t1.name", ",", "t2.date_of_treatment", "from", "dogs", "as", "t1", "join", "treatments", "as", "t2", "on", "t1.dog_id", "=", "t2.dog_id", "where", "t1.breed_code", "=", "(", "select", "breed_code", "from", "dogs", "group", "by", "breed_code", "order", "by", "count", "(", "*", ")", "asc", "limit", "1", ")", ";"], "ru": ["select", "t1.name", ",", "t2.date_of_treatment", "from", "dogs", "as", "t1", "join", "treatments", "as", "t2", "on", "t1.dog_id", "=", "t2.dog_id", "where", "t1.breed_code", "=", "(", "select", "breed_code", "from", "dogs", "group", "by", "breed_code", "order", "by", "count", "(", "*", ")", "asc", "limit", "1", ")", ";"]}, "query_toks_no_values": {"en": ["select", "t1.name", ",", "t2.date_of_treatment", "from", "dogs", "as", "t1", "join", "treatments", "as", "t2", "on", "t1.dog_id", "=", "t2.dog_id", "where", "t1.breed_code", "=", "(", "select", "breed_code", "from", "dogs", "group", "by", "breed_code", "order", "by", "count", "(", "*", ")", "asc", "limit", "1", ")", ";"], "ru": ["select", "t1.name", ",", "t2.date_of_treatment", "from", "dogs", "as", "t1", "join", "treatments", "as", "t2", "on", "t1.dog_id", "=", "t2.dog_id", "where", "t1.breed_code", "=", "(", "select", "breed_code", "from", "dogs", "group", "by", "breed_code", "order", "by", "count", "(", "*", ")", "asc", "limit", "1", ")", ";"]}, "masked_query": "SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 );", "question_pauq": {"ru": "\u041f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0438\u0442\u0435 \u043a\u043b\u0438\u0447\u043a\u0438 \u0441\u043e\u0431\u0430\u043a \u0441\u0430\u043c\u043e\u0439 \u0440\u0435\u0434\u043a\u043e\u0439 \u043f\u043e\u0440\u043e\u0434\u044b \u0438 \u0434\u0430\u0442\u044b \u0438\u0445 \u043b\u0435\u0447\u0435\u043d\u0438\u044f."}, "question": "List the names of the dogs of the rarest breed and the treatment dates of them.", "kb_id": "dog_kennels"}, {"id": "D_0956", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 );"}, "sql": {"en": {"from": {"table_units": [["table_unit", 5], ["table_unit", 7]], "conds": [[false, 2, [0, [0, 20, false], null], [0, 45, false], null]]}, "select": [false, [[0, [0, [0, 25, false], null]], [0, [0, [0, 48, false], null]]]], "where": [[false, 2, [0, [0, 23, false], null], {"from": {"table_units": [["table_unit", 5]], "conds": []}, "select": [false, [[0, [0, [0, 23, false], null]]]], "where": [], "groupBy": [[0, 23, false]], "having": [], "orderBy": ["asc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 5], ["table_unit", 7]], "conds": [[false, 2, [0, [0, 20, false], null], [0, 45, false], null]]}, "select": [false, [[0, [0, [0, 25, false], null]], [0, [0, [0, 48, false], null]]]], "where": [[false, 2, [0, [0, 23, false], null], {"from": {"table_units": [["table_unit", 5]], "conds": []}, "select": [false, [[0, [0, [0, 23, false], null]]]], "where": [], "groupBy": [[0, 23, false]], "having": [], "orderBy": ["asc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Which", "dogs", "are", "of", "the", "rarest", "breed", "?", "Show", "their", "names", "and", "treatment", "dates", "."], "ru": ["\u041a\u0430\u043a\u0438\u0435", "\u0441\u043e\u0431\u0430\u043a\u0438", "\u0441\u0430\u043c\u043e\u0439", "\u0440\u0435\u0434\u043a\u043e\u0439", "\u043f\u043e\u0440\u043e\u0434\u044b", "?", "\u041f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c", "\u0438\u0445", "\u043a\u043b\u0438\u0447\u043a\u0438", "\u0438", "\u0434\u0430\u0442\u044b", "\u043b\u0435\u0447\u0435\u043d\u0438\u044f", "."]}, "query_toks": {"en": ["select", "t1.name", ",", "t2.date_of_treatment", "from", "dogs", "as", "t1", "join", "treatments", "as", "t2", "on", "t1.dog_id", "=", "t2.dog_id", "where", "t1.breed_code", "=", "(", "select", "breed_code", "from", "dogs", "group", "by", "breed_code", "order", "by", "count", "(", "*", ")", "asc", "limit", "1", ")", ";"], "ru": ["select", "t1.name", ",", "t2.date_of_treatment", "from", "dogs", "as", "t1", "join", "treatments", "as", "t2", "on", "t1.dog_id", "=", "t2.dog_id", "where", "t1.breed_code", "=", "(", "select", "breed_code", "from", "dogs", "group", "by", "breed_code", "order", "by", "count", "(", "*", ")", "asc", "limit", "1", ")", ";"]}, "query_toks_no_values": {"en": ["select", "t1.name", ",", "t2.date_of_treatment", "from", "dogs", "as", "t1", "join", "treatments", "as", "t2", "on", "t1.dog_id", "=", "t2.dog_id", "where", "t1.breed_code", "=", "(", "select", "breed_code", "from", "dogs", "group", "by", "breed_code", "order", "by", "count", "(", "*", ")", "asc", "limit", "1", ")", ";"], "ru": ["select", "t1.name", ",", "t2.date_of_treatment", "from", "dogs", "as", "t1", "join", "treatments", "as", "t2", "on", "t1.dog_id", "=", "t2.dog_id", "where", "t1.breed_code", "=", "(", "select", "breed_code", "from", "dogs", "group", "by", "breed_code", "order", "by", "count", "(", "*", ")", "asc", "limit", "1", ")", ";"]}, "masked_query": "SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 );", "question_pauq": {"ru": "\u041a\u0430\u043a\u0438\u0435 \u0441\u043e\u0431\u0430\u043a\u0438 \u0441\u0430\u043c\u043e\u0439 \u0440\u0435\u0434\u043a\u043e\u0439 \u043f\u043e\u0440\u043e\u0434\u044b? \u041f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c \u0438\u0445 \u043a\u043b\u0438\u0447\u043a\u0438 \u0438 \u0434\u0430\u0442\u044b \u043b\u0435\u0447\u0435\u043d\u0438\u044f."}, "question": "Which dogs are of the rarest breed? Show their names and treatment dates.", "kb_id": "dog_kennels"}, {"id": "D_0957", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  '\u0412\u043e\u0440\u043e\u043d\u0435\u0436\u0441\u043a\u0430\u044f \u043e\u0431\u043b\u0430\u0441\u0442\u044c';"}, "sql": {"en": {"from": {"table_units": [["table_unit", 4], ["table_unit", 5]], "conds": [[false, 2, [0, [0, 10, false], null], [0, 21, false], null]]}, "select": [false, [[0, [0, [0, 11, false], null]], [0, [0, [0, 25, false], null]]]], "where": [[false, 2, [0, [0, 15, false], null], "\"Virginia\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 4], ["table_unit", 5]], "conds": [[false, 2, [0, [0, 10, false], null], [0, 21, false], null]]}, "select": [false, [[0, [0, [0, 11, false], null]], [0, [0, [0, 25, false], null]]]], "where": [[false, 2, [0, [0, 15, false], null], "\"\u0412\u043e\u0440\u043e\u043d\u0435\u0436\u0441\u043a\u0430\u044f \u043e\u0431\u043b\u0430\u0441\u0442\u044c\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Which", "dogs", "are", "owned", "by", "someone", "who", "lives", "in", "Virginia", "?", "List", "the", "owner", "'s", "first", "name", "and", "the", "dog", "'s", "name", "."], "ru": ["\u041a\u0430\u043a\u0438\u0435", "\u0441\u043e\u0431\u0430\u043a\u0438", "\u043f\u0440\u0438\u043d\u0430\u0434\u043b\u0435\u0436\u0430\u0442", "\u0436\u0438\u0442\u0435\u043b\u044e", "\u0412\u043e\u0440\u043e\u043d\u0435\u0436\u0441\u043a\u043e\u0439", "\u043e\u0431\u043b\u0430\u0441\u0442\u0438", "?", "\u041f\u043e\u043a\u0430\u0436\u0438", "\u0438\u043c\u044f", "\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430", "\u0438", "\u043a\u043b\u0438\u0447\u043a\u0443", "\u0441\u043e\u0431\u0430\u043a\u0438", "."]}, "query_toks": {"en": ["select", "t1.first_name", ",", "t2.name", "from", "owners", "as", "t1", "join", "dogs", "as", "t2", "on", "t1.owner_id", "=", "t2.owner_id", "where", "t1.state", "=", "\"Virginia\"", ";"], "ru": ["select", "t1.first_name", ",", "t2.name", "from", "owners", "as", "t1", "join", "dogs", "as", "t2", "on", "t1.owner_id", "=", "t2.owner_id", "where", "t1.state", "=", "\"\u0412\u043e\u0440\u043e\u043d\u0435\u0436\u0441\u043a\u0430\u044f \u043e\u0431\u043b\u0430\u0441\u0442\u044c\"", ";"]}, "query_toks_no_values": {"en": ["select", "t1.first_name", ",", "t2.name", "from", "owners", "as", "t1", "join", "dogs", "as", "t2", "on", "t1.owner_id", "=", "t2.owner_id", "where", "t1.state", "=", "value", ";"], "ru": ["select", "t1.first_name", ",", "t2.name", "from", "owners", "as", "t1", "join", "dogs", "as", "t2", "on", "t1.owner_id", "=", "t2.owner_id", "where", "t1.state", "=", "value", ";"]}, "masked_query": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia';", "question_pauq": {"ru": "\u041a\u0430\u043a\u0438\u0435 \u0441\u043e\u0431\u0430\u043a\u0438 \u043f\u0440\u0438\u043d\u0430\u0434\u043b\u0435\u0436\u0430\u0442 \u0436\u0438\u0442\u0435\u043b\u044e \u0412\u043e\u0440\u043e\u043d\u0435\u0436\u0441\u043a\u043e\u0439 \u043e\u0431\u043b\u0430\u0441\u0442\u0438? \u041f\u043e\u043a\u0430\u0436\u0438 \u0438\u043c\u044f \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430 \u0438 \u043a\u043b\u0438\u0447\u043a\u0443 \u0441\u043e\u0431\u0430\u043a\u0438."}, "question": "Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.", "kb_id": "dog_kennels"}, {"id": "D_0958", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  '\u0412\u043e\u0440\u043e\u043d\u0435\u0436\u0441\u043a\u0430\u044f \u043e\u0431\u043b\u0430\u0441\u0442\u044c';"}, "sql": {"en": {"from": {"table_units": [["table_unit", 4], ["table_unit", 5]], "conds": [[false, 2, [0, [0, 10, false], null], [0, 21, false], null]]}, "select": [false, [[0, [0, [0, 11, false], null]], [0, [0, [0, 25, false], null]]]], "where": [[false, 2, [0, [0, 15, false], null], "\"Virginia\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 4], ["table_unit", 5]], "conds": [[false, 2, [0, [0, 10, false], null], [0, 21, false], null]]}, "select": [false, [[0, [0, [0, 11, false], null]], [0, [0, [0, 25, false], null]]]], "where": [[false, 2, [0, [0, 15, false], null], "\"\u0412\u043e\u0440\u043e\u043d\u0435\u0436\u0441\u043a\u0430\u044f \u043e\u0431\u043b\u0430\u0441\u0442\u044c\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Find", "the", "first", "names", "of", "owners", "living", "in", "Virginia", "and", "the", "names", "of", "dogs", "they", "own", "."], "ru": ["\u041d\u0430\u0439\u0434\u0438\u0442\u0435", "\u0438\u043c\u0435\u043d\u0430", "\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432", ",", "\u0436\u0438\u0432\u0443\u0449\u0438\u0445", "\u0432", "\u0412\u043e\u0440\u043e\u043d\u0435\u0436\u0441\u043a\u043e\u0439", "\u043e\u0431\u043b\u0430\u0441\u0442\u0438", ",", "\u0438", "\u043a\u043b\u0438\u0447\u043a\u0438", "\u043f\u0440\u0438\u043d\u0430\u0434\u043b\u0435\u0436\u0430\u0449\u0438\u0445", "\u0438\u043c", "\u0441\u043e\u0431\u0430\u043a", "."]}, "query_toks": {"en": ["select", "t1.first_name", ",", "t2.name", "from", "owners", "as", "t1", "join", "dogs", "as", "t2", "on", "t1.owner_id", "=", "t2.owner_id", "where", "t1.state", "=", "\"Virginia\"", ";"], "ru": ["select", "t1.first_name", ",", "t2.name", "from", "owners", "as", "t1", "join", "dogs", "as", "t2", "on", "t1.owner_id", "=", "t2.owner_id", "where", "t1.state", "=", "\"\u0412\u043e\u0440\u043e\u043d\u0435\u0436\u0441\u043a\u0430\u044f \u043e\u0431\u043b\u0430\u0441\u0442\u044c\"", ";"]}, "query_toks_no_values": {"en": ["select", "t1.first_name", ",", "t2.name", "from", "owners", "as", "t1", "join", "dogs", "as", "t2", "on", "t1.owner_id", "=", "t2.owner_id", "where", "t1.state", "=", "value", ";"], "ru": ["select", "t1.first_name", ",", "t2.name", "from", "owners", "as", "t1", "join", "dogs", "as", "t2", "on", "t1.owner_id", "=", "t2.owner_id", "where", "t1.state", "=", "value", ";"]}, "masked_query": "SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia';", "question_pauq": {"ru": "\u041d\u0430\u0439\u0434\u0438\u0442\u0435 \u0438\u043c\u0435\u043d\u0430 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432, \u0436\u0438\u0432\u0443\u0449\u0438\u0445 \u0432 \u0412\u043e\u0440\u043e\u043d\u0435\u0436\u0441\u043a\u043e\u0439 \u043e\u0431\u043b\u0430\u0441\u0442\u0438, \u0438 \u043a\u043b\u0438\u0447\u043a\u0438 \u043f\u0440\u0438\u043d\u0430\u0434\u043b\u0435\u0436\u0430\u0449\u0438\u0445 \u0438\u043c \u0441\u043e\u0431\u0430\u043a."}, "question": "Find the first names of owners living in Virginia and the names of dogs they own.", "kb_id": "dog_kennels"}, {"id": "D_0959", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 5], ["table_unit", 7]], "conds": [[false, 2, [0, [0, 20, false], null], [0, 45, false], null]]}, "select": [true, [[0, [0, [0, 30, false], null]], [0, [0, [0, 32, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 5], ["table_unit", 7]], "conds": [[false, 2, [0, [0, 20, false], null], [0, 45, false], null]]}, "select": [true, [[0, [0, [0, 30, false], null]], [0, [0, [0, 32, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "the", "arriving", "date", "and", "the", "departing", "date", "of", "the", "dogs", "who", "have", "gone", "through", "a", "treatment", "?"], "ru": ["\u041a\u0430\u043a\u0430\u044f", "\u0434\u0430\u0442\u0430", "\u043f\u0440\u0438\u0431\u044b\u0442\u0438\u044f", "\u0438", "\u0434\u0430\u0442\u0430", "\u043e\u0442\u044a\u0435\u0437\u0434\u0430", "\u0441\u043e\u0431\u0430\u043a", ",", "\u043f\u0440\u043e\u0448\u0435\u0434\u0448\u0438\u0445", "\u043a\u0443\u0440\u0441", "\u043b\u0435\u0447\u0435\u043d\u0438\u044f", "?"]}, "query_toks": {"en": ["select", "distinct", "t1.date_arrived", ",", "t1.date_departed", "from", "dogs", "as", "t1", "join", "treatments", "as", "t2", "on", "t1.dog_id", "=", "t2.dog_id", ";"], "ru": ["select", "distinct", "t1.date_arrived", ",", "t1.date_departed", "from", "dogs", "as", "t1", "join", "treatments", "as", "t2", "on", "t1.dog_id", "=", "t2.dog_id", ";"]}, "query_toks_no_values": {"en": ["select", "distinct", "t1.date_arrived", ",", "t1.date_departed", "from", "dogs", "as", "t1", "join", "treatments", "as", "t2", "on", "t1.dog_id", "=", "t2.dog_id", ";"], "ru": ["select", "distinct", "t1.date_arrived", ",", "t1.date_departed", "from", "dogs", "as", "t1", "join", "treatments", "as", "t2", "on", "t1.dog_id", "=", "t2.dog_id", ";"]}, "masked_query": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id;", "question_pauq": {"ru": "\u041a\u0430\u043a\u0430\u044f \u0434\u0430\u0442\u0430 \u043f\u0440\u0438\u0431\u044b\u0442\u0438\u044f \u0438 \u0434\u0430\u0442\u0430 \u043e\u0442\u044a\u0435\u0437\u0434\u0430 \u0441\u043e\u0431\u0430\u043a, \u043f\u0440\u043e\u0448\u0435\u0434\u0448\u0438\u0445 \u043a\u0443\u0440\u0441 \u043b\u0435\u0447\u0435\u043d\u0438\u044f?"}, "question": "What are the arriving date and the departing date of the dogs who have gone through a treatment?", "kb_id": "dog_kennels"}, {"id": "D_0960", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 5], ["table_unit", 7]], "conds": [[false, 2, [0, [0, 20, false], null], [0, 45, false], null]]}, "select": [true, [[0, [0, [0, 30, false], null]], [0, [0, [0, 32, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 5], ["table_unit", 7]], "conds": [[false, 2, [0, [0, 20, false], null], [0, 45, false], null]]}, "select": [true, [[0, [0, [0, 30, false], null]], [0, [0, [0, 32, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Find", "the", "arriving", "date", "and", "the", "departing", "date", "of", "the", "dogs", "that", "received", "a", "treatment", "."], "ru": ["\u041d\u0430\u0439\u0434\u0438\u0442\u0435", "\u0434\u0430\u0442\u0443", "\u043f\u0440\u0438\u0431\u044b\u0442\u0438\u044f", "\u0438", "\u0434\u0430\u0442\u0443", "\u043e\u0442\u044a\u0435\u0437\u0434\u0430", "\u0441\u043e\u0431\u0430\u043a", ",", "\u043f\u0440\u043e\u0448\u0435\u0434\u0448\u0438\u0445", "\u043a\u0443\u0440\u0441", "\u043b\u0435\u0447\u0435\u043d\u0438\u044f", "."]}, "query_toks": {"en": ["select", "distinct", "t1.date_arrived", ",", "t1.date_departed", "from", "dogs", "as", "t1", "join", "treatments", "as", "t2", "on", "t1.dog_id", "=", "t2.dog_id", ";"], "ru": ["select", "distinct", "t1.date_arrived", ",", "t1.date_departed", "from", "dogs", "as", "t1", "join", "treatments", "as", "t2", "on", "t1.dog_id", "=", "t2.dog_id", ";"]}, "query_toks_no_values": {"en": ["select", "distinct", "t1.date_arrived", ",", "t1.date_departed", "from", "dogs", "as", "t1", "join", "treatments", "as", "t2", "on", "t1.dog_id", "=", "t2.dog_id", ";"], "ru": ["select", "distinct", "t1.date_arrived", ",", "t1.date_departed", "from", "dogs", "as", "t1", "join", "treatments", "as", "t2", "on", "t1.dog_id", "=", "t2.dog_id", ";"]}, "masked_query": "SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id;", "question_pauq": {"ru": "\u041d\u0430\u0439\u0434\u0438\u0442\u0435 \u0434\u0430\u0442\u0443 \u043f\u0440\u0438\u0431\u044b\u0442\u0438\u044f \u0438 \u0434\u0430\u0442\u0443 \u043e\u0442\u044a\u0435\u0437\u0434\u0430 \u0441\u043e\u0431\u0430\u043a, \u043f\u0440\u043e\u0448\u0435\u0434\u0448\u0438\u0445 \u043a\u0443\u0440\u0441 \u043b\u0435\u0447\u0435\u043d\u0438\u044f."}, "question": "Find the arriving date and the departing date of the dogs that received a treatment.", "kb_id": "dog_kennels"}, {"id": "D_0961", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs );"}, "sql": {"en": {"from": {"table_units": [["table_unit", 4], ["table_unit", 5]], "conds": [[false, 2, [0, [0, 10, false], null], [0, 21, false], null]]}, "select": [false, [[0, [0, [0, 12, false], null]]]], "where": [[false, 2, [0, [0, 26, false], null], {"from": {"table_units": [["table_unit", 5]], "conds": []}, "select": [false, [[1, [0, [0, 26, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 4], ["table_unit", 5]], "conds": [[false, 2, [0, [0, 10, false], null], [0, 21, false], null]]}, "select": [false, [[0, [0, [0, 12, false], null]]]], "where": [[false, 2, [0, [0, 26, false], null], {"from": {"table_units": [["table_unit", 5]], "conds": []}, "select": [false, [[1, [0, [0, 26, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["List", "the", "last", "name", "of", "the", "owner", "owning", "the", "youngest", "dog", "."], "ru": ["\u0423\u043a\u0430\u0436\u0438\u0442\u0435", "\u0444\u0430\u043c\u0438\u043b\u0438\u044e", "\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430", "\u0441\u0430\u043c\u043e\u0439", "\u043c\u043e\u043b\u043e\u0434\u043e\u0439", "\u0441\u043e\u0431\u0430\u043a\u0438", "."]}, "query_toks": {"en": ["select", "t1.last_name", "from", "owners", "as", "t1", "join", "dogs", "as", "t2", "on", "t1.owner_id", "=", "t2.owner_id", "where", "t2.age", "=", "(", "select", "max", "(", "age", ")", "from", "dogs", ")", ";"], "ru": ["select", "t1.last_name", "from", "owners", "as", "t1", "join", "dogs", "as", "t2", "on", "t1.owner_id", "=", "t2.owner_id", "where", "t2.age", "=", "(", "select", "max", "(", "age", ")", "from", "dogs", ")", ";"]}, "query_toks_no_values": {"en": ["select", "t1.last_name", "from", "owners", "as", "t1", "join", "dogs", "as", "t2", "on", "t1.owner_id", "=", "t2.owner_id", "where", "t2.age", "=", "(", "select", "max", "(", "age", ")", "from", "dogs", ")", ";"], "ru": ["select", "t1.last_name", "from", "owners", "as", "t1", "join", "dogs", "as", "t2", "on", "t1.owner_id", "=", "t2.owner_id", "where", "t2.age", "=", "(", "select", "max", "(", "age", ")", "from", "dogs", ")", ";"]}, "masked_query": "SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs );", "question_pauq": {"ru": "\u0423\u043a\u0430\u0436\u0438\u0442\u0435 \u0444\u0430\u043c\u0438\u043b\u0438\u044e \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430 \u0441\u0430\u043c\u043e\u0439 \u043c\u043e\u043b\u043e\u0434\u043e\u0439 \u0441\u043e\u0431\u0430\u043a\u0438."}, "question": "List the last name of the owner owning the youngest dog.", "kb_id": "dog_kennels"}, {"id": "D_0962", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs );"}, "sql": {"en": {"from": {"table_units": [["table_unit", 4], ["table_unit", 5]], "conds": [[false, 2, [0, [0, 10, false], null], [0, 21, false], null]]}, "select": [false, [[0, [0, [0, 12, false], null]]]], "where": [[false, 2, [0, [0, 26, false], null], {"from": {"table_units": [["table_unit", 5]], "conds": []}, "select": [false, [[1, [0, [0, 26, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 4], ["table_unit", 5]], "conds": [[false, 2, [0, [0, 10, false], null], [0, 21, false], null]]}, "select": [false, [[0, [0, [0, 12, false], null]]]], "where": [[false, 2, [0, [0, 26, false], null], {"from": {"table_units": [["table_unit", 5]], "conds": []}, "select": [false, [[1, [0, [0, 26, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Who", "owns", "the", "youngest", "dog", "?", "Give", "me", "his", "or", "her", "last", "name", "."], "ru": ["\u041a\u043e\u043c\u0443", "\u043f\u0440\u0438\u043d\u0430\u0434\u043b\u0435\u0436\u0438\u0442", "\u0441\u0430\u043c\u0430\u044f", "\u043c\u043e\u043b\u043e\u0434\u0430\u044f", "\u0441\u043e\u0431\u0430\u043a\u0430", "?", "\u041d\u0430\u0437\u043e\u0432\u0438", "\u043c\u043d\u0435", "\u0435\u0433\u043e", "\u0438\u043b\u0438", "\u0435\u0435", "\u0444\u0430\u043c\u0438\u043b\u0438\u044e", "."]}, "query_toks": {"en": ["select", "t1.last_name", "from", "owners", "as", "t1", "join", "dogs", "as", "t2", "on", "t1.owner_id", "=", "t2.owner_id", "where", "t2.age", "=", "(", "select", "max", "(", "age", ")", "from", "dogs", ")", ";"], "ru": ["select", "t1.last_name", "from", "owners", "as", "t1", "join", "dogs", "as", "t2", "on", "t1.owner_id", "=", "t2.owner_id", "where", "t2.age", "=", "(", "select", "max", "(", "age", ")", "from", "dogs", ")", ";"]}, "query_toks_no_values": {"en": ["select", "t1.last_name", "from", "owners", "as", "t1", "join", "dogs", "as", "t2", "on", "t1.owner_id", "=", "t2.owner_id", "where", "t2.age", "=", "(", "select", "max", "(", "age", ")", "from", "dogs", ")", ";"], "ru": ["select", "t1.last_name", "from", "owners", "as", "t1", "join", "dogs", "as", "t2", "on", "t1.owner_id", "=", "t2.owner_id", "where", "t2.age", "=", "(", "select", "max", "(", "age", ")", "from", "dogs", ")", ";"]}, "masked_query": "SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs );", "question_pauq": {"ru": "\u041a\u043e\u043c\u0443 \u043f\u0440\u0438\u043d\u0430\u0434\u043b\u0435\u0436\u0438\u0442 \u0441\u0430\u043c\u0430\u044f \u043c\u043e\u043b\u043e\u0434\u0430\u044f \u0441\u043e\u0431\u0430\u043a\u0430? \u041d\u0430\u0437\u043e\u0432\u0438 \u043c\u043d\u0435 \u0435\u0433\u043e \u0438\u043b\u0438 \u0435\u0435 \u0444\u0430\u043c\u0438\u043b\u0438\u044e."}, "question": "Who owns the youngest dog? Give me his or her last name.", "kb_id": "dog_kennels"}, {"id": "D_0963", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT email_address FROM Professionals WHERE state  =  '\u041c\u043e\u0441\u043a\u043e\u0432\u0441\u043a\u0430\u044f \u043e\u0431\u043b\u0430\u0441\u0442\u044c' OR state  =  '\u0412\u043e\u0440\u043e\u043d\u0435\u0436\u0441\u043a\u0430\u044f \u043e\u0431\u043b\u0430\u0441\u0442\u044c';"}, "sql": {"en": {"from": {"table_units": [["table_unit", 6]], "conds": []}, "select": [false, [[0, [0, [0, 41, false], null]]]], "where": [[false, 2, [0, [0, 38, false], null], "\"Hawaii\"", null], "or", [false, 2, [0, [0, 38, false], null], "\"Wisconsin\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 6]], "conds": []}, "select": [false, [[0, [0, [0, 41, false], null]]]], "where": [[false, 2, [0, [0, 38, false], null], "\"\u041c\u043e\u0441\u043a\u043e\u0432\u0441\u043a\u0430\u044f \u043e\u0431\u043b\u0430\u0441\u0442\u044c\"", null], "or", [false, 2, [0, [0, 38, false], null], "\"\u0412\u043e\u0440\u043e\u043d\u0435\u0436\u0441\u043a\u0430\u044f \u043e\u0431\u043b\u0430\u0441\u0442\u044c\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["List", "the", "emails", "of", "the", "professionals", "who", "live", "in", "the", "state", "of", "Hawaii", "or", "the", "state", "of", "Wisconsin", "."], "ru": ["\u041f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0438\u0442\u0435", "\u0430\u0434\u0440\u0435\u0441\u0430", "\u044d\u043b\u0435\u043a\u0442\u0440\u043e\u043d\u043d\u043e\u0439", "\u043f\u043e\u0447\u0442\u044b", "\u0441\u043f\u0435\u0446\u0438\u0430\u043b\u0438\u0441\u0442\u043e\u0432", ",", "\u043f\u0440\u043e\u0436\u0438\u0432\u0430\u044e\u0449\u0438\u0445", "\u0432", "\u0412\u043e\u0440\u043e\u043d\u0435\u0436\u0441\u043a\u043e\u0439", "\u043e\u0431\u043b\u0430\u0441\u0442\u0438", "\u0438\u043b\u0438", "\u041c\u043e\u0441\u043a\u043e\u0432\u0441\u043a\u043e\u0439", "\u043e\u0431\u043b\u0430\u0441\u0442\u0438", "."]}, "query_toks": {"en": ["select", "email_address", "from", "professionals", "where", "state", "=", "\"Hawaii\"", "or", "state", "=", "\"Wisconsin\"", ";"], "ru": ["select", "email_address", "from", "professionals", "where", "state", "=", "\"\u041c\u043e\u0441\u043a\u043e\u0432\u0441\u043a\u0430\u044f \u043e\u0431\u043b\u0430\u0441\u0442\u044c\"", "or", "state", "=", "\"\u0412\u043e\u0440\u043e\u043d\u0435\u0436\u0441\u043a\u0430\u044f \u043e\u0431\u043b\u0430\u0441\u0442\u044c\"", ";"]}, "query_toks_no_values": {"en": ["select", "email_address", "from", "professionals", "where", "state", "=", "value", "or", "state", "=", "value", ";"], "ru": ["select", "email_address", "from", "professionals", "where", "state", "=", "value", "or", "state", "=", "value", ";"]}, "masked_query": "SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin';", "question_pauq": {"ru": "\u041f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0438\u0442\u0435 \u0430\u0434\u0440\u0435\u0441\u0430 \u044d\u043b\u0435\u043a\u0442\u0440\u043e\u043d\u043d\u043e\u0439 \u043f\u043e\u0447\u0442\u044b \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u0438\u0441\u0442\u043e\u0432, \u043f\u0440\u043e\u0436\u0438\u0432\u0430\u044e\u0449\u0438\u0445 \u0432 \u0412\u043e\u0440\u043e\u043d\u0435\u0436\u0441\u043a\u043e\u0439 \u043e\u0431\u043b\u0430\u0441\u0442\u0438 \u0438\u043b\u0438 \u041c\u043e\u0441\u043a\u043e\u0432\u0441\u043a\u043e\u0439 \u043e\u0431\u043b\u0430\u0441\u0442\u0438."}, "question": "List the emails of the professionals who live in the state of Hawaii or the state of Wisconsin.", "kb_id": "dog_kennels"}, {"id": "D_0964", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT email_address FROM Professionals WHERE state  =  '\u041c\u043e\u0441\u043a\u043e\u0432\u0441\u043a\u0430\u044f \u043e\u0431\u043b\u0430\u0441\u0442\u044c' OR state  =  '\u0412\u043e\u0440\u043e\u043d\u0435\u0436\u0441\u043a\u0430\u044f \u043e\u0431\u043b\u0430\u0441\u0442\u044c';"}, "sql": {"en": {"from": {"table_units": [["table_unit", 6]], "conds": []}, "select": [false, [[0, [0, [0, 41, false], null]]]], "where": [[false, 2, [0, [0, 38, false], null], "\"Hawaii\"", null], "or", [false, 2, [0, [0, 38, false], null], "\"Wisconsin\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 6]], "conds": []}, "select": [false, [[0, [0, [0, 41, false], null]]]], "where": [[false, 2, [0, [0, 38, false], null], "\"\u041c\u043e\u0441\u043a\u043e\u0432\u0441\u043a\u0430\u044f \u043e\u0431\u043b\u0430\u0441\u0442\u044c\"", null], "or", [false, 2, [0, [0, 38, false], null], "\"\u0412\u043e\u0440\u043e\u043d\u0435\u0436\u0441\u043a\u0430\u044f \u043e\u0431\u043b\u0430\u0441\u0442\u044c\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "the", "emails", "of", "the", "professionals", "living", "in", "either", "the", "state", "of", "Hawaii", "or", "the", "state", "of", "Wisconsin", "?"], "ru": ["\u041a\u0430\u043a\u0438\u0435", "\u0430\u0434\u0440\u0435\u0441\u0430", "\u044d\u043b\u0435\u043a\u0442\u0440\u043e\u043d\u043d\u044b\u0445", "\u043f\u043e\u0447\u0442", "\u0443", "\u0441\u043f\u0435\u0446\u0438\u0430\u043b\u0438\u0441\u0442\u043e\u0432", ",", "\u043f\u0440\u043e\u0436\u0438\u0432\u0430\u044e\u0449\u0438\u0445", "\u0432", "\u0412\u043e\u0440\u043e\u043d\u0435\u0436\u0441\u043a\u043e\u0439", "\u043e\u0431\u043b\u0430\u0441\u0442\u0438", "\u0438\u043b\u0438", "\u041c\u043e\u0441\u043a\u043e\u0432\u0441\u043a\u043e\u0439", "\u043e\u0431\u043b\u0430\u0441\u0442\u0438", "?"]}, "query_toks": {"en": ["select", "email_address", "from", "professionals", "where", "state", "=", "\"Hawaii\"", "or", "state", "=", "\"Wisconsin\"", ";"], "ru": ["select", "email_address", "from", "professionals", "where", "state", "=", "\"\u041c\u043e\u0441\u043a\u043e\u0432\u0441\u043a\u0430\u044f \u043e\u0431\u043b\u0430\u0441\u0442\u044c\"", "or", "state", "=", "\"\u0412\u043e\u0440\u043e\u043d\u0435\u0436\u0441\u043a\u0430\u044f \u043e\u0431\u043b\u0430\u0441\u0442\u044c\"", ";"]}, "query_toks_no_values": {"en": ["select", "email_address", "from", "professionals", "where", "state", "=", "value", "or", "state", "=", "value", ";"], "ru": ["select", "email_address", "from", "professionals", "where", "state", "=", "value", "or", "state", "=", "value", ";"]}, "masked_query": "SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin';", "question_pauq": {"ru": "\u041a\u0430\u043a\u0438\u0435 \u0430\u0434\u0440\u0435\u0441\u0430 \u044d\u043b\u0435\u043a\u0442\u0440\u043e\u043d\u043d\u044b\u0445 \u043f\u043e\u0447\u0442 \u0443 \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u0438\u0441\u0442\u043e\u0432, \u043f\u0440\u043e\u0436\u0438\u0432\u0430\u044e\u0449\u0438\u0445 \u0432 \u0412\u043e\u0440\u043e\u043d\u0435\u0436\u0441\u043a\u043e\u0439 \u043e\u0431\u043b\u0430\u0441\u0442\u0438 \u0438\u043b\u0438 \u041c\u043e\u0441\u043a\u043e\u0432\u0441\u043a\u043e\u0439 \u043e\u0431\u043b\u0430\u0441\u0442\u0438?"}, "question": "What are the emails of the professionals living in either the state of Hawaii or the state of Wisconsin?", "kb_id": "dog_kennels"}, {"id": "D_0965", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT date_arrived ,  date_departed FROM Dogs;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 5]], "conds": []}, "select": [false, [[0, [0, [0, 30, false], null]], [0, [0, [0, 32, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 5]], "conds": []}, "select": [false, [[0, [0, [0, 30, false], null]], [0, [0, [0, 32, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "the", "arriving", "date", "and", "the", "departing", "date", "of", "all", "the", "dogs", "?"], "ru": ["\u041a\u0430\u043a\u0430\u044f", "\u0434\u0430\u0442\u0430", "\u043f\u0440\u0438\u0431\u044b\u0442\u0438\u044f", "\u0438", "\u0434\u0430\u0442\u0430", "\u043e\u0442\u044a\u0435\u0437\u0434\u0430", "\u0432\u0441\u0435\u0445", "\u0441\u043e\u0431\u0430\u043a", "?"]}, "query_toks": {"en": ["select", "date_arrived", ",", "date_departed", "from", "dogs", ";"], "ru": ["select", "date_arrived", ",", "date_departed", "from", "dogs", ";"]}, "query_toks_no_values": {"en": ["select", "date_arrived", ",", "date_departed", "from", "dogs", ";"], "ru": ["select", "date_arrived", ",", "date_departed", "from", "dogs", ";"]}, "masked_query": "SELECT date_arrived ,  date_departed FROM Dogs;", "question_pauq": {"ru": "\u041a\u0430\u043a\u0430\u044f \u0434\u0430\u0442\u0430 \u043f\u0440\u0438\u0431\u044b\u0442\u0438\u044f \u0438 \u0434\u0430\u0442\u0430 \u043e\u0442\u044a\u0435\u0437\u0434\u0430 \u0432\u0441\u0435\u0445 \u0441\u043e\u0431\u0430\u043a?"}, "question": "What are the arriving date and the departing date of all the dogs?", "kb_id": "dog_kennels"}, {"id": "D_0966", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT date_arrived ,  date_departed FROM Dogs;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 5]], "conds": []}, "select": [false, [[0, [0, [0, 30, false], null]], [0, [0, [0, 32, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 5]], "conds": []}, "select": [false, [[0, [0, [0, 30, false], null]], [0, [0, [0, 32, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["List", "the", "arrival", "date", "and", "the", "departure", "date", "for", "all", "the", "dogs", "."], "ru": ["\u0423\u043a\u0430\u0436\u0438\u0442\u0435", "\u0434\u0430\u0442\u0443", "\u043f\u0440\u0438\u0431\u044b\u0442\u0438\u044f", "\u0438", "\u0434\u0430\u0442\u0443", "\u043e\u0442\u044a\u0435\u0437\u0434\u0430", "\u0434\u043b\u044f", "\u0432\u0441\u0435\u0445", "\u0441\u043e\u0431\u0430\u043a", "."]}, "query_toks": {"en": ["select", "date_arrived", ",", "date_departed", "from", "dogs", ";"], "ru": ["select", "date_arrived", ",", "date_departed", "from", "dogs", ";"]}, "query_toks_no_values": {"en": ["select", "date_arrived", ",", "date_departed", "from", "dogs", ";"], "ru": ["select", "date_arrived", ",", "date_departed", "from", "dogs", ";"]}, "masked_query": "SELECT date_arrived ,  date_departed FROM Dogs;", "question_pauq": {"ru": "\u0423\u043a\u0430\u0436\u0438\u0442\u0435 \u0434\u0430\u0442\u0443 \u043f\u0440\u0438\u0431\u044b\u0442\u0438\u044f \u0438 \u0434\u0430\u0442\u0443 \u043e\u0442\u044a\u0435\u0437\u0434\u0430 \u0434\u043b\u044f \u0432\u0441\u0435\u0445 \u0441\u043e\u0431\u0430\u043a."}, "question": "List the arrival date and the departure date for all the dogs.", "kb_id": "dog_kennels"}, {"id": "D_0967", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT count(DISTINCT dog_id) FROM Treatments;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 7]], "conds": []}, "select": [false, [[3, [0, [0, 45, true], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 7]], "conds": []}, "select": [false, [[3, [0, [0, 45, true], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["How", "many", "dogs", "went", "through", "any", "treatments", "?"], "ru": ["\u0421\u043a\u043e\u043b\u044c\u043a\u043e", "\u0441\u043e\u0431\u0430\u043a", "\u043f\u0440\u043e\u0448\u043b\u0438", "\u043a\u0430\u043a\u043e\u0435-\u043b\u0438\u0431\u043e", "\u043b\u0435\u0447\u0435\u043d\u0438\u0435", "?"]}, "query_toks": {"en": ["select", "count", "(", "distinct", "dog_id", ")", "from", "treatments", ";"], "ru": ["select", "count", "(", "distinct", "dog_id", ")", "from", "treatments", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "distinct", "dog_id", ")", "from", "treatments", ";"], "ru": ["select", "count", "(", "distinct", "dog_id", ")", "from", "treatments", ";"]}, "masked_query": "SELECT count(DISTINCT dog_id) FROM Treatments;", "question_pauq": {"ru": "\u0421\u043a\u043e\u043b\u044c\u043a\u043e \u0441\u043e\u0431\u0430\u043a \u043f\u0440\u043e\u0448\u043b\u0438 \u043a\u0430\u043a\u043e\u0435-\u043b\u0438\u0431\u043e \u043b\u0435\u0447\u0435\u043d\u0438\u0435?"}, "question": "How many dogs went through any treatments?", "kb_id": "dog_kennels"}, {"id": "D_0968", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT count(DISTINCT dog_id) FROM Treatments;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 7]], "conds": []}, "select": [false, [[3, [0, [0, 45, true], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 7]], "conds": []}, "select": [false, [[3, [0, [0, 45, true], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Count", "the", "number", "of", "dogs", "that", "went", "through", "a", "treatment", "."], "ru": ["\u041f\u043e\u0434\u0441\u0447\u0438\u0442\u0430\u0439\u0442\u0435", "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e", "\u0441\u043e\u0431\u0430\u043a", ",", "\u043f\u0440\u043e\u0448\u0435\u0434\u0448\u0438\u0445", "\u043a\u0443\u0440\u0441", "\u043b\u0435\u0447\u0435\u043d\u0438\u044f", "."]}, "query_toks": {"en": ["select", "count", "(", "distinct", "dog_id", ")", "from", "treatments", ";"], "ru": ["select", "count", "(", "distinct", "dog_id", ")", "from", "treatments", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "distinct", "dog_id", ")", "from", "treatments", ";"], "ru": ["select", "count", "(", "distinct", "dog_id", ")", "from", "treatments", ";"]}, "masked_query": "SELECT count(DISTINCT dog_id) FROM Treatments;", "question_pauq": {"ru": "\u041f\u043e\u0434\u0441\u0447\u0438\u0442\u0430\u0439\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u043e\u0431\u0430\u043a, \u043f\u0440\u043e\u0448\u0435\u0434\u0448\u0438\u0445 \u043a\u0443\u0440\u0441 \u043b\u0435\u0447\u0435\u043d\u0438\u044f."}, "question": "Count the number of dogs that went through a treatment.", "kb_id": "dog_kennels"}, {"id": "D_0969", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT count(DISTINCT professional_id) FROM Treatments;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 7]], "conds": []}, "select": [false, [[3, [0, [0, 46, true], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 7]], "conds": []}, "select": [false, [[3, [0, [0, 46, true], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["How", "many", "professionals", "have", "performed", "any", "treatment", "to", "dogs", "?"], "ru": ["\u0421\u043a\u043e\u043b\u044c\u043a\u043e", "\u0441\u043f\u0435\u0446\u0438\u0430\u043b\u0438\u0441\u0442\u043e\u0432", "\u043b\u0435\u0447\u0438\u043b\u0438", "\u0441\u043e\u0431\u0430\u043a", "?"]}, "query_toks": {"en": ["select", "count", "(", "distinct", "professional_id", ")", "from", "treatments", ";"], "ru": ["select", "count", "(", "distinct", "professional_id", ")", "from", "treatments", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "distinct", "professional_id", ")", "from", "treatments", ";"], "ru": ["select", "count", "(", "distinct", "professional_id", ")", "from", "treatments", ";"]}, "masked_query": "SELECT count(DISTINCT professional_id) FROM Treatments;", "question_pauq": {"ru": "\u0421\u043a\u043e\u043b\u044c\u043a\u043e \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u0438\u0441\u0442\u043e\u0432 \u043b\u0435\u0447\u0438\u043b\u0438 \u0441\u043e\u0431\u0430\u043a?"}, "question": "How many professionals have performed any treatment to dogs?", "kb_id": "dog_kennels"}, {"id": "D_0970", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT count(DISTINCT professional_id) FROM Treatments;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 7]], "conds": []}, "select": [false, [[3, [0, [0, 46, true], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 7]], "conds": []}, "select": [false, [[3, [0, [0, 46, true], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Find", "the", "number", "of", "professionals", "who", "have", "ever", "treated", "dogs", "."], "ru": ["\u041d\u0430\u0439\u0434\u0438\u0442\u0435", "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e", "\u0441\u043f\u0435\u0446\u0438\u0430\u043b\u0438\u0441\u0442\u043e\u0432", ",", "\u043a\u043e\u0442\u043e\u0440\u044b\u0435", "\u043a\u043e\u0433\u0434\u0430-\u043b\u0438\u0431\u043e", "\u043b\u0435\u0447\u0438\u043b\u0438", "\u0441\u043e\u0431\u0430\u043a", "."]}, "query_toks": {"en": ["select", "count", "(", "distinct", "professional_id", ")", "from", "treatments", ";"], "ru": ["select", "count", "(", "distinct", "professional_id", ")", "from", "treatments", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "distinct", "professional_id", ")", "from", "treatments", ";"], "ru": ["select", "count", "(", "distinct", "professional_id", ")", "from", "treatments", ";"]}, "masked_query": "SELECT count(DISTINCT professional_id) FROM Treatments;", "question_pauq": {"ru": "\u041d\u0430\u0439\u0434\u0438\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u0438\u0441\u0442\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043a\u043e\u0433\u0434\u0430-\u043b\u0438\u0431\u043e \u043b\u0435\u0447\u0438\u043b\u0438 \u0441\u043e\u0431\u0430\u043a."}, "question": "Find the number of professionals who have ever treated dogs.", "kb_id": "dog_kennels"}, {"id": "D_0971", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%\u0412\u0435\u043b\u0438\u043a\u0438\u0439%';"}, "sql": {"en": {"from": {"table_units": [["table_unit", 6]], "conds": []}, "select": [false, [[0, [0, [0, 34, false], null]], [0, [0, [0, 36, false], null]], [0, [0, [0, 37, false], null]], [0, [0, [0, 38, false], null]]]], "where": [[false, 9, [0, [0, 37, false], null], "\"%West%\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 6]], "conds": []}, "select": [false, [[0, [0, [0, 34, false], null]], [0, [0, [0, 36, false], null]], [0, [0, [0, 37, false], null]], [0, [0, [0, 38, false], null]]]], "where": [[false, 9, [0, [0, 37, false], null], "\"%\u0412\u0435\u043b\u0438\u043a\u0438\u0439%\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Which", "professionals", "live", "in", "a", "city", "containing", "the", "substring", "'West", "'", "?", "List", "his", "or", "her", "role", ",", "street", ",", "city", "and", "state", "."], "ru": ["\u041a\u0430\u043a\u0438\u0435", "\u0441\u043f\u0435\u0446\u0438\u0430\u043b\u0438\u0441\u0442\u044b", "\u0436\u0438\u0432\u0443\u0442", "\u0432", "\u0433\u043e\u0440\u043e\u0434\u0435", ",", "\u0433\u0434\u0435", "\u0435\u0441\u0442\u044c", "\u043f\u043e\u0434\u0441\u0442\u0440\u043e\u043a\u0430", "\u00ab", "\u0412\u0435\u043b\u0438\u043a\u0438\u0439", "\u00bb", "?", "\u041f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0438\u0442\u0435", "\u0435\u0433\u043e", "\u0438\u043b\u0438", "\u0435\u0435", "\u0434\u043e\u043b\u0436\u043d\u043e\u0441\u0442\u044c", ",", "\u0443\u043b\u0438\u0446\u0443", ",", "\u0433\u043e\u0440\u043e\u0434", "\u0438", "\u0448\u0442\u0430\u0442", "."]}, "query_toks": {"en": ["select", "role_code", ",", "street", ",", "city", ",", "state", "from", "professionals", "where", "city", "like", "\"%West%\"", ";"], "ru": ["select", "role_code", ",", "street", ",", "city", ",", "state", "from", "professionals", "where", "city", "like", "\"%\u0412\u0435\u043b\u0438\u043a\u0438\u0439%\"", ";"]}, "query_toks_no_values": {"en": ["select", "role_code", ",", "street", ",", "city", ",", "state", "from", "professionals", "where", "city", "like", "value", ";"], "ru": ["select", "role_code", ",", "street", ",", "city", ",", "state", "from", "professionals", "where", "city", "like", "value", ";"]}, "masked_query": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%';", "question_pauq": {"ru": "\u041a\u0430\u043a\u0438\u0435 \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u0438\u0441\u0442\u044b \u0436\u0438\u0432\u0443\u0442 \u0432 \u0433\u043e\u0440\u043e\u0434\u0435, \u0433\u0434\u0435 \u0435\u0441\u0442\u044c \u043f\u043e\u0434\u0441\u0442\u0440\u043e\u043a\u0430 \u00ab\u0412\u0435\u043b\u0438\u043a\u0438\u0439\u00bb? \u041f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0438\u0442\u0435 \u0435\u0433\u043e \u0438\u043b\u0438 \u0435\u0435 \u0434\u043e\u043b\u0436\u043d\u043e\u0441\u0442\u044c, \u0443\u043b\u0438\u0446\u0443, \u0433\u043e\u0440\u043e\u0434 \u0438 \u0448\u0442\u0430\u0442."}, "question": "Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.", "kb_id": "dog_kennels"}, {"id": "D_0972", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%\u0412\u0435\u043b\u0438\u043a\u0438\u0439%';"}, "sql": {"en": {"from": {"table_units": [["table_unit", 6]], "conds": []}, "select": [false, [[0, [0, [0, 34, false], null]], [0, [0, [0, 36, false], null]], [0, [0, [0, 37, false], null]], [0, [0, [0, 38, false], null]]]], "where": [[false, 9, [0, [0, 37, false], null], "\"%West%\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 6]], "conds": []}, "select": [false, [[0, [0, [0, 34, false], null]], [0, [0, [0, 36, false], null]], [0, [0, [0, 37, false], null]], [0, [0, [0, 38, false], null]]]], "where": [[false, 9, [0, [0, 37, false], null], "\"%\u0412\u0435\u043b\u0438\u043a\u0438\u0439%\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Find", "the", "role", ",", "street", ",", "city", "and", "state", "of", "the", "professionals", "living", "in", "a", "city", "that", "contains", "the", "substring", "'West", "'", "."], "ru": ["\u041d\u0430\u0439\u0434\u0438\u0442\u0435", "\u0434\u043e\u043b\u0436\u043d\u043e\u0441\u0442\u044c", ",", "\u0443\u043b\u0438\u0446\u0443", ",", "\u0433\u043e\u0440\u043e\u0434", "\u0438", "\u0448\u0442\u0430\u0442", "\u0441\u043f\u0435\u0446\u0438\u0430\u043b\u0438\u0441\u0442\u043e\u0432", ",", "\u0436\u0438\u0432\u0443\u0449\u0438\u0445", "\u0432", "\u0433\u043e\u0440\u043e\u0434\u0435", ",", "\u043a\u043e\u0442\u043e\u0440\u044b\u0439", "\u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442", "\u043f\u043e\u0434\u0441\u0442\u0440\u043e\u043a\u0443", "\u00ab", "\u0412\u0435\u043b\u0438\u043a\u0438\u0439", "\u00bb", "."]}, "query_toks": {"en": ["select", "role_code", ",", "street", ",", "city", ",", "state", "from", "professionals", "where", "city", "like", "\"%West%\"", ";"], "ru": ["select", "role_code", ",", "street", ",", "city", ",", "state", "from", "professionals", "where", "city", "like", "\"%\u0412\u0435\u043b\u0438\u043a\u0438\u0439%\"", ";"]}, "query_toks_no_values": {"en": ["select", "role_code", ",", "street", ",", "city", ",", "state", "from", "professionals", "where", "city", "like", "value", ";"], "ru": ["select", "role_code", ",", "street", ",", "city", ",", "state", "from", "professionals", "where", "city", "like", "value", ";"]}, "masked_query": "SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%';", "question_pauq": {"ru": "\u041d\u0430\u0439\u0434\u0438\u0442\u0435 \u0434\u043e\u043b\u0436\u043d\u043e\u0441\u0442\u044c, \u0443\u043b\u0438\u0446\u0443, \u0433\u043e\u0440\u043e\u0434 \u0438 \u0448\u0442\u0430\u0442 \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u0438\u0441\u0442\u043e\u0432, \u0436\u0438\u0432\u0443\u0449\u0438\u0445 \u0432 \u0433\u043e\u0440\u043e\u0434\u0435, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043f\u043e\u0434\u0441\u0442\u0440\u043e\u043a\u0443 \u00ab\u0412\u0435\u043b\u0438\u043a\u0438\u0439\u00bb."}, "question": "Find the role, street, city and state of the professionals living in a city that contains the substring 'West'.", "kb_id": "dog_kennels"}, {"id": "D_0973", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%\u0430\u0432\u0442\u043e\u043d\u043e\u043c\u043d\u0430\u044f%';"}, "sql": {"en": {"from": {"table_units": [["table_unit", 4]], "conds": []}, "select": [false, [[0, [0, [0, 11, false], null]], [0, [0, [0, 12, false], null]], [0, [0, [0, 17, false], null]]]], "where": [[false, 9, [0, [0, 15, false], null], "\"%North%\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 4]], "conds": []}, "select": [false, [[0, [0, [0, 11, false], null]], [0, [0, [0, 12, false], null]], [0, [0, [0, 17, false], null]]]], "where": [[false, 9, [0, [0, 15, false], null], "\"%\u0430\u0432\u0442\u043e\u043d\u043e\u043c\u043d\u0430\u044f%\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Which", "owners", "live", "in", "the", "state", "whose", "name", "contains", "the", "substring", "'North", "'", "?", "List", "his", "first", "name", ",", "last", "name", "and", "email", "."], "ru": ["\u041a\u0430\u043a\u0438\u0435", "\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b", "\u043f\u0440\u043e\u0436\u0438\u0432\u0430\u044e\u0442", "\u0432", "\u043e\u0431\u043b\u0430\u0441\u0442\u0438", ",", "\u0432", "\u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0438", "\u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e", "\u0435\u0441\u0442\u044c", "\u043f\u043e\u0434\u0441\u0442\u0440\u043e\u043a\u0430", "\u00ab", "\u0430\u0432\u0442\u043e\u043d\u043e\u043c\u043d\u0430\u044f", "\u00bb", "?", "\u0423\u043a\u0430\u0436\u0438\u0442\u0435", "\u0438\u0445", "\u0438\u043c\u044f", ",", "\u0444\u0430\u043c\u0438\u043b\u0438\u044e", "\u0438", "\u0430\u0434\u0440\u0435\u0441", "\u044d\u043b\u0435\u043a\u0442\u0440\u043e\u043d\u043d\u043e\u0439", "\u043f\u043e\u0447\u0442\u044b", "."]}, "query_toks": {"en": ["select", "first_name", ",", "last_name", ",", "email_address", "from", "owners", "where", "state", "like", "\"%North%\"", ";"], "ru": ["select", "first_name", ",", "last_name", ",", "email_address", "from", "owners", "where", "state", "like", "\"%\u0430\u0432\u0442\u043e\u043d\u043e\u043c\u043d\u0430\u044f%\"", ";"]}, "query_toks_no_values": {"en": ["select", "first_name", ",", "last_name", ",", "email_address", "from", "owners", "where", "state", "like", "value", ";"], "ru": ["select", "first_name", ",", "last_name", ",", "email_address", "from", "owners", "where", "state", "like", "value", ";"]}, "masked_query": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%';", "question_pauq": {"ru": "\u041a\u0430\u043a\u0438\u0435 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b \u043f\u0440\u043e\u0436\u0438\u0432\u0430\u044e\u0442 \u0432 \u043e\u0431\u043b\u0430\u0441\u0442\u0438, \u0432 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0438 \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u0435\u0441\u0442\u044c \u043f\u043e\u0434\u0441\u0442\u0440\u043e\u043a\u0430 \u00ab\u0430\u0432\u0442\u043e\u043d\u043e\u043c\u043d\u0430\u044f\u00bb? \u0423\u043a\u0430\u0436\u0438\u0442\u0435 \u0438\u0445 \u0438\u043c\u044f, \u0444\u0430\u043c\u0438\u043b\u0438\u044e \u0438 \u0430\u0434\u0440\u0435\u0441 \u044d\u043b\u0435\u043a\u0442\u0440\u043e\u043d\u043d\u043e\u0439 \u043f\u043e\u0447\u0442\u044b."}, "question": "Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.", "kb_id": "dog_kennels"}, {"id": "D_0974", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%\u0430\u0432\u0442\u043e\u043d\u043e\u043c\u043d\u0430\u044f%';"}, "sql": {"en": {"from": {"table_units": [["table_unit", 4]], "conds": []}, "select": [false, [[0, [0, [0, 11, false], null]], [0, [0, [0, 12, false], null]], [0, [0, [0, 17, false], null]]]], "where": [[false, 9, [0, [0, 15, false], null], "\"%North%\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 4]], "conds": []}, "select": [false, [[0, [0, [0, 11, false], null]], [0, [0, [0, 12, false], null]], [0, [0, [0, 17, false], null]]]], "where": [[false, 9, [0, [0, 15, false], null], "\"%\u0430\u0432\u0442\u043e\u043d\u043e\u043c\u043d\u0430\u044f%\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Return", "the", "first", "name", ",", "last", "name", "and", "email", "of", "the", "owners", "living", "in", "a", "state", "whose", "name", "contains", "the", "substring", "'North", "'", "."], "ru": ["\u041d\u0430\u0439\u0442\u0438", "\u0438\u043c\u044f", ",", "\u0444\u0430\u043c\u0438\u043b\u0438\u044e", "\u0438", "\u0430\u0434\u0440\u0435\u0441", "\u044d\u043b\u0435\u043a\u0442\u0440\u043e\u043d\u043d\u043e\u0439", "\u043f\u043e\u0447\u0442\u044b", "\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432", ",", "\u043f\u0440\u043e\u0436\u0438\u0432\u0430\u044e\u0449\u0438\u0445", "\u0432", "\u043e\u0431\u043b\u0430\u0441\u0442\u0438", ",", "\u0432", "\u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0438", "\u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e", "\u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442\u0441\u044f", "\u043f\u043e\u0434\u0441\u0442\u0440\u043e\u043a\u0430", "\u00ab", "\u0430\u0432\u0442\u043e\u043d\u043e\u043c\u043d\u0430\u044f", "\u00bb", "."]}, "query_toks": {"en": ["select", "first_name", ",", "last_name", ",", "email_address", "from", "owners", "where", "state", "like", "\"%North%\"", ";"], "ru": ["select", "first_name", ",", "last_name", ",", "email_address", "from", "owners", "where", "state", "like", "\"%\u0430\u0432\u0442\u043e\u043d\u043e\u043c\u043d\u0430\u044f%\"", ";"]}, "query_toks_no_values": {"en": ["select", "first_name", ",", "last_name", ",", "email_address", "from", "owners", "where", "state", "like", "value", ";"], "ru": ["select", "first_name", ",", "last_name", ",", "email_address", "from", "owners", "where", "state", "like", "value", ";"]}, "masked_query": "SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%';", "question_pauq": {"ru": "\u041d\u0430\u0439\u0442\u0438 \u0438\u043c\u044f, \u0444\u0430\u043c\u0438\u043b\u0438\u044e \u0438 \u0430\u0434\u0440\u0435\u0441 \u044d\u043b\u0435\u043a\u0442\u0440\u043e\u043d\u043d\u043e\u0439 \u043f\u043e\u0447\u0442\u044b \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432, \u043f\u0440\u043e\u0436\u0438\u0432\u0430\u044e\u0449\u0438\u0445 \u0432 \u043e\u0431\u043b\u0430\u0441\u0442\u0438, \u0432 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0438 \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442\u0441\u044f \u043f\u043e\u0434\u0441\u0442\u0440\u043e\u043a\u0430 \u00ab\u0430\u0432\u0442\u043e\u043d\u043e\u043c\u043d\u0430\u044f\u00bb."}, "question": "Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'.", "kb_id": "dog_kennels"}, {"id": "D_0975", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT count(*) FROM Dogs WHERE age  <  ( SELECT avg(age) FROM Dogs );"}, "sql": {"en": {"from": {"table_units": [["table_unit", 5]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 4, [0, [0, 26, false], null], {"from": {"table_units": [["table_unit", 5]], "conds": []}, "select": [false, [[5, [0, [0, 26, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 5]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 4, [0, [0, 26, false], null], {"from": {"table_units": [["table_unit", 5]], "conds": []}, "select": [false, [[5, [0, [0, 26, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["How", "many", "dogs", "have", "an", "age", "below", "the", "average", "?"], "ru": ["\u0421\u043a\u043e\u043b\u044c\u043a\u043e", "\u0441\u043e\u0431\u0430\u043a", "\u0438\u043c\u0435\u044e\u0442", "\u0432\u043e\u0437\u0440\u0430\u0441\u0442", "\u043d\u0438\u0436\u0435", "\u0441\u0440\u0435\u0434\u043d\u0435\u0433\u043e", "?"]}, "query_toks": {"en": ["select", "count", "(", "*", ")", "from", "dogs", "where", "age", "<", "(", "select", "avg", "(", "age", ")", "from", "dogs", ")", ";"], "ru": ["select", "count", "(", "*", ")", "from", "dogs", "where", "age", "<", "(", "select", "avg", "(", "age", ")", "from", "dogs", ")", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "*", ")", "from", "dogs", "where", "age", "<", "(", "select", "avg", "(", "age", ")", "from", "dogs", ")", ";"], "ru": ["select", "count", "(", "*", ")", "from", "dogs", "where", "age", "<", "(", "select", "avg", "(", "age", ")", "from", "dogs", ")", ";"]}, "masked_query": "SELECT count(*) FROM Dogs WHERE age  <  ( SELECT avg(age) FROM Dogs );", "question_pauq": {"ru": "\u0421\u043a\u043e\u043b\u044c\u043a\u043e \u0441\u043e\u0431\u0430\u043a \u0438\u043c\u0435\u044e\u0442 \u0432\u043e\u0437\u0440\u0430\u0441\u0442 \u043d\u0438\u0436\u0435 \u0441\u0440\u0435\u0434\u043d\u0435\u0433\u043e?"}, "question": "How many dogs have an age below the average?", "kb_id": "dog_kennels"}, {"id": "D_0976", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT count(*) FROM Dogs WHERE age  <  ( SELECT avg(age) FROM Dogs );"}, "sql": {"en": {"from": {"table_units": [["table_unit", 5]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 4, [0, [0, 26, false], null], {"from": {"table_units": [["table_unit", 5]], "conds": []}, "select": [false, [[5, [0, [0, 26, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 5]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 4, [0, [0, 26, false], null], {"from": {"table_units": [["table_unit", 5]], "conds": []}, "select": [false, [[5, [0, [0, 26, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Count", "the", "number", "of", "dogs", "of", "an", "age", "below", "the", "average", "."], "ru": ["\u041f\u043e\u0434\u0441\u0447\u0438\u0442\u0430\u0439\u0442\u0435", "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e", "\u0441\u043e\u0431\u0430\u043a", "\u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430", "\u043d\u0438\u0436\u0435", "\u0441\u0440\u0435\u0434\u043d\u0435\u0433\u043e", "."]}, "query_toks": {"en": ["select", "count", "(", "*", ")", "from", "dogs", "where", "age", "<", "(", "select", "avg", "(", "age", ")", "from", "dogs", ")", ";"], "ru": ["select", "count", "(", "*", ")", "from", "dogs", "where", "age", "<", "(", "select", "avg", "(", "age", ")", "from", "dogs", ")", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "*", ")", "from", "dogs", "where", "age", "<", "(", "select", "avg", "(", "age", ")", "from", "dogs", ")", ";"], "ru": ["select", "count", "(", "*", ")", "from", "dogs", "where", "age", "<", "(", "select", "avg", "(", "age", ")", "from", "dogs", ")", ";"]}, "masked_query": "SELECT count(*) FROM Dogs WHERE age  <  ( SELECT avg(age) FROM Dogs );", "question_pauq": {"ru": "\u041f\u043e\u0434\u0441\u0447\u0438\u0442\u0430\u0439\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u043e\u0431\u0430\u043a \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430 \u043d\u0438\u0436\u0435 \u0441\u0440\u0435\u0434\u043d\u0435\u0433\u043e."}, "question": "Count the number of dogs of an age below the average.", "kb_id": "dog_kennels"}, {"id": "D_0977", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 7]], "conds": []}, "select": [false, [[0, [0, [0, 49, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 48, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 7]], "conds": []}, "select": [false, [[0, [0, [0, 49, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 48, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["How", "much", "does", "the", "most", "recent", "treatment", "cost", "?"], "ru": ["\u0421\u043a\u043e\u043b\u044c\u043a\u043e", "\u0441\u0442\u043e\u0438\u043b\u043e", "\u0441\u0430\u043c\u043e\u0435", "\u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0435", "\u043b\u0435\u0447\u0435\u043d\u0438\u0435", "?"]}, "query_toks": {"en": ["select", "cost_of_treatment", "from", "treatments", "order", "by", "date_of_treatment", "desc", "limit", "1", ";"], "ru": ["select", "cost_of_treatment", "from", "treatments", "order", "by", "date_of_treatment", "desc", "limit", "1", ";"]}, "query_toks_no_values": {"en": ["select", "cost_of_treatment", "from", "treatments", "order", "by", "date_of_treatment", "desc", "limit", "1", ";"], "ru": ["select", "cost_of_treatment", "from", "treatments", "order", "by", "date_of_treatment", "desc", "limit", "1", ";"]}, "masked_query": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1;", "question_pauq": {"ru": "\u0421\u043a\u043e\u043b\u044c\u043a\u043e \u0441\u0442\u043e\u0438\u043b\u043e \u0441\u0430\u043c\u043e\u0435 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0435 \u043b\u0435\u0447\u0435\u043d\u0438\u0435?"}, "question": "How much does the most recent treatment cost?", "kb_id": "dog_kennels"}, {"id": "D_0978", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 7]], "conds": []}, "select": [false, [[0, [0, [0, 49, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 48, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 7]], "conds": []}, "select": [false, [[0, [0, [0, 49, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 48, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Show", "me", "the", "cost", "of", "the", "most", "recently", "performed", "treatment", "."], "ru": ["\u041f\u043e\u043a\u0430\u0436\u0438\u0442\u0435", "\u043c\u043d\u0435", "\u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c", "\u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0433\u043e", "\u043f\u0440\u043e\u0432\u0435\u0434\u0435\u043d\u043d\u043e\u0433\u043e", "\u043b\u0435\u0447\u0435\u043d\u0438\u044f", "."]}, "query_toks": {"en": ["select", "cost_of_treatment", "from", "treatments", "order", "by", "date_of_treatment", "desc", "limit", "1", ";"], "ru": ["select", "cost_of_treatment", "from", "treatments", "order", "by", "date_of_treatment", "desc", "limit", "1", ";"]}, "query_toks_no_values": {"en": ["select", "cost_of_treatment", "from", "treatments", "order", "by", "date_of_treatment", "desc", "limit", "1", ";"], "ru": ["select", "cost_of_treatment", "from", "treatments", "order", "by", "date_of_treatment", "desc", "limit", "1", ";"]}, "masked_query": "SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1;", "question_pauq": {"ru": "\u041f\u043e\u043a\u0430\u0436\u0438\u0442\u0435 \u043c\u043d\u0435 \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0435\u0433\u043e \u043f\u0440\u043e\u0432\u0435\u0434\u0435\u043d\u043d\u043e\u0433\u043e \u043b\u0435\u0447\u0435\u043d\u0438\u044f."}, "question": "Show me the cost of the most recently performed treatment.", "kb_id": "dog_kennels"}, {"id": "D_0979", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT count(*) FROM Dogs WHERE dog_id NOT IN ( SELECT dog_id FROM Treatments );"}, "sql": {"en": {"from": {"table_units": [["table_unit", 5]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[true, 8, [0, [0, 20, false], null], {"from": {"table_units": [["table_unit", 7]], "conds": []}, "select": [false, [[0, [0, [0, 45, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 5]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[true, 8, [0, [0, 20, false], null], {"from": {"table_units": [["table_unit", 7]], "conds": []}, "select": [false, [[0, [0, [0, 45, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["How", "many", "dogs", "have", "not", "gone", "through", "any", "treatment", "?"], "ru": ["\u0421\u043a\u043e\u043b\u044c\u043a\u043e", "\u0441\u043e\u0431\u0430\u043a", "\u043d\u0435", "\u043f\u0440\u043e\u0448\u043b\u0438", "\u043d\u0438\u043a\u0430\u043a\u043e\u0433\u043e", "\u043b\u0435\u0447\u0435\u043d\u0438\u044f", "?"]}, "query_toks": {"en": ["select", "count", "(", "*", ")", "from", "dogs", "where", "dog_id", "not", "in", "(", "select", "dog_id", "from", "treatments", ")", ";"], "ru": ["select", "count", "(", "*", ")", "from", "dogs", "where", "dog_id", "not", "in", "(", "select", "dog_id", "from", "treatments", ")", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "*", ")", "from", "dogs", "where", "dog_id", "not", "in", "(", "select", "dog_id", "from", "treatments", ")", ";"], "ru": ["select", "count", "(", "*", ")", "from", "dogs", "where", "dog_id", "not", "in", "(", "select", "dog_id", "from", "treatments", ")", ";"]}, "masked_query": "SELECT count(*) FROM Dogs WHERE dog_id NOT IN ( SELECT dog_id FROM Treatments );", "question_pauq": {"ru": "\u0421\u043a\u043e\u043b\u044c\u043a\u043e \u0441\u043e\u0431\u0430\u043a \u043d\u0435 \u043f\u0440\u043e\u0448\u043b\u0438 \u043d\u0438\u043a\u0430\u043a\u043e\u0433\u043e \u043b\u0435\u0447\u0435\u043d\u0438\u044f?"}, "question": "How many dogs have not gone through any treatment?", "kb_id": "dog_kennels"}, {"id": "D_0980", "source": "spider-dev", "type": "dev", "query": {"ru": "select count(*) from dogs where dog_id not in ( select dog_id from treatments );"}, "sql": {"en": {"from": {"table_units": [["table_unit", 5]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[true, 8, [0, [0, 20, false], null], {"from": {"table_units": [["table_unit", 7]], "conds": []}, "select": [false, [[0, [0, [0, 45, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 5]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[true, 8, [0, [0, 20, false], null], {"from": {"table_units": [["table_unit", 7]], "conds": []}, "select": [false, [[0, [0, [0, 45, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Tell", "me", "the", "number", "of", "dogs", "that", "have", "not", "received", "any", "treatment", "."], "ru": ["\u041d\u0430\u0437\u043e\u0432\u0438\u0442\u0435", "\u043c\u043d\u0435", "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e", "\u0441\u043e\u0431\u0430\u043a", ",", "\u043a\u043e\u0442\u043e\u0440\u044b\u0435", "\u043d\u0435", "\u043f\u043e\u043b\u0443\u0447\u0430\u043b\u0438", "\u043d\u0438\u043a\u0430\u043a\u043e\u0433\u043e", "\u043b\u0435\u0447\u0435\u043d\u0438\u044f", "."]}, "query_toks": {"en": ["select", "count", "(", "*", ")", "from", "dogs", "where", "dog_id", "not", "in", "(", "select", "dog_id", "from", "treatments", ")", ";"], "ru": ["select", "count", "(", "*", ")", "from", "dogs", "where", "dog_id", "not", "in", "(", "select", "dog_id", "from", "treatments", ")", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "*", ")", "from", "dogs", "where", "dog_id", "not", "in", "(", "select", "dog_id", "from", "treatments", ")", ";"], "ru": ["select", "count", "(", "*", ")", "from", "dogs", "where", "dog_id", "not", "in", "(", "select", "dog_id", "from", "treatments", ")", ";"]}, "masked_query": "select count(*) from dogs where dog_id not in ( select dog_id from treatments );", "question_pauq": {"ru": "\u041d\u0430\u0437\u043e\u0432\u0438\u0442\u0435 \u043c\u043d\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u043e\u0431\u0430\u043a, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0435 \u043f\u043e\u043b\u0443\u0447\u0430\u043b\u0438 \u043d\u0438\u043a\u0430\u043a\u043e\u0433\u043e \u043b\u0435\u0447\u0435\u043d\u0438\u044f."}, "question": "Tell me the number of dogs that have not received any treatment .", "kb_id": "dog_kennels"}, {"id": "D_0981", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs );"}, "sql": {"en": {"from": {"table_units": [["table_unit", 4]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[true, 8, [0, [0, 10, false], null], {"from": {"table_units": [["table_unit", 5]], "conds": []}, "select": [false, [[0, [0, [0, 21, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 4]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[true, 8, [0, [0, 10, false], null], {"from": {"table_units": [["table_unit", 5]], "conds": []}, "select": [false, [[0, [0, [0, 21, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["How", "many", "owners", "temporarily", "do", "not", "have", "any", "dogs", "?"], "ru": ["\u0421\u043a\u043e\u043b\u044c\u043a\u043e", "\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432", "\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e", "\u043d\u0435", "\u0438\u043c\u0435\u044e\u0442", "\u0441\u043e\u0431\u0430\u043a", "?"]}, "query_toks": {"en": ["select", "count", "(", "*", ")", "from", "owners", "where", "owner_id", "not", "in", "(", "select", "owner_id", "from", "dogs", ")", ";"], "ru": ["select", "count", "(", "*", ")", "from", "owners", "where", "owner_id", "not", "in", "(", "select", "owner_id", "from", "dogs", ")", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "*", ")", "from", "owners", "where", "owner_id", "not", "in", "(", "select", "owner_id", "from", "dogs", ")", ";"], "ru": ["select", "count", "(", "*", ")", "from", "owners", "where", "owner_id", "not", "in", "(", "select", "owner_id", "from", "dogs", ")", ";"]}, "masked_query": "SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs );", "question_pauq": {"ru": "\u0421\u043a\u043e\u043b\u044c\u043a\u043e \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e \u043d\u0435 \u0438\u043c\u0435\u044e\u0442 \u0441\u043e\u0431\u0430\u043a?"}, "question": "How many owners temporarily do not have any dogs?", "kb_id": "dog_kennels"}, {"id": "D_0982", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs );"}, "sql": {"en": {"from": {"table_units": [["table_unit", 4]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[true, 8, [0, [0, 10, false], null], {"from": {"table_units": [["table_unit", 5]], "conds": []}, "select": [false, [[0, [0, [0, 21, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 4]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[true, 8, [0, [0, 10, false], null], {"from": {"table_units": [["table_unit", 5]], "conds": []}, "select": [false, [[0, [0, [0, 21, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Find", "the", "number", "of", "owners", "who", "do", "not", "own", "any", "dogs", "at", "this", "moment", "."], "ru": ["\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e", "\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432", ",", "\u0443", "\u043a\u043e\u0442\u043e\u0440\u044b\u0445", "\u043d\u0430", "\u0434\u0430\u043d\u043d\u044b\u0439", "\u043c\u043e\u043c\u0435\u043d\u0442", "\u043d\u0435\u0442", "\u0441\u043e\u0431\u0430\u043a", "."]}, "query_toks": {"en": ["select", "count", "(", "*", ")", "from", "owners", "where", "owner_id", "not", "in", "(", "select", "owner_id", "from", "dogs", ")", ";"], "ru": ["select", "count", "(", "*", ")", "from", "owners", "where", "owner_id", "not", "in", "(", "select", "owner_id", "from", "dogs", ")", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "*", ")", "from", "owners", "where", "owner_id", "not", "in", "(", "select", "owner_id", "from", "dogs", ")", ";"], "ru": ["select", "count", "(", "*", ")", "from", "owners", "where", "owner_id", "not", "in", "(", "select", "owner_id", "from", "dogs", ")", ";"]}, "masked_query": "SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs );", "question_pauq": {"ru": "\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432, \u0443 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043d\u0430 \u0434\u0430\u043d\u043d\u044b\u0439 \u043c\u043e\u043c\u0435\u043d\u0442 \u043d\u0435\u0442 \u0441\u043e\u0431\u0430\u043a."}, "question": "Find the number of owners who do not own any dogs at this moment.", "kb_id": "dog_kennels"}, {"id": "D_0983", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments );"}, "sql": {"en": {"from": {"table_units": [["table_unit", 6]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[true, 8, [0, [0, 33, false], null], {"from": {"table_units": [["table_unit", 7]], "conds": []}, "select": [false, [[0, [0, [0, 46, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 6]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[true, 8, [0, [0, 33, false], null], {"from": {"table_units": [["table_unit", 7]], "conds": []}, "select": [false, [[0, [0, [0, 46, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["How", "many", "professionals", "did", "not", "operate", "any", "treatment", "on", "dogs", "?"], "ru": ["\u0421\u043a\u043e\u043b\u044c\u043a\u043e", "\u0441\u043f\u0435\u0446\u0438\u0430\u043b\u0438\u0441\u0442\u043e\u0432", "\u043d\u0435", "\u043b\u0435\u0447\u0438\u043b\u0438", "\u0441\u043e\u0431\u0430\u043a", "?"]}, "query_toks": {"en": ["select", "count", "(", "*", ")", "from", "professionals", "where", "professional_id", "not", "in", "(", "select", "professional_id", "from", "treatments", ")", ";"], "ru": ["select", "count", "(", "*", ")", "from", "professionals", "where", "professional_id", "not", "in", "(", "select", "professional_id", "from", "treatments", ")", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "*", ")", "from", "professionals", "where", "professional_id", "not", "in", "(", "select", "professional_id", "from", "treatments", ")", ";"], "ru": ["select", "count", "(", "*", ")", "from", "professionals", "where", "professional_id", "not", "in", "(", "select", "professional_id", "from", "treatments", ")", ";"]}, "masked_query": "SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments );", "question_pauq": {"ru": "\u0421\u043a\u043e\u043b\u044c\u043a\u043e \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u0438\u0441\u0442\u043e\u0432 \u043d\u0435 \u043b\u0435\u0447\u0438\u043b\u0438 \u0441\u043e\u0431\u0430\u043a?"}, "question": "How many professionals did not operate any treatment on dogs?", "kb_id": "dog_kennels"}, {"id": "D_0984", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments );"}, "sql": {"en": {"from": {"table_units": [["table_unit", 6]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[true, 8, [0, [0, 33, false], null], {"from": {"table_units": [["table_unit", 7]], "conds": []}, "select": [false, [[0, [0, [0, 46, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 6]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[true, 8, [0, [0, 33, false], null], {"from": {"table_units": [["table_unit", 7]], "conds": []}, "select": [false, [[0, [0, [0, 46, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Find", "the", "number", "of", "professionals", "who", "have", "not", "treated", "any", "dogs", "."], "ru": ["\u041d\u0430\u0439\u0434\u0438\u0442\u0435", "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e", "\u0441\u043f\u0435\u0446\u0438\u0430\u043b\u0438\u0441\u0442\u043e\u0432", ",", "\u043a\u043e\u0442\u043e\u0440\u044b\u0435", "\u043d\u0435", "\u043b\u0435\u0447\u0438\u043b\u0438", "\u0441\u043e\u0431\u0430\u043a", "."]}, "query_toks": {"en": ["select", "count", "(", "*", ")", "from", "professionals", "where", "professional_id", "not", "in", "(", "select", "professional_id", "from", "treatments", ")", ";"], "ru": ["select", "count", "(", "*", ")", "from", "professionals", "where", "professional_id", "not", "in", "(", "select", "professional_id", "from", "treatments", ")", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "*", ")", "from", "professionals", "where", "professional_id", "not", "in", "(", "select", "professional_id", "from", "treatments", ")", ";"], "ru": ["select", "count", "(", "*", ")", "from", "professionals", "where", "professional_id", "not", "in", "(", "select", "professional_id", "from", "treatments", ")", ";"]}, "masked_query": "SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments );", "question_pauq": {"ru": "\u041d\u0430\u0439\u0434\u0438\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u0438\u0441\u0442\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0435 \u043b\u0435\u0447\u0438\u043b\u0438 \u0441\u043e\u0431\u0430\u043a."}, "question": "Find the number of professionals who have not treated any dogs.", "kb_id": "dog_kennels"}, {"id": "D_0985", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 5]], "conds": []}, "select": [false, [[0, [0, [0, 25, false], null]], [0, [0, [0, 26, false], null]], [0, [0, [0, 29, false], null]]]], "where": [[false, 2, [0, [0, 22, false], null], 1.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 5]], "conds": []}, "select": [false, [[0, [0, [0, 25, false], null]], [0, [0, [0, 26, false], null]], [0, [0, [0, 29, false], null]]]], "where": [[false, 2, [0, [0, 22, false], null], 1.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["List", "the", "dog", "name", ",", "age", "and", "weight", "of", "the", "dogs", "who", "have", "been", "abandoned", "?", "1", "stands", "for", "yes", ",", "and", "0", "stands", "for", "no", "."], "ru": ["\u041f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0438", "\u043a\u043b\u0438\u0447\u043a\u0443", ",", "\u0432\u043e\u0437\u0440\u0430\u0441\u0442", "\u0438", "\u0432\u0435\u0441", "\u0431\u0440\u043e\u0448\u0435\u043d\u043d\u044b\u0445", "\u0441\u043e\u0431\u0430\u043a", "?", "1", "\u043e\u0437\u043d\u0430\u0447\u0430\u0435\u0442", "\u0434\u0430", ",", "\u0430", "0", "\u043e\u0437\u043d\u0430\u0447\u0430\u0435\u0442", "\u043d\u0435\u0442", "."]}, "query_toks": {"en": ["select", "name", ",", "age", ",", "weight", "from", "dogs", "where", "abandoned_yn", "=", "1", ";"], "ru": ["select", "name", ",", "age", ",", "weight", "from", "dogs", "where", "abandoned_yn", "=", "1", ";"]}, "query_toks_no_values": {"en": ["select", "name", ",", "age", ",", "weight", "from", "dogs", "where", "abandoned_yn", "=", "1", ";"], "ru": ["select", "name", ",", "age", ",", "weight", "from", "dogs", "where", "abandoned_yn", "=", "1", ";"]}, "masked_query": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1;", "question_pauq": {"ru": "\u041f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0438 \u043a\u043b\u0438\u0447\u043a\u0443, \u0432\u043e\u0437\u0440\u0430\u0441\u0442 \u0438 \u0432\u0435\u0441 \u0431\u0440\u043e\u0448\u0435\u043d\u043d\u044b\u0445 \u0441\u043e\u0431\u0430\u043a? 1 \u043e\u0437\u043d\u0430\u0447\u0430\u0435\u0442 \u0434\u0430, \u0430 0 \u043e\u0437\u043d\u0430\u0447\u0430\u0435\u0442 \u043d\u0435\u0442."}, "question": "List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.", "kb_id": "dog_kennels"}, {"id": "D_0986", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 5]], "conds": []}, "select": [false, [[0, [0, [0, 25, false], null]], [0, [0, [0, 26, false], null]], [0, [0, [0, 29, false], null]]]], "where": [[false, 2, [0, [0, 22, false], null], 1.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 5]], "conds": []}, "select": [false, [[0, [0, [0, 25, false], null]], [0, [0, [0, 26, false], null]], [0, [0, [0, 29, false], null]]]], "where": [[false, 2, [0, [0, 22, false], null], 1.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "the", "dog", "name", ",", "age", "and", "weight", "of", "the", "dogs", "that", "were", "abandoned", "?", "Note", "that", "1", "stands", "for", "yes", ",", "and", "0", "stands", "for", "no", "in", "the", "tables", "."], "ru": ["\u041a\u0430\u043a\u043e\u0432\u0430", "\u043a\u043b\u0438\u0447\u043a\u0430", ",", "\u0432\u043e\u0437\u0440\u0430\u0441\u0442", "\u0438", "\u0432\u0435\u0441", "\u0431\u0440\u043e\u0448\u0435\u043d\u043d\u044b\u0445", "\u0441\u043e\u0431\u0430\u043a", "?", "\u041e\u0431\u0440\u0430\u0442\u0438\u0442\u0435", "\u0432\u043d\u0438\u043c\u0430\u043d\u0438\u0435", ",", "\u0447\u0442\u043e", "1", "\u043e\u0437\u043d\u0430\u0447\u0430\u0435\u0442", "\u00ab", "\u0434\u0430", "\u00bb", ",", "\u0430", "0", "\u043e\u0437\u043d\u0430\u0447\u0430\u0435\u0442", "\u00ab", "\u043d\u0435\u0442", "\u00bb", "\u0432", "\u0442\u0430\u0431\u043b\u0438\u0446\u0430\u0445", "."]}, "query_toks": {"en": ["select", "name", ",", "age", ",", "weight", "from", "dogs", "where", "abandoned_yn", "=", "1", ";"], "ru": ["select", "name", ",", "age", ",", "weight", "from", "dogs", "where", "abandoned_yn", "=", "1", ";"]}, "query_toks_no_values": {"en": ["select", "name", ",", "age", ",", "weight", "from", "dogs", "where", "abandoned_yn", "=", "1", ";"], "ru": ["select", "name", ",", "age", ",", "weight", "from", "dogs", "where", "abandoned_yn", "=", "1", ";"]}, "masked_query": "SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1;", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0432\u0430 \u043a\u043b\u0438\u0447\u043a\u0430, \u0432\u043e\u0437\u0440\u0430\u0441\u0442 \u0438 \u0432\u0435\u0441 \u0431\u0440\u043e\u0448\u0435\u043d\u043d\u044b\u0445 \u0441\u043e\u0431\u0430\u043a? \u041e\u0431\u0440\u0430\u0442\u0438\u0442\u0435 \u0432\u043d\u0438\u043c\u0430\u043d\u0438\u0435, \u0447\u0442\u043e 1 \u043e\u0437\u043d\u0430\u0447\u0430\u0435\u0442 \u00ab\u0434\u0430\u00bb, \u0430 0 \u043e\u0437\u043d\u0430\u0447\u0430\u0435\u0442 \u00ab\u043d\u0435\u0442\u00bb \u0432 \u0442\u0430\u0431\u043b\u0438\u0446\u0430\u0445."}, "question": "What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.", "kb_id": "dog_kennels"}, {"id": "D_0987", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT avg(age) FROM Dogs;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 5]], "conds": []}, "select": [false, [[5, [0, [0, 26, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 5]], "conds": []}, "select": [false, [[5, [0, [0, 26, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "average", "age", "of", "all", "the", "dogs", "?"], "ru": ["\u041a\u0430\u043a\u043e\u0432", "\u0441\u0440\u0435\u0434\u043d\u0438\u0439", "\u0432\u043e\u0437\u0440\u0430\u0441\u0442", "\u0432\u0441\u0435\u0445", "\u0441\u043e\u0431\u0430\u043a", "?"]}, "query_toks": {"en": ["select", "avg", "(", "age", ")", "from", "dogs", ";"], "ru": ["select", "avg", "(", "age", ")", "from", "dogs", ";"]}, "query_toks_no_values": {"en": ["select", "avg", "(", "age", ")", "from", "dogs", ";"], "ru": ["select", "avg", "(", "age", ")", "from", "dogs", ";"]}, "masked_query": "SELECT avg(age) FROM Dogs;", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0432 \u0441\u0440\u0435\u0434\u043d\u0438\u0439 \u0432\u043e\u0437\u0440\u0430\u0441\u0442 \u0432\u0441\u0435\u0445 \u0441\u043e\u0431\u0430\u043a?"}, "question": "What is the average age of all the dogs?", "kb_id": "dog_kennels"}, {"id": "D_0988", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT avg(age) FROM Dogs;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 5]], "conds": []}, "select": [false, [[5, [0, [0, 26, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 5]], "conds": []}, "select": [false, [[5, [0, [0, 26, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Compute", "the", "average", "age", "of", "all", "the", "dogs", "."], "ru": ["\u0412\u044b\u0447\u0438\u0441\u043b\u0438\u0442\u0435", "\u0441\u0440\u0435\u0434\u043d\u0438\u0439", "\u0432\u043e\u0437\u0440\u0430\u0441\u0442", "\u0432\u0441\u0435\u0445", "\u0441\u043e\u0431\u0430\u043a", "."]}, "query_toks": {"en": ["select", "avg", "(", "age", ")", "from", "dogs", ";"], "ru": ["select", "avg", "(", "age", ")", "from", "dogs", ";"]}, "query_toks_no_values": {"en": ["select", "avg", "(", "age", ")", "from", "dogs", ";"], "ru": ["select", "avg", "(", "age", ")", "from", "dogs", ";"]}, "masked_query": "SELECT avg(age) FROM Dogs;", "question_pauq": {"ru": "\u0412\u044b\u0447\u0438\u0441\u043b\u0438\u0442\u0435 \u0441\u0440\u0435\u0434\u043d\u0438\u0439 \u0432\u043e\u0437\u0440\u0430\u0441\u0442 \u0432\u0441\u0435\u0445 \u0441\u043e\u0431\u0430\u043a."}, "question": "Compute the average age of all the dogs.", "kb_id": "dog_kennels"}, {"id": "D_0989", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT max(age) FROM Dogs;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 5]], "conds": []}, "select": [false, [[1, [0, [0, 26, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 5]], "conds": []}, "select": [false, [[1, [0, [0, 26, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "age", "of", "the", "oldest", "dog", "?"], "ru": ["\u041a\u0430\u043a\u043e\u0432", "\u0432\u043e\u0437\u0440\u0430\u0441\u0442", "\u0441\u0430\u043c\u043e\u0439", "\u0441\u0442\u0430\u0440\u043e\u0439", "\u0441\u043e\u0431\u0430\u043a\u0438", "?"]}, "query_toks": {"en": ["select", "max", "(", "age", ")", "from", "dogs", ";"], "ru": ["select", "max", "(", "age", ")", "from", "dogs", ";"]}, "query_toks_no_values": {"en": ["select", "max", "(", "age", ")", "from", "dogs", ";"], "ru": ["select", "max", "(", "age", ")", "from", "dogs", ";"]}, "masked_query": "SELECT max(age) FROM Dogs;", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0432 \u0432\u043e\u0437\u0440\u0430\u0441\u0442 \u0441\u0430\u043c\u043e\u0439 \u0441\u0442\u0430\u0440\u043e\u0439 \u0441\u043e\u0431\u0430\u043a\u0438?"}, "question": "What is the age of the oldest dog?", "kb_id": "dog_kennels"}, {"id": "D_0990", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT max(age) FROM Dogs;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 5]], "conds": []}, "select": [false, [[1, [0, [0, 26, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 5]], "conds": []}, "select": [false, [[1, [0, [0, 26, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Tell", "me", "the", "age", "of", "the", "oldest", "dog", "."], "ru": ["\u041d\u0430\u0437\u043e\u0432\u0438", "\u043c\u043d\u0435", "\u0432\u043e\u0437\u0440\u0430\u0441\u0442", "\u0441\u0430\u043c\u043e\u0439", "\u0441\u0442\u0430\u0440\u043e\u0439", "\u0441\u043e\u0431\u0430\u043a\u0438", "."]}, "query_toks": {"en": ["select", "max", "(", "age", ")", "from", "dogs", ";"], "ru": ["select", "max", "(", "age", ")", "from", "dogs", ";"]}, "query_toks_no_values": {"en": ["select", "max", "(", "age", ")", "from", "dogs", ";"], "ru": ["select", "max", "(", "age", ")", "from", "dogs", ";"]}, "masked_query": "SELECT max(age) FROM Dogs;", "question_pauq": {"ru": "\u041d\u0430\u0437\u043e\u0432\u0438 \u043c\u043d\u0435 \u0432\u043e\u0437\u0440\u0430\u0441\u0442 \u0441\u0430\u043c\u043e\u0439 \u0441\u0442\u0430\u0440\u043e\u0439 \u0441\u043e\u0431\u0430\u043a\u0438."}, "question": "Tell me the age of the oldest dog.", "kb_id": "dog_kennels"}, {"id": "D_0991", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT charge_type ,  charge_amount FROM Charges;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 4, false], null]], [0, [0, [0, 5, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 4, false], null]], [0, [0, [0, 5, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["How", "much", "does", "each", "charge", "type", "costs", "?", "List", "both", "charge", "type", "and", "amount", "."], "ru": ["\u0421\u043a\u043e\u043b\u044c\u043a\u043e", "\u0441\u0442\u043e\u0438\u0442", "\u043a\u0430\u0436\u0434\u044b\u0439", "\u0442\u0438\u043f", "\u043d\u0430\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f", "?", "\u0423\u043a\u0430\u0436\u0438\u0442\u0435", "\u0442\u0438\u043f", "\u0438", "\u0441\u0443\u043c\u043c\u0443", "\u043e\u043f\u043b\u0430\u0442\u044b", "."]}, "query_toks": {"en": ["select", "charge_type", ",", "charge_amount", "from", "charges", ";"], "ru": ["select", "charge_type", ",", "charge_amount", "from", "charges", ";"]}, "query_toks_no_values": {"en": ["select", "charge_type", ",", "charge_amount", "from", "charges", ";"], "ru": ["select", "charge_type", ",", "charge_amount", "from", "charges", ";"]}, "masked_query": "SELECT charge_type ,  charge_amount FROM Charges;", "question_pauq": {"ru": "\u0421\u043a\u043e\u043b\u044c\u043a\u043e \u0441\u0442\u043e\u0438\u0442 \u043a\u0430\u0436\u0434\u044b\u0439 \u0442\u0438\u043f \u043d\u0430\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f? \u0423\u043a\u0430\u0436\u0438\u0442\u0435 \u0442\u0438\u043f \u0438 \u0441\u0443\u043c\u043c\u0443 \u043e\u043f\u043b\u0430\u0442\u044b."}, "question": "How much does each charge type costs? List both charge type and amount.", "kb_id": "dog_kennels"}, {"id": "D_0992", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT charge_type ,  charge_amount FROM Charges;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 4, false], null]], [0, [0, [0, 5, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 4, false], null]], [0, [0, [0, 5, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["List", "each", "charge", "type", "and", "its", "amount", "."], "ru": ["\u041f\u043e\u043a\u0430\u0436\u0438", "\u043a\u0430\u0436\u0434\u044b\u0439", "\u0442\u0438\u043f", "\u043d\u0430\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f", "\u0438", "\u0435\u0433\u043e", "\u0441\u0443\u043c\u043c\u0443", "."]}, "query_toks": {"en": ["select", "charge_type", ",", "charge_amount", "from", "charges", ";"], "ru": ["select", "charge_type", ",", "charge_amount", "from", "charges", ";"]}, "query_toks_no_values": {"en": ["select", "charge_type", ",", "charge_amount", "from", "charges", ";"], "ru": ["select", "charge_type", ",", "charge_amount", "from", "charges", ";"]}, "masked_query": "SELECT charge_type ,  charge_amount FROM Charges;", "question_pauq": {"ru": "\u041f\u043e\u043a\u0430\u0436\u0438 \u043a\u0430\u0436\u0434\u044b\u0439 \u0442\u0438\u043f \u043d\u0430\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f \u0438 \u0435\u0433\u043e \u0441\u0443\u043c\u043c\u0443."}, "question": "List each charge type and its amount.", "kb_id": "dog_kennels"}, {"id": "D_0993", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT max(charge_amount) FROM Charges;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[1, [0, [0, 5, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[1, [0, [0, 5, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["How", "much", "does", "the", "most", "expensive", "charge", "type", "costs", "?"], "ru": ["\u0421\u043a\u043e\u043b\u044c\u043a\u043e", "\u0441\u0442\u043e\u0438\u0442", "\u0441\u0430\u043c\u044b\u0439", "\u0434\u043e\u0440\u043e\u0433\u043e\u0439", "\u0442\u0438\u043f", "\u043d\u0430\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f", "?"]}, "query_toks": {"en": ["select", "max", "(", "charge_amount", ")", "from", "charges", ";"], "ru": ["select", "max", "(", "charge_amount", ")", "from", "charges", ";"]}, "query_toks_no_values": {"en": ["select", "max", "(", "charge_amount", ")", "from", "charges", ";"], "ru": ["select", "max", "(", "charge_amount", ")", "from", "charges", ";"]}, "masked_query": "SELECT max(charge_amount) FROM Charges;", "question_pauq": {"ru": "\u0421\u043a\u043e\u043b\u044c\u043a\u043e \u0441\u0442\u043e\u0438\u0442 \u0441\u0430\u043c\u044b\u0439 \u0434\u043e\u0440\u043e\u0433\u043e\u0439 \u0442\u0438\u043f \u043d\u0430\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f?"}, "question": "How much does the most expensive charge type costs?", "kb_id": "dog_kennels"}, {"id": "D_0994", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT max(charge_amount) FROM Charges;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[1, [0, [0, 5, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[1, [0, [0, 5, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "charge", "amount", "of", "the", "most", "expensive", "charge", "type", "?"], "ru": ["\u041a\u0430\u043a\u0430\u044f", "\u0441\u0443\u043c\u043c\u0430", "\u043f\u043b\u0430\u0442\u0435\u0436\u0430", "\u0447\u0435\u0440\u0435\u0437", "\u0441\u0430\u043c\u044b\u0439", "\u0434\u043e\u0440\u043e\u0433\u043e\u0439", "\u0442\u0438\u043f", "\u043d\u0430\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f", "?"]}, "query_toks": {"en": ["select", "max", "(", "charge_amount", ")", "from", "charges", ";"], "ru": ["select", "max", "(", "charge_amount", ")", "from", "charges", ";"]}, "query_toks_no_values": {"en": ["select", "max", "(", "charge_amount", ")", "from", "charges", ";"], "ru": ["select", "max", "(", "charge_amount", ")", "from", "charges", ";"]}, "masked_query": "SELECT max(charge_amount) FROM Charges;", "question_pauq": {"ru": "\u041a\u0430\u043a\u0430\u044f \u0441\u0443\u043c\u043c\u0430 \u043f\u043b\u0430\u0442\u0435\u0436\u0430 \u0447\u0435\u0440\u0435\u0437 \u0441\u0430\u043c\u044b\u0439 \u0434\u043e\u0440\u043e\u0433\u043e\u0439 \u0442\u0438\u043f \u043d\u0430\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f?"}, "question": "What is the charge amount of the most expensive charge type?", "kb_id": "dog_kennels"}, {"id": "D_0995", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT email_address ,  cell_number ,  home_phone FROM professionals;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 6]], "conds": []}, "select": [false, [[0, [0, [0, 41, false], null]], [0, [0, [0, 43, false], null]], [0, [0, [0, 42, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 6]], "conds": []}, "select": [false, [[0, [0, [0, 41, false], null]], [0, [0, [0, 43, false], null]], [0, [0, [0, 42, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["List", "the", "email", ",", "cell", "phone", "and", "home", "phone", "of", "all", "the", "professionals", "."], "ru": ["\u0421\u043e\u0441\u0442\u0430\u0432\u044c\u0442\u0435", "\u0441\u043f\u0438\u0441\u043e\u043a", "\u0430\u0434\u0440\u0435\u0441\u043e\u0432", "\u044d\u043b\u0435\u043a\u0442\u0440\u043e\u043d\u043d\u043e\u0439", "\u043f\u043e\u0447\u0442\u044b", ",", "\u0441\u043e\u0442\u043e\u0432\u044b\u0445", "\u0438", "\u0434\u043e\u043c\u0430\u0448\u043d\u0438\u0445", "\u0442\u0435\u043b\u0435\u0444\u043e\u043d\u043e\u0432", "\u0432\u0441\u0435\u0445", "\u0441\u043f\u0435\u0446\u0438\u0430\u043b\u0438\u0441\u0442\u043e\u0432", "."]}, "query_toks": {"en": ["select", "email_address", ",", "cell_number", ",", "home_phone", "from", "professionals", ";"], "ru": ["select", "email_address", ",", "cell_number", ",", "home_phone", "from", "professionals", ";"]}, "query_toks_no_values": {"en": ["select", "email_address", ",", "cell_number", ",", "home_phone", "from", "professionals", ";"], "ru": ["select", "email_address", ",", "cell_number", ",", "home_phone", "from", "professionals", ";"]}, "masked_query": "SELECT email_address ,  cell_number ,  home_phone FROM professionals;", "question_pauq": {"ru": "\u0421\u043e\u0441\u0442\u0430\u0432\u044c\u0442\u0435 \u0441\u043f\u0438\u0441\u043e\u043a \u0430\u0434\u0440\u0435\u0441\u043e\u0432 \u044d\u043b\u0435\u043a\u0442\u0440\u043e\u043d\u043d\u043e\u0439 \u043f\u043e\u0447\u0442\u044b, \u0441\u043e\u0442\u043e\u0432\u044b\u0445 \u0438 \u0434\u043e\u043c\u0430\u0448\u043d\u0438\u0445 \u0442\u0435\u043b\u0435\u0444\u043e\u043d\u043e\u0432 \u0432\u0441\u0435\u0445 \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u0438\u0441\u0442\u043e\u0432."}, "question": "List the email, cell phone and home phone of all the professionals.", "kb_id": "dog_kennels"}, {"id": "D_0996", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT email_address ,  cell_number ,  home_phone FROM professionals;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 6]], "conds": []}, "select": [false, [[0, [0, [0, 41, false], null]], [0, [0, [0, 43, false], null]], [0, [0, [0, 42, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 6]], "conds": []}, "select": [false, [[0, [0, [0, 41, false], null]], [0, [0, [0, 43, false], null]], [0, [0, [0, 42, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "the", "email", ",", "cell", "phone", "and", "home", "phone", "of", "each", "professional", "?"], "ru": ["\u041a\u0430\u043a\u0438\u0435", "\u0443", "\u043a\u0430\u0436\u0434\u043e\u0433\u043e", "\u0441\u043f\u0435\u0446\u0438\u0430\u043b\u0438\u0441\u0442\u0430", "\u044d\u043b\u0435\u043a\u0442\u0440\u043e\u043d\u043d\u0430\u044f", "\u043f\u043e\u0447\u0442\u0430", ",", "\u043c\u043e\u0431\u0438\u043b\u044c\u043d\u044b\u0439", "\u0438", "\u0434\u043e\u043c\u0430\u0448\u043d\u0438\u0439", "\u0442\u0435\u043b\u0435\u0444\u043e\u043d\u044b", "?"]}, "query_toks": {"en": ["select", "email_address", ",", "cell_number", ",", "home_phone", "from", "professionals", ";"], "ru": ["select", "email_address", ",", "cell_number", ",", "home_phone", "from", "professionals", ";"]}, "query_toks_no_values": {"en": ["select", "email_address", ",", "cell_number", ",", "home_phone", "from", "professionals", ";"], "ru": ["select", "email_address", ",", "cell_number", ",", "home_phone", "from", "professionals", ";"]}, "masked_query": "SELECT email_address ,  cell_number ,  home_phone FROM professionals;", "question_pauq": {"ru": "\u041a\u0430\u043a\u0438\u0435 \u0443 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u0438\u0441\u0442\u0430 \u044d\u043b\u0435\u043a\u0442\u0440\u043e\u043d\u043d\u0430\u044f \u043f\u043e\u0447\u0442\u0430, \u043c\u043e\u0431\u0438\u043b\u044c\u043d\u044b\u0439 \u0438 \u0434\u043e\u043c\u0430\u0448\u043d\u0438\u0439 \u0442\u0435\u043b\u0435\u0444\u043e\u043d\u044b?"}, "question": "What are the email, cell phone and home phone of each professional?", "kb_id": "dog_kennels"}, {"id": "D_0997", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT DISTINCT breed_code ,  size_code FROM dogs;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 5]], "conds": []}, "select": [true, [[0, [0, [0, 23, false], null]], [0, [0, [0, 24, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 5]], "conds": []}, "select": [true, [[0, [0, [0, 23, false], null]], [0, [0, [0, 24, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "all", "the", "possible", "breed", "type", "and", "size", "type", "combinations", "?"], "ru": ["\u041a\u0430\u043a\u043e\u0432\u044b", "\u0432\u0441\u0435", "\u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0435", "\u043a\u043e\u043c\u0431\u0438\u043d\u0430\u0446\u0438\u0438", "\u043f\u043e\u0440\u043e\u0434\u043d\u043e\u0433\u043e", "\u0442\u0438\u043f\u0430", "\u0438", "\u0440\u0430\u0437\u043c\u0435\u0440\u043d\u043e\u0433\u043e", "\u0442\u0438\u043f\u0430", "?"]}, "query_toks": {"en": ["select", "distinct", "breed_code", ",", "size_code", "from", "dogs", ";"], "ru": ["select", "distinct", "breed_code", ",", "size_code", "from", "dogs", ";"]}, "query_toks_no_values": {"en": ["select", "distinct", "breed_code", ",", "size_code", "from", "dogs", ";"], "ru": ["select", "distinct", "breed_code", ",", "size_code", "from", "dogs", ";"]}, "masked_query": "SELECT DISTINCT breed_code ,  size_code FROM dogs;", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0432\u044b \u0432\u0441\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0435 \u043a\u043e\u043c\u0431\u0438\u043d\u0430\u0446\u0438\u0438 \u043f\u043e\u0440\u043e\u0434\u043d\u043e\u0433\u043e \u0442\u0438\u043f\u0430 \u0438 \u0440\u0430\u0437\u043c\u0435\u0440\u043d\u043e\u0433\u043e \u0442\u0438\u043f\u0430?"}, "question": "What are all the possible breed type and size type combinations?", "kb_id": "dog_kennels"}, {"id": "D_0998", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT DISTINCT breed_code ,  size_code FROM dogs;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 5]], "conds": []}, "select": [true, [[0, [0, [0, 23, false], null]], [0, [0, [0, 24, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 5]], "conds": []}, "select": [true, [[0, [0, [0, 23, false], null]], [0, [0, [0, 24, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Find", "the", "distinct", "breed", "type", "and", "size", "type", "combinations", "for", "dogs", "."], "ru": ["\u041d\u0430\u0439\u0434\u0438\u0442\u0435", "\u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0435", "\u0441\u043e\u0447\u0435\u0442\u0430\u043d\u0438\u044f", "\u0442\u0438\u043f\u043e\u0432", "\u043f\u043e\u0440\u043e\u0434\u044b", "\u0438", "\u0440\u0430\u0437\u043c\u0435\u0440\u0430", "\u0434\u043b\u044f", "\u0441\u043e\u0431\u0430\u043a", "."]}, "query_toks": {"en": ["select", "distinct", "breed_code", ",", "size_code", "from", "dogs", ";"], "ru": ["select", "distinct", "breed_code", ",", "size_code", "from", "dogs", ";"]}, "query_toks_no_values": {"en": ["select", "distinct", "breed_code", ",", "size_code", "from", "dogs", ";"], "ru": ["select", "distinct", "breed_code", ",", "size_code", "from", "dogs", ";"]}, "masked_query": "SELECT DISTINCT breed_code ,  size_code FROM dogs;", "question_pauq": {"ru": "\u041d\u0430\u0439\u0434\u0438\u0442\u0435 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0435 \u0441\u043e\u0447\u0435\u0442\u0430\u043d\u0438\u044f \u0442\u0438\u043f\u043e\u0432 \u043f\u043e\u0440\u043e\u0434\u044b \u0438 \u0440\u0430\u0437\u043c\u0435\u0440\u0430 \u0434\u043b\u044f \u0441\u043e\u0431\u0430\u043a."}, "question": "Find the distinct breed type and size type combinations for dogs.", "kb_id": "dog_kennels"}, {"id": "D_0999", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 6], ["table_unit", 7], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 33, false], null], [0, 46, false], null], "and", [false, 2, [0, [0, 47, false], null], [0, 8, false], null]]}, "select": [true, [[0, [0, [0, 35, false], null]], [0, [0, [0, 9, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 6], ["table_unit", 7], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 33, false], null], [0, 46, false], null], "and", [false, 2, [0, [0, 47, false], null], [0, 8, false], null]]}, "select": [true, [[0, [0, [0, 35, false], null]], [0, [0, [0, 9, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["List", "the", "first", "name", "of", "all", "the", "professionals", "along", "with", "the", "description", "of", "the", "treatment", "they", "have", "done", "."], "ru": ["\u041f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0438\u0442\u0435", "\u0438\u043c\u0435\u043d\u0430", "\u0432\u0441\u0435\u0445", "\u0441\u043f\u0435\u0446\u0438\u0430\u043b\u0438\u0441\u0442\u043e\u0432", "\u0432\u043c\u0435\u0441\u0442\u0435", "\u0441", "\u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435\u043c", "\u043b\u0435\u0447\u0435\u043d\u0438\u044f", ",", "\u043a\u043e\u0442\u043e\u0440\u043e\u0435", "\u043e\u043d\u0438", "\u0441\u0434\u0435\u043b\u0430\u043b\u0438", "."]}, "query_toks": {"en": ["select", "distinct", "t1.first_name", ",", "t3.treatment_type_description", "from", "professionals", "as", "t1", "join", "treatments", "as", "t2", "on", "t1.professional_id", "=", "t2.professional_id", "join", "treatment_types", "as", "t3", "on", "t2.treatment_type_code", "=", "t3.treatment_type_code", ";"], "ru": ["select", "distinct", "t1.first_name", ",", "t3.treatment_type_description", "from", "professionals", "as", "t1", "join", "treatments", "as", "t2", "on", "t1.professional_id", "=", "t2.professional_id", "join", "treatment_types", "as", "t3", "on", "t2.treatment_type_code", "=", "t3.treatment_type_code", ";"]}, "query_toks_no_values": {"en": ["select", "distinct", "t1.first_name", ",", "t3.treatment_type_description", "from", "professionals", "as", "t1", "join", "treatments", "as", "t2", "on", "t1.professional_id", "=", "t2.professional_id", "join", "treatment_types", "as", "t3", "on", "t2.treatment_type_code", "=", "t3.treatment_type_code", ";"], "ru": ["select", "distinct", "t1.first_name", ",", "t3.treatment_type_description", "from", "professionals", "as", "t1", "join", "treatments", "as", "t2", "on", "t1.professional_id", "=", "t2.professional_id", "join", "treatment_types", "as", "t3", "on", "t2.treatment_type_code", "=", "t3.treatment_type_code", ";"]}, "masked_query": "SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code;", "question_pauq": {"ru": "\u041f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0438\u0442\u0435 \u0438\u043c\u0435\u043d\u0430 \u0432\u0441\u0435\u0445 \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u0438\u0441\u0442\u043e\u0432 \u0432\u043c\u0435\u0441\u0442\u0435 \u0441 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435\u043c \u043b\u0435\u0447\u0435\u043d\u0438\u044f, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043e\u043d\u0438 \u0441\u0434\u0435\u043b\u0430\u043b\u0438."}, "question": "List the first name of all the professionals along with the description of the treatment they have done.", "kb_id": "dog_kennels"}, {"id": "D_1000", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 6], ["table_unit", 7], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 33, false], null], [0, 46, false], null], "and", [false, 2, [0, [0, 47, false], null], [0, 8, false], null]]}, "select": [true, [[0, [0, [0, 35, false], null]], [0, [0, [0, 9, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 6], ["table_unit", 7], ["table_unit", 3]], "conds": [[false, 2, [0, [0, 33, false], null], [0, 46, false], null], "and", [false, 2, [0, [0, 47, false], null], [0, 8, false], null]]}, "select": [true, [[0, [0, [0, 35, false], null]], [0, [0, [0, 9, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "each", "professional", "'s", "first", "name", "and", "description", "of", "the", "treatment", "they", "have", "performed", "?"], "ru": ["\u041a\u0430\u043a", "\u0437\u043e\u0432\u0443\u0442", "\u043a\u0430\u0436\u0434\u043e\u0433\u043e", "\u0441\u043f\u0435\u0446\u0438\u0430\u043b\u0438\u0441\u0442\u0430", "\u0438", "\u043a\u0430\u043a", "\u043e\u043d", "\u043e\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442", "\u043f\u0440\u043e\u0432\u0435\u0434\u0435\u043d\u043d\u043e\u0435", "\u043b\u0435\u0447\u0435\u043d\u0438\u0435", "?"]}, "query_toks": {"en": ["select", "distinct", "t1.first_name", ",", "t3.treatment_type_description", "from", "professionals", "as", "t1", "join", "treatments", "as", "t2", "on", "t1.professional_id", "=", "t2.professional_id", "join", "treatment_types", "as", "t3", "on", "t2.treatment_type_code", "=", "t3.treatment_type_code", ";"], "ru": ["select", "distinct", "t1.first_name", ",", "t3.treatment_type_description", "from", "professionals", "as", "t1", "join", "treatments", "as", "t2", "on", "t1.professional_id", "=", "t2.professional_id", "join", "treatment_types", "as", "t3", "on", "t2.treatment_type_code", "=", "t3.treatment_type_code", ";"]}, "query_toks_no_values": {"en": ["select", "distinct", "t1.first_name", ",", "t3.treatment_type_description", "from", "professionals", "as", "t1", "join", "treatments", "as", "t2", "on", "t1.professional_id", "=", "t2.professional_id", "join", "treatment_types", "as", "t3", "on", "t2.treatment_type_code", "=", "t3.treatment_type_code", ";"], "ru": ["select", "distinct", "t1.first_name", ",", "t3.treatment_type_description", "from", "professionals", "as", "t1", "join", "treatments", "as", "t2", "on", "t1.professional_id", "=", "t2.professional_id", "join", "treatment_types", "as", "t3", "on", "t2.treatment_type_code", "=", "t3.treatment_type_code", ";"]}, "masked_query": "SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code;", "question_pauq": {"ru": "\u041a\u0430\u043a \u0437\u043e\u0432\u0443\u0442 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u0438\u0441\u0442\u0430 \u0438 \u043a\u0430\u043a \u043e\u043d \u043e\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442 \u043f\u0440\u043e\u0432\u0435\u0434\u0435\u043d\u043d\u043e\u0435 \u043b\u0435\u0447\u0435\u043d\u0438\u0435?"}, "question": "What are each professional's first name and description of the treatment they have performed?", "kb_id": "dog_kennels"}, {"id": "D_1001", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT count(*) FROM singer;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["How", "many", "singers", "are", "there", "?"], "ru": ["\u0421\u043a\u043e\u043b\u044c\u043a\u043e", "\u0437\u0434\u0435\u0441\u044c", "\u043f\u0435\u0432\u0446\u043e\u0432", "?"]}, "query_toks": {"en": ["select", "count", "(", "*", ")", "from", "singer", ";"], "ru": ["select", "count", "(", "*", ")", "from", "singer", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "*", ")", "from", "singer", ";"], "ru": ["select", "count", "(", "*", ")", "from", "singer", ";"]}, "masked_query": "SELECT count(*) FROM singer;", "question_pauq": {"ru": "\u0421\u043a\u043e\u043b\u044c\u043a\u043e \u0437\u0434\u0435\u0441\u044c \u043f\u0435\u0432\u0446\u043e\u0432?"}, "question": "How many singers are there?", "kb_id": "singer"}, {"id": "D_1002", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT count(*) FROM singer;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "count", "of", "singers", "?"], "ru": ["\u0421\u043a\u043e\u043b\u044c\u043a\u043e", "\u043f\u0435\u0432\u0446\u043e\u0432", "?"]}, "query_toks": {"en": ["select", "count", "(", "*", ")", "from", "singer", ";"], "ru": ["select", "count", "(", "*", ")", "from", "singer", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "*", ")", "from", "singer", ";"], "ru": ["select", "count", "(", "*", ")", "from", "singer", ";"]}, "masked_query": "SELECT count(*) FROM singer;", "question_pauq": {"ru": "\u0421\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u0435\u0432\u0446\u043e\u0432?"}, "question": "What is the count of singers?", "kb_id": "singer"}, {"id": "D_1003", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["asc", [[0, [0, 4, false], null]]], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["asc", [[0, [0, 4, false], null]]], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["List", "the", "name", "of", "singers", "in", "ascending", "order", "of", "net", "worth", "."], "ru": ["\u041f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0438\u0442\u0435", "\u0438\u043c\u0435\u043d\u0430", "\u043f\u0435\u0432\u0446\u043e\u0432", "\u0432", "\u043f\u043e\u0440\u044f\u0434\u043a\u0435", "\u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430\u043d\u0438\u044f", "\u0438\u0445", "\u0447\u0438\u0441\u0442\u044b\u0445", "\u0430\u043a\u0442\u0438\u0432\u043e\u0432", "."]}, "query_toks": {"en": ["select", "name", "from", "singer", "order", "by", "net_worth_millions", "asc", ";"], "ru": ["select", "name", "from", "singer", "order", "by", "net_worth_millions", "asc", ";"]}, "query_toks_no_values": {"en": ["select", "name", "from", "singer", "order", "by", "net_worth_millions", "asc", ";"], "ru": ["select", "name", "from", "singer", "order", "by", "net_worth_millions", "asc", ";"]}, "masked_query": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC;", "question_pauq": {"ru": "\u041f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0438\u0442\u0435 \u0438\u043c\u0435\u043d\u0430 \u043f\u0435\u0432\u0446\u043e\u0432 \u0432 \u043f\u043e\u0440\u044f\u0434\u043a\u0435 \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430\u043d\u0438\u044f \u0438\u0445 \u0447\u0438\u0441\u0442\u044b\u0445 \u0430\u043a\u0442\u0438\u0432\u043e\u0432."}, "question": "List the name of singers in ascending order of net worth.", "kb_id": "singer"}, {"id": "D_1004", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["asc", [[0, [0, 4, false], null]]], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["asc", [[0, [0, 4, false], null]]], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "the", "names", "of", "singers", "ordered", "by", "ascending", "net", "worth", "?"], "ru": ["\u041a\u0430\u043a", "\u0437\u043e\u0432\u0443\u0442", "\u043f\u0435\u0432\u0446\u043e\u0432", "\u0432", "\u043f\u043e\u0440\u044f\u0434\u043a\u0435", "\u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430\u044e\u0449\u0435\u0439", "\u0447\u0438\u0441\u0442\u043e\u0439", "\u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u0438", "?"]}, "query_toks": {"en": ["select", "name", "from", "singer", "order", "by", "net_worth_millions", "asc", ";"], "ru": ["select", "name", "from", "singer", "order", "by", "net_worth_millions", "asc", ";"]}, "query_toks_no_values": {"en": ["select", "name", "from", "singer", "order", "by", "net_worth_millions", "asc", ";"], "ru": ["select", "name", "from", "singer", "order", "by", "net_worth_millions", "asc", ";"]}, "masked_query": "SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC;", "question_pauq": {"ru": "\u041a\u0430\u043a \u0437\u043e\u0432\u0443\u0442 \u043f\u0435\u0432\u0446\u043e\u0432 \u0432 \u043f\u043e\u0440\u044f\u0434\u043a\u0435 \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u0430\u044e\u0449\u0435\u0439 \u0447\u0438\u0441\u0442\u043e\u0439 \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u0438?"}, "question": "What are the names of singers ordered by ascending net worth?", "kb_id": "singer"}, {"id": "D_1005", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT Birth_Year ,  Citizenship FROM singer;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 3, false], null]], [0, [0, [0, 5, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 3, false], null]], [0, [0, [0, 5, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "the", "birth", "year", "and", "citizenship", "of", "singers", "?"], "ru": ["\u041a\u0430\u043a\u043e\u0439", "\u0433\u043e\u0434", "\u0440\u043e\u0436\u0434\u0435\u043d\u0438\u044f", "\u0438", "\u0433\u0440\u0430\u0436\u0434\u0430\u043d\u0441\u0442\u0432\u043e", "\u043f\u0435\u0432\u0446\u043e\u0432", "?"]}, "query_toks": {"en": ["select", "birth_year", ",", "citizenship", "from", "singer", ";"], "ru": ["select", "birth_year", ",", "citizenship", "from", "singer", ";"]}, "query_toks_no_values": {"en": ["select", "birth_year", ",", "citizenship", "from", "singer", ";"], "ru": ["select", "birth_year", ",", "citizenship", "from", "singer", ";"]}, "masked_query": "SELECT Birth_Year ,  Citizenship FROM singer;", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0439 \u0433\u043e\u0434 \u0440\u043e\u0436\u0434\u0435\u043d\u0438\u044f \u0438 \u0433\u0440\u0430\u0436\u0434\u0430\u043d\u0441\u0442\u0432\u043e \u043f\u0435\u0432\u0446\u043e\u0432?"}, "question": "What are the birth year and citizenship of singers?", "kb_id": "singer"}, {"id": "D_1006", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT Birth_Year ,  Citizenship FROM singer;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 3, false], null]], [0, [0, [0, 5, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 3, false], null]], [0, [0, [0, 5, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "the", "birth", "years", "and", "citizenships", "of", "the", "singers", "?"], "ru": ["\u041a\u0430\u043a\u0438\u0435", "\u0433\u043e\u0434\u044b", "\u0440\u043e\u0436\u0434\u0435\u043d\u0438\u044f", "\u0438", "\u0433\u0440\u0430\u0436\u0434\u0430\u043d\u0441\u0442\u0432\u0430", "\u043f\u0435\u0432\u0446\u043e\u0432", "?"]}, "query_toks": {"en": ["select", "birth_year", ",", "citizenship", "from", "singer", ";"], "ru": ["select", "birth_year", ",", "citizenship", "from", "singer", ";"]}, "query_toks_no_values": {"en": ["select", "birth_year", ",", "citizenship", "from", "singer", ";"], "ru": ["select", "birth_year", ",", "citizenship", "from", "singer", ";"]}, "masked_query": "SELECT Birth_Year ,  Citizenship FROM singer;", "question_pauq": {"ru": "\u041a\u0430\u043a\u0438\u0435 \u0433\u043e\u0434\u044b \u0440\u043e\u0436\u0434\u0435\u043d\u0438\u044f \u0438 \u0433\u0440\u0430\u0436\u0434\u0430\u043d\u0441\u0442\u0432\u0430 \u043f\u0435\u0432\u0446\u043e\u0432?"}, "question": "What are the birth years and citizenships of the singers?", "kb_id": "singer"}, {"id": "D_1007", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT Name FROM singer WHERE Citizenship != \"\u0420\u043e\u0441\u0441\u0438\u044f\";"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [[false, 7, [0, [0, 5, false], null], "\"France\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [[false, 7, [0, [0, 5, false], null], "\"\u0420\u043e\u0441\u0441\u0438\u044f\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["List", "the", "name", "of", "singers", "whose", "citizenship", "is", "not", "``", "France", "''", "."], "ru": ["\u041f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0438\u0442\u0435", "\u0438\u043c\u0435\u043d\u0430", "\u043f\u0435\u0432\u0446\u043e\u0432", ",", "\u0433\u0440\u0430\u0436\u0434\u0430\u043d\u0441\u0442\u0432\u043e", "\u043a\u043e\u0442\u043e\u0440\u044b\u0445", "\u043d\u0435", "``", "\u0420\u043e\u0441\u0441\u0438\u044f", "''", "."]}, "query_toks": {"en": ["select", "name", "from", "singer", "where", "citizenship", "!=", "\"France\"", ";"], "ru": ["select", "name", "from", "singer", "where", "citizenship", "!=", "\"\u0420\u043e\u0441\u0441\u0438\u044f\"", ";"]}, "query_toks_no_values": {"en": ["select", "name", "from", "singer", "where", "citizenship", "!=", "value", ";"], "ru": ["select", "name", "from", "singer", "where", "citizenship", "!=", "value", ";"]}, "masked_query": "SELECT Name FROM singer WHERE Citizenship != \"France\";", "question_pauq": {"ru": "\u041f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0438\u0442\u0435 \u0438\u043c\u0435\u043d\u0430 \u043f\u0435\u0432\u0446\u043e\u0432, \u0433\u0440\u0430\u0436\u0434\u0430\u043d\u0441\u0442\u0432\u043e \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043d\u0435 \"\u0420\u043e\u0441\u0441\u0438\u044f\"."}, "question": "List the name of singers whose citizenship is not \"France\".", "kb_id": "singer"}, {"id": "D_1008", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT Name FROM singer WHERE Citizenship != \"\u0420\u043e\u0441\u0441\u0438\u044f\";"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [[false, 7, [0, [0, 5, false], null], "\"France\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [[false, 7, [0, [0, 5, false], null], "\"\u0420\u043e\u0441\u0441\u0438\u044f\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "the", "names", "of", "the", "singers", "who", "are", "not", "French", "citizens", "?"], "ru": ["\u041a\u0430\u043a", "\u0437\u043e\u0432\u0443\u0442", "\u043f\u0435\u0432\u0446\u043e\u0432", ",", "\u043d\u0435", "\u044f\u0432\u043b\u044f\u044e\u0449\u0438\u0445\u0441\u044f", "\u0433\u0440\u0430\u0436\u0434\u0430\u043d\u0430\u043c\u0438", "\u0420\u043e\u0441\u0441\u0438\u0438", "?"]}, "query_toks": {"en": ["select", "name", "from", "singer", "where", "citizenship", "!=", "\"France\"", ";"], "ru": ["select", "name", "from", "singer", "where", "citizenship", "!=", "\"\u0420\u043e\u0441\u0441\u0438\u044f\"", ";"]}, "query_toks_no_values": {"en": ["select", "name", "from", "singer", "where", "citizenship", "!=", "value", ";"], "ru": ["select", "name", "from", "singer", "where", "citizenship", "!=", "value", ";"]}, "masked_query": "SELECT Name FROM singer WHERE Citizenship != \"France\";", "question_pauq": {"ru": "\u041a\u0430\u043a \u0437\u043e\u0432\u0443\u0442 \u043f\u0435\u0432\u0446\u043e\u0432, \u043d\u0435 \u044f\u0432\u043b\u044f\u044e\u0449\u0438\u0445\u0441\u044f \u0433\u0440\u0430\u0436\u0434\u0430\u043d\u0430\u043c\u0438 \u0420\u043e\u0441\u0441\u0438\u0438?"}, "question": "What are the names of the singers who are not French citizens?", "kb_id": "singer"}, {"id": "D_1009", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [[false, 2, [0, [0, 3, false], null], 1948.0, null], "or", [false, 2, [0, [0, 3, false], null], 1949.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [[false, 2, [0, [0, 3, false], null], 1948.0, null], "or", [false, 2, [0, [0, 3, false], null], 1949.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Show", "the", "name", "of", "singers", "whose", "birth", "year", "is", "either", "1948", "or", "1949", "?"], "ru": ["\u0423\u043a\u0430\u0436\u0438\u0442\u0435", "\u0438\u043c\u0435\u043d\u0430", "\u043f\u0435\u0432\u0446\u043e\u0432", ",", "\u0447\u0435\u0439", "\u0433\u043e\u0434", "\u0440\u043e\u0436\u0434\u0435\u043d\u0438\u044f", "-", "1948", "\u0438\u043b\u0438", "1949"]}, "query_toks": {"en": ["select", "name", "from", "singer", "where", "birth_year", "=", "1948", "or", "birth_year", "=", "1949", ";"], "ru": ["select", "name", "from", "singer", "where", "birth_year", "=", "1948", "or", "birth_year", "=", "1949", ";"]}, "query_toks_no_values": {"en": ["select", "name", "from", "singer", "where", "birth_year", "=", "1948", "or", "birth_year", "=", "1949", ";"], "ru": ["select", "name", "from", "singer", "where", "birth_year", "=", "1948", "or", "birth_year", "=", "1949", ";"]}, "masked_query": "SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949;", "question_pauq": {"ru": "\u0423\u043a\u0430\u0436\u0438\u0442\u0435 \u0438\u043c\u0435\u043d\u0430 \u043f\u0435\u0432\u0446\u043e\u0432, \u0447\u0435\u0439 \u0433\u043e\u0434 \u0440\u043e\u0436\u0434\u0435\u043d\u0438\u044f - 1948 \u0438\u043b\u0438 1949"}, "question": "Show the name of singers whose birth year is either 1948 or 1949?", "kb_id": "singer"}, {"id": "D_1010", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [[false, 2, [0, [0, 3, false], null], 1948.0, null], "or", [false, 2, [0, [0, 3, false], null], 1949.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [[false, 2, [0, [0, 3, false], null], 1948.0, null], "or", [false, 2, [0, [0, 3, false], null], 1949.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "the", "names", "of", "the", "singers", "whose", "birth", "years", "are", "either", "1948", "or", "1949", "?"], "ru": ["\u041a\u0430\u043a", "\u0437\u043e\u0432\u0443\u0442", "\u043f\u0435\u0432\u0446\u043e\u0432", ",", "\u0447\u044c\u0438", "\u0433\u043e\u0434\u044b", "\u0440\u043e\u0436\u0434\u0435\u043d\u0438\u044f", "-", "1948", "\u0438\u043b\u0438", "1949", "?"]}, "query_toks": {"en": ["select", "name", "from", "singer", "where", "birth_year", "=", "1948", "or", "birth_year", "=", "1949", ";"], "ru": ["select", "name", "from", "singer", "where", "birth_year", "=", "1948", "or", "birth_year", "=", "1949", ";"]}, "query_toks_no_values": {"en": ["select", "name", "from", "singer", "where", "birth_year", "=", "1948", "or", "birth_year", "=", "1949", ";"], "ru": ["select", "name", "from", "singer", "where", "birth_year", "=", "1948", "or", "birth_year", "=", "1949", ";"]}, "masked_query": "SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949;", "question_pauq": {"ru": "\u041a\u0430\u043a \u0437\u043e\u0432\u0443\u0442 \u043f\u0435\u0432\u0446\u043e\u0432, \u0447\u044c\u0438 \u0433\u043e\u0434\u044b \u0440\u043e\u0436\u0434\u0435\u043d\u0438\u044f - 1948 \u0438\u043b\u0438 1949?"}, "question": "What are the names of the singers whose birth years are either 1948 or 1949?", "kb_id": "singer"}, {"id": "D_1011", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 4, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 4, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "name", "of", "the", "singer", "with", "the", "largest", "net", "worth", "?"], "ru": ["\u041a\u0430\u043a", "\u0437\u043e\u0432\u0443\u0442", "\u043f\u0435\u0432\u0446\u0430", "\u0441", "\u0441\u0430\u043c\u044b\u043c", "\u0431\u043e\u043b\u044c\u0448\u0438\u043c", "\u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435\u043c", "?"]}, "query_toks": {"en": ["select", "name", "from", "singer", "order", "by", "net_worth_millions", "desc", "limit", "1", ";"], "ru": ["select", "name", "from", "singer", "order", "by", "net_worth_millions", "desc", "limit", "1", ";"]}, "query_toks_no_values": {"en": ["select", "name", "from", "singer", "order", "by", "net_worth_millions", "desc", "limit", "1", ";"], "ru": ["select", "name", "from", "singer", "order", "by", "net_worth_millions", "desc", "limit", "1", ";"]}, "masked_query": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1;", "question_pauq": {"ru": "\u041a\u0430\u043a \u0437\u043e\u0432\u0443\u0442 \u043f\u0435\u0432\u0446\u0430 \u0441 \u0441\u0430\u043c\u044b\u043c \u0431\u043e\u043b\u044c\u0448\u0438\u043c \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435\u043c?"}, "question": "What is the name of the singer with the largest net worth?", "kb_id": "singer"}, {"id": "D_1012", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 4, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": ["desc", [[0, [0, 4, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "name", "of", "the", "singer", "who", "is", "worth", "the", "most", "?"], "ru": ["\u041a\u0430\u043a", "\u0437\u043e\u0432\u0443\u0442", "\u043f\u0435\u0432\u0446\u0430", ",", "\u043a\u043e\u0442\u043e\u0440\u044b\u0439", "\u0441\u0442\u043e\u0438\u0442", "\u0431\u043e\u043b\u044c\u0448\u0435", "\u0432\u0441\u0435\u0433\u043e", "?"]}, "query_toks": {"en": ["select", "name", "from", "singer", "order", "by", "net_worth_millions", "desc", "limit", "1", ";"], "ru": ["select", "name", "from", "singer", "order", "by", "net_worth_millions", "desc", "limit", "1", ";"]}, "query_toks_no_values": {"en": ["select", "name", "from", "singer", "order", "by", "net_worth_millions", "desc", "limit", "1", ";"], "ru": ["select", "name", "from", "singer", "order", "by", "net_worth_millions", "desc", "limit", "1", ";"]}, "masked_query": "SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1;", "question_pauq": {"ru": "\u041a\u0430\u043a \u0437\u043e\u0432\u0443\u0442 \u043f\u0435\u0432\u0446\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0441\u0442\u043e\u0438\u0442 \u0431\u043e\u043b\u044c\u0448\u0435 \u0432\u0441\u0435\u0433\u043e?"}, "question": "What is the name of the singer who is worth the most?", "kb_id": "singer"}, {"id": "D_1013", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 5, false], null]], [3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [[0, 5, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 5, false], null]], [3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [[0, 5, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Show", "different", "citizenship", "of", "singers", "and", "the", "number", "of", "singers", "of", "each", "citizenship", "."], "ru": ["\u041f\u043e\u043a\u0430\u0436\u0438\u0442\u0435", "\u0440\u0430\u0437\u043b\u0438\u0447\u043d\u043e\u0435", "\u0433\u0440\u0430\u0436\u0434\u0430\u043d\u0441\u0442\u0432\u043e", "\u043f\u0435\u0432\u0446\u043e\u0432", "\u0438", "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e", "\u043f\u0435\u0432\u0446\u043e\u0432", "\u043a\u0430\u0436\u0434\u043e\u0433\u043e", "\u0433\u0440\u0430\u0436\u0434\u0430\u043d\u0441\u0442\u0432\u0430", "."]}, "query_toks": {"en": ["select", "citizenship", ",", "count", "(", "*", ")", "from", "singer", "group", "by", "citizenship", ";"], "ru": ["select", "citizenship", ",", "count", "(", "*", ")", "from", "singer", "group", "by", "citizenship", ";"]}, "query_toks_no_values": {"en": ["select", "citizenship", ",", "count", "(", "*", ")", "from", "singer", "group", "by", "citizenship", ";"], "ru": ["select", "citizenship", ",", "count", "(", "*", ")", "from", "singer", "group", "by", "citizenship", ";"]}, "masked_query": "SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship;", "question_pauq": {"ru": "\u041f\u043e\u043a\u0430\u0436\u0438\u0442\u0435 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u043e\u0435 \u0433\u0440\u0430\u0436\u0434\u0430\u043d\u0441\u0442\u0432\u043e \u043f\u0435\u0432\u0446\u043e\u0432 \u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0435\u0432\u0446\u043e\u0432 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0433\u0440\u0430\u0436\u0434\u0430\u043d\u0441\u0442\u0432\u0430."}, "question": "Show different citizenship of singers and the number of singers of each citizenship.", "kb_id": "singer"}, {"id": "D_1014", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 5, false], null]], [3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [[0, 5, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 5, false], null]], [3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [[0, 5, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["For", "each", "citizenship", ",", "how", "many", "singers", "are", "from", "that", "country", "?"], "ru": ["\u0421\u043a\u043e\u043b\u044c\u043a\u043e", "\u043f\u0435\u0432\u0446\u043e\u0432", "\u043a\u0430\u0436\u0434\u043e\u0433\u043e", "\u0433\u0440\u0430\u0436\u0434\u0430\u043d\u0441\u0442\u0432\u0430", "?"]}, "query_toks": {"en": ["select", "citizenship", ",", "count", "(", "*", ")", "from", "singer", "group", "by", "citizenship", ";"], "ru": ["select", "citizenship", ",", "count", "(", "*", ")", "from", "singer", "group", "by", "citizenship", ";"]}, "query_toks_no_values": {"en": ["select", "citizenship", ",", "count", "(", "*", ")", "from", "singer", "group", "by", "citizenship", ";"], "ru": ["select", "citizenship", ",", "count", "(", "*", ")", "from", "singer", "group", "by", "citizenship", ";"]}, "masked_query": "SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship;", "question_pauq": {"ru": "\u0421\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u0435\u0432\u0446\u043e\u0432 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0433\u0440\u0430\u0436\u0434\u0430\u043d\u0441\u0442\u0432\u0430?"}, "question": "For each citizenship, how many singers are from that country?", "kb_id": "singer"}, {"id": "D_1015", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 5, false], null]]]], "where": [], "groupBy": [[0, 5, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 5, false], null]]]], "where": [], "groupBy": [[0, 5, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Please", "show", "the", "most", "common", "citizenship", "of", "singers", "."], "ru": ["\u041f\u043e\u043a\u0430\u0436\u0438\u0442\u0435", ",", "\u043f\u043e\u0436\u0430\u043b\u0443\u0439\u0441\u0442\u0430", ",", "\u043d\u0430\u0438\u0431\u043e\u043b\u0435\u0435", "\u0440\u0430\u0441\u043f\u0440\u043e\u0441\u0442\u0440\u0430\u043d\u0435\u043d\u043d\u043e\u0435", "\u0433\u0440\u0430\u0436\u0434\u0430\u043d\u0441\u0442\u0432\u043e", "\u0441\u0440\u0435\u0434\u0438", "\u043f\u0435\u0432\u0446\u043e\u0432", "."]}, "query_toks": {"en": ["select", "citizenship", "from", "singer", "group", "by", "citizenship", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"], "ru": ["select", "citizenship", "from", "singer", "group", "by", "citizenship", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"]}, "query_toks_no_values": {"en": ["select", "citizenship", "from", "singer", "group", "by", "citizenship", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"], "ru": ["select", "citizenship", "from", "singer", "group", "by", "citizenship", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"]}, "masked_query": "SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1;", "question_pauq": {"ru": "\u041f\u043e\u043a\u0430\u0436\u0438\u0442\u0435, \u043f\u043e\u0436\u0430\u043b\u0443\u0439\u0441\u0442\u0430, \u043d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u0440\u0430\u0441\u043f\u0440\u043e\u0441\u0442\u0440\u0430\u043d\u0435\u043d\u043d\u043e\u0435 \u0433\u0440\u0430\u0436\u0434\u0430\u043d\u0441\u0442\u0432\u043e \u0441\u0440\u0435\u0434\u0438 \u043f\u0435\u0432\u0446\u043e\u0432."}, "question": "Please show the most common citizenship of singers.", "kb_id": "singer"}, {"id": "D_1016", "source": "spider-dev", "type": "dev", "query": {"ru": "select citizenship from singer group by citizenship order by count(*) desc limit 1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 5, false], null]]]], "where": [], "groupBy": [[0, 5, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 5, false], null]]]], "where": [], "groupBy": [[0, 5, false]], "having": [], "orderBy": ["desc", [[0, [3, 0, false], null]]], "limit": 1, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "most", "common", "singer", "citizenship", "?"], "ru": ["\u041a\u0430\u043a\u043e\u0435", "\u0433\u0440\u0430\u0436\u0434\u0430\u043d\u0441\u0442\u0432\u043e", "\u0443", "\u043f\u0435\u0432\u0446\u043e\u0432", "\u043d\u0430\u0438\u0431\u043e\u043b\u0435\u0435", "\u0440\u0430\u0441\u043f\u0440\u043e\u0441\u0442\u0440\u0430\u043d\u0435\u043d\u043e", "?"]}, "query_toks": {"en": ["select", "citizenship", "from", "singer", "group", "by", "citizenship", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"], "ru": ["select", "citizenship", "from", "singer", "group", "by", "citizenship", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"]}, "query_toks_no_values": {"en": ["select", "citizenship", "from", "singer", "group", "by", "citizenship", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"], "ru": ["select", "citizenship", "from", "singer", "group", "by", "citizenship", "order", "by", "count", "(", "*", ")", "desc", "limit", "1", ";"]}, "masked_query": "select citizenship from singer group by citizenship order by count(*) desc limit 1;", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0435 \u0433\u0440\u0430\u0436\u0434\u0430\u043d\u0441\u0442\u0432\u043e \u0443 \u043f\u0435\u0432\u0446\u043e\u0432 \u043d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u0440\u0430\u0441\u043f\u0440\u043e\u0441\u0442\u0440\u0430\u043d\u0435\u043d\u043e?"}, "question": "What is the most common singer citizenship ?", "kb_id": "singer"}, {"id": "D_1017", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 5, false], null]], [1, [0, [0, 4, false], null]]]], "where": [], "groupBy": [[0, 5, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 5, false], null]], [1, [0, [0, 4, false], null]]]], "where": [], "groupBy": [[0, 5, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Show", "different", "citizenships", "and", "the", "maximum", "net", "worth", "of", "singers", "of", "each", "citizenship", "."], "ru": ["\u041f\u043e\u043a\u0430\u0436\u0438\u0442\u0435", "\u0440\u0430\u0437\u043b\u0438\u0447\u043d\u043e\u0435", "\u0433\u0440\u0430\u0436\u0434\u0430\u043d\u0441\u0442\u0432\u043e", "\u0438", "\u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439", "\u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0439", "\u043a\u0430\u043f\u0438\u0442\u0430\u043b", "\u043f\u0435\u0432\u0446\u043e\u0432", "\u043a\u0430\u0436\u0434\u043e\u0433\u043e", "\u0433\u0440\u0430\u0436\u0434\u0430\u043d\u0441\u0442\u0432\u0430", "."]}, "query_toks": {"en": ["select", "citizenship", ",", "max", "(", "net_worth_millions", ")", "from", "singer", "group", "by", "citizenship", ";"], "ru": ["select", "citizenship", ",", "max", "(", "net_worth_millions", ")", "from", "singer", "group", "by", "citizenship", ";"]}, "query_toks_no_values": {"en": ["select", "citizenship", ",", "max", "(", "net_worth_millions", ")", "from", "singer", "group", "by", "citizenship", ";"], "ru": ["select", "citizenship", ",", "max", "(", "net_worth_millions", ")", "from", "singer", "group", "by", "citizenship", ";"]}, "masked_query": "SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship;", "question_pauq": {"ru": "\u041f\u043e\u043a\u0430\u0436\u0438\u0442\u0435 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u043e\u0435 \u0433\u0440\u0430\u0436\u0434\u0430\u043d\u0441\u0442\u0432\u043e \u0438 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0439 \u043a\u0430\u043f\u0438\u0442\u0430\u043b \u043f\u0435\u0432\u0446\u043e\u0432 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0433\u0440\u0430\u0436\u0434\u0430\u043d\u0441\u0442\u0432\u0430."}, "question": "Show different citizenships and the maximum net worth of singers of each citizenship.", "kb_id": "singer"}, {"id": "D_1018", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 5, false], null]], [1, [0, [0, 4, false], null]]]], "where": [], "groupBy": [[0, 5, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 5, false], null]], [1, [0, [0, 4, false], null]]]], "where": [], "groupBy": [[0, 5, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["For", "each", "citizenship", ",", "what", "is", "the", "maximum", "net", "worth", "?"], "ru": ["\u041a\u0430\u043a\u043e\u0432", "\u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439", "\u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0439", "\u043a\u0430\u043f\u0438\u0442\u0430\u043b", "\u0434\u043b\u044f", "\u043a\u0430\u0436\u0434\u043e\u0433\u043e", "\u0433\u0440\u0430\u0436\u0434\u0430\u043d\u0441\u0442\u0432\u0430", "?"]}, "query_toks": {"en": ["select", "citizenship", ",", "max", "(", "net_worth_millions", ")", "from", "singer", "group", "by", "citizenship", ";"], "ru": ["select", "citizenship", ",", "max", "(", "net_worth_millions", ")", "from", "singer", "group", "by", "citizenship", ";"]}, "query_toks_no_values": {"en": ["select", "citizenship", ",", "max", "(", "net_worth_millions", ")", "from", "singer", "group", "by", "citizenship", ";"], "ru": ["select", "citizenship", ",", "max", "(", "net_worth_millions", ")", "from", "singer", "group", "by", "citizenship", ";"]}, "masked_query": "SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship;", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0432 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0439 \u043a\u0430\u043f\u0438\u0442\u0430\u043b \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0433\u0440\u0430\u0436\u0434\u0430\u043d\u0441\u0442\u0432\u0430?"}, "question": "For each citizenship, what is the maximum net worth?", "kb_id": "singer"}, {"id": "D_1019", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 8, false], null]]}, "select": [false, [[0, [0, [0, 7, false], null]], [0, [0, [0, 2, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 8, false], null]]}, "select": [false, [[0, [0, [0, 7, false], null]], [0, [0, [0, 2, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Show", "titles", "of", "songs", "and", "names", "of", "singers", "."], "ru": ["\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c", "\u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f", "\u043f\u0435\u0441\u0435\u043d", "\u0438", "\u0438\u043c\u0435\u043d\u0430", "\u043f\u0435\u0432\u0446\u043e\u0432", "."]}, "query_toks": {"en": ["select", "t2.title", ",", "t1.name", "from", "singer", "as", "t1", "join", "song", "as", "t2", "on", "t1.singer_id", "=", "t2.singer_id", ";"], "ru": ["select", "t2.title", ",", "t1.name", "from", "singer", "as", "t1", "join", "song", "as", "t2", "on", "t1.singer_id", "=", "t2.singer_id", ";"]}, "query_toks_no_values": {"en": ["select", "t2.title", ",", "t1.name", "from", "singer", "as", "t1", "join", "song", "as", "t2", "on", "t1.singer_id", "=", "t2.singer_id", ";"], "ru": ["select", "t2.title", ",", "t1.name", "from", "singer", "as", "t1", "join", "song", "as", "t2", "on", "t1.singer_id", "=", "t2.singer_id", ";"]}, "masked_query": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID;", "question_pauq": {"ru": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f \u043f\u0435\u0441\u0435\u043d \u0438 \u0438\u043c\u0435\u043d\u0430 \u043f\u0435\u0432\u0446\u043e\u0432."}, "question": "Show titles of songs and names of singers.", "kb_id": "singer"}, {"id": "D_1020", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 8, false], null]]}, "select": [false, [[0, [0, [0, 7, false], null]], [0, [0, [0, 2, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 8, false], null]]}, "select": [false, [[0, [0, [0, 7, false], null]], [0, [0, [0, 2, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "the", "song", "titles", "and", "singer", "names", "?"], "ru": ["\u041a\u0430\u043a\u0438\u0435", "\u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f", "\u043f\u0435\u0441\u0435\u043d", "\u0438", "\u0438\u043c\u0435\u043d\u0430", "\u043f\u0435\u0432\u0446\u043e\u0432", "?"]}, "query_toks": {"en": ["select", "t2.title", ",", "t1.name", "from", "singer", "as", "t1", "join", "song", "as", "t2", "on", "t1.singer_id", "=", "t2.singer_id", ";"], "ru": ["select", "t2.title", ",", "t1.name", "from", "singer", "as", "t1", "join", "song", "as", "t2", "on", "t1.singer_id", "=", "t2.singer_id", ";"]}, "query_toks_no_values": {"en": ["select", "t2.title", ",", "t1.name", "from", "singer", "as", "t1", "join", "song", "as", "t2", "on", "t1.singer_id", "=", "t2.singer_id", ";"], "ru": ["select", "t2.title", ",", "t1.name", "from", "singer", "as", "t1", "join", "song", "as", "t2", "on", "t1.singer_id", "=", "t2.singer_id", ";"]}, "masked_query": "SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID;", "question_pauq": {"ru": "\u041a\u0430\u043a\u0438\u0435 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f \u043f\u0435\u0441\u0435\u043d \u0438 \u0438\u043c\u0435\u043d\u0430 \u043f\u0435\u0432\u0446\u043e\u0432?"}, "question": "What are the song titles and singer names?", "kb_id": "singer"}, {"id": "D_1021", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 8, false], null]]}, "select": [true, [[0, [0, [0, 2, false], null]]]], "where": [[false, 3, [0, [0, 9, false], null], 300000.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 8, false], null]]}, "select": [true, [[0, [0, [0, 2, false], null]]]], "where": [[false, 3, [0, [0, 9, false], null], 300000.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Show", "distinct", "names", "of", "singers", "that", "have", "songs", "with", "sales", "more", "than", "300000", "."], "ru": ["\u041f\u043e\u043a\u0430\u0436\u0438\u0442\u0435", "\u0440\u0430\u0437\u043d\u044b\u0435", "\u0438\u043c\u0435\u043d\u0430", "\u043f\u0435\u0432\u0446\u043e\u0432", ",", "\u0443", "\u043a\u043e\u0442\u043e\u0440\u044b\u0445", "\u0435\u0441\u0442\u044c", "\u043f\u0435\u0441\u043d\u0438", "\u0441", "\u043f\u0440\u043e\u0434\u0430\u0436\u0430\u043c\u0438", "\u0431\u043e\u043b\u0435\u0435", "300000", "."]}, "query_toks": {"en": ["select", "distinct", "t1.name", "from", "singer", "as", "t1", "join", "song", "as", "t2", "on", "t1.singer_id", "=", "t2.singer_id", "where", "t2.sales", ">", "300000", ";"], "ru": ["select", "distinct", "t1.name", "from", "singer", "as", "t1", "join", "song", "as", "t2", "on", "t1.singer_id", "=", "t2.singer_id", "where", "t2.sales", ">", "300000", ";"]}, "query_toks_no_values": {"en": ["select", "distinct", "t1.name", "from", "singer", "as", "t1", "join", "song", "as", "t2", "on", "t1.singer_id", "=", "t2.singer_id", "where", "t2.sales", ">", "300000", ";"], "ru": ["select", "distinct", "t1.name", "from", "singer", "as", "t1", "join", "song", "as", "t2", "on", "t1.singer_id", "=", "t2.singer_id", "where", "t2.sales", ">", "300000", ";"]}, "masked_query": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000;", "question_pauq": {"ru": "\u041f\u043e\u043a\u0430\u0436\u0438\u0442\u0435 \u0440\u0430\u0437\u043d\u044b\u0435 \u0438\u043c\u0435\u043d\u0430 \u043f\u0435\u0432\u0446\u043e\u0432, \u0443 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0435\u0441\u0442\u044c \u043f\u0435\u0441\u043d\u0438 \u0441 \u043f\u0440\u043e\u0434\u0430\u0436\u0430\u043c\u0438 \u0431\u043e\u043b\u0435\u0435 300000."}, "question": "Show distinct names of singers that have songs with sales more than 300000.", "kb_id": "singer"}, {"id": "D_1022", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 8, false], null]]}, "select": [true, [[0, [0, [0, 2, false], null]]]], "where": [[false, 3, [0, [0, 9, false], null], 300000.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 8, false], null]]}, "select": [true, [[0, [0, [0, 2, false], null]]]], "where": [[false, 3, [0, [0, 9, false], null], 300000.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["what", "are", "the", "different", "names", "of", "the", "singers", "that", "have", "sales", "more", "than", "300000", "?"], "ru": ["\u041a\u0430\u043a\u0438\u0435", "\u0438\u043c\u0435\u043d\u0430", "\u0443", "\u043f\u0435\u0432\u0446\u043e\u0432", ",", "\u0443", "\u043a\u043e\u0442\u043e\u0440\u044b\u0445", "\u043f\u0440\u043e\u0434\u0430\u0436\u0438", "\u0431\u043e\u043b\u0435\u0435", "300000", "?"]}, "query_toks": {"en": ["select", "distinct", "t1.name", "from", "singer", "as", "t1", "join", "song", "as", "t2", "on", "t1.singer_id", "=", "t2.singer_id", "where", "t2.sales", ">", "300000", ";"], "ru": ["select", "distinct", "t1.name", "from", "singer", "as", "t1", "join", "song", "as", "t2", "on", "t1.singer_id", "=", "t2.singer_id", "where", "t2.sales", ">", "300000", ";"]}, "query_toks_no_values": {"en": ["select", "distinct", "t1.name", "from", "singer", "as", "t1", "join", "song", "as", "t2", "on", "t1.singer_id", "=", "t2.singer_id", "where", "t2.sales", ">", "300000", ";"], "ru": ["select", "distinct", "t1.name", "from", "singer", "as", "t1", "join", "song", "as", "t2", "on", "t1.singer_id", "=", "t2.singer_id", "where", "t2.sales", ">", "300000", ";"]}, "masked_query": "SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000;", "question_pauq": {"ru": "\u041a\u0430\u043a\u0438\u0435 \u0438\u043c\u0435\u043d\u0430 \u0443 \u043f\u0435\u0432\u0446\u043e\u0432, \u0443 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043f\u0440\u043e\u0434\u0430\u0436\u0438 \u0431\u043e\u043b\u0435\u0435 300000?"}, "question": "what are the different names of the singers that have sales more than 300000?", "kb_id": "singer"}, {"id": "D_1023", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 8, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [], "groupBy": [[0, 2, false]], "having": [[false, 3, [0, [3, 0, false], null], 1.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 8, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [], "groupBy": [[0, 2, false]], "having": [[false, 3, [0, [3, 0, false], null], 1.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Show", "the", "names", "of", "singers", "that", "have", "more", "than", "one", "song", "."], "ru": ["\u041f\u043e\u043a\u0430\u0436\u0438\u0442\u0435", "\u0438\u043c\u0435\u043d\u0430", "\u043f\u0435\u0432\u0446\u043e\u0432", ",", "\u0443", "\u043a\u043e\u0442\u043e\u0440\u044b\u0445", "\u0435\u0441\u0442\u044c", "\u0431\u043e\u043b\u0435\u0435", "\u043e\u0434\u043d\u043e\u0439", "\u043f\u0435\u0441\u043d\u0438", "."]}, "query_toks": {"en": ["select", "t1.name", "from", "singer", "as", "t1", "join", "song", "as", "t2", "on", "t1.singer_id", "=", "t2.singer_id", "group", "by", "t1.name", "having", "count", "(", "*", ")", ">", "1", ";"], "ru": ["select", "t1.name", "from", "singer", "as", "t1", "join", "song", "as", "t2", "on", "t1.singer_id", "=", "t2.singer_id", "group", "by", "t1.name", "having", "count", "(", "*", ")", ">", "1", ";"]}, "query_toks_no_values": {"en": ["select", "t1.name", "from", "singer", "as", "t1", "join", "song", "as", "t2", "on", "t1.singer_id", "=", "t2.singer_id", "group", "by", "t1.name", "having", "count", "(", "*", ")", ">", "1", ";"], "ru": ["select", "t1.name", "from", "singer", "as", "t1", "join", "song", "as", "t2", "on", "t1.singer_id", "=", "t2.singer_id", "group", "by", "t1.name", "having", "count", "(", "*", ")", ">", "1", ";"]}, "masked_query": "SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1;", "question_pauq": {"ru": "\u041f\u043e\u043a\u0430\u0436\u0438\u0442\u0435 \u0438\u043c\u0435\u043d\u0430 \u043f\u0435\u0432\u0446\u043e\u0432, \u0443 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0435\u0441\u0442\u044c \u0431\u043e\u043b\u0435\u0435 \u043e\u0434\u043d\u043e\u0439 \u043f\u0435\u0441\u043d\u0438."}, "question": "Show the names of singers that have more than one song.", "kb_id": "singer"}, {"id": "D_1024", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 8, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [], "groupBy": [[0, 2, false]], "having": [[false, 3, [0, [3, 0, false], null], 1.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 8, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [], "groupBy": [[0, 2, false]], "having": [[false, 3, [0, [3, 0, false], null], 1.0, null]], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "the", "names", "of", "the", "singers", "that", "have", "more", "than", "one", "songs", "?"], "ru": ["\u041a\u0430\u043a", "\u0437\u043e\u0432\u0443\u0442", "\u043f\u0435\u0432\u0446\u043e\u0432", ",", "\u0443", "\u043a\u043e\u0442\u043e\u0440\u044b\u0445", "\u0435\u0441\u0442\u044c", "\u0431\u043e\u043b\u0435\u0435", "\u043e\u0434\u043d\u043e\u0439", "\u043f\u0435\u0441\u043d\u0438", "?"]}, "query_toks": {"en": ["select", "t1.name", "from", "singer", "as", "t1", "join", "song", "as", "t2", "on", "t1.singer_id", "=", "t2.singer_id", "group", "by", "t1.name", "having", "count", "(", "*", ")", ">", "1", ";"], "ru": ["select", "t1.name", "from", "singer", "as", "t1", "join", "song", "as", "t2", "on", "t1.singer_id", "=", "t2.singer_id", "group", "by", "t1.name", "having", "count", "(", "*", ")", ">", "1", ";"]}, "query_toks_no_values": {"en": ["select", "t1.name", "from", "singer", "as", "t1", "join", "song", "as", "t2", "on", "t1.singer_id", "=", "t2.singer_id", "group", "by", "t1.name", "having", "count", "(", "*", ")", ">", "1", ";"], "ru": ["select", "t1.name", "from", "singer", "as", "t1", "join", "song", "as", "t2", "on", "t1.singer_id", "=", "t2.singer_id", "group", "by", "t1.name", "having", "count", "(", "*", ")", ">", "1", ";"]}, "masked_query": "SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1;", "question_pauq": {"ru": "\u041a\u0430\u043a \u0437\u043e\u0432\u0443\u0442 \u043f\u0435\u0432\u0446\u043e\u0432, \u0443 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0435\u0441\u0442\u044c \u0431\u043e\u043b\u0435\u0435 \u043e\u0434\u043d\u043e\u0439 \u043f\u0435\u0441\u043d\u0438?"}, "question": "What are the names of the singers that have more than one songs?", "kb_id": "singer"}, {"id": "D_1025", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 8, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]], [4, [0, [0, 9, false], null]]]], "where": [], "groupBy": [[0, 2, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 8, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]], [4, [0, [0, 9, false], null]]]], "where": [], "groupBy": [[0, 2, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Show", "the", "names", "of", "singers", "and", "the", "total", "sales", "of", "their", "songs", "."], "ru": ["\u041f\u043e\u043a\u0430\u0436\u0438\u0442\u0435", "\u0438\u043c\u0435\u043d\u0430", "\u043f\u0435\u0432\u0446\u043e\u0432", "\u0438", "\u043e\u0431\u0449\u0438\u0439", "\u043e\u0431\u044a\u0435\u043c", "\u043f\u0440\u043e\u0434\u0430\u0436", "\u0438\u0445", "\u043f\u0435\u0441\u0435\u043d", "."]}, "query_toks": {"en": ["select", "t1.name", ",", "sum", "(", "t2.sales", ")", "from", "singer", "as", "t1", "join", "song", "as", "t2", "on", "t1.singer_id", "=", "t2.singer_id", "group", "by", "t1.name", ";"], "ru": ["select", "t1.name", ",", "sum", "(", "t2.sales", ")", "from", "singer", "as", "t1", "join", "song", "as", "t2", "on", "t1.singer_id", "=", "t2.singer_id", "group", "by", "t1.name", ";"]}, "query_toks_no_values": {"en": ["select", "t1.name", ",", "sum", "(", "t2.sales", ")", "from", "singer", "as", "t1", "join", "song", "as", "t2", "on", "t1.singer_id", "=", "t2.singer_id", "group", "by", "t1.name", ";"], "ru": ["select", "t1.name", ",", "sum", "(", "t2.sales", ")", "from", "singer", "as", "t1", "join", "song", "as", "t2", "on", "t1.singer_id", "=", "t2.singer_id", "group", "by", "t1.name", ";"]}, "masked_query": "SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name;", "question_pauq": {"ru": "\u041f\u043e\u043a\u0430\u0436\u0438\u0442\u0435 \u0438\u043c\u0435\u043d\u0430 \u043f\u0435\u0432\u0446\u043e\u0432 \u0438 \u043e\u0431\u0449\u0438\u0439 \u043e\u0431\u044a\u0435\u043c \u043f\u0440\u043e\u0434\u0430\u0436 \u0438\u0445 \u043f\u0435\u0441\u0435\u043d."}, "question": "Show the names of singers and the total sales of their songs.", "kb_id": "singer"}, {"id": "D_1026", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 8, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]], [4, [0, [0, 9, false], null]]]], "where": [], "groupBy": [[0, 2, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 8, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]], [4, [0, [0, 9, false], null]]]], "where": [], "groupBy": [[0, 2, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["For", "each", "singer", "name", ",", "what", "is", "the", "total", "sales", "for", "their", "songs", "?"], "ru": ["\u041a\u0430\u043a\u043e\u0432", "\u043e\u0431\u0449\u0438\u0439", "\u043e\u0431\u044a\u0435\u043c", "\u043f\u0440\u043e\u0434\u0430\u0436", "\u043f\u0435\u0441\u0435\u043d", "\u043a\u0430\u0436\u0434\u043e\u0433\u043e", "\u043f\u0435\u0432\u0446\u0430", "?"]}, "query_toks": {"en": ["select", "t1.name", ",", "sum", "(", "t2.sales", ")", "from", "singer", "as", "t1", "join", "song", "as", "t2", "on", "t1.singer_id", "=", "t2.singer_id", "group", "by", "t1.name", ";"], "ru": ["select", "t1.name", ",", "sum", "(", "t2.sales", ")", "from", "singer", "as", "t1", "join", "song", "as", "t2", "on", "t1.singer_id", "=", "t2.singer_id", "group", "by", "t1.name", ";"]}, "query_toks_no_values": {"en": ["select", "t1.name", ",", "sum", "(", "t2.sales", ")", "from", "singer", "as", "t1", "join", "song", "as", "t2", "on", "t1.singer_id", "=", "t2.singer_id", "group", "by", "t1.name", ";"], "ru": ["select", "t1.name", ",", "sum", "(", "t2.sales", ")", "from", "singer", "as", "t1", "join", "song", "as", "t2", "on", "t1.singer_id", "=", "t2.singer_id", "group", "by", "t1.name", ";"]}, "masked_query": "SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name;", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0432 \u043e\u0431\u0449\u0438\u0439 \u043e\u0431\u044a\u0435\u043c \u043f\u0440\u043e\u0434\u0430\u0436 \u043f\u0435\u0441\u0435\u043d \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043f\u0435\u0432\u0446\u0430?"}, "question": "For each singer name, what is the total sales for their songs?", "kb_id": "singer"}, {"id": "D_1027", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song);"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [[true, 8, [0, [0, 1, false], null], {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 8, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [[true, 8, [0, [0, 1, false], null], {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 8, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["List", "the", "name", "of", "singers", "that", "do", "not", "have", "any", "song", "."], "ru": ["\u041f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0438\u0442\u0435", "\u0438\u043c\u0435\u043d\u0430", "\u043f\u0435\u0432\u0446\u043e\u0432", ",", "\u0443", "\u043a\u043e\u0442\u043e\u0440\u044b\u0445", "\u043d\u0435\u0442", "\u043f\u0435\u0441\u0435\u043d", "."]}, "query_toks": {"en": ["select", "name", "from", "singer", "where", "singer_id", "not", "in", "(", "select", "singer_id", "from", "song", ")", ";"], "ru": ["select", "name", "from", "singer", "where", "singer_id", "not", "in", "(", "select", "singer_id", "from", "song", ")", ";"]}, "query_toks_no_values": {"en": ["select", "name", "from", "singer", "where", "singer_id", "not", "in", "(", "select", "singer_id", "from", "song", ")", ";"], "ru": ["select", "name", "from", "singer", "where", "singer_id", "not", "in", "(", "select", "singer_id", "from", "song", ")", ";"]}, "masked_query": "SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song);", "question_pauq": {"ru": "\u041f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0438\u0442\u0435 \u0438\u043c\u0435\u043d\u0430 \u043f\u0435\u0432\u0446\u043e\u0432, \u0443 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043d\u0435\u0442 \u043f\u0435\u0441\u0435\u043d."}, "question": "List the name of singers that do not have any song.", "kb_id": "singer"}, {"id": "D_1028", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song);"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [[true, 8, [0, [0, 1, false], null], {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 8, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [[true, 8, [0, [0, 1, false], null], {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 8, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "sname", "of", "every", "sing", "that", "does", "not", "have", "any", "song", "?"], "ru": ["\u041a\u0430\u043a", "\u0437\u043e\u0432\u0443\u0442", "\u0432\u0441\u0435\u0445", "\u043f\u0435\u0432\u0446\u043e\u0432", ",", "\u0443", "\u043a\u043e\u0442\u043e\u0440\u044b\u0445", "\u043d\u0435\u0442", "\u043f\u0435\u0441\u0435\u043d", "?"]}, "query_toks": {"en": ["select", "name", "from", "singer", "where", "singer_id", "not", "in", "(", "select", "singer_id", "from", "song", ")", ";"], "ru": ["select", "name", "from", "singer", "where", "singer_id", "not", "in", "(", "select", "singer_id", "from", "song", ")", ";"]}, "query_toks_no_values": {"en": ["select", "name", "from", "singer", "where", "singer_id", "not", "in", "(", "select", "singer_id", "from", "song", ")", ";"], "ru": ["select", "name", "from", "singer", "where", "singer_id", "not", "in", "(", "select", "singer_id", "from", "song", ")", ";"]}, "masked_query": "SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song);", "question_pauq": {"ru": "\u041a\u0430\u043a \u0437\u043e\u0432\u0443\u0442 \u0432\u0441\u0435\u0445 \u043f\u0435\u0432\u0446\u043e\u0432, \u0443 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043d\u0435\u0442 \u043f\u0435\u0441\u0435\u043d?"}, "question": "What is the sname of every sing that does not have any song?", "kb_id": "singer"}, {"id": "D_1029", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 5, false], null]]]], "where": [[false, 4, [0, [0, 3, false], null], 1945.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 5, false], null]]]], "where": [[false, 3, [0, [0, 3, false], null], 1955.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 5, false], null]]]], "where": [[false, 4, [0, [0, 3, false], null], 1945.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 5, false], null]]]], "where": [[false, 3, [0, [0, 3, false], null], 1955.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "union": null, "except": null}}, "question_toks": {"en": ["Show", "the", "citizenship", "shared", "by", "singers", "with", "birth", "year", "before", "1945", "and", "after", "1955", "."], "ru": ["\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c", "\u0433\u0440\u0430\u0436\u0434\u0430\u043d\u0441\u0442\u0432\u043e", "\u043f\u0435\u0432\u0446\u043e\u0432", "\u0441", "\u0433\u043e\u0434\u043e\u043c", "\u0440\u043e\u0436\u0434\u0435\u043d\u0438\u044f", "\u0434\u043e", "1945", "\u0433\u043e\u0434\u0430", "\u0438", "\u043f\u043e\u0441\u043b\u0435", "1955", "\u0433\u043e\u0434\u0430", "."]}, "query_toks": {"en": ["select", "citizenship", "from", "singer", "where", "birth_year", "<", "1945", "intersect", "select", "citizenship", "from", "singer", "where", "birth_year", ">", "1955", ";"], "ru": ["select", "citizenship", "from", "singer", "where", "birth_year", "<", "1945", "intersect", "select", "citizenship", "from", "singer", "where", "birth_year", ">", "1955", ";"]}, "query_toks_no_values": {"en": ["select", "citizenship", "from", "singer", "where", "birth_year", "<", "1945", "intersect", "select", "citizenship", "from", "singer", "where", "birth_year", ">", "1955", ";"], "ru": ["select", "citizenship", "from", "singer", "where", "birth_year", "<", "1945", "intersect", "select", "citizenship", "from", "singer", "where", "birth_year", ">", "1955", ";"]}, "masked_query": "SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955;", "question_pauq": {"ru": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0433\u0440\u0430\u0436\u0434\u0430\u043d\u0441\u0442\u0432\u043e \u043f\u0435\u0432\u0446\u043e\u0432 \u0441 \u0433\u043e\u0434\u043e\u043c \u0440\u043e\u0436\u0434\u0435\u043d\u0438\u044f \u0434\u043e 1945 \u0433\u043e\u0434\u0430 \u0438 \u043f\u043e\u0441\u043b\u0435 1955 \u0433\u043e\u0434\u0430."}, "question": "Show the citizenship shared by singers with birth year before 1945 and after 1955.", "kb_id": "singer"}, {"id": "D_1030", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 5, false], null]]]], "where": [[false, 4, [0, [0, 3, false], null], 1945.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 5, false], null]]]], "where": [[false, 3, [0, [0, 3, false], null], 1955.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 5, false], null]]]], "where": [[false, 4, [0, [0, 3, false], null], 1945.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 5, false], null]]]], "where": [[false, 3, [0, [0, 3, false], null], 1955.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "the", "citizenships", "that", "are", "shared", "by", "singers", "with", "a", "birth", "year", "before", "1945", "and", "after", "1955", "?"], "ru": ["\u041a\u0430\u043a\u043e\u0435", "\u0433\u0440\u0430\u0436\u0434\u0430\u043d\u0441\u0442\u0432\u043e", "\u0438\u043c\u0435\u044e\u0442", "\u043f\u0435\u0432\u0446\u044b", ",", "\u0440\u043e\u0434\u0438\u0432\u0448\u0438\u0435\u0441\u044f", "\u0434\u043e", "1945", "\u0433\u043e\u0434\u0430", "\u0438", "\u043f\u043e\u0441\u043b\u0435", "1955", "\u0433\u043e\u0434\u0430", "?"]}, "query_toks": {"en": ["select", "citizenship", "from", "singer", "where", "birth_year", "<", "1945", "intersect", "select", "citizenship", "from", "singer", "where", "birth_year", ">", "1955", ";"], "ru": ["select", "citizenship", "from", "singer", "where", "birth_year", "<", "1945", "intersect", "select", "citizenship", "from", "singer", "where", "birth_year", ">", "1955", ";"]}, "query_toks_no_values": {"en": ["select", "citizenship", "from", "singer", "where", "birth_year", "<", "1945", "intersect", "select", "citizenship", "from", "singer", "where", "birth_year", ">", "1955", ";"], "ru": ["select", "citizenship", "from", "singer", "where", "birth_year", "<", "1945", "intersect", "select", "citizenship", "from", "singer", "where", "birth_year", ">", "1955", ";"]}, "masked_query": "SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955;", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0435 \u0433\u0440\u0430\u0436\u0434\u0430\u043d\u0441\u0442\u0432\u043e \u0438\u043c\u0435\u044e\u0442 \u043f\u0435\u0432\u0446\u044b, \u0440\u043e\u0434\u0438\u0432\u0448\u0438\u0435\u0441\u044f \u0434\u043e 1945 \u0433\u043e\u0434\u0430 \u0438 \u043f\u043e\u0441\u043b\u0435 1955 \u0433\u043e\u0434\u0430?"}, "question": "What are the citizenships that are shared by singers with a birth year before 1945 and after 1955?", "kb_id": "singer"}, {"id": "D_1031", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT count(*) FROM Other_Available_Features;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["How", "many", "available", "features", "are", "there", "in", "total", "?"], "ru": ["\u0421\u043a\u043e\u043b\u044c\u043a\u043e", "\u0432\u0441\u0435\u0433\u043e", "\u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0445", "\u0444\u0443\u043d\u043a\u0446\u0438\u0439", "?"]}, "query_toks": {"en": ["select", "count", "(", "*", ")", "from", "other_available_features", ";"], "ru": ["select", "count", "(", "*", ")", "from", "other_available_features", ";"]}, "query_toks_no_values": {"en": ["select", "count", "(", "*", ")", "from", "other_available_features", ";"], "ru": ["select", "count", "(", "*", ")", "from", "other_available_features", ";"]}, "masked_query": "SELECT count(*) FROM Other_Available_Features;", "question_pauq": {"ru": "\u0421\u043a\u043e\u043b\u044c\u043a\u043e \u0432\u0441\u0435\u0433\u043e \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0445 \u0444\u0443\u043d\u043a\u0446\u0438\u0439?"}, "question": "How many available features are there in total?", "kb_id": "real_estate_properties"}, {"id": "D_1032", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T2.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code  =  T2.feature_type_code WHERE T1.feature_name  =  \"AirCon\";"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 6, false], null], [0, 1, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [[false, 2, [0, [0, 7, false], null], "\"AirCon\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 6, false], null], [0, 1, false], null]]}, "select": [false, [[0, [0, [0, 2, false], null]]]], "where": [[false, 2, [0, [0, 7, false], null], "\"AirCon\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "feature", "type", "name", "of", "feature", "AirCon", "?"], "ru": ["\u041a\u0430\u043a", "\u043d\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f", "\u0444\u0443\u043d\u043a\u0446\u0438\u044f", "AirCon", "?"]}, "query_toks": {"en": ["select", "t2.feature_type_name", "from", "other_available_features", "as", "t1", "join", "ref_feature_types", "as", "t2", "on", "t1.feature_type_code", "=", "t2.feature_type_code", "where", "t1.feature_name", "=", "\"AirCon\"", ";"], "ru": ["select", "t2.feature_type_name", "from", "other_available_features", "as", "t1", "join", "ref_feature_types", "as", "t2", "on", "t1.feature_type_code", "=", "t2.feature_type_code", "where", "t1.feature_name", "=", "\"AirCon\"", ";"]}, "query_toks_no_values": {"en": ["select", "t2.feature_type_name", "from", "other_available_features", "as", "t1", "join", "ref_feature_types", "as", "t2", "on", "t1.feature_type_code", "=", "t2.feature_type_code", "where", "t1.feature_name", "=", "value", ";"], "ru": ["select", "t2.feature_type_name", "from", "other_available_features", "as", "t1", "join", "ref_feature_types", "as", "t2", "on", "t1.feature_type_code", "=", "t2.feature_type_code", "where", "t1.feature_name", "=", "value", ";"]}, "masked_query": "SELECT T2.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code  =  T2.feature_type_code WHERE T1.feature_name  =  \"AirCon\";", "question_pauq": {"ru": "\u041a\u0430\u043a \u043d\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u044f AirCon?"}, "question": "What is the feature type name of feature AirCon?", "kb_id": "real_estate_properties"}, {"id": "D_1033", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT T2.property_type_description FROM Properties AS T1 JOIN Ref_Property_Types AS T2 ON T1.property_type_code  =  T2.property_type_code GROUP BY T1.property_type_code;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 3], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 10, false], null], [0, 3, false], null]]}, "select": [false, [[0, [0, [0, 4, false], null]]]], "where": [], "groupBy": [[0, 10, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 3], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 10, false], null], [0, 3, false], null]]}, "select": [false, [[0, [0, [0, 4, false], null]]]], "where": [], "groupBy": [[0, 10, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Show", "the", "property", "type", "descriptions", "of", "properties", "belonging", "to", "that", "code", "."], "ru": ["\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c", "\u043e\u043f\u0438\u0441\u0430\u043d\u0438\u044f", "\u0442\u0438\u043f\u043e\u0432", "\u0441\u0432\u043e\u0439\u0441\u0442\u0432", "\u0434\u043b\u044f", "\u0441\u0432\u043e\u0439\u0441\u0442\u0432", ",", "\u043f\u0440\u0438\u043d\u0430\u0434\u043b\u0435\u0436\u0430\u0449\u0438\u0445", "\u044d\u0442\u043e\u043c\u0443", "\u043a\u043e\u0434\u0443", "."]}, "query_toks": {"en": ["select", "t2.property_type_description", "from", "properties", "as", "t1", "join", "ref_property_types", "as", "t2", "on", "t1.property_type_code", "=", "t2.property_type_code", "group", "by", "t1.property_type_code", ";"], "ru": ["select", "t2.property_type_description", "from", "properties", "as", "t1", "join", "ref_property_types", "as", "t2", "on", "t1.property_type_code", "=", "t2.property_type_code", "group", "by", "t1.property_type_code", ";"]}, "query_toks_no_values": {"en": ["select", "t2.property_type_description", "from", "properties", "as", "t1", "join", "ref_property_types", "as", "t2", "on", "t1.property_type_code", "=", "t2.property_type_code", "group", "by", "t1.property_type_code", ";"], "ru": ["select", "t2.property_type_description", "from", "properties", "as", "t1", "join", "ref_property_types", "as", "t2", "on", "t1.property_type_code", "=", "t2.property_type_code", "group", "by", "t1.property_type_code", ";"]}, "masked_query": "SELECT T2.property_type_description FROM Properties AS T1 JOIN Ref_Property_Types AS T2 ON T1.property_type_code  =  T2.property_type_code GROUP BY T1.property_type_code;", "question_pauq": {"ru": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u0442\u0438\u043f\u043e\u0432 \u0441\u0432\u043e\u0439\u0441\u0442\u0432 \u0434\u043b\u044f \u0441\u0432\u043e\u0439\u0441\u0442\u0432, \u043f\u0440\u0438\u043d\u0430\u0434\u043b\u0435\u0436\u0430\u0449\u0438\u0445 \u044d\u0442\u043e\u043c\u0443 \u043a\u043e\u0434\u0443."}, "question": "Show the property type descriptions of properties belonging to that code.", "kb_id": "real_estate_properties"}, {"id": "D_1034", "source": "spider-dev", "type": "dev", "query": {"ru": "SELECT property_name FROM Properties WHERE property_type_code  =  \"\u0413\u0430\u0440\u0430\u0436\" UNION SELECT property_name FROM Properties WHERE property_type_code  =  \"\u041f\u0430\u0431\" AND room_count  >  1;"}, "sql": {"en": {"from": {"table_units": [["table_unit", 3]], "conds": []}, "select": [false, [[0, [0, [0, 13, false], null]]]], "where": [[false, 2, [0, [0, 10, false], null], "\"House\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": {"from": {"table_units": [["table_unit", 3]], "conds": []}, "select": [false, [[0, [0, [0, 13, false], null]]]], "where": [[false, 2, [0, [0, 10, false], null], "\"Apartment\"", null], "and", [false, 3, [0, [0, 15, false], null], 1.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "except": null}, "ru": {"from": {"table_units": [["table_unit", 3]], "conds": []}, "select": [false, [[0, [0, [0, 13, false], null]]]], "where": [[false, 2, [0, [0, 10, false], null], "\"\u0413\u0430\u0440\u0430\u0436\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": {"from": {"table_units": [["table_unit", 3]], "conds": []}, "select": [false, [[0, [0, [0, 13, false], null]]]], "where": [[false, 2, [0, [0, 10, false], null], "\"\u041f\u0430\u0431\"", null], "and", [false, 3, [0, [0, 15, false], null], 1.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "except": null}}, "question_toks": {"en": ["What", "are", "the", "names", "of", "properties", "that", "are", "either", "houses", "or", "apartments", "with", "more", "than", "1", "room", "?"], "ru": ["\u041a\u0430\u043a", "\u043d\u0430\u0437\u044b\u0432\u0430\u044e\u0442\u0441\u044f", "\u0433\u0430\u0440\u0430\u0436\u0438", "\u0438\u043b\u0438", "\u043f\u0430\u0431\u044b", "\u0441", "\u0431\u043e\u043b\u0435\u0435", "\u0447\u0435\u043c", "\u043e\u0434\u043d\u043e\u0439", "\u043a\u043e\u043c\u043d\u0430\u0442\u043e\u0439", "?"]}, "query_toks": {"en": ["select", "property_name", "from", "properties", "where", "property_type_code", "=", "\"House\"", "union", "select", "property_name", "from", "properties", "where", "property_type_code", "=", "\"Apartment\"", "and", "room_count", ">", "1", ";"], "ru": ["select", "property_name", "from", "properties", "where", "property_type_code", "=", "\"\u0413\u0430\u0440\u0430\u0436\"", "union", "select", "property_name", "from", "properties", "where", "property_type_code", "=", "\"\u041f\u0430\u0431\"", "and", "room_count", ">", "1", ";"]}, "query_toks_no_values": {"en": ["select", "property_name", "from", "properties", "where", "property_type_code", "=", "value", "union", "select", "property_name", "from", "properties", "where", "property_type_code", "=", "value", "and", "room_count", ">", "1", ";"], "ru": ["select", "property_name", "from", "properties", "where", "property_type_code", "=", "value", "union", "select", "property_name", "from", "properties", "where", "property_type_code", "=", "value", "and", "room_count", ">", "1", ";"]}, "masked_query": "SELECT property_name FROM Properties WHERE property_type_code  =  \"House\" UNION SELECT property_name FROM Properties WHERE property_type_code  =  \"Apartment\" AND room_count  >  1;", "question_pauq": {"ru": "\u041a\u0430\u043a \u043d\u0430\u0437\u044b\u0432\u0430\u044e\u0442\u0441\u044f \u0433\u0430\u0440\u0430\u0436\u0438 \u0438\u043b\u0438 \u043f\u0430\u0431\u044b \u0441 \u0431\u043e\u043b\u0435\u0435 \u0447\u0435\u043c \u043e\u0434\u043d\u043e\u0439 \u043a\u043e\u043c\u043d\u0430\u0442\u043e\u0439?"}, "question": "What are the names of properties that are either houses or apartments with more than 1 room?", "kb_id": "real_estate_properties"}, {"id": "B_0008", "source": "addition", "type": "dev", "query": {"ru": "SELECT COUNT(*) FROM TV_Channel WHERE Pay_per_view_PPV = '\u043d\u0435\u0442'"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 8, false], null], "\"no\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 8, false], null], "\"\u043d\u0435\u0442\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Amount", "of", "TV", "channels", "without", "paying", "per", "view"], "ru": ["\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e", "\u0442\u0435\u043b\u0435\u043a\u0430\u043d\u0430\u043b\u043e\u0432", "\u0431\u0435\u0437", "\u043e\u043f\u043b\u0430\u0442\u044b", "\u043f\u043e", "\u0447\u0438\u0441\u043b\u0443", "\u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440\u043e\u0432"]}, "query_toks": {"en": ["select", "count", "(", "*", ")", "from", "tv_channel", "where", "pay_per_view_ppv", "=", "\"no\""], "ru": ["select", "count", "(", "*", ")", "from", "tv_channel", "where", "pay_per_view_ppv", "=", "\"\u043d\u0435\u0442\""]}, "query_toks_no_values": {"en": ["select", "count", "(", "*", ")", "from", "tv_channel", "where", "pay_per_view_ppv", "=", "value"], "ru": ["select", "count", "(", "*", ")", "from", "tv_channel", "where", "pay_per_view_ppv", "=", "value"]}, "masked_query": "SELECT COUNT(*) FROM TV_Channel WHERE Pay_per_view_PPV = 'no'", "question_pauq": {"ru": "\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0442\u0435\u043b\u0435\u043a\u0430\u043d\u0430\u043b\u043e\u0432 \u0431\u0435\u0437 \u043e\u043f\u043b\u0430\u0442\u044b \u043f\u043e \u0447\u0438\u0441\u043b\u0443 \u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440\u043e\u0432"}, "question": "Amount of TV channels without paying per view", "kb_id": "tvshow"}, {"id": "B_0018", "source": "addition", "type": "dev", "query": {"ru": "SELECT AVG(Percentage) FROM countrylanguage WHERE IsOfficial = 'T'"}, "sql": {"en": {"from": {"table_units": [["table_unit", 3]], "conds": []}, "select": [false, [[5, [0, [0, 26, false], null]]]], "where": [[false, 2, [0, [0, 25, false], null], "\"T\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 3]], "conds": []}, "select": [false, [[5, [0, [0, 26, false], null]]]], "where": [[false, 2, [0, [0, 25, false], null], "\"T\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "average", "percentage", "of", "people", "in", "countries", "speaking", "offical", "language", "?"], "ru": ["\u041a\u0430\u043a\u043e\u0432", "\u0434\u043b\u044f", "\u0432\u0441\u0435\u0445", "\u0441\u0442\u0440\u0430\u043d", "\u0441\u0440\u0435\u0434\u043d\u0438\u0439", "\u043f\u0440\u043e\u0446\u0435\u043d\u0442", "\u043b\u044e\u0434\u0435\u0439", ",", "\u0433\u043e\u0432\u043e\u0440\u044f\u0449\u0438\u0445", "\u043d\u0430", "\u043e\u0444\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u043c", "\u044f\u0437\u044b\u043a\u0435", "?"]}, "query_toks": {"en": ["select", "avg", "(", "percentage", ")", "from", "countrylanguage", "where", "isofficial", "=", "\"T\""], "ru": ["select", "avg", "(", "percentage", ")", "from", "countrylanguage", "where", "isofficial", "=", "\"T\""]}, "query_toks_no_values": {"en": ["select", "avg", "(", "percentage", ")", "from", "countrylanguage", "where", "isofficial", "=", "value"], "ru": ["select", "avg", "(", "percentage", ")", "from", "countrylanguage", "where", "isofficial", "=", "value"]}, "masked_query": "SELECT AVG(Percentage) FROM countrylanguage WHERE IsOfficial = 'T'", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0432 \u0434\u043b\u044f \u0432\u0441\u0435\u0445 \u0441\u0442\u0440\u0430\u043d \u0441\u0440\u0435\u0434\u043d\u0438\u0439 \u043f\u0440\u043e\u0446\u0435\u043d\u0442 \u043b\u044e\u0434\u0435\u0439, \u0433\u043e\u0432\u043e\u0440\u044f\u0449\u0438\u0445 \u043d\u0430 \u043e\u0444\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u043c \u044f\u0437\u044b\u043a\u0435?"}, "question": "What is the average percentage of people in countries speaking offical language?", "kb_id": "world_1"}, {"id": "B_0019", "source": "addition", "type": "dev", "query": {"ru": "SELECT Percentage FROM countrylanguage WHERE IsOfficial = 'T' AND CountryCode = 'KAZ'"}, "sql": {"en": {"from": {"table_units": [["table_unit", 3]], "conds": []}, "select": [false, [[0, [0, [0, 26, false], null]]]], "where": [[false, 2, [0, [0, 25, false], null], "\"T\"", null], "and", [false, 2, [0, [0, 23, false], null], "\"KAZ\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 3]], "conds": []}, "select": [false, [[0, [0, [0, 26, false], null]]]], "where": [[false, 2, [0, [0, 25, false], null], "\"T\"", null], "and", [false, 2, [0, [0, 23, false], null], "\"KAZ\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "percentage", "of", "people", "speaking", "offical", "language", "in", "KAZ", "?"], "ru": ["\u041a\u0430\u043a\u043e\u0432", "\u043f\u0440\u043e\u0446\u0435\u043d\u0442", "\u043b\u044e\u0434\u0435\u0439", ",", "\u0433\u043e\u0432\u043e\u0440\u044f\u0449\u0438\u0445", "\u043d\u0430", "\u043e\u0444\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u043c", "\u044f\u0437\u044b\u043a\u0435", "\u0432", "KAZ", "?"]}, "query_toks": {"en": ["select", "percentage", "from", "countrylanguage", "where", "isofficial", "=", "\"T\"", "and", "countrycode", "=", "\"KAZ\""], "ru": ["select", "percentage", "from", "countrylanguage", "where", "isofficial", "=", "\"T\"", "and", "countrycode", "=", "\"KAZ\""]}, "query_toks_no_values": {"en": ["select", "percentage", "from", "countrylanguage", "where", "isofficial", "=", "value", "and", "countrycode", "=", "value"], "ru": ["select", "percentage", "from", "countrylanguage", "where", "isofficial", "=", "value", "and", "countrycode", "=", "value"]}, "masked_query": "SELECT Percentage FROM countrylanguage WHERE IsOfficial = 'T' AND CountryCode = 'KAZ'", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0432 \u043f\u0440\u043e\u0446\u0435\u043d\u0442 \u043b\u044e\u0434\u0435\u0439, \u0433\u043e\u0432\u043e\u0440\u044f\u0449\u0438\u0445 \u043d\u0430 \u043e\u0444\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u043c \u044f\u0437\u044b\u043a\u0435 \u0432 KAZ?"}, "question": "What is the percentage of people speaking offical language in KAZ?", "kb_id": "world_1"}, {"id": "B_0020", "source": "addition", "type": "dev", "query": {"ru": "SELECT DISTINCT(CountryCode) FROM countrylanguage WHERE IsOfficial = 'F' AND Percentage > 10"}, "sql": {"en": {"from": {"table_units": [["table_unit", 3]], "conds": []}, "select": [true, [[0, [0, [0, 23, false], null]]]], "where": [[false, 2, [0, [0, 25, false], null], "\"F\"", null], "and", [false, 3, [0, [0, 26, false], null], 10.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 3]], "conds": []}, "select": [true, [[0, [0, [0, 23, false], null]]]], "where": [[false, 2, [0, [0, 25, false], null], "\"F\"", null], "and", [false, 3, [0, [0, 26, false], null], 10.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Print", "me", "different", "codes", "of", "countries", "in", "which", "there", "are", "more", "then", "10", "percent", "of", "people", "speaking", "not", "official", "languages"], "ru": ["\u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435", "\u043c\u043d\u0435", "\u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0435", "\u043a\u043e\u0434\u044b", "\u0441\u0442\u0440\u0430\u043d", ",", "\u0432", "\u043a\u043e\u0442\u043e\u0440\u044b\u0445", "\u0431\u043e\u043b\u0435\u0435", "10", "\u043f\u0440\u043e\u0446\u0435\u043d\u0442\u043e\u0432", "\u043b\u044e\u0434\u0435\u0439", "\u043d\u0435", "\u0433\u043e\u0432\u043e\u0440\u044f\u0442", "\u043d\u0430", "\u0433\u043e\u0441\u0443\u0434\u0430\u0440\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u043c", "\u044f\u0437\u044b\u043a\u0435", "."]}, "query_toks": {"en": ["select", "distinct", "(", "countrycode", ")", "from", "countrylanguage", "where", "isofficial", "=", "\"F\"", "and", "percentage", ">", "10"], "ru": ["select", "distinct", "(", "countrycode", ")", "from", "countrylanguage", "where", "isofficial", "=", "\"F\"", "and", "percentage", ">", "10"]}, "query_toks_no_values": {"en": ["select", "distinct", "(", "countrycode", ")", "from", "countrylanguage", "where", "isofficial", "=", "value", "and", "percentage", ">", "10"], "ru": ["select", "distinct", "(", "countrycode", ")", "from", "countrylanguage", "where", "isofficial", "=", "value", "and", "percentage", ">", "10"]}, "masked_query": "SELECT DISTINCT(CountryCode) FROM countrylanguage WHERE IsOfficial = 'F' AND Percentage > 10", "question_pauq": {"ru": "\u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u043c\u043d\u0435 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0435 \u043a\u043e\u0434\u044b \u0441\u0442\u0440\u0430\u043d, \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0431\u043e\u043b\u0435\u0435 10 \u043f\u0440\u043e\u0446\u0435\u043d\u0442\u043e\u0432 \u043b\u044e\u0434\u0435\u0439 \u043d\u0435 \u0433\u043e\u0432\u043e\u0440\u044f\u0442 \u043d\u0430 \u0433\u043e\u0441\u0443\u0434\u0430\u0440\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u043c \u044f\u0437\u044b\u043a\u0435."}, "question": "Print me different codes of countries in which there are more then 10 percent of people speaking not official languages", "kb_id": "world_1"}, {"id": "B_0021", "source": "addition", "type": "dev", "query": {"ru": "SELECT DISTINCT(Shop_ID) FROM hiring WHERE Is_full_time = 'F'"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [true, [[0, [0, [0, 11, false], null]]]], "where": [[false, 2, [0, [0, 14, false], null], "\"F\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [true, [[0, [0, [0, 11, false], null]]]], "where": [[false, 2, [0, [0, 14, false], null], "\"F\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Show", "ids", "of", "all", "shops", "with", "part", "time", "vacancies"], "ru": ["\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c", "id", "\u0432\u0441\u0435\u0445", "\u043c\u0430\u0433\u0430\u0437\u0438\u043d\u043e\u0432", "\u0441", "\u0432\u0430\u043a\u0430\u043d\u0441\u0438\u044f\u043c\u0438", "\u0441", "\u0447\u0430\u0441\u0442\u0438\u0447\u043d\u043e\u0439", "\u0437\u0430\u043d\u044f\u0442\u043e\u0441\u0442\u044c\u044e"]}, "query_toks": {"en": ["select", "distinct", "(", "shop_id", ")", "from", "hiring", "where", "is_full_time", "=", "\"F\""], "ru": ["select", "distinct", "(", "shop_id", ")", "from", "hiring", "where", "is_full_time", "=", "\"F\""]}, "query_toks_no_values": {"en": ["select", "distinct", "(", "shop_id", ")", "from", "hiring", "where", "is_full_time", "=", "value"], "ru": ["select", "distinct", "(", "shop_id", ")", "from", "hiring", "where", "is_full_time", "=", "value"]}, "masked_query": "SELECT DISTINCT(Shop_ID) FROM hiring WHERE Is_full_time = 'F'", "question_pauq": {"ru": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c id \u0432\u0441\u0435\u0445 \u043c\u0430\u0433\u0430\u0437\u0438\u043d\u043e\u0432 \u0441 \u0432\u0430\u043a\u0430\u043d\u0441\u0438\u044f\u043c\u0438 \u0441 \u0447\u0430\u0441\u0442\u0438\u0447\u043d\u043e\u0439 \u0437\u0430\u043d\u044f\u0442\u043e\u0441\u0442\u044c\u044e"}, "question": "Show ids of all shops with part time vacancies", "kb_id": "employee_hire_evaluation"}, {"id": "B_0025", "source": "addition", "type": "dev", "query": {"ru": "SELECT MIN(Attendance) FROM show WHERE Result = 'T'"}, "sql": {"en": {"from": {"table_units": [["table_unit", 3]], "conds": []}, "select": [false, [[2, [0, [0, 23, false], null]]]], "where": [[false, 2, [0, [0, 22, false], null], "\"T\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 3]], "conds": []}, "select": [false, [[2, [0, [0, 23, false], null]]]], "where": [[false, 2, [0, [0, 22, false], null], "\"T\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Minimum", "attendance", "of", "shows", "with", "results"], "ru": ["\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c", "\u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u044b", "\u0432\u0441\u0435\u0445", "\u0434\u0435\u0431\u0430\u0442\u043e\u0432", "\u0441", "\u043f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u043c", "\u0432\u044b\u0438\u0433\u0440\u044b\u0448\u0435\u043c"]}, "query_toks": {"en": ["select", "min", "(", "attendance", ")", "from", "show", "where", "result", "=", "\"T\""], "ru": ["select", "min", "(", "attendance", ")", "from", "show", "where", "result", "=", "\"T\""]}, "query_toks_no_values": {"en": ["select", "min", "(", "attendance", ")", "from", "show", "where", "result", "=", "value"], "ru": ["select", "min", "(", "attendance", ")", "from", "show", "where", "result", "=", "value"]}, "masked_query": "SELECT MIN(Attendance) FROM show WHERE Result = 'T'", "question_pauq": {"ru": "\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u044c \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u044b \u0432\u0441\u0435\u0445 \u0434\u0435\u0431\u0430\u0442\u043e\u0432 \u0441 \u043f\u043e\u043b\u043e\u0436\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u043c \u0432\u044b\u0438\u0433\u0440\u044b\u0448\u0435\u043c"}, "question": "Minimum attendance of shows with results", "kb_id": "orchestra"}, {"id": "B_0046", "source": "addition", "type": "dev", "query": {"ru": "SELECT name FROM Dogs WHERE Gender = '1'"}, "sql": {"en": {"from": {"table_units": [["table_unit", 5]], "conds": []}, "select": [false, [[0, [0, [0, 25, false], null]]]], "where": [[false, 2, [0, [0, 28, false], null], "\"1\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 5]], "conds": []}, "select": [false, [[0, [0, [0, 25, false], null]]]], "where": [[false, 2, [0, [0, 28, false], null], "\"1\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Please", ",", "list", "all", "female", "dog", "names", "in", "kennels", "?"], "ru": ["\u041f\u043e\u0436\u0430\u043b\u0443\u0439\u0441\u0442\u0430", ",", "\u043f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0438", "\u043a\u043b\u0438\u0447\u043a\u0438", "\u0432\u0441\u0435\u0445", "\u0441\u043e\u0431\u0430\u043a", ",", "\u044f\u0432\u043b\u044f\u044e\u0449\u0438\u0445\u0441\u044f", "\u0441\u0430\u043c\u043a\u0430\u043c\u0438", "."]}, "query_toks": {"en": ["select", "name", "from", "dogs", "where", "gender", "=", "\"1\""], "ru": ["select", "name", "from", "dogs", "where", "gender", "=", "\"1\""]}, "query_toks_no_values": {"en": ["select", "name", "from", "dogs", "where", "gender", "=", "value"], "ru": ["select", "name", "from", "dogs", "where", "gender", "=", "value"]}, "masked_query": "SELECT name FROM Dogs WHERE Gender = '1'", "question_pauq": {"ru": "\u041f\u043e\u0436\u0430\u043b\u0443\u0439\u0441\u0442\u0430, \u043f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0438 \u043a\u043b\u0438\u0447\u043a\u0438 \u0432\u0441\u0435\u0445 \u0441\u043e\u0431\u0430\u043a, \u044f\u0432\u043b\u044f\u044e\u0449\u0438\u0445\u0441\u044f \u0441\u0430\u043c\u043a\u0430\u043c\u0438."}, "question": "Please, list all female dog names in kennels?", "kb_id": "dog_kennels"}, {"id": "B_0047", "source": "addition", "type": "dev", "query": {"ru": "SELECT count( * ) FROM singer WHERE singer.Is_male = 'F'"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 14, false], null], 0.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 14, false], null], "\"F\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Amount", "of", "female", "singers"], "ru": ["\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e", "\u043f\u0435\u0432\u0438\u0446"]}, "query_toks": {"en": ["select", "count", "(", "*", ")", "from", "singer", "where", "singer.is_male", "=", "0"], "ru": ["select", "count", "(", "*", ")", "from", "singer", "where", "singer.is_male", "=", "\"F\""]}, "query_toks_no_values": {"en": ["select", "count", "(", "*", ")", "from", "singer", "where", "singer.is_male", "=", "0"], "ru": ["select", "count", "(", "*", ")", "from", "singer", "where", "singer.is_male", "=", "value"]}, "masked_query": "SELECT count( * ) FROM singer WHERE singer.Is_male = 0", "question_pauq": {"ru": "\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u0435\u0432\u0438\u0446"}, "question": "Amount of female singers", "kb_id": "concert_singer"}, {"id": "T_0004", "source": "addition", "type": "dev", "query": {"ru": "SELECT DISTINCT(latin_commander) FROM battle WHERE  Date LIKE '%\u0410\u043f\u0440\u0435\u043b%' AND Date LIKE '%1205%'"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [true, [[0, [0, [0, 5, false], null]]]], "where": [[false, 9, [0, [0, 3, false], null], "\"%April%\"", null], "and", [false, 9, [0, [0, 3, false], null], "\"%1205%\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [true, [[0, [0, [0, 5, false], null]]]], "where": [[false, 9, [0, [0, 3, false], null], "\"%\u0410\u043f\u0440\u0435\u043b%\"", null], "and", [false, 9, [0, [0, 3, false], null], "\"%1205%\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Which", "of", "the", "Latin", "commanders", "participated", "in", "the", "battles", "in", "April", "1205", "?"], "ru": ["\u041a\u0442\u043e", "\u0438\u0437", "\u043b\u0430\u0442\u0438\u043d\u0441\u043a\u0438\u0445", "\u0433\u043b\u0430\u0432\u043d\u043e\u043a\u043e\u043c\u0430\u043d\u0434\u0443\u044e\u0449\u0438\u0445", "\u0443\u0447\u0430\u0441\u0442\u0432\u043e\u0432\u0430\u043b", "\u0432", "\u0441\u0440\u0430\u0436\u0435\u043d\u0438\u044f", "\u0432", "\u0430\u043f\u0440\u0435\u043b\u0435", "1205", "\u0433\u043e\u0434\u0430", "?"]}, "query_toks": {"en": ["select", "distinct", "(", "latin_commander", ")", "from", "battle", "where", "date", "like", "\"%April%\"", "and", "date", "like", "\"%1205%\""], "ru": ["select", "distinct", "(", "latin_commander", ")", "from", "battle", "where", "date", "like", "\"%\u0410\u043f\u0440\u0435\u043b%\"", "and", "date", "like", "\"%1205%\""]}, "query_toks_no_values": {"en": ["select", "distinct", "(", "latin_commander", ")", "from", "battle", "where", "date", "like", "value", "and", "date", "like", "value"], "ru": ["select", "distinct", "(", "latin_commander", ")", "from", "battle", "where", "date", "like", "value", "and", "date", "like", "value"]}, "masked_query": "SELECT DISTINCT(latin_commander) FROM battle WHERE  Date LIKE '%April%' AND Date LIKE '%1205%'", "question_pauq": {"ru": "\u041a\u0442\u043e \u0438\u0437 \u043b\u0430\u0442\u0438\u043d\u0441\u043a\u0438\u0445 \u0433\u043b\u0430\u0432\u043d\u043e\u043a\u043e\u043c\u0430\u043d\u0434\u0443\u044e\u0449\u0438\u0445 \u0443\u0447\u0430\u0441\u0442\u0432\u043e\u0432\u0430\u043b \u0432 \u0441\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u0432 \u0430\u043f\u0440\u0435\u043b\u0435 1205 \u0433\u043e\u0434\u0430?"}, "question": "Which of the Latin commanders participated in the battles in April 1205?", "kb_id": "battle_death"}, {"id": "T_0005", "source": "addition", "type": "dev", "query": {"ru": "SELECT COUNT(DISTINCT id) FROM battle WHERE Date LIKE '%1205%' OR Date LIKE '%1206%' OR Date LIKE '%1207%'"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[3, [0, [0, 1, true], null]]]], "where": [[false, 9, [0, [0, 3, false], null], "\"%1205%\"", null], "or", [false, 9, [0, [0, 3, false], null], "\"%1206%\"", null], "or", [false, 9, [0, [0, 3, false], null], "\"%1207%\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[3, [0, [0, 1, true], null]]]], "where": [[false, 9, [0, [0, 3, false], null], "\"%1205%\"", null], "or", [false, 9, [0, [0, 3, false], null], "\"%1206%\"", null], "or", [false, 9, [0, [0, 3, false], null], "\"%1207%\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["How", "many", "battles", "were", "fought", "between", "1205", "and", "1207", "inclusive", "?"], "ru": ["\u041a\u0430\u043a", "\u043c\u043d\u043e\u0433\u043e", "\u0441\u0440\u0430\u0436\u0435\u043d\u0438\u0439", "\u0441\u043e\u0441\u0442\u043e\u044f\u043b\u043e\u0441\u044c", "\u0432", "\u043f\u0435\u0440\u0438\u043e\u0434", "\u0441", "1205", "\u043f\u043e", "1207", "\u0433\u043e\u0434\u044b", "\u0432\u043a\u043b\u044e\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u043e", "?"]}, "query_toks": {"en": ["select", "count", "(", "distinct", "id", ")", "from", "battle", "where", "date", "like", "\"%1205%\"", "or", "date", "like", "\"%1206%\"", "or", "date", "like", "\"%1207%\""], "ru": ["select", "count", "(", "distinct", "id", ")", "from", "battle", "where", "date", "like", "\"%1205%\"", "or", "date", "like", "\"%1206%\"", "or", "date", "like", "\"%1207%\""]}, "query_toks_no_values": {"en": ["select", "count", "(", "distinct", "id", ")", "from", "battle", "where", "date", "like", "value", "or", "date", "like", "value", "or", "date", "like", "value"], "ru": ["select", "count", "(", "distinct", "id", ")", "from", "battle", "where", "date", "like", "value", "or", "date", "like", "value", "or", "date", "like", "value"]}, "masked_query": "SELECT COUNT(DISTINCT id) FROM battle WHERE Date LIKE '%1205%' OR Date LIKE '%1206%' OR Date LIKE '%1207%'", "question_pauq": {"ru": "\u041a\u0430\u043a \u043c\u043d\u043e\u0433\u043e \u0441\u0440\u0430\u0436\u0435\u043d\u0438\u0439 \u0441\u043e\u0441\u0442\u043e\u044f\u043b\u043e\u0441\u044c \u0432 \u043f\u0435\u0440\u0438\u043e\u0434 \u0441 1205 \u043f\u043e 1207 \u0433\u043e\u0434\u044b \u0432\u043a\u043b\u044e\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u043e?"}, "question": "How many battles were fought between 1205 and 1207 inclusive?", "kb_id": "battle_death"}, {"id": "T_0014", "source": "addition", "type": "dev", "query": {"ru": "SELECT count(DISTINCT Course_ID) FROM Course WHERE Staring_Date LIKE  '%\u041c\u0430\u044f%'"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[3, [0, [0, 1, true], null]]]], "where": [[false, 9, [0, [0, 2, false], null], "\"%May%\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[3, [0, [0, 1, true], null]]]], "where": [[false, 9, [0, [0, 2, false], null], "\"%\u041c\u0430\u044f%\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Amount", "of", "courses", "started", "in", "May"], "ru": ["\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e", "\u043a\u0443\u0440\u0441\u043e\u0432", ",", "\u043d\u0430\u0447\u0430\u0432\u0448\u0438\u0445\u0441\u044f", "\u0432", "\u043c\u0430\u0435"]}, "query_toks": {"en": ["select", "count", "(", "distinct", "course_id", ")", "from", "course", "where", "staring_date", "like", "\"%May%\""], "ru": ["select", "count", "(", "distinct", "course_id", ")", "from", "course", "where", "staring_date", "like", "\"%\u041c\u0430\u044f%\""]}, "query_toks_no_values": {"en": ["select", "count", "(", "distinct", "course_id", ")", "from", "course", "where", "staring_date", "like", "value"], "ru": ["select", "count", "(", "distinct", "course_id", ")", "from", "course", "where", "staring_date", "like", "value"]}, "masked_query": "SELECT count(DISTINCT Course_ID) FROM Course WHERE Staring_Date LIKE  '%May%'", "question_pauq": {"ru": "\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u0443\u0440\u0441\u043e\u0432, \u043d\u0430\u0447\u0430\u0432\u0448\u0438\u0445\u0441\u044f \u0432 \u043c\u0430\u0435"}, "question": "Amount of courses started in May", "kb_id": "course_teach"}, {"id": "T_0015", "source": "addition", "type": "dev", "query": {"ru": "SELECT DISTINCT(Course) FROM Course WHERE Staring_Date = '14 \u041c\u0430\u044f'"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [true, [[0, [0, [0, 3, false], null]]]], "where": [[false, 2, [0, [0, 2, false], null], "\"14 May\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [true, [[0, [0, [0, 3, false], null]]]], "where": [[false, 2, [0, [0, 2, false], null], "\"14 \u041c\u0430\u044f\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Show", "me", "names", "of", "the", "courses", "started", "at", "the", "14th", "of", "May"], "ru": ["\u0412\u044b\u0432\u0435\u0434\u0438", "\u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f", "\u043a\u0443\u0440\u0441\u043e\u0432", ",", "\u043d\u0430\u0447\u0430\u0432\u0448\u0438\u0445\u0441\u044f", "14\u0433\u043e", "\u041c\u0430\u044f"]}, "query_toks": {"en": ["select", "distinct", "(", "course", ")", "from", "course", "where", "staring_date", "=", "\"14 May\""], "ru": ["select", "distinct", "(", "course", ")", "from", "course", "where", "staring_date", "=", "\"14 \u041c\u0430\u044f\""]}, "query_toks_no_values": {"en": ["select", "distinct", "(", "course", ")", "from", "course", "where", "staring_date", "=", "value"], "ru": ["select", "distinct", "(", "course", ")", "from", "course", "where", "staring_date", "=", "value"]}, "masked_query": "SELECT DISTINCT(Course) FROM Course WHERE Staring_Date = '14 May'", "question_pauq": {"ru": "\u0412\u044b\u0432\u0435\u0434\u0438 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f \u043a\u0443\u0440\u0441\u043e\u0432, \u043d\u0430\u0447\u0430\u0432\u0448\u0438\u0445\u0441\u044f 14\u0433\u043e \u041c\u0430\u044f"}, "question": "Show me names of the courses started at the 14th of May", "kb_id": "course_teach"}, {"id": "T_0016", "source": "addition", "type": "dev", "query": {"ru": "SELECT MIN(Grade) FROM course_arrange JOIN Course ON course_arrange.Course_ID = Course.Course_ID WHERE Staring_Date LIKE '%9 \u041c\u0430\u044f%'"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 1, false], null]]}, "select": [false, [[2, [0, [0, 10, false], null]]]], "where": [[false, 9, [0, [0, 2, false], null], "\"%9 May%\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 8, false], null], [0, 1, false], null]]}, "select": [false, [[2, [0, [0, 10, false], null]]]], "where": [[false, 9, [0, [0, 2, false], null], "\"%9 \u041c\u0430\u044f%\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "minimum", "grade", "for", "the", "May", "9", "course", "?"], "ru": ["\u041a\u0430\u043a\u043e\u0439", "\u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439", "\u0431\u0430\u043b\u043b", "\u0431\u044b\u043b", "\u043f\u043e\u0441\u0442\u0430\u0432\u043b\u0435\u043d", "\u0437\u0430", "\u043a\u0443\u0440\u0441", "\u043e\u0442", "9", "\u043c\u0430\u044f", "?"]}, "query_toks": {"en": ["select", "min", "(", "grade", ")", "from", "course_arrange", "join", "course", "on", "course_arrange.course_id", "=", "course.course_id", "where", "staring_date", "like", "\"%9 May%\""], "ru": ["select", "min", "(", "grade", ")", "from", "course_arrange", "join", "course", "on", "course_arrange.course_id", "=", "course.course_id", "where", "staring_date", "like", "\"%9 \u041c\u0430\u044f%\""]}, "query_toks_no_values": {"en": ["select", "min", "(", "grade", ")", "from", "course_arrange", "join", "course", "on", "course_arrange.course_id", "=", "course.course_id", "where", "staring_date", "like", "value"], "ru": ["select", "min", "(", "grade", ")", "from", "course_arrange", "join", "course", "on", "course_arrange.course_id", "=", "course.course_id", "where", "staring_date", "like", "value"]}, "masked_query": "SELECT MIN(Grade) FROM course_arrange JOIN Course ON course_arrange.Course_ID = Course.Course_ID WHERE Staring_Date LIKE '%9 May%'", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0439 \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u0431\u0430\u043b\u043b \u0431\u044b\u043b \u043f\u043e\u0441\u0442\u0430\u0432\u043b\u0435\u043d \u0437\u0430 \u043a\u0443\u0440\u0441 \u043e\u0442 9 \u043c\u0430\u044f?"}, "question": "What is the minimum grade for the May 9 course?", "kb_id": "course_teach"}, {"id": "T_0022", "source": "addition", "type": "dev", "query": {"ru": "SELECT Template_ID FROM Templates WHERE Date_Effective_From LIKE '%2005%' AND Date_Effective_TO LIKE '%2008%'"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 3, false], null]]]], "where": [[false, 9, [0, [0, 6, false], null], "\"%2005%\"", null], "and", [false, 9, [0, [0, 7, false], null], "\"%2008%\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 3, false], null]]]], "where": [[false, 9, [0, [0, 6, false], null], "\"%2005%\"", null], "and", [false, 9, [0, [0, 7, false], null], "\"%2008%\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Id", "of", "templates", "effective", "from", "2005", "to", "2008"], "ru": ["Id", "\u0448\u0430\u0431\u043b\u043e\u043d\u043e\u0432", "\u0434\u0435\u0439\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445", "\u0441", "2005", "\u043f\u043e", "2008", "\u0433\u043e\u0434"]}, "query_toks": {"en": ["select", "template_id", "from", "templates", "where", "date_effective_from", "like", "\"%2005%\"", "and", "date_effective_to", "like", "\"%2008%\""], "ru": ["select", "template_id", "from", "templates", "where", "date_effective_from", "like", "\"%2005%\"", "and", "date_effective_to", "like", "\"%2008%\""]}, "query_toks_no_values": {"en": ["select", "template_id", "from", "templates", "where", "date_effective_from", "like", "value", "and", "date_effective_to", "like", "value"], "ru": ["select", "template_id", "from", "templates", "where", "date_effective_from", "like", "value", "and", "date_effective_to", "like", "value"]}, "masked_query": "SELECT Template_ID FROM Templates WHERE Date_Effective_From LIKE '%2005%' AND Date_Effective_TO LIKE '%2008%'", "question_pauq": {"ru": "Id \u0448\u0430\u0431\u043b\u043e\u043d\u043e\u0432 \u0434\u0435\u0439\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445 \u0441 2005 \u043f\u043e 2008 \u0433\u043e\u0434"}, "question": "Id of templates effective from 2005 to 2008", "kb_id": "cre_Doc_Template_Mgt"}, {"id": "T_0023", "source": "addition", "type": "dev", "query": {"ru": "SELECT Template_ID FROM Templates WHERE Date_Effective_FROM LIKE '%2005-11-12%' AND Date_Effective_TO LIKE '%2008-01-05%'"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 3, false], null]]]], "where": [[false, 9, [0, [0, 6, false], null], "\"%2005-11-12%\"", null], "and", [false, 9, [0, [0, 7, false], null], "\"%2008-01-05%\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 3, false], null]]]], "where": [[false, 9, [0, [0, 6, false], null], "\"%2005-11-12%\"", null], "and", [false, 9, [0, [0, 7, false], null], "\"%2008-01-05%\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "are", "the", "IDs", "of", "templates", "effective", "from", "2005-11-12", "to", "2008-01-05", "?"], "ru": ["\u041a\u0430\u043a\u0438\u0435", "ID", "\u0443", "\u0448\u0430\u0431\u043b\u043e\u043d\u043e\u0432", "\u0434\u0435\u0439\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445", "\u0441", "2005-11-12", "\u043f\u043e", "2008-01-05", "?"]}, "query_toks": {"en": ["select", "template_id", "from", "templates", "where", "date_effective_from", "like", "\"%2005-11-12%\"", "and", "date_effective_to", "like", "\"%2008-01-05%\""], "ru": ["select", "template_id", "from", "templates", "where", "date_effective_from", "like", "\"%2005-11-12%\"", "and", "date_effective_to", "like", "\"%2008-01-05%\""]}, "query_toks_no_values": {"en": ["select", "template_id", "from", "templates", "where", "date_effective_from", "like", "value", "and", "date_effective_to", "like", "value"], "ru": ["select", "template_id", "from", "templates", "where", "date_effective_from", "like", "value", "and", "date_effective_to", "like", "value"]}, "masked_query": "SELECT Template_ID FROM Templates WHERE Date_Effective_FROM LIKE '%2005-11-12%' AND Date_Effective_TO LIKE '%2008-01-05%'", "question_pauq": {"ru": "\u041a\u0430\u043a\u0438\u0435 ID \u0443 \u0448\u0430\u0431\u043b\u043e\u043d\u043e\u0432 \u0434\u0435\u0439\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445 \u0441 2005-11-12 \u043f\u043e 2008-01-05?"}, "question": "What are the IDs of templates effective from 2005-11-12 to 2008-01-05?", "kb_id": "cre_Doc_Template_Mgt"}, {"id": "T_0024", "source": "addition", "type": "dev", "query": {"ru": "SELECT COUNT(DISTINCT Template_ID) FROM Templates WHERE Date_Effective_From LIKE '%2010%' OR Date_Effective_From LIKE '%2011%' OR Date_Effective_From LIKE '%2012%'"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[3, [0, [0, 3, true], null]]]], "where": [[false, 9, [0, [0, 6, false], null], "\"%2010%\"", null], "or", [false, 9, [0, [0, 6, false], null], "\"%2011%\"", null], "or", [false, 9, [0, [0, 6, false], null], "\"%2012%\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[3, [0, [0, 3, true], null]]]], "where": [[false, 9, [0, [0, 6, false], null], "\"%2010%\"", null], "or", [false, 9, [0, [0, 6, false], null], "\"%2011%\"", null], "or", [false, 9, [0, [0, 6, false], null], "\"%2012%\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Number", "of", "templates", "that", "became", "effective", "between", "2010", "and", "2012"], "ru": ["\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e", "\u0448\u0430\u0431\u043b\u043e\u043d\u043e\u0432", ",", "\u0432\u0441\u0442\u0443\u043f\u0438\u0432\u0448\u0438\u0445", "\u0432", "\u0441\u0438\u043b\u0443", "\u0432", "\u043f\u0435\u0440\u0438\u043e\u0434", "\u0441", "2010", "\u043f\u043e", "2012", "\u0433\u043e\u0434"]}, "query_toks": {"en": ["select", "count", "(", "distinct", "template_id", ")", "from", "templates", "where", "date_effective_from", "like", "\"%2010%\"", "or", "date_effective_from", "like", "\"%2011%\"", "or", "date_effective_from", "like", "\"%2012%\""], "ru": ["select", "count", "(", "distinct", "template_id", ")", "from", "templates", "where", "date_effective_from", "like", "\"%2010%\"", "or", "date_effective_from", "like", "\"%2011%\"", "or", "date_effective_from", "like", "\"%2012%\""]}, "query_toks_no_values": {"en": ["select", "count", "(", "distinct", "template_id", ")", "from", "templates", "where", "date_effective_from", "like", "value", "or", "date_effective_from", "like", "value", "or", "date_effective_from", "like", "value"], "ru": ["select", "count", "(", "distinct", "template_id", ")", "from", "templates", "where", "date_effective_from", "like", "value", "or", "date_effective_from", "like", "value", "or", "date_effective_from", "like", "value"]}, "masked_query": "SELECT COUNT(DISTINCT Template_ID) FROM Templates WHERE Date_Effective_From LIKE '%2010%' OR Date_Effective_From LIKE '%2011%' OR Date_Effective_From LIKE '%2012%'", "question_pauq": {"ru": "\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0448\u0430\u0431\u043b\u043e\u043d\u043e\u0432, \u0432\u0441\u0442\u0443\u043f\u0438\u0432\u0448\u0438\u0445 \u0432 \u0441\u0438\u043b\u0443 \u0432 \u043f\u0435\u0440\u0438\u043e\u0434 \u0441 2010 \u043f\u043e 2012 \u0433\u043e\u0434"}, "question": "Number of templates that became effective between 2010 and 2012", "kb_id": "cre_Doc_Template_Mgt"}, {"id": "T_0025", "source": "addition", "type": "dev", "query": {"ru": "SELECT Template_ID FROM Templates WHERE Date_Effective_From IN (SELECT MIN(Date_Effective_From) FROM Templates)"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 3, false], null]]]], "where": [[false, 8, [0, [0, 6, false], null], {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[2, [0, [0, 6, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 3, false], null]]]], "where": [[false, 8, [0, [0, 6, false], null], {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[2, [0, [0, 6, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "is", "the", "ID", "of", "the", "template", "that", "took", "effect", "first", "?"], "ru": ["\u041a\u0430\u043a\u043e\u0439", "ID", "\u0443", "\u0448\u0430\u0431\u043b\u043e\u043d\u0430", ",", "\u0432\u0441\u0442\u0443\u043f\u0438\u0432\u0448\u0435\u0433\u043e", "\u0432", "\u0441\u0438\u043b\u0443", "\u0441\u0430\u043c\u044b\u043c", "\u043f\u0435\u0440\u0432\u044b\u043c", "?"]}, "query_toks": {"en": ["select", "template_id", "from", "templates", "where", "date_effective_from", "in", "(", "select", "min", "(", "date_effective_from", ")", "from", "templates", ")"], "ru": ["select", "template_id", "from", "templates", "where", "date_effective_from", "in", "(", "select", "min", "(", "date_effective_from", ")", "from", "templates", ")"]}, "query_toks_no_values": {"en": ["select", "template_id", "from", "templates", "where", "date_effective_from", "in", "(", "select", "min", "(", "date_effective_from", ")", "from", "templates", ")"], "ru": ["select", "template_id", "from", "templates", "where", "date_effective_from", "in", "(", "select", "min", "(", "date_effective_from", ")", "from", "templates", ")"]}, "masked_query": "SELECT Template_ID FROM Templates WHERE Date_Effective_From IN (SELECT MIN(Date_Effective_From) FROM Templates)", "question_pauq": {"ru": "\u041a\u0430\u043a\u043e\u0439 ID \u0443 \u0448\u0430\u0431\u043b\u043e\u043d\u0430, \u0432\u0441\u0442\u0443\u043f\u0438\u0432\u0448\u0435\u0433\u043e \u0432 \u0441\u0438\u043b\u0443 \u0441\u0430\u043c\u044b\u043c \u043f\u0435\u0440\u0432\u044b\u043c?"}, "question": "What is the ID of the template that took effect first?", "kb_id": "cre_Doc_Template_Mgt"}, {"id": "F_0020", "source": "addition", "type": "dev", "query": {"ru": "SELECT concert_ID, Stadium_ID FROM concert"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 15, false], null]], [0, [0, [0, 18, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 15, false], null]], [0, [0, [0, 18, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Output", "all", "pairs", "of", "concert", "and", "stadium", "ids", "."], "ru": ["\u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435", "\u0432\u0441\u0435", "\u043f\u0430\u0440\u044b", "id", "\u043a\u043e\u043d\u0446\u0435\u0440\u0442\u043e\u0432", "\u0438", "\u0441\u0442\u0430\u0434\u0438\u043e\u043d\u043e\u0432", "."]}, "query_toks": {"en": ["select", "concert_id", ",", "stadium_id", "from", "concert"], "ru": ["select", "concert_id", ",", "stadium_id", "from", "concert"]}, "query_toks_no_values": {"en": ["select", "concert_id", ",", "stadium_id", "from", "concert"], "ru": ["select", "concert_id", ",", "stadium_id", "from", "concert"]}, "masked_query": "SELECT concert_ID, Stadium_ID FROM concert", "question_pauq": {"ru": "\u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u0432\u0441\u0435 \u043f\u0430\u0440\u044b id \u043a\u043e\u043d\u0446\u0435\u0440\u0442\u043e\u0432 \u0438 \u0441\u0442\u0430\u0434\u0438\u043e\u043d\u043e\u0432."}, "question": "Output all pairs of concert and stadium ids.", "kb_id": "concert_singer"}, {"id": "F_0031", "source": "addition", "type": "dev", "query": {"ru": "SELECT winner_name, loser_name FROM matches WHERE match_num = 222"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 34, false], null]], [0, [0, [0, 15, false], null]]]], "where": [[false, 2, [0, [0, 19, false], null], 222.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 34, false], null]], [0, [0, [0, 15, false], null]]]], "where": [[false, 2, [0, [0, 19, false], null], 222.0, null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Winners", "and", "loosers", "names", "in", "the", "match", "number", "222", "."], "ru": ["\u0418\u043c\u0435\u043d\u0430", "\u043f\u043e\u0431\u0435\u0434\u0438\u0442\u0435\u043b\u0435\u0439", "\u0438", "\u043f\u0440\u043e\u0438\u0433\u0440\u0430\u0432\u0448\u0438\u0445", "\u043d\u0430", "\u043c\u0430\u0442\u0447\u0435", "\u2116222", "."]}, "query_toks": {"en": ["select", "winner_name", ",", "loser_name", "from", "matches", "where", "match_num", "=", "222"], "ru": ["select", "winner_name", ",", "loser_name", "from", "matches", "where", "match_num", "=", "222"]}, "query_toks_no_values": {"en": ["select", "winner_name", ",", "loser_name", "from", "matches", "where", "match_num", "=", "222"], "ru": ["select", "winner_name", ",", "loser_name", "from", "matches", "where", "match_num", "=", "222"]}, "masked_query": "SELECT winner_name, loser_name FROM matches WHERE match_num = 222", "question_pauq": {"ru": "\u0418\u043c\u0435\u043d\u0430 \u043f\u043e\u0431\u0435\u0434\u0438\u0442\u0435\u043b\u0435\u0439 \u0438 \u043f\u0440\u043e\u0438\u0433\u0440\u0430\u0432\u0448\u0438\u0445 \u043d\u0430 \u043c\u0430\u0442\u0447\u0435 \u2116222."}, "question": "Winners and loosers names in the match number 222.", "kb_id": "wta_1"}, {"id": "F_0032", "source": "addition", "type": "dev", "query": {"ru": "SELECT tourney_date, tourney_id FROM matches WHERE winner_name = '\u041c\u0438\u0440\u043e\u043d \u0421\u0438\u0432\u043e\u0432' OR loser_name = '\u041c\u0438\u0440\u043e\u043d \u0421\u0438\u0432\u043e\u0432'"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 24, false], null]], [0, [0, [0, 25, false], null]]]], "where": [[false, 2, [0, [0, 34, false], null], "\"Petra Kvitova\"", null], "or", [false, 2, [0, [0, 15, false], null], "\"Petra Kvitova\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 24, false], null]], [0, [0, [0, 25, false], null]]]], "where": [[false, 2, [0, [0, 34, false], null], "\"\u041c\u0438\u0440\u043e\u043d \u0421\u0438\u0432\u043e\u0432\"", null], "or", [false, 2, [0, [0, 15, false], null], "\"\u041c\u0438\u0440\u043e\u043d \u0421\u0438\u0432\u043e\u0432\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Tourneys", "dates", "and", "id", "with", "Petra", "Kvitova"], "ru": ["\u0412\u044b\u0432\u0435\u0434\u0438", "id", "\u0438", "\u0434\u0430\u0442\u044b", "\u0442\u0443\u0440\u043d\u0438\u0440\u043e\u0432", "\u0441", "\u041c\u0438\u0440\u043e\u043d\u043e\u043c", "\u0421\u0438\u0432\u043e\u0432\u044b\u043c"]}, "query_toks": {"en": ["select", "tourney_date", ",", "tourney_id", "from", "matches", "where", "winner_name", "=", "\"Petra Kvitova\"", "or", "loser_name", "=", "\"Petra Kvitova\""], "ru": ["select", "tourney_date", ",", "tourney_id", "from", "matches", "where", "winner_name", "=", "\"\u041c\u0438\u0440\u043e\u043d \u0421\u0438\u0432\u043e\u0432\"", "or", "loser_name", "=", "\"\u041c\u0438\u0440\u043e\u043d \u0421\u0438\u0432\u043e\u0432\""]}, "query_toks_no_values": {"en": ["select", "tourney_date", ",", "tourney_id", "from", "matches", "where", "winner_name", "=", "value", "or", "loser_name", "=", "value"], "ru": ["select", "tourney_date", ",", "tourney_id", "from", "matches", "where", "winner_name", "=", "value", "or", "loser_name", "=", "value"]}, "masked_query": "SELECT tourney_date, tourney_id FROM matches WHERE winner_name = 'Petra Kvitova' OR loser_name = 'Petra Kvitova'", "question_pauq": {"ru": "\u0412\u044b\u0432\u0435\u0434\u0438 id \u0438 \u0434\u0430\u0442\u044b \u0442\u0443\u0440\u043d\u0438\u0440\u043e\u0432 \u0441 \u041c\u0438\u0440\u043e\u043d\u043e\u043c \u0421\u0438\u0432\u043e\u0432\u044b\u043c"}, "question": "Tourneys dates and id with Petra Kvitova", "kb_id": "wta_1"}, {"id": "F_0033", "source": "addition", "type": "dev", "query": {"ru": "SELECT COUNT(*) FROM matches WHERE loser_ht > winner_ht"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 3, [0, [0, 12, false], null], [0, 31, false], null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 3, [0, [0, 12, false], null], [0, 31, false], null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Amount", "of", "matches", "where", "looser", "'s", "height", "were", "greater", "than", "winner", "'s", "one", "."], "ru": ["\u0421\u043a\u043e\u043b\u044c\u043a\u043e", "\u0431\u044b\u043b\u043e", "\u043c\u0430\u0442\u0447\u0435\u0439", ",", "\u0432", "\u043a\u043e\u0442\u043e\u0440\u044b\u0445", "\u0440\u043e\u0441\u0442", "\u043f\u0440\u043e\u0438\u0433\u0440\u0430\u0432\u0448\u0435\u0433\u043e", "\u0431\u043e\u043b\u044c\u0448\u0435", "\u0440\u043e\u0441\u0442\u0430", "\u043f\u043e\u0431\u0435\u0434\u0438\u0442\u0435\u043b\u044f", "."]}, "query_toks": {"en": ["select", "count", "(", "*", ")", "from", "matches", "where", "loser_ht", ">", "winner_ht"], "ru": ["select", "count", "(", "*", ")", "from", "matches", "where", "loser_ht", ">", "winner_ht"]}, "query_toks_no_values": {"en": ["select", "count", "(", "*", ")", "from", "matches", "where", "loser_ht", ">", "winner_ht"], "ru": ["select", "count", "(", "*", ")", "from", "matches", "where", "loser_ht", ">", "winner_ht"]}, "masked_query": "SELECT COUNT(*) FROM matches WHERE loser_ht > winner_ht", "question_pauq": {"ru": "\u0421\u043a\u043e\u043b\u044c\u043a\u043e \u0431\u044b\u043b\u043e \u043c\u0430\u0442\u0447\u0435\u0439, \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0440\u043e\u0441\u0442 \u043f\u0440\u043e\u0438\u0433\u0440\u0430\u0432\u0448\u0435\u0433\u043e \u0431\u043e\u043b\u044c\u0448\u0435 \u0440\u043e\u0441\u0442\u0430 \u043f\u043e\u0431\u0435\u0434\u0438\u0442\u0435\u043b\u044f."}, "question": "Amount of matches where looser's height were greater than winner's one.", "kb_id": "wta_1"}, {"id": "F_0034", "source": "addition", "type": "dev", "query": {"ru": "SELECT COUNT(*) FROM matches WHERE loser_ht > winner_ht"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 3, [0, [0, 12, false], null], [0, 31, false], null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 3, [0, [0, 12, false], null], [0, 31, false], null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["The", "number", "of", "matches", "in", "which", "the", "loser", "was", "higher", "than", "the", "winner", "."], "ru": ["\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e", "\u043c\u0430\u0442\u0447\u0435\u0439", ",", "\u0432", "\u043a\u043e\u0442\u043e\u0440\u044b\u0445", "\u043f\u0440\u043e\u0438\u0433\u0440\u0430\u0432\u0448\u0438\u0439", "\u0431\u044b\u043b", "\u0432\u044b\u0448\u0435", "\u043f\u043e\u0431\u0435\u0434\u0438\u0442\u0435\u043b\u044f", "."]}, "query_toks": {"en": ["select", "count", "(", "*", ")", "from", "matches", "where", "loser_ht", ">", "winner_ht"], "ru": ["select", "count", "(", "*", ")", "from", "matches", "where", "loser_ht", ">", "winner_ht"]}, "query_toks_no_values": {"en": ["select", "count", "(", "*", ")", "from", "matches", "where", "loser_ht", ">", "winner_ht"], "ru": ["select", "count", "(", "*", ")", "from", "matches", "where", "loser_ht", ">", "winner_ht"]}, "masked_query": "SELECT COUNT(*) FROM matches WHERE loser_ht > winner_ht", "question_pauq": {"ru": "\u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0430\u0442\u0447\u0435\u0439, \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043f\u0440\u043e\u0438\u0433\u0440\u0430\u0432\u0448\u0438\u0439 \u0431\u044b\u043b \u0432\u044b\u0448\u0435 \u043f\u043e\u0431\u0435\u0434\u0438\u0442\u0435\u043b\u044f."}, "question": "The number of matches in which the loser was higher than the winner.", "kb_id": "wta_1"}, {"id": "F_0035", "source": "addition", "type": "dev", "query": {"ru": "SELECT COUNT(DISTINCT student_id) FROM Friend"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[3, [0, [0, 4, true], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[3, [0, [0, 4, true], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["How", "many", "schoolers", "have", "friends", "?"], "ru": ["\u0423", "\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445", "\u0448\u043a\u043e\u043b\u044c\u043d\u0438\u043a\u043e\u0432", "\u0435\u0441\u0442\u044c", "\u0434\u0440\u0443\u0437\u044c\u044f", "?"]}, "query_toks": {"en": ["select", "count", "(", "distinct", "student_id", ")", "from", "friend"], "ru": ["select", "count", "(", "distinct", "student_id", ")", "from", "friend"]}, "query_toks_no_values": {"en": ["select", "count", "(", "distinct", "student_id", ")", "from", "friend"], "ru": ["select", "count", "(", "distinct", "student_id", ")", "from", "friend"]}, "masked_query": "SELECT COUNT(DISTINCT student_id) FROM Friend", "question_pauq": {"ru": "\u0423 \u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0448\u043a\u043e\u043b\u044c\u043d\u0438\u043a\u043e\u0432 \u0435\u0441\u0442\u044c \u0434\u0440\u0443\u0437\u044c\u044f?"}, "question": "How many schoolers have friends?", "kb_id": "network_1"}, {"id": "F_0036", "source": "addition", "type": "dev", "query": {"ru": "SELECT friend_id FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.friend_id WHERE Highschooler.name = '\u041b\u0435\u0432'"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 5, false], null]]}, "select": [false, [[0, [0, [0, 5, false], null]]]], "where": [[false, 2, [0, [0, 2, false], null], "\"Jordan\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 1, false], null], [0, 5, false], null]]}, "select": [false, [[0, [0, [0, 5, false], null]]]], "where": [[false, 2, [0, [0, 2, false], null], "\"\u041b\u0435\u0432\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Id", "of", "friends", "of", "Jordan", "."], "ru": ["\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u044b", "\u0441\u0442\u0430\u0440\u0448\u0435\u043a\u043b\u0430\u0441\u0441\u043d\u0438\u043a\u043e\u0432", ",", "\u0441", "\u043a\u043e\u0442\u043e\u0440\u044b\u043c\u0438", "\u041b\u0435\u0432", "\u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f", "\u0432", "\u0434\u0440\u0443\u0436\u0431\u0435", "."]}, "query_toks": {"en": ["select", "friend_id", "from", "highschooler", "join", "friend", "on", "highschooler.id", "=", "friend.friend_id", "where", "highschooler.name", "=", "\"Jordan\""], "ru": ["select", "friend_id", "from", "highschooler", "join", "friend", "on", "highschooler.id", "=", "friend.friend_id", "where", "highschooler.name", "=", "\"\u041b\u0435\u0432\""]}, "query_toks_no_values": {"en": ["select", "friend_id", "from", "highschooler", "join", "friend", "on", "highschooler.id", "=", "friend.friend_id", "where", "highschooler.name", "=", "value"], "ru": ["select", "friend_id", "from", "highschooler", "join", "friend", "on", "highschooler.id", "=", "friend.friend_id", "where", "highschooler.name", "=", "value"]}, "masked_query": "SELECT friend_id FROM Highschooler JOIN Friend ON Highschooler.ID = Friend.friend_id WHERE Highschooler.name = 'Jordan'", "question_pauq": {"ru": "\u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u044b \u0441\u0442\u0430\u0440\u0448\u0435\u043a\u043b\u0430\u0441\u0441\u043d\u0438\u043a\u043e\u0432, \u0441 \u043a\u043e\u0442\u043e\u0440\u044b\u043c\u0438 \u041b\u0435\u0432 \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u0432 \u0434\u0440\u0443\u0436\u0431\u0435."}, "question": "Id of friends of Jordan.", "kb_id": "network_1"}, {"id": "F_0037", "source": "addition", "type": "dev", "query": {"ru": "SELECT course_description FROM Courses WHERE course_name = '\u044d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0430'"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 12, false], null]]]], "where": [[false, 2, [0, [0, 11, false], null], "\"nlp\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 12, false], null]]]], "where": [[false, 2, [0, [0, 11, false], null], "\"\u044d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0430\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Descriptions", "of", "all", "NLP", "courses"], "ru": ["\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u044f", "\u0432\u0441\u0435\u0445", "\u043a\u0443\u0440\u0441\u043e\u0432", "\u043f\u043e", "\u044d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0435"]}, "query_toks": {"en": ["select", "course_description", "from", "courses", "where", "course_name", "=", "\"nlp\""], "ru": ["select", "course_description", "from", "courses", "where", "course_name", "=", "\"\u044d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0430\""]}, "query_toks_no_values": {"en": ["select", "course_description", "from", "courses", "where", "course_name", "=", "value"], "ru": ["select", "course_description", "from", "courses", "where", "course_name", "=", "value"]}, "masked_query": "SELECT course_description FROM Courses WHERE course_name = 'nlp'", "question_pauq": {"ru": "\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u0432\u0441\u0435\u0445 \u043a\u0443\u0440\u0441\u043e\u0432 \u043f\u043e \u044d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0435"}, "question": "Descriptions of all NLP courses", "kb_id": "student_transcripts_tracking"}, {"id": "F_0038", "source": "addition", "type": "dev", "query": {"ru": "SELECT first_name, middle_name, last_name FROM Students JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id JOIN Student_Enrolment_Courses ON Student_Enrolment.student_enrolment_id = Student_Enrolment_Courses.student_enrolment_id JOIN Courses ON Student_Enrolment_Courses.course_id = Courses.course_id WHERE Courses.course_name = '\u044d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0430'"}, "sql": {"en": {"from": {"table_units": [["table_unit", 6], ["table_unit", 7], ["table_unit", 8], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 32, false], null], [0, 47, false], null], "and", [false, 2, [0, [0, 44, false], null], [0, 51, false], null], "and", [false, 2, [0, [0, 50, false], null], [0, 10, false], null]]}, "select": [false, [[0, [0, [0, 35, false], null]], [0, [0, [0, 36, false], null]], [0, [0, [0, 37, false], null]]]], "where": [[false, 2, [0, [0, 11, false], null], "\"ai\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 6], ["table_unit", 7], ["table_unit", 8], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 32, false], null], [0, 47, false], null], "and", [false, 2, [0, [0, 44, false], null], [0, 51, false], null], "and", [false, 2, [0, [0, 50, false], null], [0, 10, false], null]]}, "select": [false, [[0, [0, [0, 35, false], null]], [0, [0, [0, 36, false], null]], [0, [0, [0, 37, false], null]]]], "where": [[false, 2, [0, [0, 11, false], null], "\"\u044d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0430\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["First", ",", "middle", "and", "last", "name", "of", "students", "who", "enrolled", "in", "ai", "course"], "ru": ["\u0418\u043c\u044f", ",", "\u0444\u0430\u043c\u0438\u043b\u0438\u044f", "\u0438", "\u043e\u0442\u0447\u0435\u0441\u0442\u0432\u043e", "\u0441\u0442\u0443\u0434\u0435\u043d\u0442\u043e\u0432", ",", "\u0437\u0430\u043f\u0438\u0441\u0430\u0432\u0448\u0438\u0445\u0441\u044f", "\u043d\u0430", "\u043a\u0443\u0440\u0441\u044b", "\u043f\u043e", "\u044d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0435"]}, "query_toks": {"en": ["select", "first_name", ",", "middle_name", ",", "last_name", "from", "students", "join", "student_enrolment", "on", "students.student_id", "=", "student_enrolment.student_id", "join", "student_enrolment_courses", "on", "student_enrolment.student_enrolment_id", "=", "student_enrolment_courses.student_enrolment_id", "join", "courses", "on", "student_enrolment_courses.course_id", "=", "courses.course_id", "where", "courses.course_name", "=", "\"ai\""], "ru": ["select", "first_name", ",", "middle_name", ",", "last_name", "from", "students", "join", "student_enrolment", "on", "students.student_id", "=", "student_enrolment.student_id", "join", "student_enrolment_courses", "on", "student_enrolment.student_enrolment_id", "=", "student_enrolment_courses.student_enrolment_id", "join", "courses", "on", "student_enrolment_courses.course_id", "=", "courses.course_id", "where", "courses.course_name", "=", "\"\u044d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0430\""]}, "query_toks_no_values": {"en": ["select", "first_name", ",", "middle_name", ",", "last_name", "from", "students", "join", "student_enrolment", "on", "students.student_id", "=", "student_enrolment.student_id", "join", "student_enrolment_courses", "on", "student_enrolment.student_enrolment_id", "=", "student_enrolment_courses.student_enrolment_id", "join", "courses", "on", "student_enrolment_courses.course_id", "=", "courses.course_id", "where", "courses.course_name", "=", "value"], "ru": ["select", "first_name", ",", "middle_name", ",", "last_name", "from", "students", "join", "student_enrolment", "on", "students.student_id", "=", "student_enrolment.student_id", "join", "student_enrolment_courses", "on", "student_enrolment.student_enrolment_id", "=", "student_enrolment_courses.student_enrolment_id", "join", "courses", "on", "student_enrolment_courses.course_id", "=", "courses.course_id", "where", "courses.course_name", "=", "value"]}, "masked_query": "SELECT first_name, middle_name, last_name FROM Students JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id JOIN Student_Enrolment_Courses ON Student_Enrolment.student_enrolment_id = Student_Enrolment_Courses.student_enrolment_id JOIN Courses ON Student_Enrolment_Courses.course_id = Courses.course_id WHERE Courses.course_name = 'ai'", "question_pauq": {"ru": "\u0418\u043c\u044f, \u0444\u0430\u043c\u0438\u043b\u0438\u044f \u0438 \u043e\u0442\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u043e\u0432, \u0437\u0430\u043f\u0438\u0441\u0430\u0432\u0448\u0438\u0445\u0441\u044f \u043d\u0430 \u043a\u0443\u0440\u0441\u044b \u043f\u043e \u044d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0435"}, "question": "First, middle and last name of students who enrolled in ai course", "kb_id": "student_transcripts_tracking"}, {"id": "F_0039", "source": "addition", "type": "dev", "query": {"ru": "SELECT cell_mobile_number FROM Students JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id JOIN Student_Enrolment_Courses ON Student_Enrolment.student_enrolment_id = Student_Enrolment_Courses.student_enrolment_id JOIN Courses ON Student_Enrolment_Courses.course_id = Courses.course_id WHERE Courses.course_name = 'ai'"}, "sql": {"en": {"from": {"table_units": [["table_unit", 6], ["table_unit", 7], ["table_unit", 8], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 32, false], null], [0, 47, false], null], "and", [false, 2, [0, [0, 44, false], null], [0, 51, false], null], "and", [false, 2, [0, [0, 50, false], null], [0, 10, false], null]]}, "select": [false, [[0, [0, [0, 38, false], null]]]], "where": [[false, 2, [0, [0, 11, false], null], "\"ai\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 6], ["table_unit", 7], ["table_unit", 8], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 32, false], null], [0, 47, false], null], "and", [false, 2, [0, [0, 44, false], null], [0, 51, false], null], "and", [false, 2, [0, [0, 50, false], null], [0, 10, false], null]]}, "select": [false, [[0, [0, [0, 38, false], null]]]], "where": [[false, 2, [0, [0, 11, false], null], "\"ai\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Looking", "for", "the", "phone", "numbers", "of", "students", "from", "Artificial", "Intelligence", "courses", "."], "ru": ["\u041d\u0443\u0436\u043d\u044b", "\u043d\u043e\u043c\u0435\u0440\u0430", "\u0442\u0435\u043b\u0435\u0444\u043e\u043d\u043e\u0432", "\u0441\u0442\u0443\u0434\u0435\u043d\u0442\u043e\u0432", "\u0441", "\u043a\u0443\u0440\u0441\u043e\u0432", "\u043f\u043e", "\u0438\u0441\u043a\u0443\u0441\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u043c\u0443", "\u0438\u043d\u0442\u0435\u043b\u043b\u0435\u043a\u0442\u0443", "."]}, "query_toks": {"en": ["select", "cell_mobile_number", "from", "students", "join", "student_enrolment", "on", "students.student_id", "=", "student_enrolment.student_id", "join", "student_enrolment_courses", "on", "student_enrolment.student_enrolment_id", "=", "student_enrolment_courses.student_enrolment_id", "join", "courses", "on", "student_enrolment_courses.course_id", "=", "courses.course_id", "where", "courses.course_name", "=", "\"ai\""], "ru": ["select", "cell_mobile_number", "from", "students", "join", "student_enrolment", "on", "students.student_id", "=", "student_enrolment.student_id", "join", "student_enrolment_courses", "on", "student_enrolment.student_enrolment_id", "=", "student_enrolment_courses.student_enrolment_id", "join", "courses", "on", "student_enrolment_courses.course_id", "=", "courses.course_id", "where", "courses.course_name", "=", "\"ai\""]}, "query_toks_no_values": {"en": ["select", "cell_mobile_number", "from", "students", "join", "student_enrolment", "on", "students.student_id", "=", "student_enrolment.student_id", "join", "student_enrolment_courses", "on", "student_enrolment.student_enrolment_id", "=", "student_enrolment_courses.student_enrolment_id", "join", "courses", "on", "student_enrolment_courses.course_id", "=", "courses.course_id", "where", "courses.course_name", "=", "value"], "ru": ["select", "cell_mobile_number", "from", "students", "join", "student_enrolment", "on", "students.student_id", "=", "student_enrolment.student_id", "join", "student_enrolment_courses", "on", "student_enrolment.student_enrolment_id", "=", "student_enrolment_courses.student_enrolment_id", "join", "courses", "on", "student_enrolment_courses.course_id", "=", "courses.course_id", "where", "courses.course_name", "=", "value"]}, "masked_query": "SELECT cell_mobile_number FROM Students JOIN Student_Enrolment ON Students.student_id = Student_Enrolment.student_id JOIN Student_Enrolment_Courses ON Student_Enrolment.student_enrolment_id = Student_Enrolment_Courses.student_enrolment_id JOIN Courses ON Student_Enrolment_Courses.course_id = Courses.course_id WHERE Courses.course_name = 'ai'", "question_pauq": {"ru": "\u041d\u0443\u0436\u043d\u044b \u043d\u043e\u043c\u0435\u0440\u0430 \u0442\u0435\u043b\u0435\u0444\u043e\u043d\u043e\u0432 \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u043e\u0432 \u0441 \u043a\u0443\u0440\u0441\u043e\u0432 \u043f\u043e \u0438\u0441\u043a\u0443\u0441\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u043c\u0443 \u0438\u043d\u0442\u0435\u043b\u043b\u0435\u043a\u0442\u0443."}, "question": "Looking for the phone numbers of students from Artificial Intelligence courses.", "kb_id": "student_transcripts_tracking"}, {"id": "F_0040", "source": "addition", "type": "dev", "query": {"ru": "SELECT DISTINCT(last_name) FROM Students JOIN Addresses as current ON Students.current_address_id = current.address_id JOIN Addresses as permanent ON Students.permanent_address_id = permanent.address_id WHERE current.city != permanent.city"}, "sql": {"en": {"from": {"table_units": [["table_unit", 6], ["table_unit", 0], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 33, false], null], [0, 1, false], null], "and", [false, 2, [0, [0, 34, false], null], [0, 1, false], null]]}, "select": [true, [[0, [0, [0, 37, false], null]]]], "where": [[false, 7, [0, [0, 5, false], null], [0, 5, false], null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 6], ["table_unit", 0], ["table_unit", 0]], "conds": [[false, 2, [0, [0, 33, false], null], [0, 1, false], null], "and", [false, 2, [0, [0, 34, false], null], [0, 1, false], null]]}, "select": [true, [[0, [0, [0, 37, false], null]]]], "where": [[false, 7, [0, [0, 5, false], null], [0, 5, false], null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Surnames", "of", "students", "who", "have", "different", "permanent", "and", "current", "city", "of", "living", "."], "ru": ["\u0424\u0430\u043c\u0438\u043b\u0438\u0438", "\u0441\u0442\u0443\u0434\u0435\u043d\u0442\u043e\u0432", ",", "\u0443", "\u043a\u043e\u0442\u043e\u0440\u044b\u0445", "\u0440\u0430\u0437\u043b\u0438\u0447\u0430\u044e\u0442\u0441\u044f", "\u0433\u043e\u0440\u043e\u0434\u0430", "\u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e", "\u043f\u0440\u043e\u0436\u0438\u0432\u0430\u043d\u0438\u044f", "\u0438", "\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438", "."]}, "query_toks": {"en": ["select", "distinct", "(", "last_name", ")", "from", "students", "join", "addresses", "as", "current", "on", "students.current_address_id", "=", "current.address_id", "join", "addresses", "as", "permanent", "on", "students.permanent_address_id", "=", "permanent.address_id", "where", "current.city", "!=", "permanent.city"], "ru": ["select", "distinct", "(", "last_name", ")", "from", "students", "join", "addresses", "as", "current", "on", "students.current_address_id", "=", "current.address_id", "join", "addresses", "as", "permanent", "on", "students.permanent_address_id", "=", "permanent.address_id", "where", "current.city", "!=", "permanent.city"]}, "query_toks_no_values": {"en": ["select", "distinct", "(", "last_name", ")", "from", "students", "join", "addresses", "as", "current", "on", "students.current_address_id", "=", "current.address_id", "join", "addresses", "as", "permanent", "on", "students.permanent_address_id", "=", "permanent.address_id", "where", "current.city", "!=", "permanent.city"], "ru": ["select", "distinct", "(", "last_name", ")", "from", "students", "join", "addresses", "as", "current", "on", "students.current_address_id", "=", "current.address_id", "join", "addresses", "as", "permanent", "on", "students.permanent_address_id", "=", "permanent.address_id", "where", "current.city", "!=", "permanent.city"]}, "masked_query": "SELECT DISTINCT(last_name) FROM Students JOIN Addresses as current ON Students.current_address_id = current.address_id JOIN Addresses as permanent ON Students.permanent_address_id = permanent.address_id WHERE current.city != permanent.city", "question_pauq": {"ru": "\u0424\u0430\u043c\u0438\u043b\u0438\u0438 \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u043e\u0432, \u0443 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0440\u0430\u0437\u043b\u0438\u0447\u0430\u044e\u0442\u0441\u044f \u0433\u043e\u0440\u043e\u0434\u0430 \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u043f\u0440\u043e\u0436\u0438\u0432\u0430\u043d\u0438\u044f \u0438 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u0438."}, "question": "Surnames of students who have different permanent and current city of living.", "kb_id": "student_transcripts_tracking"}, {"id": "F_0044", "source": "addition", "type": "dev", "query": {"ru": "SELECT COUNT(*), result FROM battle WHERE result = 'Bulgarian victory' OR result = 'Latin victory' GROUP BY result"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]], [0, [0, [0, 6, false], null]]]], "where": [[false, 2, [0, [0, 6, false], null], "\"Bulgarian victory\"", null], "or", [false, 2, [0, [0, 6, false], null], "\"Latin victory\"", null]], "groupBy": [[0, 6, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]], [0, [0, [0, 6, false], null]]]], "where": [[false, 2, [0, [0, 6, false], null], "\"Bulgarian victory\"", null], "or", [false, 2, [0, [0, 6, false], null], "\"Latin victory\"", null]], "groupBy": [[0, 6, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Compare", "amounts", "of", "Bulgarian", "and", "Latin", "victories", "."], "ru": ["\u0421\u0440\u0430\u0432\u043d\u0438", "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e", "\u043f\u043e\u0431\u0435\u0434"]}, "query_toks": {"en": ["select", "count", "(", "*", ")", ",", "result", "from", "battle", "where", "result", "=", "\"Bulgarian victory\"", "or", "result", "=", "\"Latin victory\"", "group", "by", "result"], "ru": ["select", "count", "(", "*", ")", ",", "result", "from", "battle", "where", "result", "=", "\"Bulgarian victory\"", "or", "result", "=", "\"Latin victory\"", "group", "by", "result"]}, "query_toks_no_values": {"en": ["select", "count", "(", "*", ")", ",", "result", "from", "battle", "where", "result", "=", "value", "or", "result", "=", "value", "group", "by", "result"], "ru": ["select", "count", "(", "*", ")", ",", "result", "from", "battle", "where", "result", "=", "value", "or", "result", "=", "value", "group", "by", "result"]}, "masked_query": "SELECT COUNT(*), result FROM battle WHERE result = 'Bulgarian victory' OR result = 'Latin victory' GROUP BY result", "question_pauq": {"ru": "\u0421\u0440\u0430\u0432\u043d\u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u0431\u0435\u0434"}, "question": "Compare amounts of Bulgarian and Latin victories.", "kb_id": "battle_death"}, {"id": "F_0045", "source": "addition", "type": "dev", "query": {"ru": "SELECT COUNT(*) FROM battle WHERE result = 'Two Year Truce' OR result = '\u041f\u0435\u0440\u0435\u043c\u0438\u0440\u0438\u0435'"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 6, false], null], "\"Two Year Truce\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[3, [0, [0, 0, false], null]]]], "where": [[false, 2, [0, [0, 6, false], null], "\"Two Year Truce\"", null], "or", [false, 2, [0, [0, 6, false], null], "\"\u041f\u0435\u0440\u0435\u043c\u0438\u0440\u0438\u0435\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["How", "many", "battles", "ended", "in", "a", "truce", "?"], "ru": ["\u0421\u043a\u043e\u043b\u044c\u043a\u043e", "\u0431\u043e\u0435\u0432", "\u043e\u043a\u043e\u043d\u0447\u0438\u043b\u0438\u0441\u044c", "\u043f\u0435\u0440\u0435\u043c\u0438\u0440\u0438\u0435\u043c", "?"]}, "query_toks": {"en": ["select", "count", "(", "*", ")", "from", "battle", "where", "result", "=", "\"Two Year Truce\""], "ru": ["select", "count", "(", "*", ")", "from", "battle", "where", "result", "=", "\"Two Year Truce\"", "or", "result", "=", "\"\u041f\u0435\u0440\u0435\u043c\u0438\u0440\u0438\u0435\""]}, "query_toks_no_values": {"en": ["select", "count", "(", "*", ")", "from", "battle", "where", "result", "=", "value"], "ru": ["select", "count", "(", "*", ")", "from", "battle", "where", "result", "=", "value", "or", "result", "=", "value"]}, "masked_query": "SELECT COUNT(*) FROM battle WHERE result = 'Two Year Truce'", "question_pauq": {"ru": "\u0421\u043a\u043e\u043b\u044c\u043a\u043e \u0431\u043e\u0435\u0432 \u043e\u043a\u043e\u043d\u0447\u0438\u043b\u0438\u0441\u044c \u043f\u0435\u0440\u0435\u043c\u0438\u0440\u0438\u0435\u043c?"}, "question": "How many battles ended in a truce?", "kb_id": "battle_death"}, {"id": "F_0046", "source": "addition", "type": "dev", "query": {"ru": "SELECT latin_commander, bulgarian_commander FROM battle"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 5, false], null]], [0, [0, [0, 4, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 5, false], null]], [0, [0, [0, 4, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Who", "among", "the", "Latin", "and", "Bulgarian", "commanders", "crossed", "paths", "with", "in", "battles", "?"], "ru": ["\u041a\u0442\u043e", "\u0441", "\u043a\u0435\u043c", "\u0438\u0437", "\u043b\u0430\u0442\u0438\u043d\u0441\u043a\u0438\u0445", "\u0438", "\u0431\u043e\u043b\u0433\u0430\u0440\u0441\u043a\u0438\u0445", "\u043a\u043e\u043c\u0430\u043d\u0434\u0438\u0440\u043e\u0432", "\u043f\u0435\u0440\u0435\u0441\u0435\u043a\u0430\u043b\u0441\u044f", "\u0432", "\u0431\u043e\u044f\u0445", "?"]}, "query_toks": {"en": ["select", "latin_commander", ",", "bulgarian_commander", "from", "battle"], "ru": ["select", "latin_commander", ",", "bulgarian_commander", "from", "battle"]}, "query_toks_no_values": {"en": ["select", "latin_commander", ",", "bulgarian_commander", "from", "battle"], "ru": ["select", "latin_commander", ",", "bulgarian_commander", "from", "battle"]}, "masked_query": "SELECT latin_commander, bulgarian_commander FROM battle", "question_pauq": {"ru": "\u041a\u0442\u043e \u0441 \u043a\u0435\u043c \u0438\u0437 \u043b\u0430\u0442\u0438\u043d\u0441\u043a\u0438\u0445 \u0438 \u0431\u043e\u043b\u0433\u0430\u0440\u0441\u043a\u0438\u0445 \u043a\u043e\u043c\u0430\u043d\u0434\u0438\u0440\u043e\u0432 \u043f\u0435\u0440\u0435\u0441\u0435\u043a\u0430\u043b\u0441\u044f \u0432 \u0431\u043e\u044f\u0445?"}, "question": "Who among the Latin and Bulgarian commanders crossed paths with in battles?", "kb_id": "battle_death"}, {"id": "F_0047", "source": "addition", "type": "dev", "query": {"ru": "SELECT DISTINCT ship_type, disposition_of_ship FROM ship WHERE location = 'English Channel' OR location = '\u041b\u0430-\u041c\u0430\u043d\u0448'"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [true, [[0, [0, [0, 11, false], null]], [0, [0, [0, 13, false], null]]]], "where": [[false, 2, [0, [0, 12, false], null], "\"English Channel\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [true, [[0, [0, [0, 11, false], null]], [0, [0, [0, 13, false], null]]]], "where": [[false, 2, [0, [0, 12, false], null], "\"English Channel\"", null], "or", [false, 2, [0, [0, 12, false], null], "\"\u041b\u0430-\u041c\u0430\u043d\u0448\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["List", "different", "ships", "types", "and", "dispositions", "used", "in", "English", "Channel"], "ru": ["\u041f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0438\u0442\u044c", "\u0432\u0441\u0435", "\u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438", "\u0442\u0438\u043f\u044b", "\u0438", "\u0434\u0438\u0441\u043f\u043e\u0437\u0438\u0446\u0438\u0439", "\u0441\u0443\u0434\u043e\u0432", ",", "\u0437\u0430\u0434\u0435\u0439\u0441\u0442\u0432\u043e\u0432\u0430\u043d\u043d\u044b\u0445", "\u0432", "\u0431\u0438\u0442\u0432\u0430\u0445", "\u043d\u0430", "\u041b\u0430-\u041c\u0430\u043d\u0448\u0435"]}, "query_toks": {"en": ["select", "distinct", "ship_type", ",", "disposition_of_ship", "from", "ship", "where", "location", "=", "\"English Channel\""], "ru": ["select", "distinct", "ship_type", ",", "disposition_of_ship", "from", "ship", "where", "location", "=", "\"English Channel\"", "or", "location", "=", "\"\u041b\u0430-\u041c\u0430\u043d\u0448\""]}, "query_toks_no_values": {"en": ["select", "distinct", "ship_type", ",", "disposition_of_ship", "from", "ship", "where", "location", "=", "value"], "ru": ["select", "distinct", "ship_type", ",", "disposition_of_ship", "from", "ship", "where", "location", "=", "value", "or", "location", "=", "value"]}, "masked_query": "SELECT DISTINCT ship_type, disposition_of_ship FROM ship WHERE location = 'English Channel'", "question_pauq": {"ru": "\u041f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0438\u0442\u044c \u0432\u0441\u0435 \u043a\u043e\u043d\u0444\u0438\u0433\u0443\u0440\u0430\u0446\u0438\u0438 \u0442\u0438\u043f\u044b \u0438 \u0434\u0438\u0441\u043f\u043e\u0437\u0438\u0446\u0438\u0439 \u0441\u0443\u0434\u043e\u0432, \u0437\u0430\u0434\u0435\u0439\u0441\u0442\u0432\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u0432 \u0431\u0438\u0442\u0432\u0430\u0445 \u043d\u0430 \u041b\u0430-\u041c\u0430\u043d\u0448\u0435"}, "question": "List different ships types and dispositions used in English Channel", "kb_id": "battle_death"}, {"id": "F_0048", "source": "addition", "type": "dev", "query": {"ru": "SELECT location, SUM(lost_in_battle) FROM ship GROUP BY location"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 12, false], null]], [4, [0, [0, 7, false], null]]]], "where": [], "groupBy": [[0, 12, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 12, false], null]], [4, [0, [0, 7, false], null]]]], "where": [], "groupBy": [[0, 12, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["List", "of", "all", "locations", "and", "the", "number", "of", "ships", "lost", "there"], "ru": ["\u0421\u043f\u0438\u0441\u043e\u043a", "\u0432\u0441\u0435\u0445", "\u043b\u043e\u043a\u0430\u0446\u0438\u0439", "\u0438", "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e", "\u043f\u043e\u0442\u043e\u043f\u043b\u0435\u043d\u043d\u044b\u0445", "\u0442\u0430\u043c", "\u0441\u0443\u0434\u043e\u0432"]}, "query_toks": {"en": ["select", "location", ",", "sum", "(", "lost_in_battle", ")", "from", "ship", "group", "by", "location"], "ru": ["select", "location", ",", "sum", "(", "lost_in_battle", ")", "from", "ship", "group", "by", "location"]}, "query_toks_no_values": {"en": ["select", "location", ",", "sum", "(", "lost_in_battle", ")", "from", "ship", "group", "by", "location"], "ru": ["select", "location", ",", "sum", "(", "lost_in_battle", ")", "from", "ship", "group", "by", "location"]}, "masked_query": "SELECT location, SUM(lost_in_battle) FROM ship GROUP BY location", "question_pauq": {"ru": "\u0421\u043f\u0438\u0441\u043e\u043a \u0432\u0441\u0435\u0445 \u043b\u043e\u043a\u0430\u0446\u0438\u0439 \u0438 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u0442\u043e\u043f\u043b\u0435\u043d\u043d\u044b\u0445 \u0442\u0430\u043c \u0441\u0443\u0434\u043e\u0432"}, "question": "List of all locations and the number of ships lost there", "kb_id": "battle_death"}, {"id": "F_0049", "source": "addition", "type": "dev", "query": {"ru": "SELECT SUM(lost_in_battle) FROM ship"}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[4, [0, [0, 7, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[4, [0, [0, 7, false], null]]]], "where": [], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["How", "many", "ships", "were", "lost", "in", "total", "?"], "ru": ["\u0421\u043a\u043e\u043b\u044c\u043a\u043e", "\u0432\u0441\u0435\u0433\u043e", "\u0431\u044b\u043b\u043e", "\u043f\u043e\u0442\u043e\u043f\u043b\u0435\u043d\u043e", "\u043a\u043e\u0440\u0430\u0431\u043b\u0435\u0439", "?"]}, "query_toks": {"en": ["select", "sum", "(", "lost_in_battle", ")", "from", "ship"], "ru": ["select", "sum", "(", "lost_in_battle", ")", "from", "ship"]}, "query_toks_no_values": {"en": ["select", "sum", "(", "lost_in_battle", ")", "from", "ship"], "ru": ["select", "sum", "(", "lost_in_battle", ")", "from", "ship"]}, "masked_query": "SELECT SUM(lost_in_battle) FROM ship", "question_pauq": {"ru": "\u0421\u043a\u043e\u043b\u044c\u043a\u043e \u0432\u0441\u0435\u0433\u043e \u0431\u044b\u043b\u043e \u043f\u043e\u0442\u043e\u043f\u043b\u0435\u043d\u043e \u043a\u043e\u0440\u0430\u0431\u043b\u0435\u0439?"}, "question": "How many ships were lost in total?", "kb_id": "battle_death"}, {"id": "F_0050", "source": "addition", "type": "dev", "query": {"ru": "SELECT COUNT(DISTINCT name), bulgarian_commander FROM battle WHERE result = 'Bulgarian victory' GROUP BY latin_commander"}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[3, [0, [0, 2, true], null]], [0, [0, [0, 4, false], null]]]], "where": [[false, 2, [0, [0, 6, false], null], "\"Bulgarian victory\"", null]], "groupBy": [[0, 5, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[3, [0, [0, 2, true], null]], [0, [0, [0, 4, false], null]]]], "where": [[false, 2, [0, [0, 6, false], null], "\"Bulgarian victory\"", null]], "groupBy": [[0, 5, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["How", "many", "battles", "did", "each", "of", "the", "Bulgarian", "commanders", "win", "?"], "ru": ["\u041a\u0430\u043a", "\u043c\u043d\u043e\u0433\u043e", "\u0441\u0440\u0430\u0436\u0435\u043d\u0438\u0439", "\u0432\u044b\u0438\u0433\u0440\u0430\u043b", "\u043a\u0430\u0436\u0434\u044b\u0439", "\u0438\u0437", "\u0431\u043e\u043b\u0433\u0430\u0440\u0441\u043a\u0438\u0445", "\u043a\u043e\u043c\u0430\u043d\u0434\u0438\u0440\u043e\u0432", "?"]}, "query_toks": {"en": ["select", "count", "(", "distinct", "name", ")", ",", "bulgarian_commander", "from", "battle", "where", "result", "=", "\"Bulgarian victory\"", "group", "by", "latin_commander"], "ru": ["select", "count", "(", "distinct", "name", ")", ",", "bulgarian_commander", "from", "battle", "where", "result", "=", "\"Bulgarian victory\"", "group", "by", "latin_commander"]}, "query_toks_no_values": {"en": ["select", "count", "(", "distinct", "name", ")", ",", "bulgarian_commander", "from", "battle", "where", "result", "=", "value", "group", "by", "latin_commander"], "ru": ["select", "count", "(", "distinct", "name", ")", ",", "bulgarian_commander", "from", "battle", "where", "result", "=", "value", "group", "by", "latin_commander"]}, "masked_query": "SELECT COUNT(DISTINCT name), bulgarian_commander FROM battle WHERE result = 'Bulgarian victory' GROUP BY latin_commander", "question_pauq": {"ru": "\u041a\u0430\u043a \u043c\u043d\u043e\u0433\u043e \u0441\u0440\u0430\u0436\u0435\u043d\u0438\u0439 \u0432\u044b\u0438\u0433\u0440\u0430\u043b \u043a\u0430\u0436\u0434\u044b\u0439 \u0438\u0437 \u0431\u043e\u043b\u0433\u0430\u0440\u0441\u043a\u0438\u0445 \u043a\u043e\u043c\u0430\u043d\u0434\u0438\u0440\u043e\u0432?"}, "question": "How many battles did each of the Bulgarian commanders win?", "kb_id": "battle_death"}, {"id": "F_0051", "source": "addition", "type": "dev", "query": {"ru": "SELECT SUM(death.killed), ship.ship_type FROM death JOIN ship ON death.id = ship.id GROUP BY ship.ship_type"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 15, false], null], [0, 8, false], null]]}, "select": [false, [[4, [0, [0, 17, false], null]], [0, [0, [0, 11, false], null]]]], "where": [], "groupBy": [[0, 11, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 15, false], null], [0, 8, false], null]]}, "select": [false, [[4, [0, [0, 17, false], null]], [0, [0, [0, 11, false], null]]]], "where": [], "groupBy": [[0, 11, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Split", "the", "number", "of", "killed", "ships", "by", "type"], "ru": ["\u0420\u0430\u0437\u0431\u0435\u0439", "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e", "\u043f\u043e\u0442\u043e\u043f\u043b\u0435\u043d\u043d\u044b\u0445", "\u043a\u043e\u0440\u0430\u0431\u043b\u0435\u0439", "\u043f\u043e", "\u0442\u0438\u043f\u0430\u043c"]}, "query_toks": {"en": ["select", "sum", "(", "death.killed", ")", ",", "ship.ship_type", "from", "death", "join", "ship", "on", "death.id", "=", "ship.id", "group", "by", "ship.ship_type"], "ru": ["select", "sum", "(", "death.killed", ")", ",", "ship.ship_type", "from", "death", "join", "ship", "on", "death.id", "=", "ship.id", "group", "by", "ship.ship_type"]}, "query_toks_no_values": {"en": ["select", "sum", "(", "death.killed", ")", ",", "ship.ship_type", "from", "death", "join", "ship", "on", "death.id", "=", "ship.id", "group", "by", "ship.ship_type"], "ru": ["select", "sum", "(", "death.killed", ")", ",", "ship.ship_type", "from", "death", "join", "ship", "on", "death.id", "=", "ship.id", "group", "by", "ship.ship_type"]}, "masked_query": "SELECT SUM(death.killed), ship.ship_type FROM death JOIN ship ON death.id = ship.id GROUP BY ship.ship_type", "question_pauq": {"ru": "\u0420\u0430\u0437\u0431\u0435\u0439 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u0442\u043e\u043f\u043b\u0435\u043d\u043d\u044b\u0445 \u043a\u043e\u0440\u0430\u0431\u043b\u0435\u0439 \u043f\u043e \u0442\u0438\u043f\u0430\u043c"}, "question": "Split the number of killed ships by type", "kb_id": "battle_death"}, {"id": "F_0052", "source": "addition", "type": "dev", "query": {"ru": "SELECT SUM(death.killed), ship.disposition_of_ship FROM death JOIN ship ON death.id = ship.id GROUP BY ship.disposition_of_ship"}, "sql": {"en": {"from": {"table_units": [["table_unit", 2], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 15, false], null], [0, 8, false], null]]}, "select": [false, [[4, [0, [0, 17, false], null]], [0, [0, [0, 13, false], null]]]], "where": [], "groupBy": [[0, 13, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2], ["table_unit", 1]], "conds": [[false, 2, [0, [0, 15, false], null], [0, 8, false], null]]}, "select": [false, [[4, [0, [0, 17, false], null]], [0, [0, [0, 13, false], null]]]], "where": [], "groupBy": [[0, 13, false]], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Detail", "the", "number", "of", "killed", "ships", "by", "their", "location", "."], "ru": ["\u0414\u0435\u0442\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0439", "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e", "\u043f\u043e\u0442\u043e\u043f\u043b\u0435\u043d\u043d\u044b\u0445", "\u043a\u043e\u0440\u0430\u0431\u043b\u0435\u0439", "\u043f\u043e", "\u0438\u0445", "\u0440\u0430\u0441\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u044e", "."]}, "query_toks": {"en": ["select", "sum", "(", "death.killed", ")", ",", "ship.disposition_of_ship", "from", "death", "join", "ship", "on", "death.id", "=", "ship.id", "group", "by", "ship.disposition_of_ship"], "ru": ["select", "sum", "(", "death.killed", ")", ",", "ship.disposition_of_ship", "from", "death", "join", "ship", "on", "death.id", "=", "ship.id", "group", "by", "ship.disposition_of_ship"]}, "query_toks_no_values": {"en": ["select", "sum", "(", "death.killed", ")", ",", "ship.disposition_of_ship", "from", "death", "join", "ship", "on", "death.id", "=", "ship.id", "group", "by", "ship.disposition_of_ship"], "ru": ["select", "sum", "(", "death.killed", ")", ",", "ship.disposition_of_ship", "from", "death", "join", "ship", "on", "death.id", "=", "ship.id", "group", "by", "ship.disposition_of_ship"]}, "masked_query": "SELECT SUM(death.killed), ship.disposition_of_ship FROM death JOIN ship ON death.id = ship.id GROUP BY ship.disposition_of_ship", "question_pauq": {"ru": "\u0414\u0435\u0442\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0439 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043f\u043e\u0442\u043e\u043f\u043b\u0435\u043d\u043d\u044b\u0445 \u043a\u043e\u0440\u0430\u0431\u043b\u0435\u0439 \u043f\u043e \u0438\u0445 \u0440\u0430\u0441\u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u044e."}, "question": "Detail the number of killed ships by their location.", "kb_id": "battle_death"}, {"id": "L_0006", "source": "addition", "type": "dev", "query": {"ru": "SELECT max(T1.cylinders) FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  LIKE  '%chrysler%lebaron%medallion%'"}, "sql": {"en": {"from": {"table_units": [["table_unit", 5], ["table_unit", 4]], "conds": [[false, 2, [0, [0, 16, false], null], [0, 13, false], null]]}, "select": [false, [[1, [0, [0, 18, false], null]]]], "where": [[false, 9, [0, [0, 15, false], null], "\"%chrysler%lebaron%medallion%\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 5], ["table_unit", 4]], "conds": [[false, 2, [0, [0, 16, false], null], [0, 13, false], null]]}, "select": [false, [[1, [0, [0, 18, false], null]]]], "where": [[false, 9, [0, [0, 15, false], null], "\"%chrysler%lebaron%medallion%\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Max", "number", "of", "cylinders", "for", "model", "by", "chrysler", "lebaron", "medallion"], "ru": ["\u041c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435", "\u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e", "\u0446\u0438\u043b\u0438\u043d\u0434\u0440\u043e\u0432", "\u0443", "\u043c\u043e\u0434\u0435\u043b\u0435\u0439", "\u043e\u0442", "chrysler", "lebaron", "medallion"]}, "query_toks": {"en": ["select", "max", "(", "t1.cylinders", ")", "from", "cars_data", "as", "t1", "join", "car_names", "as", "t2", "on", "t1.id", "=", "t2.makeid", "where", "t2.make", "like", "\"%chrysler%lebaron%medallion%\""], "ru": ["select", "max", "(", "t1.cylinders", ")", "from", "cars_data", "as", "t1", "join", "car_names", "as", "t2", "on", "t1.id", "=", "t2.makeid", "where", "t2.make", "like", "\"%chrysler%lebaron%medallion%\""]}, "query_toks_no_values": {"en": ["select", "max", "(", "t1.cylinders", ")", "from", "cars_data", "as", "t1", "join", "car_names", "as", "t2", "on", "t1.id", "=", "t2.makeid", "where", "t2.make", "like", "value"], "ru": ["select", "max", "(", "t1.cylinders", ")", "from", "cars_data", "as", "t1", "join", "car_names", "as", "t2", "on", "t1.id", "=", "t2.makeid", "where", "t2.make", "like", "value"]}, "masked_query": "SELECT max(T1.cylinders) FROM cars_data AS T1 JOIN car_names AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  LIKE  '%chrysler%lebaron%medallion%'", "question_pauq": {"ru": "\u041c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0446\u0438\u043b\u0438\u043d\u0434\u0440\u043e\u0432 \u0443 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u043e\u0442 chrysler lebaron medallion"}, "question": "Max number of cylinders for model by chrysler lebaron medallion", "kb_id": "car_1"}, {"id": "L_0007", "source": "addition", "type": "dev", "query": {"ru": "SELECT Country FROM AIRPORTS WHERE AirportName  LIKE  \"%Ted%Stevens%\""}, "sql": {"en": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 8, false], null]]]], "where": [[false, 9, [0, [0, 7, false], null], "\"%Ted%Stevens%\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 1]], "conds": []}, "select": [false, [[0, [0, [0, 8, false], null]]]], "where": [[false, 9, [0, [0, 7, false], null], "\"%Ted%Stevens%\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Which", "country", "is", "the", "Ted", "Stevens", "airport", "at", "?"], "ru": ["\u0412", "\u043a\u0430\u043a\u043e\u0439", "\u0441\u0442\u0440\u0430\u043d\u0435", "\u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f", "\u0430\u044d\u0440\u043e\u043f\u043e\u0440\u0442", "\u0422\u0435\u0434", "\u0421\u0442\u0438\u0432\u0435\u043d\u0441", "?"]}, "query_toks": {"en": ["select", "country", "from", "airports", "where", "airportname", "like", "\"%Ted%Stevens%\""], "ru": ["select", "country", "from", "airports", "where", "airportname", "like", "\"%Ted%Stevens%\""]}, "query_toks_no_values": {"en": ["select", "country", "from", "airports", "where", "airportname", "like", "value"], "ru": ["select", "country", "from", "airports", "where", "airportname", "like", "value"]}, "masked_query": "SELECT Country FROM AIRPORTS WHERE AirportName  LIKE  \"%Ted%Stevens%\"", "question_pauq": {"ru": "\u0412 \u043a\u0430\u043a\u043e\u0439 \u0441\u0442\u0440\u0430\u043d\u0435 \u043d\u0430\u0445\u043e\u0434\u0438\u0442\u0441\u044f \u0430\u044d\u0440\u043e\u043f\u043e\u0440\u0442 \u0422\u0435\u0434 \u0421\u0442\u0438\u0432\u0435\u043d\u0441?"}, "question": "Which country is the Ted Stevens airport at?", "kb_id": "flight_2"}, {"id": "L_0008", "source": "addition", "type": "dev", "query": {"ru": "SELECT Document_ID FROM Documents WHERE Document_Name LIKE \"%Google%\" OR Document_Description LIKE \"%Coogle%\""}, "sql": {"en": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [[false, 9, [0, [0, 11, false], null], "\"%Google%\"", null], "or", [false, 9, [0, [0, 12, false], null], "\"%Coogle%\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 2]], "conds": []}, "select": [false, [[0, [0, [0, 9, false], null]]]], "where": [[false, 9, [0, [0, 11, false], null], "\"%Google%\"", null], "or", [false, 9, [0, [0, 12, false], null], "\"%Coogle%\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["ID", "of", "documents", "in", "which", "we", "can", "read", "something", "about", "Google", "working", "process"], "ru": ["ID", "\u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u043e\u0432", ",", "\u0432", "\u043a\u043e\u0442\u043e\u0440\u044b\u0445", "\u043c\u043e\u0436\u043d\u043e", "\u0435\u0441\u0442\u044c", "\u0447\u0442\u043e-\u0442\u043e", "\u043f\u0440\u043e", "\u0440\u0430\u0431\u043e\u0442\u0443", "\u0432", "Google"]}, "query_toks": {"en": ["select", "document_id", "from", "documents", "where", "document_name", "like", "\"%Google%\"", "or", "document_description", "like", "\"%Coogle%\""], "ru": ["select", "document_id", "from", "documents", "where", "document_name", "like", "\"%Google%\"", "or", "document_description", "like", "\"%Coogle%\""]}, "query_toks_no_values": {"en": ["select", "document_id", "from", "documents", "where", "document_name", "like", "value", "or", "document_description", "like", "value"], "ru": ["select", "document_id", "from", "documents", "where", "document_name", "like", "value", "or", "document_description", "like", "value"]}, "masked_query": "SELECT Document_ID FROM Documents WHERE Document_Name LIKE \"%Google%\" OR Document_Description LIKE \"%Coogle%\" ", "question_pauq": {"ru": "ID \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u043e\u0432, \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043c\u043e\u0436\u043d\u043e \u0435\u0441\u0442\u044c \u0447\u0442\u043e-\u0442\u043e \u043f\u0440\u043e \u0440\u0430\u0431\u043e\u0442\u0443 \u0432 Google"}, "question": "ID of documents in which we can read something about Google working process", "kb_id": "cre_Doc_Template_Mgt"}, {"id": "L_0009", "source": "addition", "type": "dev", "query": {"ru": "SELECT Open_Year FROM museum WHERE Name LIKE \"%Central%Residential%Museum%\""}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 4, false], null]]]], "where": [[false, 9, [0, [0, 2, false], null], "\"%Central%Residential%Museum%\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 4, false], null]]]], "where": [[false, 9, [0, [0, 2, false], null], "\"%Central%Residential%Museum%\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["What", "year", "did", "the", "Central", "Residential", "Museum", "museum", "open", "?"], "ru": ["\u0412", "\u043a\u0430\u043a\u043e\u043c", "\u0433\u043e\u0434\u0443", "\u0431\u044b\u043b", "\u043e\u0442\u043a\u0440\u044b\u0442", "Central", "Residental", "Museum", "?"]}, "query_toks": {"en": ["select", "open_year", "from", "museum", "where", "name", "like", "\"%Central%Residential%Museum%\""], "ru": ["select", "open_year", "from", "museum", "where", "name", "like", "\"%Central%Residential%Museum%\""]}, "query_toks_no_values": {"en": ["select", "open_year", "from", "museum", "where", "name", "like", "value"], "ru": ["select", "open_year", "from", "museum", "where", "name", "like", "value"]}, "masked_query": "SELECT Open_Year FROM museum WHERE Name LIKE \"%Central%Residential%Museum%\"", "question_pauq": {"ru": "\u0412 \u043a\u0430\u043a\u043e\u043c \u0433\u043e\u0434\u0443 \u0431\u044b\u043b \u043e\u0442\u043a\u0440\u044b\u0442 Central Residental Museum?"}, "question": "What year did the Central Residential Museum museum open?", "kb_id": "museum_visit"}, {"id": "L_0010", "source": "addition", "type": "dev", "query": {"ru": "SELECT zip_postcode FROM Addresses WHERE line_1 LIKE \"%Lamar%Plaza%\""}, "sql": {"en": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [true, [[0, [0, [0, 6, false], null]]]], "where": [[false, 9, [0, [0, 2, false], null], "\"%Lamar%Plaza%\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}, "ru": {"from": {"table_units": [["table_unit", 0]], "conds": []}, "select": [false, [[0, [0, [0, 6, false], null]]]], "where": [[false, 9, [0, [0, 2, false], null], "\"%Lamar%Plaza%\"", null]], "groupBy": [], "having": [], "orderBy": [], "limit": null, "intersect": null, "union": null, "except": null}}, "question_toks": {"en": ["Zip", "codes", "of", "students", "living", "at", "Lamar", "Plaza"], "ru": ["\u041f\u043e\u0447\u0442\u043e\u0432\u044b\u0435", "\u0438\u043d\u0434\u0435\u043a\u0441\u044b", "\u0441\u0442\u0443\u0434\u0435\u043d\u0442\u043e\u0432", ",", "\u0436\u0438\u0432\u0443\u0449\u0438\u0445", "\u043d\u0430", "Lamar", "Plaza"]}, "query_toks": {"en": ["select", "distinct", "(", "zip_postcode", ")", "from", "addresses", "where", "line_1", "like", "\"%Lamar%Plaza%\""], "ru": ["select", "zip_postcode", "from", "addresses", "where", "line_1", "like", "\"%Lamar%Plaza%\""]}, "query_toks_no_values": {"en": ["select", "distinct", "(", "zip_postcode", ")", "from", "addresses", "where", "line_1", "like", "value"], "ru": ["select", "zip_postcode", "from", "addresses", "where", "line_1", "like", "value"]}, "masked_query": "SELECT DISTINCT(zip_postcode) FROM Addresses WHERE line_1 LIKE \"%Lamar%Plaza%\"", "question_pauq": {"ru": "\u041f\u043e\u0447\u0442\u043e\u0432\u044b\u0435 \u0438\u043d\u0434\u0435\u043a\u0441\u044b \u0441\u0442\u0443\u0434\u0435\u043d\u0442\u043e\u0432, \u0436\u0438\u0432\u0443\u0449\u0438\u0445 \u043d\u0430 Lamar Plaza"}, "question": "Zip codes of students living at Lamar Plaza", "kb_id": "student_transcripts_tracking"}]